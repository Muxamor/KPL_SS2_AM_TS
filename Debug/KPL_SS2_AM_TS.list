
KPL_SS2_AM_TS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eb0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08002050  08002050  00012050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080021c0  080021c0  000121c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080021c4  080021c4  000121c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  080021c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000002c  20000068  08002230  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000094  08002230  00020094  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005467  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000d3c  00000000  00000000  000254ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000468  00000000  00000000  00026240  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f0  00000000  00000000  000266a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001b75  00000000  00000000  00026a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000194c  00000000  00000000  0002860d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00029f59  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000017e4  00000000  00000000  00029fd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002038 	.word	0x08002038

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08002038 	.word	0x08002038

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000280:	b480      	push	{r7}
 8000282:	b089      	sub	sp, #36	; 0x24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	681a      	ldr	r2, [r3, #0]
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	fa93 f3a3 	rbit	r3, r3
 800029a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800029c:	693b      	ldr	r3, [r7, #16]
 800029e:	fab3 f383 	clz	r3, r3
 80002a2:	005b      	lsls	r3, r3, #1
 80002a4:	2103      	movs	r1, #3
 80002a6:	fa01 f303 	lsl.w	r3, r1, r3
 80002aa:	43db      	mvns	r3, r3
 80002ac:	401a      	ands	r2, r3
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	fa93 f3a3 	rbit	r3, r3
 80002b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80002ba:	69bb      	ldr	r3, [r7, #24]
 80002bc:	fab3 f383 	clz	r3, r3
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	6879      	ldr	r1, [r7, #4]
 80002c4:	fa01 f303 	lsl.w	r3, r1, r3
 80002c8:	431a      	orrs	r2, r3
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	601a      	str	r2, [r3, #0]
}
 80002ce:	bf00      	nop
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr

080002da <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80002da:	b480      	push	{r7}
 80002dc:	b085      	sub	sp, #20
 80002de:	af00      	add	r7, sp, #0
 80002e0:	60f8      	str	r0, [r7, #12]
 80002e2:	60b9      	str	r1, [r7, #8]
 80002e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	685a      	ldr	r2, [r3, #4]
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	43db      	mvns	r3, r3
 80002ee:	401a      	ands	r2, r3
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	6879      	ldr	r1, [r7, #4]
 80002f4:	fb01 f303 	mul.w	r3, r1, r3
 80002f8:	431a      	orrs	r2, r3
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	605a      	str	r2, [r3, #4]
}
 80002fe:	bf00      	nop
 8000300:	3714      	adds	r7, #20
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr

0800030a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800030a:	b480      	push	{r7}
 800030c:	b089      	sub	sp, #36	; 0x24
 800030e:	af00      	add	r7, sp, #0
 8000310:	60f8      	str	r0, [r7, #12]
 8000312:	60b9      	str	r1, [r7, #8]
 8000314:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	689a      	ldr	r2, [r3, #8]
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	fa93 f3a3 	rbit	r3, r3
 8000324:	613b      	str	r3, [r7, #16]
  return(result);
 8000326:	693b      	ldr	r3, [r7, #16]
 8000328:	fab3 f383 	clz	r3, r3
 800032c:	005b      	lsls	r3, r3, #1
 800032e:	2103      	movs	r1, #3
 8000330:	fa01 f303 	lsl.w	r3, r1, r3
 8000334:	43db      	mvns	r3, r3
 8000336:	401a      	ands	r2, r3
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800033c:	69fb      	ldr	r3, [r7, #28]
 800033e:	fa93 f3a3 	rbit	r3, r3
 8000342:	61bb      	str	r3, [r7, #24]
  return(result);
 8000344:	69bb      	ldr	r3, [r7, #24]
 8000346:	fab3 f383 	clz	r3, r3
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	6879      	ldr	r1, [r7, #4]
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	431a      	orrs	r2, r3
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000358:	bf00      	nop
 800035a:	3724      	adds	r7, #36	; 0x24
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr

08000364 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000364:	b480      	push	{r7}
 8000366:	b089      	sub	sp, #36	; 0x24
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	68da      	ldr	r2, [r3, #12]
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	fa93 f3a3 	rbit	r3, r3
 800037e:	613b      	str	r3, [r7, #16]
  return(result);
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	fab3 f383 	clz	r3, r3
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	2103      	movs	r1, #3
 800038a:	fa01 f303 	lsl.w	r3, r1, r3
 800038e:	43db      	mvns	r3, r3
 8000390:	401a      	ands	r2, r3
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000396:	69fb      	ldr	r3, [r7, #28]
 8000398:	fa93 f3a3 	rbit	r3, r3
 800039c:	61bb      	str	r3, [r7, #24]
  return(result);
 800039e:	69bb      	ldr	r3, [r7, #24]
 80003a0:	fab3 f383 	clz	r3, r3
 80003a4:	005b      	lsls	r3, r3, #1
 80003a6:	6879      	ldr	r1, [r7, #4]
 80003a8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ac:	431a      	orrs	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	60da      	str	r2, [r3, #12]
}
 80003b2:	bf00      	nop
 80003b4:	3724      	adds	r7, #36	; 0x24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80003be:	b480      	push	{r7}
 80003c0:	b089      	sub	sp, #36	; 0x24
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	60f8      	str	r0, [r7, #12]
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	6a1a      	ldr	r2, [r3, #32]
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	fa93 f3a3 	rbit	r3, r3
 80003d8:	613b      	str	r3, [r7, #16]
  return(result);
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	fab3 f383 	clz	r3, r3
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	210f      	movs	r1, #15
 80003e4:	fa01 f303 	lsl.w	r3, r1, r3
 80003e8:	43db      	mvns	r3, r3
 80003ea:	401a      	ands	r2, r3
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003f0:	69fb      	ldr	r3, [r7, #28]
 80003f2:	fa93 f3a3 	rbit	r3, r3
 80003f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80003f8:	69bb      	ldr	r3, [r7, #24]
 80003fa:	fab3 f383 	clz	r3, r3
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	6879      	ldr	r1, [r7, #4]
 8000402:	fa01 f303 	lsl.w	r3, r1, r3
 8000406:	431a      	orrs	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800040c:	bf00      	nop
 800040e:	3724      	adds	r7, #36	; 0x24
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000418:	b480      	push	{r7}
 800041a:	b089      	sub	sp, #36	; 0x24
 800041c:	af00      	add	r7, sp, #0
 800041e:	60f8      	str	r0, [r7, #12]
 8000420:	60b9      	str	r1, [r7, #8]
 8000422:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	0a1b      	lsrs	r3, r3, #8
 800042c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	fa93 f3a3 	rbit	r3, r3
 8000434:	613b      	str	r3, [r7, #16]
  return(result);
 8000436:	693b      	ldr	r3, [r7, #16]
 8000438:	fab3 f383 	clz	r3, r3
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	210f      	movs	r1, #15
 8000440:	fa01 f303 	lsl.w	r3, r1, r3
 8000444:	43db      	mvns	r3, r3
 8000446:	401a      	ands	r2, r3
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	0a1b      	lsrs	r3, r3, #8
 800044c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800044e:	69fb      	ldr	r3, [r7, #28]
 8000450:	fa93 f3a3 	rbit	r3, r3
 8000454:	61bb      	str	r3, [r7, #24]
  return(result);
 8000456:	69bb      	ldr	r3, [r7, #24]
 8000458:	fab3 f383 	clz	r3, r3
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	6879      	ldr	r1, [r7, #4]
 8000460:	fa01 f303 	lsl.w	r3, r1, r3
 8000464:	431a      	orrs	r2, r3
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800046a:	bf00      	nop
 800046c:	3724      	adds	r7, #36	; 0x24
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr

08000476 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000476:	b580      	push	{r7, lr}
 8000478:	b088      	sub	sp, #32
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
 800047e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000480:	2300      	movs	r3, #0
 8000482:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000484:	2300      	movs	r3, #0
 8000486:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	fa93 f3a3 	rbit	r3, r3
 8000494:	613b      	str	r3, [r7, #16]
  return(result);
 8000496:	693b      	ldr	r3, [r7, #16]
 8000498:	fab3 f383 	clz	r3, r3
 800049c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800049e:	e048      	b.n	8000532 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	2101      	movs	r1, #1
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ac:	4013      	ands	r3, r2
 80004ae:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80004b0:	69bb      	ldr	r3, [r7, #24]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d03a      	beq.n	800052c <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	461a      	mov	r2, r3
 80004bc:	69b9      	ldr	r1, [r7, #24]
 80004be:	6878      	ldr	r0, [r7, #4]
 80004c0:	f7ff fede 	bl	8000280 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d003      	beq.n	80004d4 <LL_GPIO_Init+0x5e>
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d106      	bne.n	80004e2 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	461a      	mov	r2, r3
 80004da:	69b9      	ldr	r1, [r7, #24]
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f7ff ff14 	bl	800030a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	691b      	ldr	r3, [r3, #16]
 80004e6:	461a      	mov	r2, r3
 80004e8:	69b9      	ldr	r1, [r7, #24]
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f7ff ff3a 	bl	8000364 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	2b02      	cmp	r3, #2
 80004f6:	d119      	bne.n	800052c <LL_GPIO_Init+0xb6>
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	fa93 f3a3 	rbit	r3, r3
 8000502:	60bb      	str	r3, [r7, #8]
  return(result);
 8000504:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000506:	fab3 f383 	clz	r3, r3
 800050a:	2b07      	cmp	r3, #7
 800050c:	d807      	bhi.n	800051e <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	461a      	mov	r2, r3
 8000514:	69b9      	ldr	r1, [r7, #24]
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f7ff ff51 	bl	80003be <LL_GPIO_SetAFPin_0_7>
 800051c:	e006      	b.n	800052c <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	461a      	mov	r2, r3
 8000524:	69b9      	ldr	r1, [r7, #24]
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f7ff ff76 	bl	8000418 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	3301      	adds	r3, #1
 8000530:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	69fb      	ldr	r3, [r7, #28]
 8000538:	fa22 f303 	lsr.w	r3, r2, r3
 800053c:	2b00      	cmp	r3, #0
 800053e:	d1af      	bne.n	80004a0 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d003      	beq.n	8000550 <LL_GPIO_Init+0xda>
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	2b02      	cmp	r3, #2
 800054e:	d107      	bne.n	8000560 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	6819      	ldr	r1, [r3, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	461a      	mov	r2, r3
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f7ff febd 	bl	80002da <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000560:	2301      	movs	r3, #1
}
 8000562:	4618      	mov	r0, r3
 8000564:	3720      	adds	r7, #32
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000576:	4909      	ldr	r1, [pc, #36]	; (800059c <LL_InitTick+0x30>)
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000580:	3b01      	subs	r3, #1
 8000582:	604b      	str	r3, [r1, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <LL_InitTick+0x30>)
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800058a:	4b04      	ldr	r3, [pc, #16]	; (800059c <LL_InitTick+0x30>)
 800058c:	2205      	movs	r2, #5
 800058e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	e000e010 	.word	0xe000e010

080005a0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80005a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f7ff ffdd 	bl	800056c <LL_InitTick>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <LL_SetSystemCoreClock+0x1c>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6013      	str	r3, [r2, #0]
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000

080005dc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f003 0307 	and.w	r3, r3, #7
 80005ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <NVIC_SetPriorityGrouping+0x44>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f2:	68ba      	ldr	r2, [r7, #8]
 80005f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005f8:	4013      	ands	r3, r2
 80005fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800060e:	4a04      	ldr	r2, [pc, #16]	; (8000620 <NVIC_SetPriorityGrouping+0x44>)
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	60d3      	str	r3, [r2, #12]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <NVIC_GetPriorityGrouping+0x18>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	0a1b      	lsrs	r3, r3, #8
 800062e:	f003 0307 	and.w	r3, r3, #7
}
 8000632:	4618      	mov	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	6039      	str	r1, [r7, #0]
 800064a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800064c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000650:	2b00      	cmp	r3, #0
 8000652:	da0b      	bge.n	800066c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000654:	490d      	ldr	r1, [pc, #52]	; (800068c <NVIC_SetPriority+0x4c>)
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	f003 030f 	and.w	r3, r3, #15
 800065c:	3b04      	subs	r3, #4
 800065e:	683a      	ldr	r2, [r7, #0]
 8000660:	b2d2      	uxtb	r2, r2
 8000662:	0112      	lsls	r2, r2, #4
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	440b      	add	r3, r1
 8000668:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800066a:	e009      	b.n	8000680 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	4908      	ldr	r1, [pc, #32]	; (8000690 <NVIC_SetPriority+0x50>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	683a      	ldr	r2, [r7, #0]
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	0112      	lsls	r2, r2, #4
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	440b      	add	r3, r1
 800067c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00
 8000690:	e000e100 	.word	0xe000e100

08000694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000694:	b480      	push	{r7}
 8000696:	b089      	sub	sp, #36	; 0x24
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a8:	69fb      	ldr	r3, [r7, #28]
 80006aa:	f1c3 0307 	rsb	r3, r3, #7
 80006ae:	2b04      	cmp	r3, #4
 80006b0:	bf28      	it	cs
 80006b2:	2304      	movcs	r3, #4
 80006b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	3304      	adds	r3, #4
 80006ba:	2b06      	cmp	r3, #6
 80006bc:	d902      	bls.n	80006c4 <NVIC_EncodePriority+0x30>
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	3b03      	subs	r3, #3
 80006c2:	e000      	b.n	80006c6 <NVIC_EncodePriority+0x32>
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c8:	2201      	movs	r2, #1
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	fa02 f303 	lsl.w	r3, r2, r3
 80006d0:	1e5a      	subs	r2, r3, #1
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	401a      	ands	r2, r3
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006da:	2101      	movs	r1, #1
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	fa01 f303 	lsl.w	r3, r1, r3
 80006e2:	1e59      	subs	r1, r3, #1
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e8:	4313      	orrs	r3, r2
         );
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3724      	adds	r7, #36	; 0x24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
	...

080006f8 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000700:	4906      	ldr	r1, [pc, #24]	; (800071c <LL_FLASH_SetLatency+0x24>)
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <LL_FLASH_SetLatency+0x24>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f023 0207 	bic.w	r2, r3, #7
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4313      	orrs	r3, r2
 800070e:	600b      	str	r3, [r1, #0]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	40022000 	.word	0x40022000

08000720 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <LL_FLASH_GetLatency+0x18>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f003 0307 	and.w	r3, r3, #7
}
 800072c:	4618      	mov	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40022000 	.word	0x40022000

0800073c <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2b04      	cmp	r3, #4
 8000748:	d106      	bne.n	8000758 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800074a:	4a09      	ldr	r2, [pc, #36]	; (8000770 <LL_SYSTICK_SetClkSource+0x34>)
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <LL_SYSTICK_SetClkSource+0x34>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8000756:	e005      	b.n	8000764 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000758:	4a05      	ldr	r2, [pc, #20]	; (8000770 <LL_SYSTICK_SetClkSource+0x34>)
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <LL_SYSTICK_SetClkSource+0x34>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f023 0304 	bic.w	r3, r3, #4
 8000762:	6013      	str	r3, [r2, #0]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	e000e010 	.word	0xe000e010

08000774 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000778:	4a05      	ldr	r2, [pc, #20]	; (8000790 <LL_RCC_HSI_Enable+0x1c>)
 800077a:	4b05      	ldr	r3, [pc, #20]	; (8000790 <LL_RCC_HSI_Enable+0x1c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000782:	6013      	str	r3, [r2, #0]
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40021000 	.word	0x40021000

08000794 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <LL_RCC_HSI_IsReady+0x24>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007a4:	bf0c      	ite	eq
 80007a6:	2301      	moveq	r3, #1
 80007a8:	2300      	movne	r3, #0
 80007aa:	b2db      	uxtb	r3, r3
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000

080007bc <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80007c0:	4a06      	ldr	r2, [pc, #24]	; (80007dc <LL_RCC_LSI_Enable+0x20>)
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <LL_RCC_LSI_Enable+0x20>)
 80007c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000

080007e0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <LL_RCC_LSI_IsReady+0x24>)
 80007e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	bf0c      	ite	eq
 80007f2:	2301      	moveq	r3, #1
 80007f4:	2300      	movne	r3, #0
 80007f6:	b2db      	uxtb	r3, r3
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000

08000808 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000810:	4906      	ldr	r1, [pc, #24]	; (800082c <LL_RCC_SetSysClkSource+0x24>)
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <LL_RCC_SetSysClkSource+0x24>)
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	f023 0203 	bic.w	r2, r3, #3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4313      	orrs	r3, r2
 800081e:	608b      	str	r3, [r1, #8]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	40021000 	.word	0x40021000

08000830 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000834:	4b04      	ldr	r3, [pc, #16]	; (8000848 <LL_RCC_GetSysClkSource+0x18>)
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	f003 030c 	and.w	r3, r3, #12
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000

0800084c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000854:	4906      	ldr	r1, [pc, #24]	; (8000870 <LL_RCC_SetAHBPrescaler+0x24>)
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <LL_RCC_SetAHBPrescaler+0x24>)
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4313      	orrs	r3, r2
 8000862:	608b      	str	r3, [r1, #8]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	40021000 	.word	0x40021000

08000874 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800087c:	4906      	ldr	r1, [pc, #24]	; (8000898 <LL_RCC_SetAPB1Prescaler+0x24>)
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4313      	orrs	r3, r2
 800088a:	608b      	str	r3, [r1, #8]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	40021000 	.word	0x40021000

0800089c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80008a4:	4906      	ldr	r1, [pc, #24]	; (80008c0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	608b      	str	r3, [r1, #8]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	40021000 	.word	0x40021000

080008c4 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFF));
 80008cc:	4909      	ldr	r1, [pc, #36]	; (80008f4 <LL_RCC_SetUSARTClockSource+0x30>)
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <LL_RCC_SetUSARTClockSource+0x30>)
 80008d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	0c1b      	lsrs	r3, r3, #16
 80008d8:	43db      	mvns	r3, r3
 80008da:	401a      	ands	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	4313      	orrs	r3, r2
 80008e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000

080008f8 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U));
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	0e1a      	lsrs	r2, r3, #24
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <LL_RCC_SetI2CClockSource+0x48>)
 8000906:	4413      	add	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3U << ((I2CxSource & 0x00FF0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x00FF0000U) >> 16U)));
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	0c1b      	lsrs	r3, r3, #16
 8000912:	b2db      	uxtb	r3, r3
 8000914:	2103      	movs	r1, #3
 8000916:	fa01 f303 	lsl.w	r3, r1, r3
 800091a:	43db      	mvns	r3, r3
 800091c:	401a      	ands	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	b2d9      	uxtb	r1, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	0c1b      	lsrs	r3, r3, #16
 8000926:	b2db      	uxtb	r3, r3
 8000928:	fa01 f303 	lsl.w	r3, r1, r3
 800092c:	431a      	orrs	r2, r3
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	601a      	str	r2, [r3, #0]
}
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40021088 	.word	0x40021088

08000944 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000948:	4a05      	ldr	r2, [pc, #20]	; (8000960 <LL_RCC_PLL_Enable+0x1c>)
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <LL_RCC_PLL_Enable+0x1c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000

08000964 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <LL_RCC_PLL_IsReady+0x24>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000970:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000974:	bf0c      	ite	eq
 8000976:	2301      	moveq	r3, #1
 8000978:	2300      	movne	r3, #0
 800097a:	b2db      	uxtb	r3, r3
}
 800097c:	4618      	mov	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40021000 	.word	0x40021000

0800098c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
 8000998:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800099a:	480a      	ldr	r0, [pc, #40]	; (80009c4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800099e:	68da      	ldr	r2, [r3, #12]
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80009a2:	4013      	ands	r3, r2
 80009a4:	68f9      	ldr	r1, [r7, #12]
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	4311      	orrs	r1, r2
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	0212      	lsls	r2, r2, #8
 80009ae:	4311      	orrs	r1, r2
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	430a      	orrs	r2, r1
 80009b4:	4313      	orrs	r3, r2
 80009b6:	60c3      	str	r3, [r0, #12]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLR);
}
 80009b8:	bf00      	nop
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	40021000 	.word	0x40021000
 80009c8:	f9ff808c 	.word	0xf9ff808c

080009cc <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80009d0:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009da:	60d3      	str	r3, [r2, #12]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000

080009ec <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80009f4:	4906      	ldr	r1, [pc, #24]	; (8000a10 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	600b      	str	r3, [r1, #0]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	40007000 	.word	0x40007000

08000a14 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a1c:	4908      	ldr	r1, [pc, #32]	; (8000a40 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a32:	68fb      	ldr	r3, [r7, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	40021000 	.word	0x40021000

08000a44 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a4c:	4908      	ldr	r1, [pc, #32]	; (8000a70 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a62:	68fb      	ldr	r3, [r7, #12]
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	40021000 	.word	0x40021000

08000a74 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a7c:	4908      	ldr	r1, [pc, #32]	; (8000aa0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a92:	68fb      	ldr	r3, [r7, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	683a      	ldr	r2, [r7, #0]
 8000ab2:	619a      	str	r2, [r3, #24]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	683a      	ldr	r2, [r7, #0]
 8000ace:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <LL_Init>:

//#include "stm32l4xx_ll_dma.h"



void LL_Init(void){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f7ff ffc7 	bl	8000a74 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000ae6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000aea:	f7ff ffab 	bl	8000a44 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aee:	2003      	movs	r0, #3
 8000af0:	f7ff fd74 	bl	80005dc <NVIC_SetPriorityGrouping>

	/* System interrupt init*/
	/* MemoryManagement_IRQn interrupt configuration */
	NVIC_SetPriority(MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000af4:	f7ff fd96 	bl	8000624 <NVIC_GetPriorityGrouping>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fdc8 	bl	8000694 <NVIC_EncodePriority>
 8000b04:	4603      	mov	r3, r0
 8000b06:	4619      	mov	r1, r3
 8000b08:	f06f 000b 	mvn.w	r0, #11
 8000b0c:	f7ff fd98 	bl	8000640 <NVIC_SetPriority>
	/* BusFault_IRQn interrupt configuration */
	NVIC_SetPriority(BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000b10:	f7ff fd88 	bl	8000624 <NVIC_GetPriorityGrouping>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fdba 	bl	8000694 <NVIC_EncodePriority>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4619      	mov	r1, r3
 8000b24:	f06f 000a 	mvn.w	r0, #10
 8000b28:	f7ff fd8a 	bl	8000640 <NVIC_SetPriority>
	/* UsageFault_IRQn interrupt configuration */
	NVIC_SetPriority(UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000b2c:	f7ff fd7a 	bl	8000624 <NVIC_GetPriorityGrouping>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fdac 	bl	8000694 <NVIC_EncodePriority>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4619      	mov	r1, r3
 8000b40:	f06f 0009 	mvn.w	r0, #9
 8000b44:	f7ff fd7c 	bl	8000640 <NVIC_SetPriority>
	/* SVCall_IRQn interrupt configuration */
	NVIC_SetPriority(SVCall_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000b48:	f7ff fd6c 	bl	8000624 <NVIC_GetPriorityGrouping>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fd9e 	bl	8000694 <NVIC_EncodePriority>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f06f 0004 	mvn.w	r0, #4
 8000b60:	f7ff fd6e 	bl	8000640 <NVIC_SetPriority>
	/* DebugMonitor_IRQn interrupt configuration */
	NVIC_SetPriority(DebugMonitor_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000b64:	f7ff fd5e 	bl	8000624 <NVIC_GetPriorityGrouping>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fd90 	bl	8000694 <NVIC_EncodePriority>
 8000b74:	4603      	mov	r3, r0
 8000b76:	4619      	mov	r1, r3
 8000b78:	f06f 0003 	mvn.w	r0, #3
 8000b7c:	f7ff fd60 	bl	8000640 <NVIC_SetPriority>
	/* PendSV_IRQn interrupt configuration */
	NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000b80:	f7ff fd50 	bl	8000624 <NVIC_GetPriorityGrouping>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fd82 	bl	8000694 <NVIC_EncodePriority>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4619      	mov	r1, r3
 8000b94:	f06f 0001 	mvn.w	r0, #1
 8000b98:	f7ff fd52 	bl	8000640 <NVIC_SetPriority>
	/* SysTick_IRQn interrupt configuration */
	NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000b9c:	f7ff fd42 	bl	8000624 <NVIC_GetPriorityGrouping>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fd74 	bl	8000694 <NVIC_EncodePriority>
 8000bac:	4603      	mov	r3, r0
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	f7ff fd44 	bl	8000640 <NVIC_SetPriority>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0

	LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8000bc0:	2004      	movs	r0, #4
 8000bc2:	f7ff fd99 	bl	80006f8 <LL_FLASH_SetLatency>

	if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4){
 8000bc6:	f7ff fdab 	bl	8000720 <LL_FLASH_GetLatency>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b04      	cmp	r3, #4
 8000bce:	d003      	beq.n	8000bd8 <SystemClock_Config+0x1c>
		Error_Handler();
 8000bd0:	2141      	movs	r1, #65	; 0x41
 8000bd2:	482c      	ldr	r0, [pc, #176]	; (8000c84 <SystemClock_Config+0xc8>)
 8000bd4:	f000 f91a 	bl	8000e0c <_Error_Handler>
	}

	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000bd8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bdc:	f7ff ff06 	bl	80009ec <LL_PWR_SetRegulVoltageScaling>
  	  LL_RCC_HSE_Enable();
   	   // Wait till HSE is ready
  	  while(LL_RCC_HSE_IsReady() != 1);*/

	//Enable HSI
	LL_RCC_HSI_Enable();
 8000be0:	f7ff fdc8 	bl	8000774 <LL_RCC_HSI_Enable>
	//Wait till HSI is ready
	while(LL_RCC_HSI_IsReady() != 1);
 8000be4:	bf00      	nop
 8000be6:	f7ff fdd5 	bl	8000794 <LL_RCC_HSI_IsReady>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d1fa      	bne.n	8000be6 <SystemClock_Config+0x2a>
	//LL_RCC_HSI_SetCalibTrimming(16);//not need to do this

	// Enable LSI
	LL_RCC_LSI_Enable();
 8000bf0:	f7ff fde4 	bl	80007bc <LL_RCC_LSI_Enable>

	/* Wait till LSI is ready */
	while(LL_RCC_LSI_IsReady() != 1);
 8000bf4:	bf00      	nop
 8000bf6:	f7ff fdf3 	bl	80007e0 <LL_RCC_LSI_IsReady>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d1fa      	bne.n	8000bf6 <SystemClock_Config+0x3a>

	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 10, LL_RCC_PLLR_DIV_2);
 8000c00:	2300      	movs	r3, #0
 8000c02:	220a      	movs	r2, #10
 8000c04:	2100      	movs	r1, #0
 8000c06:	2002      	movs	r0, #2
 8000c08:	f7ff fec0 	bl	800098c <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 8000c0c:	f7ff fe9a 	bl	8000944 <LL_RCC_PLL_Enable>
	LL_RCC_PLL_EnableDomain_SYS();
 8000c10:	f7ff fedc 	bl	80009cc <LL_RCC_PLL_EnableDomain_SYS>

	/* Wait till PLL is ready */
	while(LL_RCC_PLL_IsReady() != 1);
 8000c14:	bf00      	nop
 8000c16:	f7ff fea5 	bl	8000964 <LL_RCC_PLL_IsReady>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d1fa      	bne.n	8000c16 <SystemClock_Config+0x5a>

	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f7ff fdf1 	bl	8000808 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8000c26:	bf00      	nop
 8000c28:	f7ff fe02 	bl	8000830 <LL_RCC_GetSysClkSource>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b0c      	cmp	r3, #12
 8000c30:	d1fa      	bne.n	8000c28 <SystemClock_Config+0x6c>

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f7ff fe0a 	bl	800084c <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f7ff fe1b 	bl	8000874 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff fe2c 	bl	800089c <LL_RCC_SetAPB2Prescaler>
	LL_Init1msTick(80000000);
 8000c44:	4810      	ldr	r0, [pc, #64]	; (8000c88 <SystemClock_Config+0xcc>)
 8000c46:	f7ff fcab 	bl	80005a0 <LL_Init1msTick>
	LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8000c4a:	2004      	movs	r0, #4
 8000c4c:	f7ff fd76 	bl	800073c <LL_SYSTICK_SetClkSource>
	LL_SetSystemCoreClock(80000000);
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <SystemClock_Config+0xcc>)
 8000c52:	f7ff fcb3 	bl	80005bc <LL_SetSystemCoreClock>

	LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_SYSCLK);
 8000c56:	480d      	ldr	r0, [pc, #52]	; (8000c8c <SystemClock_Config+0xd0>)
 8000c58:	f7ff fe34 	bl	80008c4 <LL_RCC_SetUSARTClockSource>
	LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_SYSCLK);
 8000c5c:	480c      	ldr	r0, [pc, #48]	; (8000c90 <SystemClock_Config+0xd4>)
 8000c5e:	f7ff fe4b 	bl	80008f8 <LL_RCC_SetI2CClockSource>

	/* SysTick_IRQn interrupt configuration */
	NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c62:	f7ff fcdf 	bl	8000624 <NVIC_GetPriorityGrouping>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fd11 	bl	8000694 <NVIC_EncodePriority>
 8000c72:	4603      	mov	r3, r0
 8000c74:	4619      	mov	r1, r3
 8000c76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c7a:	f7ff fce1 	bl	8000640 <NVIC_SetPriority>
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	08002050 	.word	0x08002050
 8000c88:	04c4b400 	.word	0x04c4b400
 8000c8c:	00030001 	.word	0x00030001
 8000c90:	000c0001 	.word	0x000c0001

08000c94 <SetupLED>:

/**
  * @brief  This function setup  Led on the KTIVT_SS_board.
  * @retval None
*/
void SetupLED(void){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000c9a:	2004      	movs	r0, #4
 8000c9c:	f7ff feba 	bl	8000a14 <LL_AHB2_GRP1_EnableClock>

	 /*Configure LED_Yellow_HL1 (PC10), LED_Green_HL2 (PC11), LED_Green_HL3 (PC12) as output Push-Pull      */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8000ca0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ca4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL; // try set - LL_GPIO_OUTPUT_OPENDRAIN on real board
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <SetupLED+0x40>)
 8000cbc:	f7ff fbdb 	bl	8000476 <LL_GPIO_Init>

	/* Diode is off */
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12);
 8000cc0:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <SetupLED+0x40>)
 8000cc6:	f7ff feed 	bl	8000aa4 <LL_GPIO_SetOutputPin>
	/*For ON/OFF LED need to use function:                            */
	  /*LED_Yellow_HL1_ON()       LED_Yellow_HL1_OFF()                */
	  /*LED_Green_HL2_ON()        LED_Green_HL2_OFF()                 */
	  /*LED_Green_HL3_ON()        LED_Green_HL3_OFF()                 */
	  /*Define in SetupPeriph.h                                       */
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	48000800 	.word	0x48000800

08000cd8 <SetupGPIO>:

/**
  * @brief  This function setup GPIO to control IC on the KTIVT_SS_board.
  * @retval None
*/
void SetupGPIO(void){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f7ff fe98 	bl	8000a14 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000ce4:	2004      	movs	r0, #4
 8000ce6:	f7ff fe95 	bl	8000a14 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000cea:	2002      	movs	r0, #2
 8000cec:	f7ff fe92 	bl	8000a14 <LL_AHB2_GRP1_EnableClock>


	/* Configure pins out for control preamplifier K1. PA3=10 PA4=100 PA5=1000 for AG1411 ON=0 OFF=1    */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8000cf0:	2338      	movs	r3, #56	; 0x38
 8000cf2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	463b      	mov	r3, r7
 8000d06:	4619      	mov	r1, r3
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0c:	f7ff fbb3 	bl	8000476 <LL_GPIO_Init>
	/*off K1 */
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 8000d10:	2138      	movs	r1, #56	; 0x38
 8000d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d16:	f7ff fec5 	bl	8000aa4 <LL_GPIO_SetOutputPin>


	/* Configure pins in for control COMPorators COMP1=PC0, COMP2=PC1, COMP3=PA0*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4619      	mov	r1, r3
 8000d32:	4834      	ldr	r0, [pc, #208]	; (8000e04 <SetupGPIO+0x12c>)
 8000d34:	f7ff fb9f 	bl	8000476 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d54:	f7ff fb8f 	bl	8000476 <LL_GPIO_Init>


	/* Configure pins ???? PC8=F_SA0 PC9=F_SA1 PA8=F_SA2 for AG1411 ON=0 OFF=1 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8000d58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d5c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6e:	463b      	mov	r3, r7
 8000d70:	4619      	mov	r1, r3
 8000d72:	4824      	ldr	r0, [pc, #144]	; (8000e04 <SetupGPIO+0x12c>)
 8000d74:	f7ff fb7f 	bl	8000476 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000d78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d7c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	463b      	mov	r3, r7
 8000d90:	4619      	mov	r1, r3
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d96:	f7ff fb6e 	bl	8000476 <LL_GPIO_Init>
	/*off F_SA*/
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_8|LL_GPIO_PIN_9);
 8000d9a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000d9e:	4819      	ldr	r0, [pc, #100]	; (8000e04 <SetupGPIO+0x12c>)
 8000da0:	f7ff fe80 	bl	8000aa4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000da4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dac:	f7ff fe7a 	bl	8000aa4 <LL_GPIO_SetOutputPin>


	/* Configure pins for control main amplifier K2. out: PB0=G0 PB1=G1 PB2=G2 PB10=G3 PB11=G4  in: COMP4=PA2   */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8000db0:	f640 4307 	movw	r3, #3079	; 0xc07
 8000db4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000db6:	2301      	movs	r3, #1
 8000db8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480f      	ldr	r0, [pc, #60]	; (8000e08 <SetupGPIO+0x130>)
 8000dcc:	f7ff fb53 	bl	8000476 <LL_GPIO_Init>

	/*off K2=1 */
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11);
 8000dd0:	f640 4107 	movw	r1, #3079	; 0xc07
 8000dd4:	480c      	ldr	r0, [pc, #48]	; (8000e08 <SetupGPIO+0x130>)
 8000dd6:	f7ff fe73 	bl	8000ac0 <LL_GPIO_ResetOutputPin>
	/* Config COMP4*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000dda:	2304      	movs	r3, #4
 8000ddc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	463b      	mov	r3, r7
 8000df0:	4619      	mov	r1, r3
 8000df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df6:	f7ff fb3e 	bl	8000476 <LL_GPIO_Init>




}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	48000800 	.word	0x48000800
 8000e08:	48000400 	.word	0x48000400

08000e0c <_Error_Handler>:
  *
  *
  *
  */
void _Error_Handler(char *file, int line)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]

	printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 8000e16:	683a      	ldr	r2, [r7, #0]
 8000e18:	6879      	ldr	r1, [r7, #4]
 8000e1a:	4803      	ldr	r0, [pc, #12]	; (8000e28 <_Error_Handler+0x1c>)
 8000e1c:	f000 f9a8 	bl	8001170 <iprintf>
  /* User can add his own implementation to report the HAL error return state */
 //while(1)
  //{
 // }
  /* USER CODE END Error_Handler_Debug */
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	08002068 	.word	0x08002068

08000e2c <main>:

**********************************************************/
// LL_mDelay(1);
//LL_RCC_ClocksTypeDef check_RCC_Clocks,  *CHECK_RCC_CLOCKS=&check_RCC_Clocks; // Only for check setup clock. Not need use in release

int main(void){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0

	LL_Init();
 8000e30:	f7ff fe54 	bl	8000adc <LL_Init>
	SystemClock_Config(); //Setup sysytem clock at 80 MHz
 8000e34:	f7ff fec2 	bl	8000bbc <SystemClock_Config>
	//LL_RCC_GetSystemClocksFreq(CHECK_RCC_CLOCKS); // Only for check setup clock Not need use in release
	printf("Hello human. I am Analog module.\r\n");
 8000e38:	480a      	ldr	r0, [pc, #40]	; (8000e64 <main+0x38>)
 8000e3a:	f000 fa0d 	bl	8001258 <puts>
	printf("Start setup periphery STM32L452.....\r\n");
 8000e3e:	480a      	ldr	r0, [pc, #40]	; (8000e68 <main+0x3c>)
 8000e40:	f000 fa0a 	bl	8001258 <puts>
	SetupLED(); //протестить с LL_GPIO_OUTPUT_OPENDRAIN
 8000e44:	f7ff ff26 	bl	8000c94 <SetupLED>
	SetupGPIO();
 8000e48:	f7ff ff46 	bl	8000cd8 <SetupGPIO>

	printf("Finish setup. Success! \r\n");
 8000e4c:	4807      	ldr	r0, [pc, #28]	; (8000e6c <main+0x40>)
 8000e4e:	f000 fa03 	bl	8001258 <puts>


while(1){
  printf("Now is succsses start \r\n");
 8000e52:	4807      	ldr	r0, [pc, #28]	; (8000e70 <main+0x44>)
 8000e54:	f000 fa00 	bl	8001258 <puts>
  Error_Handler();
 8000e58:	2147      	movs	r1, #71	; 0x47
 8000e5a:	4806      	ldr	r0, [pc, #24]	; (8000e74 <main+0x48>)
 8000e5c:	f7ff ffd6 	bl	8000e0c <_Error_Handler>
  printf("Now is succsses start \r\n");
 8000e60:	e7f7      	b.n	8000e52 <main+0x26>
 8000e62:	bf00      	nop
 8000e64:	08002098 	.word	0x08002098
 8000e68:	080020bc 	.word	0x080020bc
 8000e6c:	080020e4 	.word	0x080020e4
 8000e70:	08002100 	.word	0x08002100
 8000e74:	08002118 	.word	0x08002118

08000e78 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <MemManage_Handler+0x4>

08000e92 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <UsageFault_Handler+0x4>

08000e9e <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000eec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ef0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d013      	beq.n	8000f24 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000efc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f00:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f04:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00b      	beq.n	8000f24 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f0c:	e000      	b.n	8000f10 <ITM_SendChar+0x2c>
  __ASM volatile ("nop");
 8000f0e:	bf00      	nop
 8000f10:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f9      	beq.n	8000f0e <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f1a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f24:	687b      	ldr	r3, [r7, #4]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	60f8      	str	r0, [r7, #12]
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
	/* return len; */
	
	//errno = ENOSYS;
	//return -1;

	int i=0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++){
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	e009      	b.n	8000f5c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	60ba      	str	r2, [r7, #8]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ffc7 	bl	8000ee4 <ITM_SendChar>
	for(i=0;i<len;i++){
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	dbf1      	blt.n	8000f48 <_write+0x16>
	}
	return len;
 8000f64:	687b      	ldr	r3, [r7, #4]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <_sbrk>:

void * _sbrk(int32_t incr)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <_sbrk+0x38>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <_sbrk+0x16>
		heap_end = & end;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <_sbrk+0x38>)
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <_sbrk+0x3c>)
 8000f84:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <_sbrk+0x38>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <_sbrk+0x38>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <_sbrk+0x38>)
 8000f96:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8000f98:	68fb      	ldr	r3, [r7, #12]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000084 	.word	0x20000084
 8000fac:	20000094 	.word	0x20000094

08000fb0 <_close>:

int _close(int32_t file)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <_close+0x20>)
 8000fba:	2258      	movs	r2, #88	; 0x58
 8000fbc:	601a      	str	r2, [r3, #0]
	return -1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000090 	.word	0x20000090

08000fd4 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <_fstat+0x20>)
 8000fe0:	2258      	movs	r2, #88	; 0x58
 8000fe2:	601a      	str	r2, [r3, #0]
	return -1;
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	20000090 	.word	0x20000090

08000ff8 <_isatty>:

int _isatty(int32_t file)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <_isatty+0x1c>)
 8001002:	2258      	movs	r2, #88	; 0x58
 8001004:	601a      	str	r2, [r3, #0]
	return 0;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	20000090 	.word	0x20000090

08001018 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <_lseek+0x24>)
 8001026:	2258      	movs	r2, #88	; 0x58
 8001028:	601a      	str	r2, [r3, #0]
	return -1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800102e:	4618      	mov	r0, r3
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000090 	.word	0x20000090

08001040 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <_read+0x24>)
 800104e:	2258      	movs	r2, #88	; 0x58
 8001050:	601a      	str	r2, [r3, #0]
	return -1;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001056:	4618      	mov	r0, r3
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000090 	.word	0x20000090

08001068 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800106c:	4a17      	ldr	r2, [pc, #92]	; (80010cc <SystemInit+0x64>)
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <SystemInit+0x64>)
 8001070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001078:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800107c:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <SystemInit+0x68>)
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <SystemInit+0x68>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <SystemInit+0x68>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800108e:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <SystemInit+0x68>)
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <SystemInit+0x68>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001098:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800109c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <SystemInit+0x68>)
 80010a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010a4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <SystemInit+0x68>)
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <SystemInit+0x68>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <SystemInit+0x68>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <SystemInit+0x64>)
 80010ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010be:	609a      	str	r2, [r3, #8]
#endif
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00
 80010d0:	40021000 	.word	0x40021000

080010d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800110c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010da:	e003      	b.n	80010e4 <LoopCopyDataInit>

080010dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010e2:	3104      	adds	r1, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010e4:	480b      	ldr	r0, [pc, #44]	; (8001114 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010ec:	d3f6      	bcc.n	80010dc <CopyDataInit>
	ldr	r2, =_sbss
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <LoopForever+0x12>)
	b	LoopFillZerobss
 80010f0:	e002      	b.n	80010f8 <LoopFillZerobss>

080010f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010f4:	f842 3b04 	str.w	r3, [r2], #4

080010f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <LoopForever+0x16>)
	cmp	r2, r3
 80010fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010fc:	d3f9      	bcc.n	80010f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010fe:	f7ff ffb3 	bl	8001068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001102:	f000 f811 	bl	8001128 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001106:	f7ff fe91 	bl	8000e2c <main>

0800110a <LoopForever>:

LoopForever:
    b LoopForever
 800110a:	e7fe      	b.n	800110a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800110c:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8001110:	080021c8 	.word	0x080021c8
	ldr	r0, =_sdata
 8001114:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001118:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 800111c:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8001120:	20000094 	.word	0x20000094

08001124 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC1_IRQHandler>
	...

08001128 <__libc_init_array>:
 8001128:	b570      	push	{r4, r5, r6, lr}
 800112a:	4e0d      	ldr	r6, [pc, #52]	; (8001160 <__libc_init_array+0x38>)
 800112c:	4c0d      	ldr	r4, [pc, #52]	; (8001164 <__libc_init_array+0x3c>)
 800112e:	1ba4      	subs	r4, r4, r6
 8001130:	10a4      	asrs	r4, r4, #2
 8001132:	2500      	movs	r5, #0
 8001134:	42a5      	cmp	r5, r4
 8001136:	d109      	bne.n	800114c <__libc_init_array+0x24>
 8001138:	4e0b      	ldr	r6, [pc, #44]	; (8001168 <__libc_init_array+0x40>)
 800113a:	4c0c      	ldr	r4, [pc, #48]	; (800116c <__libc_init_array+0x44>)
 800113c:	f000 ff7c 	bl	8002038 <_init>
 8001140:	1ba4      	subs	r4, r4, r6
 8001142:	10a4      	asrs	r4, r4, #2
 8001144:	2500      	movs	r5, #0
 8001146:	42a5      	cmp	r5, r4
 8001148:	d105      	bne.n	8001156 <__libc_init_array+0x2e>
 800114a:	bd70      	pop	{r4, r5, r6, pc}
 800114c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001150:	4798      	blx	r3
 8001152:	3501      	adds	r5, #1
 8001154:	e7ee      	b.n	8001134 <__libc_init_array+0xc>
 8001156:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800115a:	4798      	blx	r3
 800115c:	3501      	adds	r5, #1
 800115e:	e7f2      	b.n	8001146 <__libc_init_array+0x1e>
 8001160:	080021c0 	.word	0x080021c0
 8001164:	080021c0 	.word	0x080021c0
 8001168:	080021c0 	.word	0x080021c0
 800116c:	080021c4 	.word	0x080021c4

08001170 <iprintf>:
 8001170:	b40f      	push	{r0, r1, r2, r3}
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <iprintf+0x2c>)
 8001174:	b513      	push	{r0, r1, r4, lr}
 8001176:	681c      	ldr	r4, [r3, #0]
 8001178:	b124      	cbz	r4, 8001184 <iprintf+0x14>
 800117a:	69a3      	ldr	r3, [r4, #24]
 800117c:	b913      	cbnz	r3, 8001184 <iprintf+0x14>
 800117e:	4620      	mov	r0, r4
 8001180:	f000 fa24 	bl	80015cc <__sinit>
 8001184:	ab05      	add	r3, sp, #20
 8001186:	9a04      	ldr	r2, [sp, #16]
 8001188:	68a1      	ldr	r1, [r4, #8]
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	4620      	mov	r0, r4
 800118e:	f000 fbe9 	bl	8001964 <_vfiprintf_r>
 8001192:	b002      	add	sp, #8
 8001194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001198:	b004      	add	sp, #16
 800119a:	4770      	bx	lr
 800119c:	20000004 	.word	0x20000004

080011a0 <_puts_r>:
 80011a0:	b570      	push	{r4, r5, r6, lr}
 80011a2:	460e      	mov	r6, r1
 80011a4:	4605      	mov	r5, r0
 80011a6:	b118      	cbz	r0, 80011b0 <_puts_r+0x10>
 80011a8:	6983      	ldr	r3, [r0, #24]
 80011aa:	b90b      	cbnz	r3, 80011b0 <_puts_r+0x10>
 80011ac:	f000 fa0e 	bl	80015cc <__sinit>
 80011b0:	69ab      	ldr	r3, [r5, #24]
 80011b2:	68ac      	ldr	r4, [r5, #8]
 80011b4:	b913      	cbnz	r3, 80011bc <_puts_r+0x1c>
 80011b6:	4628      	mov	r0, r5
 80011b8:	f000 fa08 	bl	80015cc <__sinit>
 80011bc:	4b23      	ldr	r3, [pc, #140]	; (800124c <_puts_r+0xac>)
 80011be:	429c      	cmp	r4, r3
 80011c0:	d117      	bne.n	80011f2 <_puts_r+0x52>
 80011c2:	686c      	ldr	r4, [r5, #4]
 80011c4:	89a3      	ldrh	r3, [r4, #12]
 80011c6:	071b      	lsls	r3, r3, #28
 80011c8:	d51d      	bpl.n	8001206 <_puts_r+0x66>
 80011ca:	6923      	ldr	r3, [r4, #16]
 80011cc:	b1db      	cbz	r3, 8001206 <_puts_r+0x66>
 80011ce:	3e01      	subs	r6, #1
 80011d0:	68a3      	ldr	r3, [r4, #8]
 80011d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80011d6:	3b01      	subs	r3, #1
 80011d8:	60a3      	str	r3, [r4, #8]
 80011da:	b9e9      	cbnz	r1, 8001218 <_puts_r+0x78>
 80011dc:	2b00      	cmp	r3, #0
 80011de:	da2e      	bge.n	800123e <_puts_r+0x9e>
 80011e0:	4622      	mov	r2, r4
 80011e2:	210a      	movs	r1, #10
 80011e4:	4628      	mov	r0, r5
 80011e6:	f000 f83f 	bl	8001268 <__swbuf_r>
 80011ea:	3001      	adds	r0, #1
 80011ec:	d011      	beq.n	8001212 <_puts_r+0x72>
 80011ee:	200a      	movs	r0, #10
 80011f0:	bd70      	pop	{r4, r5, r6, pc}
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <_puts_r+0xb0>)
 80011f4:	429c      	cmp	r4, r3
 80011f6:	d101      	bne.n	80011fc <_puts_r+0x5c>
 80011f8:	68ac      	ldr	r4, [r5, #8]
 80011fa:	e7e3      	b.n	80011c4 <_puts_r+0x24>
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <_puts_r+0xb4>)
 80011fe:	429c      	cmp	r4, r3
 8001200:	bf08      	it	eq
 8001202:	68ec      	ldreq	r4, [r5, #12]
 8001204:	e7de      	b.n	80011c4 <_puts_r+0x24>
 8001206:	4621      	mov	r1, r4
 8001208:	4628      	mov	r0, r5
 800120a:	f000 f87f 	bl	800130c <__swsetup_r>
 800120e:	2800      	cmp	r0, #0
 8001210:	d0dd      	beq.n	80011ce <_puts_r+0x2e>
 8001212:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001216:	bd70      	pop	{r4, r5, r6, pc}
 8001218:	2b00      	cmp	r3, #0
 800121a:	da04      	bge.n	8001226 <_puts_r+0x86>
 800121c:	69a2      	ldr	r2, [r4, #24]
 800121e:	4293      	cmp	r3, r2
 8001220:	db06      	blt.n	8001230 <_puts_r+0x90>
 8001222:	290a      	cmp	r1, #10
 8001224:	d004      	beq.n	8001230 <_puts_r+0x90>
 8001226:	6823      	ldr	r3, [r4, #0]
 8001228:	1c5a      	adds	r2, r3, #1
 800122a:	6022      	str	r2, [r4, #0]
 800122c:	7019      	strb	r1, [r3, #0]
 800122e:	e7cf      	b.n	80011d0 <_puts_r+0x30>
 8001230:	4622      	mov	r2, r4
 8001232:	4628      	mov	r0, r5
 8001234:	f000 f818 	bl	8001268 <__swbuf_r>
 8001238:	3001      	adds	r0, #1
 800123a:	d1c9      	bne.n	80011d0 <_puts_r+0x30>
 800123c:	e7e9      	b.n	8001212 <_puts_r+0x72>
 800123e:	6823      	ldr	r3, [r4, #0]
 8001240:	200a      	movs	r0, #10
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	6022      	str	r2, [r4, #0]
 8001246:	7018      	strb	r0, [r3, #0]
 8001248:	bd70      	pop	{r4, r5, r6, pc}
 800124a:	bf00      	nop
 800124c:	08002148 	.word	0x08002148
 8001250:	08002168 	.word	0x08002168
 8001254:	08002128 	.word	0x08002128

08001258 <puts>:
 8001258:	4b02      	ldr	r3, [pc, #8]	; (8001264 <puts+0xc>)
 800125a:	4601      	mov	r1, r0
 800125c:	6818      	ldr	r0, [r3, #0]
 800125e:	f7ff bf9f 	b.w	80011a0 <_puts_r>
 8001262:	bf00      	nop
 8001264:	20000004 	.word	0x20000004

08001268 <__swbuf_r>:
 8001268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800126a:	460e      	mov	r6, r1
 800126c:	4614      	mov	r4, r2
 800126e:	4605      	mov	r5, r0
 8001270:	b118      	cbz	r0, 800127a <__swbuf_r+0x12>
 8001272:	6983      	ldr	r3, [r0, #24]
 8001274:	b90b      	cbnz	r3, 800127a <__swbuf_r+0x12>
 8001276:	f000 f9a9 	bl	80015cc <__sinit>
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <__swbuf_r+0x98>)
 800127c:	429c      	cmp	r4, r3
 800127e:	d12a      	bne.n	80012d6 <__swbuf_r+0x6e>
 8001280:	686c      	ldr	r4, [r5, #4]
 8001282:	69a3      	ldr	r3, [r4, #24]
 8001284:	60a3      	str	r3, [r4, #8]
 8001286:	89a3      	ldrh	r3, [r4, #12]
 8001288:	071a      	lsls	r2, r3, #28
 800128a:	d52e      	bpl.n	80012ea <__swbuf_r+0x82>
 800128c:	6923      	ldr	r3, [r4, #16]
 800128e:	b363      	cbz	r3, 80012ea <__swbuf_r+0x82>
 8001290:	6923      	ldr	r3, [r4, #16]
 8001292:	6820      	ldr	r0, [r4, #0]
 8001294:	1ac0      	subs	r0, r0, r3
 8001296:	6963      	ldr	r3, [r4, #20]
 8001298:	b2f6      	uxtb	r6, r6
 800129a:	4298      	cmp	r0, r3
 800129c:	4637      	mov	r7, r6
 800129e:	db04      	blt.n	80012aa <__swbuf_r+0x42>
 80012a0:	4621      	mov	r1, r4
 80012a2:	4628      	mov	r0, r5
 80012a4:	f000 f928 	bl	80014f8 <_fflush_r>
 80012a8:	bb28      	cbnz	r0, 80012f6 <__swbuf_r+0x8e>
 80012aa:	68a3      	ldr	r3, [r4, #8]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	60a3      	str	r3, [r4, #8]
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	6022      	str	r2, [r4, #0]
 80012b6:	701e      	strb	r6, [r3, #0]
 80012b8:	6963      	ldr	r3, [r4, #20]
 80012ba:	3001      	adds	r0, #1
 80012bc:	4298      	cmp	r0, r3
 80012be:	d004      	beq.n	80012ca <__swbuf_r+0x62>
 80012c0:	89a3      	ldrh	r3, [r4, #12]
 80012c2:	07db      	lsls	r3, r3, #31
 80012c4:	d519      	bpl.n	80012fa <__swbuf_r+0x92>
 80012c6:	2e0a      	cmp	r6, #10
 80012c8:	d117      	bne.n	80012fa <__swbuf_r+0x92>
 80012ca:	4621      	mov	r1, r4
 80012cc:	4628      	mov	r0, r5
 80012ce:	f000 f913 	bl	80014f8 <_fflush_r>
 80012d2:	b190      	cbz	r0, 80012fa <__swbuf_r+0x92>
 80012d4:	e00f      	b.n	80012f6 <__swbuf_r+0x8e>
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <__swbuf_r+0x9c>)
 80012d8:	429c      	cmp	r4, r3
 80012da:	d101      	bne.n	80012e0 <__swbuf_r+0x78>
 80012dc:	68ac      	ldr	r4, [r5, #8]
 80012de:	e7d0      	b.n	8001282 <__swbuf_r+0x1a>
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <__swbuf_r+0xa0>)
 80012e2:	429c      	cmp	r4, r3
 80012e4:	bf08      	it	eq
 80012e6:	68ec      	ldreq	r4, [r5, #12]
 80012e8:	e7cb      	b.n	8001282 <__swbuf_r+0x1a>
 80012ea:	4621      	mov	r1, r4
 80012ec:	4628      	mov	r0, r5
 80012ee:	f000 f80d 	bl	800130c <__swsetup_r>
 80012f2:	2800      	cmp	r0, #0
 80012f4:	d0cc      	beq.n	8001290 <__swbuf_r+0x28>
 80012f6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80012fa:	4638      	mov	r0, r7
 80012fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012fe:	bf00      	nop
 8001300:	08002148 	.word	0x08002148
 8001304:	08002168 	.word	0x08002168
 8001308:	08002128 	.word	0x08002128

0800130c <__swsetup_r>:
 800130c:	4b32      	ldr	r3, [pc, #200]	; (80013d8 <__swsetup_r+0xcc>)
 800130e:	b570      	push	{r4, r5, r6, lr}
 8001310:	681d      	ldr	r5, [r3, #0]
 8001312:	4606      	mov	r6, r0
 8001314:	460c      	mov	r4, r1
 8001316:	b125      	cbz	r5, 8001322 <__swsetup_r+0x16>
 8001318:	69ab      	ldr	r3, [r5, #24]
 800131a:	b913      	cbnz	r3, 8001322 <__swsetup_r+0x16>
 800131c:	4628      	mov	r0, r5
 800131e:	f000 f955 	bl	80015cc <__sinit>
 8001322:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <__swsetup_r+0xd0>)
 8001324:	429c      	cmp	r4, r3
 8001326:	d10f      	bne.n	8001348 <__swsetup_r+0x3c>
 8001328:	686c      	ldr	r4, [r5, #4]
 800132a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800132e:	b29a      	uxth	r2, r3
 8001330:	0715      	lsls	r5, r2, #28
 8001332:	d42c      	bmi.n	800138e <__swsetup_r+0x82>
 8001334:	06d0      	lsls	r0, r2, #27
 8001336:	d411      	bmi.n	800135c <__swsetup_r+0x50>
 8001338:	2209      	movs	r2, #9
 800133a:	6032      	str	r2, [r6, #0]
 800133c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001340:	81a3      	strh	r3, [r4, #12]
 8001342:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001346:	bd70      	pop	{r4, r5, r6, pc}
 8001348:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <__swsetup_r+0xd4>)
 800134a:	429c      	cmp	r4, r3
 800134c:	d101      	bne.n	8001352 <__swsetup_r+0x46>
 800134e:	68ac      	ldr	r4, [r5, #8]
 8001350:	e7eb      	b.n	800132a <__swsetup_r+0x1e>
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <__swsetup_r+0xd8>)
 8001354:	429c      	cmp	r4, r3
 8001356:	bf08      	it	eq
 8001358:	68ec      	ldreq	r4, [r5, #12]
 800135a:	e7e6      	b.n	800132a <__swsetup_r+0x1e>
 800135c:	0751      	lsls	r1, r2, #29
 800135e:	d512      	bpl.n	8001386 <__swsetup_r+0x7a>
 8001360:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001362:	b141      	cbz	r1, 8001376 <__swsetup_r+0x6a>
 8001364:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001368:	4299      	cmp	r1, r3
 800136a:	d002      	beq.n	8001372 <__swsetup_r+0x66>
 800136c:	4630      	mov	r0, r6
 800136e:	f000 fa23 	bl	80017b8 <_free_r>
 8001372:	2300      	movs	r3, #0
 8001374:	6363      	str	r3, [r4, #52]	; 0x34
 8001376:	89a3      	ldrh	r3, [r4, #12]
 8001378:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800137c:	81a3      	strh	r3, [r4, #12]
 800137e:	2300      	movs	r3, #0
 8001380:	6063      	str	r3, [r4, #4]
 8001382:	6923      	ldr	r3, [r4, #16]
 8001384:	6023      	str	r3, [r4, #0]
 8001386:	89a3      	ldrh	r3, [r4, #12]
 8001388:	f043 0308 	orr.w	r3, r3, #8
 800138c:	81a3      	strh	r3, [r4, #12]
 800138e:	6923      	ldr	r3, [r4, #16]
 8001390:	b94b      	cbnz	r3, 80013a6 <__swsetup_r+0x9a>
 8001392:	89a3      	ldrh	r3, [r4, #12]
 8001394:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800139c:	d003      	beq.n	80013a6 <__swsetup_r+0x9a>
 800139e:	4621      	mov	r1, r4
 80013a0:	4630      	mov	r0, r6
 80013a2:	f000 f9c1 	bl	8001728 <__smakebuf_r>
 80013a6:	89a2      	ldrh	r2, [r4, #12]
 80013a8:	f012 0301 	ands.w	r3, r2, #1
 80013ac:	d00c      	beq.n	80013c8 <__swsetup_r+0xbc>
 80013ae:	2300      	movs	r3, #0
 80013b0:	60a3      	str	r3, [r4, #8]
 80013b2:	6963      	ldr	r3, [r4, #20]
 80013b4:	425b      	negs	r3, r3
 80013b6:	61a3      	str	r3, [r4, #24]
 80013b8:	6923      	ldr	r3, [r4, #16]
 80013ba:	b953      	cbnz	r3, 80013d2 <__swsetup_r+0xc6>
 80013bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80013c4:	d1ba      	bne.n	800133c <__swsetup_r+0x30>
 80013c6:	bd70      	pop	{r4, r5, r6, pc}
 80013c8:	0792      	lsls	r2, r2, #30
 80013ca:	bf58      	it	pl
 80013cc:	6963      	ldrpl	r3, [r4, #20]
 80013ce:	60a3      	str	r3, [r4, #8]
 80013d0:	e7f2      	b.n	80013b8 <__swsetup_r+0xac>
 80013d2:	2000      	movs	r0, #0
 80013d4:	e7f7      	b.n	80013c6 <__swsetup_r+0xba>
 80013d6:	bf00      	nop
 80013d8:	20000004 	.word	0x20000004
 80013dc:	08002148 	.word	0x08002148
 80013e0:	08002168 	.word	0x08002168
 80013e4:	08002128 	.word	0x08002128

080013e8 <__sflush_r>:
 80013e8:	898a      	ldrh	r2, [r1, #12]
 80013ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013ee:	4605      	mov	r5, r0
 80013f0:	0710      	lsls	r0, r2, #28
 80013f2:	460c      	mov	r4, r1
 80013f4:	d45a      	bmi.n	80014ac <__sflush_r+0xc4>
 80013f6:	684b      	ldr	r3, [r1, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	dc05      	bgt.n	8001408 <__sflush_r+0x20>
 80013fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80013fe:	2b00      	cmp	r3, #0
 8001400:	dc02      	bgt.n	8001408 <__sflush_r+0x20>
 8001402:	2000      	movs	r0, #0
 8001404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001408:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800140a:	2e00      	cmp	r6, #0
 800140c:	d0f9      	beq.n	8001402 <__sflush_r+0x1a>
 800140e:	2300      	movs	r3, #0
 8001410:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001414:	682f      	ldr	r7, [r5, #0]
 8001416:	602b      	str	r3, [r5, #0]
 8001418:	d033      	beq.n	8001482 <__sflush_r+0x9a>
 800141a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800141c:	89a3      	ldrh	r3, [r4, #12]
 800141e:	075a      	lsls	r2, r3, #29
 8001420:	d505      	bpl.n	800142e <__sflush_r+0x46>
 8001422:	6863      	ldr	r3, [r4, #4]
 8001424:	1ac0      	subs	r0, r0, r3
 8001426:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001428:	b10b      	cbz	r3, 800142e <__sflush_r+0x46>
 800142a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800142c:	1ac0      	subs	r0, r0, r3
 800142e:	2300      	movs	r3, #0
 8001430:	4602      	mov	r2, r0
 8001432:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001434:	6a21      	ldr	r1, [r4, #32]
 8001436:	4628      	mov	r0, r5
 8001438:	47b0      	blx	r6
 800143a:	1c43      	adds	r3, r0, #1
 800143c:	89a3      	ldrh	r3, [r4, #12]
 800143e:	d106      	bne.n	800144e <__sflush_r+0x66>
 8001440:	6829      	ldr	r1, [r5, #0]
 8001442:	291d      	cmp	r1, #29
 8001444:	d84b      	bhi.n	80014de <__sflush_r+0xf6>
 8001446:	4a2b      	ldr	r2, [pc, #172]	; (80014f4 <__sflush_r+0x10c>)
 8001448:	40ca      	lsrs	r2, r1
 800144a:	07d6      	lsls	r6, r2, #31
 800144c:	d547      	bpl.n	80014de <__sflush_r+0xf6>
 800144e:	2200      	movs	r2, #0
 8001450:	6062      	str	r2, [r4, #4]
 8001452:	04d9      	lsls	r1, r3, #19
 8001454:	6922      	ldr	r2, [r4, #16]
 8001456:	6022      	str	r2, [r4, #0]
 8001458:	d504      	bpl.n	8001464 <__sflush_r+0x7c>
 800145a:	1c42      	adds	r2, r0, #1
 800145c:	d101      	bne.n	8001462 <__sflush_r+0x7a>
 800145e:	682b      	ldr	r3, [r5, #0]
 8001460:	b903      	cbnz	r3, 8001464 <__sflush_r+0x7c>
 8001462:	6560      	str	r0, [r4, #84]	; 0x54
 8001464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001466:	602f      	str	r7, [r5, #0]
 8001468:	2900      	cmp	r1, #0
 800146a:	d0ca      	beq.n	8001402 <__sflush_r+0x1a>
 800146c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001470:	4299      	cmp	r1, r3
 8001472:	d002      	beq.n	800147a <__sflush_r+0x92>
 8001474:	4628      	mov	r0, r5
 8001476:	f000 f99f 	bl	80017b8 <_free_r>
 800147a:	2000      	movs	r0, #0
 800147c:	6360      	str	r0, [r4, #52]	; 0x34
 800147e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001482:	6a21      	ldr	r1, [r4, #32]
 8001484:	2301      	movs	r3, #1
 8001486:	4628      	mov	r0, r5
 8001488:	47b0      	blx	r6
 800148a:	1c41      	adds	r1, r0, #1
 800148c:	d1c6      	bne.n	800141c <__sflush_r+0x34>
 800148e:	682b      	ldr	r3, [r5, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0c3      	beq.n	800141c <__sflush_r+0x34>
 8001494:	2b1d      	cmp	r3, #29
 8001496:	d001      	beq.n	800149c <__sflush_r+0xb4>
 8001498:	2b16      	cmp	r3, #22
 800149a:	d101      	bne.n	80014a0 <__sflush_r+0xb8>
 800149c:	602f      	str	r7, [r5, #0]
 800149e:	e7b0      	b.n	8001402 <__sflush_r+0x1a>
 80014a0:	89a3      	ldrh	r3, [r4, #12]
 80014a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a6:	81a3      	strh	r3, [r4, #12]
 80014a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014ac:	690f      	ldr	r7, [r1, #16]
 80014ae:	2f00      	cmp	r7, #0
 80014b0:	d0a7      	beq.n	8001402 <__sflush_r+0x1a>
 80014b2:	0793      	lsls	r3, r2, #30
 80014b4:	680e      	ldr	r6, [r1, #0]
 80014b6:	bf08      	it	eq
 80014b8:	694b      	ldreq	r3, [r1, #20]
 80014ba:	600f      	str	r7, [r1, #0]
 80014bc:	bf18      	it	ne
 80014be:	2300      	movne	r3, #0
 80014c0:	eba6 0807 	sub.w	r8, r6, r7
 80014c4:	608b      	str	r3, [r1, #8]
 80014c6:	f1b8 0f00 	cmp.w	r8, #0
 80014ca:	dd9a      	ble.n	8001402 <__sflush_r+0x1a>
 80014cc:	4643      	mov	r3, r8
 80014ce:	463a      	mov	r2, r7
 80014d0:	6a21      	ldr	r1, [r4, #32]
 80014d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80014d4:	4628      	mov	r0, r5
 80014d6:	47b0      	blx	r6
 80014d8:	2800      	cmp	r0, #0
 80014da:	dc07      	bgt.n	80014ec <__sflush_r+0x104>
 80014dc:	89a3      	ldrh	r3, [r4, #12]
 80014de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e2:	81a3      	strh	r3, [r4, #12]
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014ec:	4407      	add	r7, r0
 80014ee:	eba8 0800 	sub.w	r8, r8, r0
 80014f2:	e7e8      	b.n	80014c6 <__sflush_r+0xde>
 80014f4:	20400001 	.word	0x20400001

080014f8 <_fflush_r>:
 80014f8:	b538      	push	{r3, r4, r5, lr}
 80014fa:	690b      	ldr	r3, [r1, #16]
 80014fc:	4605      	mov	r5, r0
 80014fe:	460c      	mov	r4, r1
 8001500:	b1db      	cbz	r3, 800153a <_fflush_r+0x42>
 8001502:	b118      	cbz	r0, 800150c <_fflush_r+0x14>
 8001504:	6983      	ldr	r3, [r0, #24]
 8001506:	b90b      	cbnz	r3, 800150c <_fflush_r+0x14>
 8001508:	f000 f860 	bl	80015cc <__sinit>
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <_fflush_r+0x48>)
 800150e:	429c      	cmp	r4, r3
 8001510:	d109      	bne.n	8001526 <_fflush_r+0x2e>
 8001512:	686c      	ldr	r4, [r5, #4]
 8001514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001518:	b17b      	cbz	r3, 800153a <_fflush_r+0x42>
 800151a:	4621      	mov	r1, r4
 800151c:	4628      	mov	r0, r5
 800151e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001522:	f7ff bf61 	b.w	80013e8 <__sflush_r>
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <_fflush_r+0x4c>)
 8001528:	429c      	cmp	r4, r3
 800152a:	d101      	bne.n	8001530 <_fflush_r+0x38>
 800152c:	68ac      	ldr	r4, [r5, #8]
 800152e:	e7f1      	b.n	8001514 <_fflush_r+0x1c>
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <_fflush_r+0x50>)
 8001532:	429c      	cmp	r4, r3
 8001534:	bf08      	it	eq
 8001536:	68ec      	ldreq	r4, [r5, #12]
 8001538:	e7ec      	b.n	8001514 <_fflush_r+0x1c>
 800153a:	2000      	movs	r0, #0
 800153c:	bd38      	pop	{r3, r4, r5, pc}
 800153e:	bf00      	nop
 8001540:	08002148 	.word	0x08002148
 8001544:	08002168 	.word	0x08002168
 8001548:	08002128 	.word	0x08002128

0800154c <_cleanup_r>:
 800154c:	4901      	ldr	r1, [pc, #4]	; (8001554 <_cleanup_r+0x8>)
 800154e:	f000 b8a9 	b.w	80016a4 <_fwalk_reent>
 8001552:	bf00      	nop
 8001554:	080014f9 	.word	0x080014f9

08001558 <std.isra.0>:
 8001558:	2300      	movs	r3, #0
 800155a:	b510      	push	{r4, lr}
 800155c:	4604      	mov	r4, r0
 800155e:	6003      	str	r3, [r0, #0]
 8001560:	6043      	str	r3, [r0, #4]
 8001562:	6083      	str	r3, [r0, #8]
 8001564:	8181      	strh	r1, [r0, #12]
 8001566:	6643      	str	r3, [r0, #100]	; 0x64
 8001568:	81c2      	strh	r2, [r0, #14]
 800156a:	6103      	str	r3, [r0, #16]
 800156c:	6143      	str	r3, [r0, #20]
 800156e:	6183      	str	r3, [r0, #24]
 8001570:	4619      	mov	r1, r3
 8001572:	2208      	movs	r2, #8
 8001574:	305c      	adds	r0, #92	; 0x5c
 8001576:	f000 f917 	bl	80017a8 <memset>
 800157a:	4b05      	ldr	r3, [pc, #20]	; (8001590 <std.isra.0+0x38>)
 800157c:	6263      	str	r3, [r4, #36]	; 0x24
 800157e:	4b05      	ldr	r3, [pc, #20]	; (8001594 <std.isra.0+0x3c>)
 8001580:	62a3      	str	r3, [r4, #40]	; 0x28
 8001582:	4b05      	ldr	r3, [pc, #20]	; (8001598 <std.isra.0+0x40>)
 8001584:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <std.isra.0+0x44>)
 8001588:	6224      	str	r4, [r4, #32]
 800158a:	6323      	str	r3, [r4, #48]	; 0x30
 800158c:	bd10      	pop	{r4, pc}
 800158e:	bf00      	nop
 8001590:	08001edd 	.word	0x08001edd
 8001594:	08001eff 	.word	0x08001eff
 8001598:	08001f37 	.word	0x08001f37
 800159c:	08001f5b 	.word	0x08001f5b

080015a0 <__sfmoreglue>:
 80015a0:	b570      	push	{r4, r5, r6, lr}
 80015a2:	1e4a      	subs	r2, r1, #1
 80015a4:	2568      	movs	r5, #104	; 0x68
 80015a6:	4355      	muls	r5, r2
 80015a8:	460e      	mov	r6, r1
 80015aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80015ae:	f000 f951 	bl	8001854 <_malloc_r>
 80015b2:	4604      	mov	r4, r0
 80015b4:	b140      	cbz	r0, 80015c8 <__sfmoreglue+0x28>
 80015b6:	2100      	movs	r1, #0
 80015b8:	e880 0042 	stmia.w	r0, {r1, r6}
 80015bc:	300c      	adds	r0, #12
 80015be:	60a0      	str	r0, [r4, #8]
 80015c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80015c4:	f000 f8f0 	bl	80017a8 <memset>
 80015c8:	4620      	mov	r0, r4
 80015ca:	bd70      	pop	{r4, r5, r6, pc}

080015cc <__sinit>:
 80015cc:	6983      	ldr	r3, [r0, #24]
 80015ce:	b510      	push	{r4, lr}
 80015d0:	4604      	mov	r4, r0
 80015d2:	bb33      	cbnz	r3, 8001622 <__sinit+0x56>
 80015d4:	6483      	str	r3, [r0, #72]	; 0x48
 80015d6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80015d8:	6503      	str	r3, [r0, #80]	; 0x50
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <__sinit+0x58>)
 80015dc:	4a12      	ldr	r2, [pc, #72]	; (8001628 <__sinit+0x5c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6282      	str	r2, [r0, #40]	; 0x28
 80015e2:	4298      	cmp	r0, r3
 80015e4:	bf04      	itt	eq
 80015e6:	2301      	moveq	r3, #1
 80015e8:	6183      	streq	r3, [r0, #24]
 80015ea:	f000 f81f 	bl	800162c <__sfp>
 80015ee:	6060      	str	r0, [r4, #4]
 80015f0:	4620      	mov	r0, r4
 80015f2:	f000 f81b 	bl	800162c <__sfp>
 80015f6:	60a0      	str	r0, [r4, #8]
 80015f8:	4620      	mov	r0, r4
 80015fa:	f000 f817 	bl	800162c <__sfp>
 80015fe:	2200      	movs	r2, #0
 8001600:	60e0      	str	r0, [r4, #12]
 8001602:	2104      	movs	r1, #4
 8001604:	6860      	ldr	r0, [r4, #4]
 8001606:	f7ff ffa7 	bl	8001558 <std.isra.0>
 800160a:	2201      	movs	r2, #1
 800160c:	2109      	movs	r1, #9
 800160e:	68a0      	ldr	r0, [r4, #8]
 8001610:	f7ff ffa2 	bl	8001558 <std.isra.0>
 8001614:	2202      	movs	r2, #2
 8001616:	2112      	movs	r1, #18
 8001618:	68e0      	ldr	r0, [r4, #12]
 800161a:	f7ff ff9d 	bl	8001558 <std.isra.0>
 800161e:	2301      	movs	r3, #1
 8001620:	61a3      	str	r3, [r4, #24]
 8001622:	bd10      	pop	{r4, pc}
 8001624:	08002188 	.word	0x08002188
 8001628:	0800154d 	.word	0x0800154d

0800162c <__sfp>:
 800162c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <__sfp+0x74>)
 8001630:	681e      	ldr	r6, [r3, #0]
 8001632:	69b3      	ldr	r3, [r6, #24]
 8001634:	4607      	mov	r7, r0
 8001636:	b913      	cbnz	r3, 800163e <__sfp+0x12>
 8001638:	4630      	mov	r0, r6
 800163a:	f7ff ffc7 	bl	80015cc <__sinit>
 800163e:	3648      	adds	r6, #72	; 0x48
 8001640:	68b4      	ldr	r4, [r6, #8]
 8001642:	6873      	ldr	r3, [r6, #4]
 8001644:	3b01      	subs	r3, #1
 8001646:	d503      	bpl.n	8001650 <__sfp+0x24>
 8001648:	6833      	ldr	r3, [r6, #0]
 800164a:	b133      	cbz	r3, 800165a <__sfp+0x2e>
 800164c:	6836      	ldr	r6, [r6, #0]
 800164e:	e7f7      	b.n	8001640 <__sfp+0x14>
 8001650:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001654:	b16d      	cbz	r5, 8001672 <__sfp+0x46>
 8001656:	3468      	adds	r4, #104	; 0x68
 8001658:	e7f4      	b.n	8001644 <__sfp+0x18>
 800165a:	2104      	movs	r1, #4
 800165c:	4638      	mov	r0, r7
 800165e:	f7ff ff9f 	bl	80015a0 <__sfmoreglue>
 8001662:	6030      	str	r0, [r6, #0]
 8001664:	2800      	cmp	r0, #0
 8001666:	d1f1      	bne.n	800164c <__sfp+0x20>
 8001668:	230c      	movs	r3, #12
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	4604      	mov	r4, r0
 800166e:	4620      	mov	r0, r4
 8001670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001672:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001676:	81e3      	strh	r3, [r4, #14]
 8001678:	2301      	movs	r3, #1
 800167a:	81a3      	strh	r3, [r4, #12]
 800167c:	6665      	str	r5, [r4, #100]	; 0x64
 800167e:	6025      	str	r5, [r4, #0]
 8001680:	60a5      	str	r5, [r4, #8]
 8001682:	6065      	str	r5, [r4, #4]
 8001684:	6125      	str	r5, [r4, #16]
 8001686:	6165      	str	r5, [r4, #20]
 8001688:	61a5      	str	r5, [r4, #24]
 800168a:	2208      	movs	r2, #8
 800168c:	4629      	mov	r1, r5
 800168e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001692:	f000 f889 	bl	80017a8 <memset>
 8001696:	6365      	str	r5, [r4, #52]	; 0x34
 8001698:	63a5      	str	r5, [r4, #56]	; 0x38
 800169a:	64a5      	str	r5, [r4, #72]	; 0x48
 800169c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800169e:	e7e6      	b.n	800166e <__sfp+0x42>
 80016a0:	08002188 	.word	0x08002188

080016a4 <_fwalk_reent>:
 80016a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016a8:	4680      	mov	r8, r0
 80016aa:	4689      	mov	r9, r1
 80016ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80016b0:	2600      	movs	r6, #0
 80016b2:	b914      	cbnz	r4, 80016ba <_fwalk_reent+0x16>
 80016b4:	4630      	mov	r0, r6
 80016b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016ba:	68a5      	ldr	r5, [r4, #8]
 80016bc:	6867      	ldr	r7, [r4, #4]
 80016be:	3f01      	subs	r7, #1
 80016c0:	d501      	bpl.n	80016c6 <_fwalk_reent+0x22>
 80016c2:	6824      	ldr	r4, [r4, #0]
 80016c4:	e7f5      	b.n	80016b2 <_fwalk_reent+0xe>
 80016c6:	89ab      	ldrh	r3, [r5, #12]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d907      	bls.n	80016dc <_fwalk_reent+0x38>
 80016cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80016d0:	3301      	adds	r3, #1
 80016d2:	d003      	beq.n	80016dc <_fwalk_reent+0x38>
 80016d4:	4629      	mov	r1, r5
 80016d6:	4640      	mov	r0, r8
 80016d8:	47c8      	blx	r9
 80016da:	4306      	orrs	r6, r0
 80016dc:	3568      	adds	r5, #104	; 0x68
 80016de:	e7ee      	b.n	80016be <_fwalk_reent+0x1a>

080016e0 <__swhatbuf_r>:
 80016e0:	b570      	push	{r4, r5, r6, lr}
 80016e2:	460e      	mov	r6, r1
 80016e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016e8:	2900      	cmp	r1, #0
 80016ea:	b090      	sub	sp, #64	; 0x40
 80016ec:	4614      	mov	r4, r2
 80016ee:	461d      	mov	r5, r3
 80016f0:	da07      	bge.n	8001702 <__swhatbuf_r+0x22>
 80016f2:	2300      	movs	r3, #0
 80016f4:	602b      	str	r3, [r5, #0]
 80016f6:	89b3      	ldrh	r3, [r6, #12]
 80016f8:	061a      	lsls	r2, r3, #24
 80016fa:	d410      	bmi.n	800171e <__swhatbuf_r+0x3e>
 80016fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001700:	e00e      	b.n	8001720 <__swhatbuf_r+0x40>
 8001702:	aa01      	add	r2, sp, #4
 8001704:	f000 fc50 	bl	8001fa8 <_fstat_r>
 8001708:	2800      	cmp	r0, #0
 800170a:	dbf2      	blt.n	80016f2 <__swhatbuf_r+0x12>
 800170c:	9a02      	ldr	r2, [sp, #8]
 800170e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001712:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001716:	425a      	negs	r2, r3
 8001718:	415a      	adcs	r2, r3
 800171a:	602a      	str	r2, [r5, #0]
 800171c:	e7ee      	b.n	80016fc <__swhatbuf_r+0x1c>
 800171e:	2340      	movs	r3, #64	; 0x40
 8001720:	2000      	movs	r0, #0
 8001722:	6023      	str	r3, [r4, #0]
 8001724:	b010      	add	sp, #64	; 0x40
 8001726:	bd70      	pop	{r4, r5, r6, pc}

08001728 <__smakebuf_r>:
 8001728:	898b      	ldrh	r3, [r1, #12]
 800172a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800172c:	079d      	lsls	r5, r3, #30
 800172e:	4606      	mov	r6, r0
 8001730:	460c      	mov	r4, r1
 8001732:	d507      	bpl.n	8001744 <__smakebuf_r+0x1c>
 8001734:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001738:	6023      	str	r3, [r4, #0]
 800173a:	6123      	str	r3, [r4, #16]
 800173c:	2301      	movs	r3, #1
 800173e:	6163      	str	r3, [r4, #20]
 8001740:	b002      	add	sp, #8
 8001742:	bd70      	pop	{r4, r5, r6, pc}
 8001744:	ab01      	add	r3, sp, #4
 8001746:	466a      	mov	r2, sp
 8001748:	f7ff ffca 	bl	80016e0 <__swhatbuf_r>
 800174c:	9900      	ldr	r1, [sp, #0]
 800174e:	4605      	mov	r5, r0
 8001750:	4630      	mov	r0, r6
 8001752:	f000 f87f 	bl	8001854 <_malloc_r>
 8001756:	b948      	cbnz	r0, 800176c <__smakebuf_r+0x44>
 8001758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800175c:	059a      	lsls	r2, r3, #22
 800175e:	d4ef      	bmi.n	8001740 <__smakebuf_r+0x18>
 8001760:	f023 0303 	bic.w	r3, r3, #3
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	81a3      	strh	r3, [r4, #12]
 800176a:	e7e3      	b.n	8001734 <__smakebuf_r+0xc>
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <__smakebuf_r+0x7c>)
 800176e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001770:	89a3      	ldrh	r3, [r4, #12]
 8001772:	6020      	str	r0, [r4, #0]
 8001774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001778:	81a3      	strh	r3, [r4, #12]
 800177a:	9b00      	ldr	r3, [sp, #0]
 800177c:	6163      	str	r3, [r4, #20]
 800177e:	9b01      	ldr	r3, [sp, #4]
 8001780:	6120      	str	r0, [r4, #16]
 8001782:	b15b      	cbz	r3, 800179c <__smakebuf_r+0x74>
 8001784:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001788:	4630      	mov	r0, r6
 800178a:	f000 fc1f 	bl	8001fcc <_isatty_r>
 800178e:	b128      	cbz	r0, 800179c <__smakebuf_r+0x74>
 8001790:	89a3      	ldrh	r3, [r4, #12]
 8001792:	f023 0303 	bic.w	r3, r3, #3
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	81a3      	strh	r3, [r4, #12]
 800179c:	89a3      	ldrh	r3, [r4, #12]
 800179e:	431d      	orrs	r5, r3
 80017a0:	81a5      	strh	r5, [r4, #12]
 80017a2:	e7cd      	b.n	8001740 <__smakebuf_r+0x18>
 80017a4:	0800154d 	.word	0x0800154d

080017a8 <memset>:
 80017a8:	4402      	add	r2, r0
 80017aa:	4603      	mov	r3, r0
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d100      	bne.n	80017b2 <memset+0xa>
 80017b0:	4770      	bx	lr
 80017b2:	f803 1b01 	strb.w	r1, [r3], #1
 80017b6:	e7f9      	b.n	80017ac <memset+0x4>

080017b8 <_free_r>:
 80017b8:	b538      	push	{r3, r4, r5, lr}
 80017ba:	4605      	mov	r5, r0
 80017bc:	2900      	cmp	r1, #0
 80017be:	d045      	beq.n	800184c <_free_r+0x94>
 80017c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017c4:	1f0c      	subs	r4, r1, #4
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	bfb8      	it	lt
 80017ca:	18e4      	addlt	r4, r4, r3
 80017cc:	f000 fc20 	bl	8002010 <__malloc_lock>
 80017d0:	4a1f      	ldr	r2, [pc, #124]	; (8001850 <_free_r+0x98>)
 80017d2:	6813      	ldr	r3, [r2, #0]
 80017d4:	4610      	mov	r0, r2
 80017d6:	b933      	cbnz	r3, 80017e6 <_free_r+0x2e>
 80017d8:	6063      	str	r3, [r4, #4]
 80017da:	6014      	str	r4, [r2, #0]
 80017dc:	4628      	mov	r0, r5
 80017de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017e2:	f000 bc16 	b.w	8002012 <__malloc_unlock>
 80017e6:	42a3      	cmp	r3, r4
 80017e8:	d90c      	bls.n	8001804 <_free_r+0x4c>
 80017ea:	6821      	ldr	r1, [r4, #0]
 80017ec:	1862      	adds	r2, r4, r1
 80017ee:	4293      	cmp	r3, r2
 80017f0:	bf04      	itt	eq
 80017f2:	681a      	ldreq	r2, [r3, #0]
 80017f4:	685b      	ldreq	r3, [r3, #4]
 80017f6:	6063      	str	r3, [r4, #4]
 80017f8:	bf04      	itt	eq
 80017fa:	1852      	addeq	r2, r2, r1
 80017fc:	6022      	streq	r2, [r4, #0]
 80017fe:	6004      	str	r4, [r0, #0]
 8001800:	e7ec      	b.n	80017dc <_free_r+0x24>
 8001802:	4613      	mov	r3, r2
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	b10a      	cbz	r2, 800180c <_free_r+0x54>
 8001808:	42a2      	cmp	r2, r4
 800180a:	d9fa      	bls.n	8001802 <_free_r+0x4a>
 800180c:	6819      	ldr	r1, [r3, #0]
 800180e:	1858      	adds	r0, r3, r1
 8001810:	42a0      	cmp	r0, r4
 8001812:	d10b      	bne.n	800182c <_free_r+0x74>
 8001814:	6820      	ldr	r0, [r4, #0]
 8001816:	4401      	add	r1, r0
 8001818:	1858      	adds	r0, r3, r1
 800181a:	4282      	cmp	r2, r0
 800181c:	6019      	str	r1, [r3, #0]
 800181e:	d1dd      	bne.n	80017dc <_free_r+0x24>
 8001820:	6810      	ldr	r0, [r2, #0]
 8001822:	6852      	ldr	r2, [r2, #4]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	4401      	add	r1, r0
 8001828:	6019      	str	r1, [r3, #0]
 800182a:	e7d7      	b.n	80017dc <_free_r+0x24>
 800182c:	d902      	bls.n	8001834 <_free_r+0x7c>
 800182e:	230c      	movs	r3, #12
 8001830:	602b      	str	r3, [r5, #0]
 8001832:	e7d3      	b.n	80017dc <_free_r+0x24>
 8001834:	6820      	ldr	r0, [r4, #0]
 8001836:	1821      	adds	r1, r4, r0
 8001838:	428a      	cmp	r2, r1
 800183a:	bf04      	itt	eq
 800183c:	6811      	ldreq	r1, [r2, #0]
 800183e:	6852      	ldreq	r2, [r2, #4]
 8001840:	6062      	str	r2, [r4, #4]
 8001842:	bf04      	itt	eq
 8001844:	1809      	addeq	r1, r1, r0
 8001846:	6021      	streq	r1, [r4, #0]
 8001848:	605c      	str	r4, [r3, #4]
 800184a:	e7c7      	b.n	80017dc <_free_r+0x24>
 800184c:	bd38      	pop	{r3, r4, r5, pc}
 800184e:	bf00      	nop
 8001850:	20000088 	.word	0x20000088

08001854 <_malloc_r>:
 8001854:	b570      	push	{r4, r5, r6, lr}
 8001856:	1ccd      	adds	r5, r1, #3
 8001858:	f025 0503 	bic.w	r5, r5, #3
 800185c:	3508      	adds	r5, #8
 800185e:	2d0c      	cmp	r5, #12
 8001860:	bf38      	it	cc
 8001862:	250c      	movcc	r5, #12
 8001864:	2d00      	cmp	r5, #0
 8001866:	4606      	mov	r6, r0
 8001868:	db01      	blt.n	800186e <_malloc_r+0x1a>
 800186a:	42a9      	cmp	r1, r5
 800186c:	d903      	bls.n	8001876 <_malloc_r+0x22>
 800186e:	230c      	movs	r3, #12
 8001870:	6033      	str	r3, [r6, #0]
 8001872:	2000      	movs	r0, #0
 8001874:	bd70      	pop	{r4, r5, r6, pc}
 8001876:	f000 fbcb 	bl	8002010 <__malloc_lock>
 800187a:	4a23      	ldr	r2, [pc, #140]	; (8001908 <_malloc_r+0xb4>)
 800187c:	6814      	ldr	r4, [r2, #0]
 800187e:	4621      	mov	r1, r4
 8001880:	b991      	cbnz	r1, 80018a8 <_malloc_r+0x54>
 8001882:	4c22      	ldr	r4, [pc, #136]	; (800190c <_malloc_r+0xb8>)
 8001884:	6823      	ldr	r3, [r4, #0]
 8001886:	b91b      	cbnz	r3, 8001890 <_malloc_r+0x3c>
 8001888:	4630      	mov	r0, r6
 800188a:	f000 fb17 	bl	8001ebc <_sbrk_r>
 800188e:	6020      	str	r0, [r4, #0]
 8001890:	4629      	mov	r1, r5
 8001892:	4630      	mov	r0, r6
 8001894:	f000 fb12 	bl	8001ebc <_sbrk_r>
 8001898:	1c43      	adds	r3, r0, #1
 800189a:	d126      	bne.n	80018ea <_malloc_r+0x96>
 800189c:	230c      	movs	r3, #12
 800189e:	6033      	str	r3, [r6, #0]
 80018a0:	4630      	mov	r0, r6
 80018a2:	f000 fbb6 	bl	8002012 <__malloc_unlock>
 80018a6:	e7e4      	b.n	8001872 <_malloc_r+0x1e>
 80018a8:	680b      	ldr	r3, [r1, #0]
 80018aa:	1b5b      	subs	r3, r3, r5
 80018ac:	d41a      	bmi.n	80018e4 <_malloc_r+0x90>
 80018ae:	2b0b      	cmp	r3, #11
 80018b0:	d90f      	bls.n	80018d2 <_malloc_r+0x7e>
 80018b2:	600b      	str	r3, [r1, #0]
 80018b4:	50cd      	str	r5, [r1, r3]
 80018b6:	18cc      	adds	r4, r1, r3
 80018b8:	4630      	mov	r0, r6
 80018ba:	f000 fbaa 	bl	8002012 <__malloc_unlock>
 80018be:	f104 000b 	add.w	r0, r4, #11
 80018c2:	1d23      	adds	r3, r4, #4
 80018c4:	f020 0007 	bic.w	r0, r0, #7
 80018c8:	1ac3      	subs	r3, r0, r3
 80018ca:	d01b      	beq.n	8001904 <_malloc_r+0xb0>
 80018cc:	425a      	negs	r2, r3
 80018ce:	50e2      	str	r2, [r4, r3]
 80018d0:	bd70      	pop	{r4, r5, r6, pc}
 80018d2:	428c      	cmp	r4, r1
 80018d4:	bf0d      	iteet	eq
 80018d6:	6863      	ldreq	r3, [r4, #4]
 80018d8:	684b      	ldrne	r3, [r1, #4]
 80018da:	6063      	strne	r3, [r4, #4]
 80018dc:	6013      	streq	r3, [r2, #0]
 80018de:	bf18      	it	ne
 80018e0:	460c      	movne	r4, r1
 80018e2:	e7e9      	b.n	80018b8 <_malloc_r+0x64>
 80018e4:	460c      	mov	r4, r1
 80018e6:	6849      	ldr	r1, [r1, #4]
 80018e8:	e7ca      	b.n	8001880 <_malloc_r+0x2c>
 80018ea:	1cc4      	adds	r4, r0, #3
 80018ec:	f024 0403 	bic.w	r4, r4, #3
 80018f0:	42a0      	cmp	r0, r4
 80018f2:	d005      	beq.n	8001900 <_malloc_r+0xac>
 80018f4:	1a21      	subs	r1, r4, r0
 80018f6:	4630      	mov	r0, r6
 80018f8:	f000 fae0 	bl	8001ebc <_sbrk_r>
 80018fc:	3001      	adds	r0, #1
 80018fe:	d0cd      	beq.n	800189c <_malloc_r+0x48>
 8001900:	6025      	str	r5, [r4, #0]
 8001902:	e7d9      	b.n	80018b8 <_malloc_r+0x64>
 8001904:	bd70      	pop	{r4, r5, r6, pc}
 8001906:	bf00      	nop
 8001908:	20000088 	.word	0x20000088
 800190c:	2000008c 	.word	0x2000008c

08001910 <__sfputc_r>:
 8001910:	6893      	ldr	r3, [r2, #8]
 8001912:	3b01      	subs	r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	b410      	push	{r4}
 8001918:	6093      	str	r3, [r2, #8]
 800191a:	da09      	bge.n	8001930 <__sfputc_r+0x20>
 800191c:	6994      	ldr	r4, [r2, #24]
 800191e:	42a3      	cmp	r3, r4
 8001920:	db02      	blt.n	8001928 <__sfputc_r+0x18>
 8001922:	b2cb      	uxtb	r3, r1
 8001924:	2b0a      	cmp	r3, #10
 8001926:	d103      	bne.n	8001930 <__sfputc_r+0x20>
 8001928:	f85d 4b04 	ldr.w	r4, [sp], #4
 800192c:	f7ff bc9c 	b.w	8001268 <__swbuf_r>
 8001930:	6813      	ldr	r3, [r2, #0]
 8001932:	1c58      	adds	r0, r3, #1
 8001934:	6010      	str	r0, [r2, #0]
 8001936:	7019      	strb	r1, [r3, #0]
 8001938:	b2c8      	uxtb	r0, r1
 800193a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800193e:	4770      	bx	lr

08001940 <__sfputs_r>:
 8001940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001942:	4606      	mov	r6, r0
 8001944:	460f      	mov	r7, r1
 8001946:	4614      	mov	r4, r2
 8001948:	18d5      	adds	r5, r2, r3
 800194a:	42ac      	cmp	r4, r5
 800194c:	d101      	bne.n	8001952 <__sfputs_r+0x12>
 800194e:	2000      	movs	r0, #0
 8001950:	e007      	b.n	8001962 <__sfputs_r+0x22>
 8001952:	463a      	mov	r2, r7
 8001954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001958:	4630      	mov	r0, r6
 800195a:	f7ff ffd9 	bl	8001910 <__sfputc_r>
 800195e:	1c43      	adds	r3, r0, #1
 8001960:	d1f3      	bne.n	800194a <__sfputs_r+0xa>
 8001962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001964 <_vfiprintf_r>:
 8001964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001968:	b09d      	sub	sp, #116	; 0x74
 800196a:	460c      	mov	r4, r1
 800196c:	4617      	mov	r7, r2
 800196e:	9303      	str	r3, [sp, #12]
 8001970:	4606      	mov	r6, r0
 8001972:	b118      	cbz	r0, 800197c <_vfiprintf_r+0x18>
 8001974:	6983      	ldr	r3, [r0, #24]
 8001976:	b90b      	cbnz	r3, 800197c <_vfiprintf_r+0x18>
 8001978:	f7ff fe28 	bl	80015cc <__sinit>
 800197c:	4b7c      	ldr	r3, [pc, #496]	; (8001b70 <_vfiprintf_r+0x20c>)
 800197e:	429c      	cmp	r4, r3
 8001980:	d157      	bne.n	8001a32 <_vfiprintf_r+0xce>
 8001982:	6874      	ldr	r4, [r6, #4]
 8001984:	89a3      	ldrh	r3, [r4, #12]
 8001986:	0718      	lsls	r0, r3, #28
 8001988:	d55d      	bpl.n	8001a46 <_vfiprintf_r+0xe2>
 800198a:	6923      	ldr	r3, [r4, #16]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d05a      	beq.n	8001a46 <_vfiprintf_r+0xe2>
 8001990:	2300      	movs	r3, #0
 8001992:	9309      	str	r3, [sp, #36]	; 0x24
 8001994:	2320      	movs	r3, #32
 8001996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800199a:	2330      	movs	r3, #48	; 0x30
 800199c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80019a0:	f04f 0b01 	mov.w	fp, #1
 80019a4:	46b8      	mov	r8, r7
 80019a6:	4645      	mov	r5, r8
 80019a8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d155      	bne.n	8001a5c <_vfiprintf_r+0xf8>
 80019b0:	ebb8 0a07 	subs.w	sl, r8, r7
 80019b4:	d00b      	beq.n	80019ce <_vfiprintf_r+0x6a>
 80019b6:	4653      	mov	r3, sl
 80019b8:	463a      	mov	r2, r7
 80019ba:	4621      	mov	r1, r4
 80019bc:	4630      	mov	r0, r6
 80019be:	f7ff ffbf 	bl	8001940 <__sfputs_r>
 80019c2:	3001      	adds	r0, #1
 80019c4:	f000 80c4 	beq.w	8001b50 <_vfiprintf_r+0x1ec>
 80019c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019ca:	4453      	add	r3, sl
 80019cc:	9309      	str	r3, [sp, #36]	; 0x24
 80019ce:	f898 3000 	ldrb.w	r3, [r8]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 80bc 	beq.w	8001b50 <_vfiprintf_r+0x1ec>
 80019d8:	2300      	movs	r3, #0
 80019da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019de:	9304      	str	r3, [sp, #16]
 80019e0:	9307      	str	r3, [sp, #28]
 80019e2:	9205      	str	r2, [sp, #20]
 80019e4:	9306      	str	r3, [sp, #24]
 80019e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80019ea:	931a      	str	r3, [sp, #104]	; 0x68
 80019ec:	2205      	movs	r2, #5
 80019ee:	7829      	ldrb	r1, [r5, #0]
 80019f0:	4860      	ldr	r0, [pc, #384]	; (8001b74 <_vfiprintf_r+0x210>)
 80019f2:	f7fe fbf5 	bl	80001e0 <memchr>
 80019f6:	f105 0801 	add.w	r8, r5, #1
 80019fa:	9b04      	ldr	r3, [sp, #16]
 80019fc:	2800      	cmp	r0, #0
 80019fe:	d131      	bne.n	8001a64 <_vfiprintf_r+0x100>
 8001a00:	06d9      	lsls	r1, r3, #27
 8001a02:	bf44      	itt	mi
 8001a04:	2220      	movmi	r2, #32
 8001a06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001a0a:	071a      	lsls	r2, r3, #28
 8001a0c:	bf44      	itt	mi
 8001a0e:	222b      	movmi	r2, #43	; 0x2b
 8001a10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001a14:	782a      	ldrb	r2, [r5, #0]
 8001a16:	2a2a      	cmp	r2, #42	; 0x2a
 8001a18:	d02c      	beq.n	8001a74 <_vfiprintf_r+0x110>
 8001a1a:	9a07      	ldr	r2, [sp, #28]
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	200a      	movs	r0, #10
 8001a20:	46a8      	mov	r8, r5
 8001a22:	3501      	adds	r5, #1
 8001a24:	f898 3000 	ldrb.w	r3, [r8]
 8001a28:	3b30      	subs	r3, #48	; 0x30
 8001a2a:	2b09      	cmp	r3, #9
 8001a2c:	d96d      	bls.n	8001b0a <_vfiprintf_r+0x1a6>
 8001a2e:	b371      	cbz	r1, 8001a8e <_vfiprintf_r+0x12a>
 8001a30:	e026      	b.n	8001a80 <_vfiprintf_r+0x11c>
 8001a32:	4b51      	ldr	r3, [pc, #324]	; (8001b78 <_vfiprintf_r+0x214>)
 8001a34:	429c      	cmp	r4, r3
 8001a36:	d101      	bne.n	8001a3c <_vfiprintf_r+0xd8>
 8001a38:	68b4      	ldr	r4, [r6, #8]
 8001a3a:	e7a3      	b.n	8001984 <_vfiprintf_r+0x20>
 8001a3c:	4b4f      	ldr	r3, [pc, #316]	; (8001b7c <_vfiprintf_r+0x218>)
 8001a3e:	429c      	cmp	r4, r3
 8001a40:	bf08      	it	eq
 8001a42:	68f4      	ldreq	r4, [r6, #12]
 8001a44:	e79e      	b.n	8001984 <_vfiprintf_r+0x20>
 8001a46:	4621      	mov	r1, r4
 8001a48:	4630      	mov	r0, r6
 8001a4a:	f7ff fc5f 	bl	800130c <__swsetup_r>
 8001a4e:	2800      	cmp	r0, #0
 8001a50:	d09e      	beq.n	8001990 <_vfiprintf_r+0x2c>
 8001a52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a56:	b01d      	add	sp, #116	; 0x74
 8001a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a5c:	2b25      	cmp	r3, #37	; 0x25
 8001a5e:	d0a7      	beq.n	80019b0 <_vfiprintf_r+0x4c>
 8001a60:	46a8      	mov	r8, r5
 8001a62:	e7a0      	b.n	80019a6 <_vfiprintf_r+0x42>
 8001a64:	4a43      	ldr	r2, [pc, #268]	; (8001b74 <_vfiprintf_r+0x210>)
 8001a66:	1a80      	subs	r0, r0, r2
 8001a68:	fa0b f000 	lsl.w	r0, fp, r0
 8001a6c:	4318      	orrs	r0, r3
 8001a6e:	9004      	str	r0, [sp, #16]
 8001a70:	4645      	mov	r5, r8
 8001a72:	e7bb      	b.n	80019ec <_vfiprintf_r+0x88>
 8001a74:	9a03      	ldr	r2, [sp, #12]
 8001a76:	1d11      	adds	r1, r2, #4
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	9103      	str	r1, [sp, #12]
 8001a7c:	2a00      	cmp	r2, #0
 8001a7e:	db01      	blt.n	8001a84 <_vfiprintf_r+0x120>
 8001a80:	9207      	str	r2, [sp, #28]
 8001a82:	e004      	b.n	8001a8e <_vfiprintf_r+0x12a>
 8001a84:	4252      	negs	r2, r2
 8001a86:	f043 0302 	orr.w	r3, r3, #2
 8001a8a:	9207      	str	r2, [sp, #28]
 8001a8c:	9304      	str	r3, [sp, #16]
 8001a8e:	f898 3000 	ldrb.w	r3, [r8]
 8001a92:	2b2e      	cmp	r3, #46	; 0x2e
 8001a94:	d110      	bne.n	8001ab8 <_vfiprintf_r+0x154>
 8001a96:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001a9a:	2b2a      	cmp	r3, #42	; 0x2a
 8001a9c:	f108 0101 	add.w	r1, r8, #1
 8001aa0:	d137      	bne.n	8001b12 <_vfiprintf_r+0x1ae>
 8001aa2:	9b03      	ldr	r3, [sp, #12]
 8001aa4:	1d1a      	adds	r2, r3, #4
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	9203      	str	r2, [sp, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	bfb8      	it	lt
 8001aae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001ab2:	f108 0802 	add.w	r8, r8, #2
 8001ab6:	9305      	str	r3, [sp, #20]
 8001ab8:	4d31      	ldr	r5, [pc, #196]	; (8001b80 <_vfiprintf_r+0x21c>)
 8001aba:	f898 1000 	ldrb.w	r1, [r8]
 8001abe:	2203      	movs	r2, #3
 8001ac0:	4628      	mov	r0, r5
 8001ac2:	f7fe fb8d 	bl	80001e0 <memchr>
 8001ac6:	b140      	cbz	r0, 8001ada <_vfiprintf_r+0x176>
 8001ac8:	2340      	movs	r3, #64	; 0x40
 8001aca:	1b40      	subs	r0, r0, r5
 8001acc:	fa03 f000 	lsl.w	r0, r3, r0
 8001ad0:	9b04      	ldr	r3, [sp, #16]
 8001ad2:	4303      	orrs	r3, r0
 8001ad4:	9304      	str	r3, [sp, #16]
 8001ad6:	f108 0801 	add.w	r8, r8, #1
 8001ada:	f898 1000 	ldrb.w	r1, [r8]
 8001ade:	4829      	ldr	r0, [pc, #164]	; (8001b84 <_vfiprintf_r+0x220>)
 8001ae0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001ae4:	2206      	movs	r2, #6
 8001ae6:	f108 0701 	add.w	r7, r8, #1
 8001aea:	f7fe fb79 	bl	80001e0 <memchr>
 8001aee:	2800      	cmp	r0, #0
 8001af0:	d034      	beq.n	8001b5c <_vfiprintf_r+0x1f8>
 8001af2:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <_vfiprintf_r+0x224>)
 8001af4:	bb03      	cbnz	r3, 8001b38 <_vfiprintf_r+0x1d4>
 8001af6:	9b03      	ldr	r3, [sp, #12]
 8001af8:	3307      	adds	r3, #7
 8001afa:	f023 0307 	bic.w	r3, r3, #7
 8001afe:	3308      	adds	r3, #8
 8001b00:	9303      	str	r3, [sp, #12]
 8001b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b04:	444b      	add	r3, r9
 8001b06:	9309      	str	r3, [sp, #36]	; 0x24
 8001b08:	e74c      	b.n	80019a4 <_vfiprintf_r+0x40>
 8001b0a:	fb00 3202 	mla	r2, r0, r2, r3
 8001b0e:	2101      	movs	r1, #1
 8001b10:	e786      	b.n	8001a20 <_vfiprintf_r+0xbc>
 8001b12:	2300      	movs	r3, #0
 8001b14:	9305      	str	r3, [sp, #20]
 8001b16:	4618      	mov	r0, r3
 8001b18:	250a      	movs	r5, #10
 8001b1a:	4688      	mov	r8, r1
 8001b1c:	3101      	adds	r1, #1
 8001b1e:	f898 2000 	ldrb.w	r2, [r8]
 8001b22:	3a30      	subs	r2, #48	; 0x30
 8001b24:	2a09      	cmp	r2, #9
 8001b26:	d903      	bls.n	8001b30 <_vfiprintf_r+0x1cc>
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0c5      	beq.n	8001ab8 <_vfiprintf_r+0x154>
 8001b2c:	9005      	str	r0, [sp, #20]
 8001b2e:	e7c3      	b.n	8001ab8 <_vfiprintf_r+0x154>
 8001b30:	fb05 2000 	mla	r0, r5, r0, r2
 8001b34:	2301      	movs	r3, #1
 8001b36:	e7f0      	b.n	8001b1a <_vfiprintf_r+0x1b6>
 8001b38:	ab03      	add	r3, sp, #12
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	4622      	mov	r2, r4
 8001b3e:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <_vfiprintf_r+0x228>)
 8001b40:	a904      	add	r1, sp, #16
 8001b42:	4630      	mov	r0, r6
 8001b44:	f3af 8000 	nop.w
 8001b48:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001b4c:	4681      	mov	r9, r0
 8001b4e:	d1d8      	bne.n	8001b02 <_vfiprintf_r+0x19e>
 8001b50:	89a3      	ldrh	r3, [r4, #12]
 8001b52:	065b      	lsls	r3, r3, #25
 8001b54:	f53f af7d 	bmi.w	8001a52 <_vfiprintf_r+0xee>
 8001b58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b5a:	e77c      	b.n	8001a56 <_vfiprintf_r+0xf2>
 8001b5c:	ab03      	add	r3, sp, #12
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	4622      	mov	r2, r4
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <_vfiprintf_r+0x228>)
 8001b64:	a904      	add	r1, sp, #16
 8001b66:	4630      	mov	r0, r6
 8001b68:	f000 f888 	bl	8001c7c <_printf_i>
 8001b6c:	e7ec      	b.n	8001b48 <_vfiprintf_r+0x1e4>
 8001b6e:	bf00      	nop
 8001b70:	08002148 	.word	0x08002148
 8001b74:	0800218c 	.word	0x0800218c
 8001b78:	08002168 	.word	0x08002168
 8001b7c:	08002128 	.word	0x08002128
 8001b80:	08002192 	.word	0x08002192
 8001b84:	08002196 	.word	0x08002196
 8001b88:	00000000 	.word	0x00000000
 8001b8c:	08001941 	.word	0x08001941

08001b90 <_printf_common>:
 8001b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b94:	4691      	mov	r9, r2
 8001b96:	461f      	mov	r7, r3
 8001b98:	688a      	ldr	r2, [r1, #8]
 8001b9a:	690b      	ldr	r3, [r1, #16]
 8001b9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	bfb8      	it	lt
 8001ba4:	4613      	movlt	r3, r2
 8001ba6:	f8c9 3000 	str.w	r3, [r9]
 8001baa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001bae:	4606      	mov	r6, r0
 8001bb0:	460c      	mov	r4, r1
 8001bb2:	b112      	cbz	r2, 8001bba <_printf_common+0x2a>
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	f8c9 3000 	str.w	r3, [r9]
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	0699      	lsls	r1, r3, #26
 8001bbe:	bf42      	ittt	mi
 8001bc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001bc4:	3302      	addmi	r3, #2
 8001bc6:	f8c9 3000 	strmi.w	r3, [r9]
 8001bca:	6825      	ldr	r5, [r4, #0]
 8001bcc:	f015 0506 	ands.w	r5, r5, #6
 8001bd0:	d107      	bne.n	8001be2 <_printf_common+0x52>
 8001bd2:	f104 0a19 	add.w	sl, r4, #25
 8001bd6:	68e3      	ldr	r3, [r4, #12]
 8001bd8:	f8d9 2000 	ldr.w	r2, [r9]
 8001bdc:	1a9b      	subs	r3, r3, r2
 8001bde:	429d      	cmp	r5, r3
 8001be0:	db29      	blt.n	8001c36 <_printf_common+0xa6>
 8001be2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001be6:	6822      	ldr	r2, [r4, #0]
 8001be8:	3300      	adds	r3, #0
 8001bea:	bf18      	it	ne
 8001bec:	2301      	movne	r3, #1
 8001bee:	0692      	lsls	r2, r2, #26
 8001bf0:	d42e      	bmi.n	8001c50 <_printf_common+0xc0>
 8001bf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001bf6:	4639      	mov	r1, r7
 8001bf8:	4630      	mov	r0, r6
 8001bfa:	47c0      	blx	r8
 8001bfc:	3001      	adds	r0, #1
 8001bfe:	d021      	beq.n	8001c44 <_printf_common+0xb4>
 8001c00:	6823      	ldr	r3, [r4, #0]
 8001c02:	68e5      	ldr	r5, [r4, #12]
 8001c04:	f8d9 2000 	ldr.w	r2, [r9]
 8001c08:	f003 0306 	and.w	r3, r3, #6
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	bf08      	it	eq
 8001c10:	1aad      	subeq	r5, r5, r2
 8001c12:	68a3      	ldr	r3, [r4, #8]
 8001c14:	6922      	ldr	r2, [r4, #16]
 8001c16:	bf0c      	ite	eq
 8001c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c1c:	2500      	movne	r5, #0
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	bfc4      	itt	gt
 8001c22:	1a9b      	subgt	r3, r3, r2
 8001c24:	18ed      	addgt	r5, r5, r3
 8001c26:	f04f 0900 	mov.w	r9, #0
 8001c2a:	341a      	adds	r4, #26
 8001c2c:	454d      	cmp	r5, r9
 8001c2e:	d11b      	bne.n	8001c68 <_printf_common+0xd8>
 8001c30:	2000      	movs	r0, #0
 8001c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c36:	2301      	movs	r3, #1
 8001c38:	4652      	mov	r2, sl
 8001c3a:	4639      	mov	r1, r7
 8001c3c:	4630      	mov	r0, r6
 8001c3e:	47c0      	blx	r8
 8001c40:	3001      	adds	r0, #1
 8001c42:	d103      	bne.n	8001c4c <_printf_common+0xbc>
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c4c:	3501      	adds	r5, #1
 8001c4e:	e7c2      	b.n	8001bd6 <_printf_common+0x46>
 8001c50:	18e1      	adds	r1, r4, r3
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	2030      	movs	r0, #48	; 0x30
 8001c56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c5a:	4422      	add	r2, r4
 8001c5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c64:	3302      	adds	r3, #2
 8001c66:	e7c4      	b.n	8001bf2 <_printf_common+0x62>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	4622      	mov	r2, r4
 8001c6c:	4639      	mov	r1, r7
 8001c6e:	4630      	mov	r0, r6
 8001c70:	47c0      	blx	r8
 8001c72:	3001      	adds	r0, #1
 8001c74:	d0e6      	beq.n	8001c44 <_printf_common+0xb4>
 8001c76:	f109 0901 	add.w	r9, r9, #1
 8001c7a:	e7d7      	b.n	8001c2c <_printf_common+0x9c>

08001c7c <_printf_i>:
 8001c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c80:	4617      	mov	r7, r2
 8001c82:	7e0a      	ldrb	r2, [r1, #24]
 8001c84:	b085      	sub	sp, #20
 8001c86:	2a6e      	cmp	r2, #110	; 0x6e
 8001c88:	4698      	mov	r8, r3
 8001c8a:	4606      	mov	r6, r0
 8001c8c:	460c      	mov	r4, r1
 8001c8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001c90:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001c94:	f000 80bc 	beq.w	8001e10 <_printf_i+0x194>
 8001c98:	d81a      	bhi.n	8001cd0 <_printf_i+0x54>
 8001c9a:	2a63      	cmp	r2, #99	; 0x63
 8001c9c:	d02e      	beq.n	8001cfc <_printf_i+0x80>
 8001c9e:	d80a      	bhi.n	8001cb6 <_printf_i+0x3a>
 8001ca0:	2a00      	cmp	r2, #0
 8001ca2:	f000 80c8 	beq.w	8001e36 <_printf_i+0x1ba>
 8001ca6:	2a58      	cmp	r2, #88	; 0x58
 8001ca8:	f000 808a 	beq.w	8001dc0 <_printf_i+0x144>
 8001cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cb0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001cb4:	e02a      	b.n	8001d0c <_printf_i+0x90>
 8001cb6:	2a64      	cmp	r2, #100	; 0x64
 8001cb8:	d001      	beq.n	8001cbe <_printf_i+0x42>
 8001cba:	2a69      	cmp	r2, #105	; 0x69
 8001cbc:	d1f6      	bne.n	8001cac <_printf_i+0x30>
 8001cbe:	6821      	ldr	r1, [r4, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001cc6:	d023      	beq.n	8001d10 <_printf_i+0x94>
 8001cc8:	1d11      	adds	r1, r2, #4
 8001cca:	6019      	str	r1, [r3, #0]
 8001ccc:	6813      	ldr	r3, [r2, #0]
 8001cce:	e027      	b.n	8001d20 <_printf_i+0xa4>
 8001cd0:	2a73      	cmp	r2, #115	; 0x73
 8001cd2:	f000 80b4 	beq.w	8001e3e <_printf_i+0x1c2>
 8001cd6:	d808      	bhi.n	8001cea <_printf_i+0x6e>
 8001cd8:	2a6f      	cmp	r2, #111	; 0x6f
 8001cda:	d02a      	beq.n	8001d32 <_printf_i+0xb6>
 8001cdc:	2a70      	cmp	r2, #112	; 0x70
 8001cde:	d1e5      	bne.n	8001cac <_printf_i+0x30>
 8001ce0:	680a      	ldr	r2, [r1, #0]
 8001ce2:	f042 0220 	orr.w	r2, r2, #32
 8001ce6:	600a      	str	r2, [r1, #0]
 8001ce8:	e003      	b.n	8001cf2 <_printf_i+0x76>
 8001cea:	2a75      	cmp	r2, #117	; 0x75
 8001cec:	d021      	beq.n	8001d32 <_printf_i+0xb6>
 8001cee:	2a78      	cmp	r2, #120	; 0x78
 8001cf0:	d1dc      	bne.n	8001cac <_printf_i+0x30>
 8001cf2:	2278      	movs	r2, #120	; 0x78
 8001cf4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001cf8:	496e      	ldr	r1, [pc, #440]	; (8001eb4 <_printf_i+0x238>)
 8001cfa:	e064      	b.n	8001dc6 <_printf_i+0x14a>
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001d02:	1d11      	adds	r1, r2, #4
 8001d04:	6019      	str	r1, [r3, #0]
 8001d06:	6813      	ldr	r3, [r2, #0]
 8001d08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e0a3      	b.n	8001e58 <_printf_i+0x1dc>
 8001d10:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001d14:	f102 0104 	add.w	r1, r2, #4
 8001d18:	6019      	str	r1, [r3, #0]
 8001d1a:	d0d7      	beq.n	8001ccc <_printf_i+0x50>
 8001d1c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	da03      	bge.n	8001d2c <_printf_i+0xb0>
 8001d24:	222d      	movs	r2, #45	; 0x2d
 8001d26:	425b      	negs	r3, r3
 8001d28:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001d2c:	4962      	ldr	r1, [pc, #392]	; (8001eb8 <_printf_i+0x23c>)
 8001d2e:	220a      	movs	r2, #10
 8001d30:	e017      	b.n	8001d62 <_printf_i+0xe6>
 8001d32:	6820      	ldr	r0, [r4, #0]
 8001d34:	6819      	ldr	r1, [r3, #0]
 8001d36:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001d3a:	d003      	beq.n	8001d44 <_printf_i+0xc8>
 8001d3c:	1d08      	adds	r0, r1, #4
 8001d3e:	6018      	str	r0, [r3, #0]
 8001d40:	680b      	ldr	r3, [r1, #0]
 8001d42:	e006      	b.n	8001d52 <_printf_i+0xd6>
 8001d44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001d48:	f101 0004 	add.w	r0, r1, #4
 8001d4c:	6018      	str	r0, [r3, #0]
 8001d4e:	d0f7      	beq.n	8001d40 <_printf_i+0xc4>
 8001d50:	880b      	ldrh	r3, [r1, #0]
 8001d52:	4959      	ldr	r1, [pc, #356]	; (8001eb8 <_printf_i+0x23c>)
 8001d54:	2a6f      	cmp	r2, #111	; 0x6f
 8001d56:	bf14      	ite	ne
 8001d58:	220a      	movne	r2, #10
 8001d5a:	2208      	moveq	r2, #8
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001d62:	6865      	ldr	r5, [r4, #4]
 8001d64:	60a5      	str	r5, [r4, #8]
 8001d66:	2d00      	cmp	r5, #0
 8001d68:	f2c0 809c 	blt.w	8001ea4 <_printf_i+0x228>
 8001d6c:	6820      	ldr	r0, [r4, #0]
 8001d6e:	f020 0004 	bic.w	r0, r0, #4
 8001d72:	6020      	str	r0, [r4, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d13f      	bne.n	8001df8 <_printf_i+0x17c>
 8001d78:	2d00      	cmp	r5, #0
 8001d7a:	f040 8095 	bne.w	8001ea8 <_printf_i+0x22c>
 8001d7e:	4675      	mov	r5, lr
 8001d80:	2a08      	cmp	r2, #8
 8001d82:	d10b      	bne.n	8001d9c <_printf_i+0x120>
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	07da      	lsls	r2, r3, #31
 8001d88:	d508      	bpl.n	8001d9c <_printf_i+0x120>
 8001d8a:	6923      	ldr	r3, [r4, #16]
 8001d8c:	6862      	ldr	r2, [r4, #4]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	bfde      	ittt	le
 8001d92:	2330      	movle	r3, #48	; 0x30
 8001d94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001d98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001d9c:	ebae 0305 	sub.w	r3, lr, r5
 8001da0:	6123      	str	r3, [r4, #16]
 8001da2:	f8cd 8000 	str.w	r8, [sp]
 8001da6:	463b      	mov	r3, r7
 8001da8:	aa03      	add	r2, sp, #12
 8001daa:	4621      	mov	r1, r4
 8001dac:	4630      	mov	r0, r6
 8001dae:	f7ff feef 	bl	8001b90 <_printf_common>
 8001db2:	3001      	adds	r0, #1
 8001db4:	d155      	bne.n	8001e62 <_printf_i+0x1e6>
 8001db6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dba:	b005      	add	sp, #20
 8001dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001dc0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001dc4:	493c      	ldr	r1, [pc, #240]	; (8001eb8 <_printf_i+0x23c>)
 8001dc6:	6822      	ldr	r2, [r4, #0]
 8001dc8:	6818      	ldr	r0, [r3, #0]
 8001dca:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001dce:	f100 0504 	add.w	r5, r0, #4
 8001dd2:	601d      	str	r5, [r3, #0]
 8001dd4:	d001      	beq.n	8001dda <_printf_i+0x15e>
 8001dd6:	6803      	ldr	r3, [r0, #0]
 8001dd8:	e002      	b.n	8001de0 <_printf_i+0x164>
 8001dda:	0655      	lsls	r5, r2, #25
 8001ddc:	d5fb      	bpl.n	8001dd6 <_printf_i+0x15a>
 8001dde:	8803      	ldrh	r3, [r0, #0]
 8001de0:	07d0      	lsls	r0, r2, #31
 8001de2:	bf44      	itt	mi
 8001de4:	f042 0220 	orrmi.w	r2, r2, #32
 8001de8:	6022      	strmi	r2, [r4, #0]
 8001dea:	b91b      	cbnz	r3, 8001df4 <_printf_i+0x178>
 8001dec:	6822      	ldr	r2, [r4, #0]
 8001dee:	f022 0220 	bic.w	r2, r2, #32
 8001df2:	6022      	str	r2, [r4, #0]
 8001df4:	2210      	movs	r2, #16
 8001df6:	e7b1      	b.n	8001d5c <_printf_i+0xe0>
 8001df8:	4675      	mov	r5, lr
 8001dfa:	fbb3 f0f2 	udiv	r0, r3, r2
 8001dfe:	fb02 3310 	mls	r3, r2, r0, r3
 8001e02:	5ccb      	ldrb	r3, [r1, r3]
 8001e04:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2800      	cmp	r0, #0
 8001e0c:	d1f5      	bne.n	8001dfa <_printf_i+0x17e>
 8001e0e:	e7b7      	b.n	8001d80 <_printf_i+0x104>
 8001e10:	6808      	ldr	r0, [r1, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	6949      	ldr	r1, [r1, #20]
 8001e16:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001e1a:	d004      	beq.n	8001e26 <_printf_i+0x1aa>
 8001e1c:	1d10      	adds	r0, r2, #4
 8001e1e:	6018      	str	r0, [r3, #0]
 8001e20:	6813      	ldr	r3, [r2, #0]
 8001e22:	6019      	str	r1, [r3, #0]
 8001e24:	e007      	b.n	8001e36 <_printf_i+0x1ba>
 8001e26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001e2a:	f102 0004 	add.w	r0, r2, #4
 8001e2e:	6018      	str	r0, [r3, #0]
 8001e30:	6813      	ldr	r3, [r2, #0]
 8001e32:	d0f6      	beq.n	8001e22 <_printf_i+0x1a6>
 8001e34:	8019      	strh	r1, [r3, #0]
 8001e36:	2300      	movs	r3, #0
 8001e38:	6123      	str	r3, [r4, #16]
 8001e3a:	4675      	mov	r5, lr
 8001e3c:	e7b1      	b.n	8001da2 <_printf_i+0x126>
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	1d11      	adds	r1, r2, #4
 8001e42:	6019      	str	r1, [r3, #0]
 8001e44:	6815      	ldr	r5, [r2, #0]
 8001e46:	6862      	ldr	r2, [r4, #4]
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4628      	mov	r0, r5
 8001e4c:	f7fe f9c8 	bl	80001e0 <memchr>
 8001e50:	b108      	cbz	r0, 8001e56 <_printf_i+0x1da>
 8001e52:	1b40      	subs	r0, r0, r5
 8001e54:	6060      	str	r0, [r4, #4]
 8001e56:	6863      	ldr	r3, [r4, #4]
 8001e58:	6123      	str	r3, [r4, #16]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e60:	e79f      	b.n	8001da2 <_printf_i+0x126>
 8001e62:	6923      	ldr	r3, [r4, #16]
 8001e64:	462a      	mov	r2, r5
 8001e66:	4639      	mov	r1, r7
 8001e68:	4630      	mov	r0, r6
 8001e6a:	47c0      	blx	r8
 8001e6c:	3001      	adds	r0, #1
 8001e6e:	d0a2      	beq.n	8001db6 <_printf_i+0x13a>
 8001e70:	6823      	ldr	r3, [r4, #0]
 8001e72:	079b      	lsls	r3, r3, #30
 8001e74:	d507      	bpl.n	8001e86 <_printf_i+0x20a>
 8001e76:	2500      	movs	r5, #0
 8001e78:	f104 0919 	add.w	r9, r4, #25
 8001e7c:	68e3      	ldr	r3, [r4, #12]
 8001e7e:	9a03      	ldr	r2, [sp, #12]
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	429d      	cmp	r5, r3
 8001e84:	db05      	blt.n	8001e92 <_printf_i+0x216>
 8001e86:	68e0      	ldr	r0, [r4, #12]
 8001e88:	9b03      	ldr	r3, [sp, #12]
 8001e8a:	4298      	cmp	r0, r3
 8001e8c:	bfb8      	it	lt
 8001e8e:	4618      	movlt	r0, r3
 8001e90:	e793      	b.n	8001dba <_printf_i+0x13e>
 8001e92:	2301      	movs	r3, #1
 8001e94:	464a      	mov	r2, r9
 8001e96:	4639      	mov	r1, r7
 8001e98:	4630      	mov	r0, r6
 8001e9a:	47c0      	blx	r8
 8001e9c:	3001      	adds	r0, #1
 8001e9e:	d08a      	beq.n	8001db6 <_printf_i+0x13a>
 8001ea0:	3501      	adds	r5, #1
 8001ea2:	e7eb      	b.n	8001e7c <_printf_i+0x200>
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1a7      	bne.n	8001df8 <_printf_i+0x17c>
 8001ea8:	780b      	ldrb	r3, [r1, #0]
 8001eaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001eae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001eb2:	e765      	b.n	8001d80 <_printf_i+0x104>
 8001eb4:	080021ae 	.word	0x080021ae
 8001eb8:	0800219d 	.word	0x0800219d

08001ebc <_sbrk_r>:
 8001ebc:	b538      	push	{r3, r4, r5, lr}
 8001ebe:	4c06      	ldr	r4, [pc, #24]	; (8001ed8 <_sbrk_r+0x1c>)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	4605      	mov	r5, r0
 8001ec4:	4608      	mov	r0, r1
 8001ec6:	6023      	str	r3, [r4, #0]
 8001ec8:	f7ff f852 	bl	8000f70 <_sbrk>
 8001ecc:	1c43      	adds	r3, r0, #1
 8001ece:	d102      	bne.n	8001ed6 <_sbrk_r+0x1a>
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	b103      	cbz	r3, 8001ed6 <_sbrk_r+0x1a>
 8001ed4:	602b      	str	r3, [r5, #0]
 8001ed6:	bd38      	pop	{r3, r4, r5, pc}
 8001ed8:	20000090 	.word	0x20000090

08001edc <__sread>:
 8001edc:	b510      	push	{r4, lr}
 8001ede:	460c      	mov	r4, r1
 8001ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ee4:	f000 f896 	bl	8002014 <_read_r>
 8001ee8:	2800      	cmp	r0, #0
 8001eea:	bfab      	itete	ge
 8001eec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001eee:	89a3      	ldrhlt	r3, [r4, #12]
 8001ef0:	181b      	addge	r3, r3, r0
 8001ef2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001ef6:	bfac      	ite	ge
 8001ef8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001efa:	81a3      	strhlt	r3, [r4, #12]
 8001efc:	bd10      	pop	{r4, pc}

08001efe <__swrite>:
 8001efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f02:	461f      	mov	r7, r3
 8001f04:	898b      	ldrh	r3, [r1, #12]
 8001f06:	05db      	lsls	r3, r3, #23
 8001f08:	4605      	mov	r5, r0
 8001f0a:	460c      	mov	r4, r1
 8001f0c:	4616      	mov	r6, r2
 8001f0e:	d505      	bpl.n	8001f1c <__swrite+0x1e>
 8001f10:	2302      	movs	r3, #2
 8001f12:	2200      	movs	r2, #0
 8001f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f18:	f000 f868 	bl	8001fec <_lseek_r>
 8001f1c:	89a3      	ldrh	r3, [r4, #12]
 8001f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f26:	81a3      	strh	r3, [r4, #12]
 8001f28:	4632      	mov	r2, r6
 8001f2a:	463b      	mov	r3, r7
 8001f2c:	4628      	mov	r0, r5
 8001f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f32:	f000 b817 	b.w	8001f64 <_write_r>

08001f36 <__sseek>:
 8001f36:	b510      	push	{r4, lr}
 8001f38:	460c      	mov	r4, r1
 8001f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f3e:	f000 f855 	bl	8001fec <_lseek_r>
 8001f42:	1c43      	adds	r3, r0, #1
 8001f44:	89a3      	ldrh	r3, [r4, #12]
 8001f46:	bf15      	itete	ne
 8001f48:	6560      	strne	r0, [r4, #84]	; 0x54
 8001f4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001f4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001f52:	81a3      	strheq	r3, [r4, #12]
 8001f54:	bf18      	it	ne
 8001f56:	81a3      	strhne	r3, [r4, #12]
 8001f58:	bd10      	pop	{r4, pc}

08001f5a <__sclose>:
 8001f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f5e:	f000 b813 	b.w	8001f88 <_close_r>
	...

08001f64 <_write_r>:
 8001f64:	b538      	push	{r3, r4, r5, lr}
 8001f66:	4c07      	ldr	r4, [pc, #28]	; (8001f84 <_write_r+0x20>)
 8001f68:	4605      	mov	r5, r0
 8001f6a:	4608      	mov	r0, r1
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	2200      	movs	r2, #0
 8001f70:	6022      	str	r2, [r4, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	f7fe ffdd 	bl	8000f32 <_write>
 8001f78:	1c43      	adds	r3, r0, #1
 8001f7a:	d102      	bne.n	8001f82 <_write_r+0x1e>
 8001f7c:	6823      	ldr	r3, [r4, #0]
 8001f7e:	b103      	cbz	r3, 8001f82 <_write_r+0x1e>
 8001f80:	602b      	str	r3, [r5, #0]
 8001f82:	bd38      	pop	{r3, r4, r5, pc}
 8001f84:	20000090 	.word	0x20000090

08001f88 <_close_r>:
 8001f88:	b538      	push	{r3, r4, r5, lr}
 8001f8a:	4c06      	ldr	r4, [pc, #24]	; (8001fa4 <_close_r+0x1c>)
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	4605      	mov	r5, r0
 8001f90:	4608      	mov	r0, r1
 8001f92:	6023      	str	r3, [r4, #0]
 8001f94:	f7ff f80c 	bl	8000fb0 <_close>
 8001f98:	1c43      	adds	r3, r0, #1
 8001f9a:	d102      	bne.n	8001fa2 <_close_r+0x1a>
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	b103      	cbz	r3, 8001fa2 <_close_r+0x1a>
 8001fa0:	602b      	str	r3, [r5, #0]
 8001fa2:	bd38      	pop	{r3, r4, r5, pc}
 8001fa4:	20000090 	.word	0x20000090

08001fa8 <_fstat_r>:
 8001fa8:	b538      	push	{r3, r4, r5, lr}
 8001faa:	4c07      	ldr	r4, [pc, #28]	; (8001fc8 <_fstat_r+0x20>)
 8001fac:	2300      	movs	r3, #0
 8001fae:	4605      	mov	r5, r0
 8001fb0:	4608      	mov	r0, r1
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	6023      	str	r3, [r4, #0]
 8001fb6:	f7ff f80d 	bl	8000fd4 <_fstat>
 8001fba:	1c43      	adds	r3, r0, #1
 8001fbc:	d102      	bne.n	8001fc4 <_fstat_r+0x1c>
 8001fbe:	6823      	ldr	r3, [r4, #0]
 8001fc0:	b103      	cbz	r3, 8001fc4 <_fstat_r+0x1c>
 8001fc2:	602b      	str	r3, [r5, #0]
 8001fc4:	bd38      	pop	{r3, r4, r5, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000090 	.word	0x20000090

08001fcc <_isatty_r>:
 8001fcc:	b538      	push	{r3, r4, r5, lr}
 8001fce:	4c06      	ldr	r4, [pc, #24]	; (8001fe8 <_isatty_r+0x1c>)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	4605      	mov	r5, r0
 8001fd4:	4608      	mov	r0, r1
 8001fd6:	6023      	str	r3, [r4, #0]
 8001fd8:	f7ff f80e 	bl	8000ff8 <_isatty>
 8001fdc:	1c43      	adds	r3, r0, #1
 8001fde:	d102      	bne.n	8001fe6 <_isatty_r+0x1a>
 8001fe0:	6823      	ldr	r3, [r4, #0]
 8001fe2:	b103      	cbz	r3, 8001fe6 <_isatty_r+0x1a>
 8001fe4:	602b      	str	r3, [r5, #0]
 8001fe6:	bd38      	pop	{r3, r4, r5, pc}
 8001fe8:	20000090 	.word	0x20000090

08001fec <_lseek_r>:
 8001fec:	b538      	push	{r3, r4, r5, lr}
 8001fee:	4c07      	ldr	r4, [pc, #28]	; (800200c <_lseek_r+0x20>)
 8001ff0:	4605      	mov	r5, r0
 8001ff2:	4608      	mov	r0, r1
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	6022      	str	r2, [r4, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f7ff f80c 	bl	8001018 <_lseek>
 8002000:	1c43      	adds	r3, r0, #1
 8002002:	d102      	bne.n	800200a <_lseek_r+0x1e>
 8002004:	6823      	ldr	r3, [r4, #0]
 8002006:	b103      	cbz	r3, 800200a <_lseek_r+0x1e>
 8002008:	602b      	str	r3, [r5, #0]
 800200a:	bd38      	pop	{r3, r4, r5, pc}
 800200c:	20000090 	.word	0x20000090

08002010 <__malloc_lock>:
 8002010:	4770      	bx	lr

08002012 <__malloc_unlock>:
 8002012:	4770      	bx	lr

08002014 <_read_r>:
 8002014:	b538      	push	{r3, r4, r5, lr}
 8002016:	4c07      	ldr	r4, [pc, #28]	; (8002034 <_read_r+0x20>)
 8002018:	4605      	mov	r5, r0
 800201a:	4608      	mov	r0, r1
 800201c:	4611      	mov	r1, r2
 800201e:	2200      	movs	r2, #0
 8002020:	6022      	str	r2, [r4, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	f7ff f80c 	bl	8001040 <_read>
 8002028:	1c43      	adds	r3, r0, #1
 800202a:	d102      	bne.n	8002032 <_read_r+0x1e>
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	b103      	cbz	r3, 8002032 <_read_r+0x1e>
 8002030:	602b      	str	r3, [r5, #0]
 8002032:	bd38      	pop	{r3, r4, r5, pc}
 8002034:	20000090 	.word	0x20000090

08002038 <_init>:
 8002038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800203a:	bf00      	nop
 800203c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800203e:	bc08      	pop	{r3}
 8002040:	469e      	mov	lr, r3
 8002042:	4770      	bx	lr

08002044 <_fini>:
 8002044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002046:	bf00      	nop
 8002048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800204a:	bc08      	pop	{r3}
 800204c:	469e      	mov	lr, r3
 800204e:	4770      	bx	lr
