
KPL_SS2_AM_TS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003100  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  080032a0  080032a0  000132a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003450  08003450  00013450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003454  08003454  00013454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08003458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000038  20000070  080034c8  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000a8  080034c8  000200a8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   000093e7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001777  00000000  00000000  00029487  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000980  00000000  00000000  0002ac00  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008b8  00000000  00000000  0002b580  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003918  00000000  00000000  0002be38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002b85  00000000  00000000  0002f750  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000322d5  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002dfc  00000000  00000000  00032354  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003288 	.word	0x08003288

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003288 	.word	0x08003288

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000280:	b480      	push	{r7}
 8000282:	b089      	sub	sp, #36	; 0x24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	681a      	ldr	r2, [r3, #0]
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	fa93 f3a3 	rbit	r3, r3
 800029a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800029c:	693b      	ldr	r3, [r7, #16]
 800029e:	fab3 f383 	clz	r3, r3
 80002a2:	005b      	lsls	r3, r3, #1
 80002a4:	2103      	movs	r1, #3
 80002a6:	fa01 f303 	lsl.w	r3, r1, r3
 80002aa:	43db      	mvns	r3, r3
 80002ac:	401a      	ands	r2, r3
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	fa93 f3a3 	rbit	r3, r3
 80002b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80002ba:	69bb      	ldr	r3, [r7, #24]
 80002bc:	fab3 f383 	clz	r3, r3
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	6879      	ldr	r1, [r7, #4]
 80002c4:	fa01 f303 	lsl.w	r3, r1, r3
 80002c8:	431a      	orrs	r2, r3
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	601a      	str	r2, [r3, #0]
}
 80002ce:	bf00      	nop
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr

080002da <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80002da:	b480      	push	{r7}
 80002dc:	b085      	sub	sp, #20
 80002de:	af00      	add	r7, sp, #0
 80002e0:	60f8      	str	r0, [r7, #12]
 80002e2:	60b9      	str	r1, [r7, #8]
 80002e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	685a      	ldr	r2, [r3, #4]
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	43db      	mvns	r3, r3
 80002ee:	401a      	ands	r2, r3
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	6879      	ldr	r1, [r7, #4]
 80002f4:	fb01 f303 	mul.w	r3, r1, r3
 80002f8:	431a      	orrs	r2, r3
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	605a      	str	r2, [r3, #4]
}
 80002fe:	bf00      	nop
 8000300:	3714      	adds	r7, #20
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr

0800030a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800030a:	b480      	push	{r7}
 800030c:	b089      	sub	sp, #36	; 0x24
 800030e:	af00      	add	r7, sp, #0
 8000310:	60f8      	str	r0, [r7, #12]
 8000312:	60b9      	str	r1, [r7, #8]
 8000314:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	689a      	ldr	r2, [r3, #8]
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	fa93 f3a3 	rbit	r3, r3
 8000324:	613b      	str	r3, [r7, #16]
  return(result);
 8000326:	693b      	ldr	r3, [r7, #16]
 8000328:	fab3 f383 	clz	r3, r3
 800032c:	005b      	lsls	r3, r3, #1
 800032e:	2103      	movs	r1, #3
 8000330:	fa01 f303 	lsl.w	r3, r1, r3
 8000334:	43db      	mvns	r3, r3
 8000336:	401a      	ands	r2, r3
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800033c:	69fb      	ldr	r3, [r7, #28]
 800033e:	fa93 f3a3 	rbit	r3, r3
 8000342:	61bb      	str	r3, [r7, #24]
  return(result);
 8000344:	69bb      	ldr	r3, [r7, #24]
 8000346:	fab3 f383 	clz	r3, r3
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	6879      	ldr	r1, [r7, #4]
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	431a      	orrs	r2, r3
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000358:	bf00      	nop
 800035a:	3724      	adds	r7, #36	; 0x24
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr

08000364 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000364:	b480      	push	{r7}
 8000366:	b089      	sub	sp, #36	; 0x24
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	68da      	ldr	r2, [r3, #12]
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	fa93 f3a3 	rbit	r3, r3
 800037e:	613b      	str	r3, [r7, #16]
  return(result);
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	fab3 f383 	clz	r3, r3
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	2103      	movs	r1, #3
 800038a:	fa01 f303 	lsl.w	r3, r1, r3
 800038e:	43db      	mvns	r3, r3
 8000390:	401a      	ands	r2, r3
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000396:	69fb      	ldr	r3, [r7, #28]
 8000398:	fa93 f3a3 	rbit	r3, r3
 800039c:	61bb      	str	r3, [r7, #24]
  return(result);
 800039e:	69bb      	ldr	r3, [r7, #24]
 80003a0:	fab3 f383 	clz	r3, r3
 80003a4:	005b      	lsls	r3, r3, #1
 80003a6:	6879      	ldr	r1, [r7, #4]
 80003a8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ac:	431a      	orrs	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	60da      	str	r2, [r3, #12]
}
 80003b2:	bf00      	nop
 80003b4:	3724      	adds	r7, #36	; 0x24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80003be:	b480      	push	{r7}
 80003c0:	b089      	sub	sp, #36	; 0x24
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	60f8      	str	r0, [r7, #12]
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	6a1a      	ldr	r2, [r3, #32]
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	fa93 f3a3 	rbit	r3, r3
 80003d8:	613b      	str	r3, [r7, #16]
  return(result);
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	fab3 f383 	clz	r3, r3
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	210f      	movs	r1, #15
 80003e4:	fa01 f303 	lsl.w	r3, r1, r3
 80003e8:	43db      	mvns	r3, r3
 80003ea:	401a      	ands	r2, r3
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003f0:	69fb      	ldr	r3, [r7, #28]
 80003f2:	fa93 f3a3 	rbit	r3, r3
 80003f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80003f8:	69bb      	ldr	r3, [r7, #24]
 80003fa:	fab3 f383 	clz	r3, r3
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	6879      	ldr	r1, [r7, #4]
 8000402:	fa01 f303 	lsl.w	r3, r1, r3
 8000406:	431a      	orrs	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800040c:	bf00      	nop
 800040e:	3724      	adds	r7, #36	; 0x24
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000418:	b480      	push	{r7}
 800041a:	b089      	sub	sp, #36	; 0x24
 800041c:	af00      	add	r7, sp, #0
 800041e:	60f8      	str	r0, [r7, #12]
 8000420:	60b9      	str	r1, [r7, #8]
 8000422:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	0a1b      	lsrs	r3, r3, #8
 800042c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	fa93 f3a3 	rbit	r3, r3
 8000434:	613b      	str	r3, [r7, #16]
  return(result);
 8000436:	693b      	ldr	r3, [r7, #16]
 8000438:	fab3 f383 	clz	r3, r3
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	210f      	movs	r1, #15
 8000440:	fa01 f303 	lsl.w	r3, r1, r3
 8000444:	43db      	mvns	r3, r3
 8000446:	401a      	ands	r2, r3
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	0a1b      	lsrs	r3, r3, #8
 800044c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800044e:	69fb      	ldr	r3, [r7, #28]
 8000450:	fa93 f3a3 	rbit	r3, r3
 8000454:	61bb      	str	r3, [r7, #24]
  return(result);
 8000456:	69bb      	ldr	r3, [r7, #24]
 8000458:	fab3 f383 	clz	r3, r3
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	6879      	ldr	r1, [r7, #4]
 8000460:	fa01 f303 	lsl.w	r3, r1, r3
 8000464:	431a      	orrs	r2, r3
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800046a:	bf00      	nop
 800046c:	3724      	adds	r7, #36	; 0x24
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr

08000476 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000476:	b580      	push	{r7, lr}
 8000478:	b088      	sub	sp, #32
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
 800047e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000480:	2300      	movs	r3, #0
 8000482:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000484:	2300      	movs	r3, #0
 8000486:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	fa93 f3a3 	rbit	r3, r3
 8000494:	613b      	str	r3, [r7, #16]
  return(result);
 8000496:	693b      	ldr	r3, [r7, #16]
 8000498:	fab3 f383 	clz	r3, r3
 800049c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800049e:	e048      	b.n	8000532 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	2101      	movs	r1, #1
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ac:	4013      	ands	r3, r2
 80004ae:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80004b0:	69bb      	ldr	r3, [r7, #24]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d03a      	beq.n	800052c <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	461a      	mov	r2, r3
 80004bc:	69b9      	ldr	r1, [r7, #24]
 80004be:	6878      	ldr	r0, [r7, #4]
 80004c0:	f7ff fede 	bl	8000280 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d003      	beq.n	80004d4 <LL_GPIO_Init+0x5e>
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d106      	bne.n	80004e2 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	461a      	mov	r2, r3
 80004da:	69b9      	ldr	r1, [r7, #24]
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f7ff ff14 	bl	800030a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	691b      	ldr	r3, [r3, #16]
 80004e6:	461a      	mov	r2, r3
 80004e8:	69b9      	ldr	r1, [r7, #24]
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f7ff ff3a 	bl	8000364 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	2b02      	cmp	r3, #2
 80004f6:	d119      	bne.n	800052c <LL_GPIO_Init+0xb6>
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	fa93 f3a3 	rbit	r3, r3
 8000502:	60bb      	str	r3, [r7, #8]
  return(result);
 8000504:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000506:	fab3 f383 	clz	r3, r3
 800050a:	2b07      	cmp	r3, #7
 800050c:	d807      	bhi.n	800051e <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	461a      	mov	r2, r3
 8000514:	69b9      	ldr	r1, [r7, #24]
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f7ff ff51 	bl	80003be <LL_GPIO_SetAFPin_0_7>
 800051c:	e006      	b.n	800052c <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	461a      	mov	r2, r3
 8000524:	69b9      	ldr	r1, [r7, #24]
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f7ff ff76 	bl	8000418 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	3301      	adds	r3, #1
 8000530:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	69fb      	ldr	r3, [r7, #28]
 8000538:	fa22 f303 	lsr.w	r3, r2, r3
 800053c:	2b00      	cmp	r3, #0
 800053e:	d1af      	bne.n	80004a0 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d003      	beq.n	8000550 <LL_GPIO_Init+0xda>
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	2b02      	cmp	r3, #2
 800054e:	d107      	bne.n	8000560 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	6819      	ldr	r1, [r3, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	461a      	mov	r2, r3
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f7ff febd 	bl	80002da <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000560:	2301      	movs	r3, #1
}
 8000562:	4618      	mov	r0, r3
 8000564:	3720      	adds	r7, #32
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800056a:	b480      	push	{r7}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f043 0201 	orr.w	r2, r3, #1
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	601a      	str	r2, [r3, #0]
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr

0800058a <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 800058a:	b480      	push	{r7}
 800058c:	b083      	sub	sp, #12
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f023 0201 	bic.w	r2, r3, #1
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	601a      	str	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b085      	sub	sp, #20
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	60f8      	str	r0, [r7, #12]
 80005b2:	60b9      	str	r1, [r7, #8]
 80005b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	0219      	lsls	r1, r3, #8
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	430b      	orrs	r3, r1
 80005c6:	431a      	orrs	r2, r3
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	601a      	str	r2, [r3, #0]
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80005ec:	f023 0307 	bic.w	r3, r3, #7
 80005f0:	68b9      	ldr	r1, [r7, #8]
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	430a      	orrs	r2, r1
 80005f6:	431a      	orrs	r2, r3
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	609a      	str	r2, [r3, #8]
}
 80005fc:	bf00      	nop
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	609a      	str	r2, [r3, #8]
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	609a      	str	r2, [r3, #8]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	611a      	str	r2, [r3, #16]
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	431a      	orrs	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	601a      	str	r2, [r3, #0]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	431a      	orrs	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	605a      	str	r2, [r3, #4]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f7ff ff65 	bl	800058a <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	6899      	ldr	r1, [r3, #8]
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	461a      	mov	r2, r3
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ff6d 	bl	80005aa <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	4619      	mov	r1, r3
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff ffb6 	bl	8000648 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f7ff ff44 	bl	800056a <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff ffa0 	bl	8000628 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	6919      	ldr	r1, [r3, #16]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	461a      	mov	r2, r3
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff ff70 	bl	80005d8 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	691b      	ldr	r3, [r3, #16]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d002      	beq.n	8000706 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f7ff ff81 	bl	8000608 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4619      	mov	r1, r3
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff ffa9 	bl	8000664 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4619      	mov	r1, r3
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ffb6 	bl	800068a <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800071e:	2301      	movs	r3, #1
}
 8000720:	4618      	mov	r0, r3
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <LL_RCC_HSI_IsReady+0x24>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000738:	bf0c      	ite	eq
 800073a:	2301      	moveq	r3, #1
 800073c:	2300      	movne	r3, #0
 800073e:	b2db      	uxtb	r3, r3
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000

08000750 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <LL_RCC_LSE_IsReady+0x24>)
 8000756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	2b02      	cmp	r3, #2
 8000760:	bf0c      	ite	eq
 8000762:	2301      	moveq	r3, #1
 8000764:	2300      	movne	r3, #0
 8000766:	b2db      	uxtb	r3, r3
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000

08000778 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL));
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f003 0308 	and.w	r3, r3, #8
 8000784:	2b08      	cmp	r3, #8
 8000786:	bf0c      	ite	eq
 8000788:	2301      	moveq	r3, #1
 800078a:	2300      	movne	r3, #0
 800078c:	b2db      	uxtb	r3, r3
}
 800078e:	4618      	mov	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	40021000 	.word	0x40021000

0800079c <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <LL_RCC_MSI_GetRange+0x18>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000

080007b8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80007be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007c2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	40021000 	.word	0x40021000

080007d4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <LL_RCC_GetSysClkSource+0x18>)
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	f003 030c 	and.w	r3, r3, #12
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000

080007f0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <LL_RCC_GetAHBPrescaler+0x18>)
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <LL_RCC_GetAPB1Prescaler+0x18>)
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000818:	4618      	mov	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40021000 	.word	0x40021000

08000828 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <LL_RCC_GetAPB2Prescaler+0x18>)
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8000834:	4618      	mov	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000

08000844 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <LL_RCC_GetUSARTClockSource+0x24>)
 800084e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	401a      	ands	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	041b      	lsls	r3, r3, #16
 800085a:	4313      	orrs	r3, r2
}
 800085c:	4618      	mov	r0, r3
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	40021000 	.word	0x40021000

0800086c <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <LL_RCC_GetUARTClockSource+0x24>)
 8000876:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	401a      	ands	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	041b      	lsls	r3, r3, #16
 8000882:	4313      	orrs	r3, r2
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	40021000 	.word	0x40021000

08000894 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <LL_RCC_PLL_GetMainSource+0x18>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	f003 0303 	and.w	r3, r3, #3
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000

080008b0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <LL_RCC_PLL_GetN+0x18>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80008be:	4618      	mov	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	40021000 	.word	0x40021000

080008cc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <LL_RCC_PLL_GetR+0x18>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80008d8:	4618      	mov	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000

080008e8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <LL_RCC_PLL_GetDivider+0x18>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000

08000904 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b03      	cmp	r3, #3
 8000914:	d12e      	bne.n	8000974 <LL_RCC_GetUSARTClockFreq+0x70>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff ff94 	bl	8000844 <LL_RCC_GetUSARTClockSource>
 800091c:	4603      	mov	r3, r0
 800091e:	4a4f      	ldr	r2, [pc, #316]	; (8000a5c <LL_RCC_GetUSARTClockFreq+0x158>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d009      	beq.n	8000938 <LL_RCC_GetUSARTClockFreq+0x34>
 8000924:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8000928:	d00e      	beq.n	8000948 <LL_RCC_GetUSARTClockFreq+0x44>
 800092a:	4a4d      	ldr	r2, [pc, #308]	; (8000a60 <LL_RCC_GetUSARTClockFreq+0x15c>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d114      	bne.n	800095a <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8000930:	f000 f8e8 	bl	8000b04 <RCC_GetSystemClockFreq>
 8000934:	60f8      	str	r0, [r7, #12]
        break;
 8000936:	e08b      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8000938:	f7ff fef6 	bl	8000728 <LL_RCC_HSI_IsReady>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d07b      	beq.n	8000a3a <LL_RCC_GetUSARTClockFreq+0x136>
        {
          usart_frequency = HSI_VALUE;
 8000942:	4b48      	ldr	r3, [pc, #288]	; (8000a64 <LL_RCC_GetUSARTClockFreq+0x160>)
 8000944:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000946:	e078      	b.n	8000a3a <LL_RCC_GetUSARTClockFreq+0x136>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8000948:	f7ff ff02 	bl	8000750 <LL_RCC_LSE_IsReady>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d075      	beq.n	8000a3e <LL_RCC_GetUSARTClockFreq+0x13a>
        {
          usart_frequency = LSE_VALUE;
 8000952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000956:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000958:	e071      	b.n	8000a3e <LL_RCC_GetUSARTClockFreq+0x13a>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800095a:	f000 f8d3 	bl	8000b04 <RCC_GetSystemClockFreq>
 800095e:	4603      	mov	r3, r0
 8000960:	4618      	mov	r0, r3
 8000962:	f000 f95f 	bl	8000c24 <RCC_GetHCLKClockFreq>
 8000966:	4603      	mov	r3, r0
 8000968:	4618      	mov	r0, r3
 800096a:	f000 f985 	bl	8000c78 <RCC_GetPCLK2ClockFreq>
 800096e:	60f8      	str	r0, [r7, #12]
        break;
 8000970:	bf00      	nop
 8000972:	e06d      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b0c      	cmp	r3, #12
 8000978:	d12e      	bne.n	80009d8 <LL_RCC_GetUSARTClockFreq+0xd4>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ff62 	bl	8000844 <LL_RCC_GetUSARTClockSource>
 8000980:	4603      	mov	r3, r0
 8000982:	4a39      	ldr	r2, [pc, #228]	; (8000a68 <LL_RCC_GetUSARTClockFreq+0x164>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d009      	beq.n	800099c <LL_RCC_GetUSARTClockFreq+0x98>
 8000988:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 800098c:	d00e      	beq.n	80009ac <LL_RCC_GetUSARTClockFreq+0xa8>
 800098e:	4a37      	ldr	r2, [pc, #220]	; (8000a6c <LL_RCC_GetUSARTClockFreq+0x168>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d114      	bne.n	80009be <LL_RCC_GetUSARTClockFreq+0xba>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8000994:	f000 f8b6 	bl	8000b04 <RCC_GetSystemClockFreq>
 8000998:	60f8      	str	r0, [r7, #12]
        break;
 800099a:	e059      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800099c:	f7ff fec4 	bl	8000728 <LL_RCC_HSI_IsReady>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d04d      	beq.n	8000a42 <LL_RCC_GetUSARTClockFreq+0x13e>
        {
          usart_frequency = HSI_VALUE;
 80009a6:	4b2f      	ldr	r3, [pc, #188]	; (8000a64 <LL_RCC_GetUSARTClockFreq+0x160>)
 80009a8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80009aa:	e04a      	b.n	8000a42 <LL_RCC_GetUSARTClockFreq+0x13e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80009ac:	f7ff fed0 	bl	8000750 <LL_RCC_LSE_IsReady>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d047      	beq.n	8000a46 <LL_RCC_GetUSARTClockFreq+0x142>
        {
          usart_frequency = LSE_VALUE;
 80009b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ba:	60fb      	str	r3, [r7, #12]
        }
        break;
 80009bc:	e043      	b.n	8000a46 <LL_RCC_GetUSARTClockFreq+0x142>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80009be:	f000 f8a1 	bl	8000b04 <RCC_GetSystemClockFreq>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 f92d 	bl	8000c24 <RCC_GetHCLKClockFreq>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 f93f 	bl	8000c50 <RCC_GetPCLK1ClockFreq>
 80009d2:	60f8      	str	r0, [r7, #12]
        break;
 80009d4:	bf00      	nop
 80009d6:	e03b      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b30      	cmp	r3, #48	; 0x30
 80009dc:	d138      	bne.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff ff30 	bl	8000844 <LL_RCC_GetUSARTClockSource>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4a22      	ldr	r2, [pc, #136]	; (8000a70 <LL_RCC_GetUSARTClockFreq+0x16c>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d009      	beq.n	8000a00 <LL_RCC_GetUSARTClockFreq+0xfc>
 80009ec:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80009f0:	d00e      	beq.n	8000a10 <LL_RCC_GetUSARTClockFreq+0x10c>
 80009f2:	4a20      	ldr	r2, [pc, #128]	; (8000a74 <LL_RCC_GetUSARTClockFreq+0x170>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d114      	bne.n	8000a22 <LL_RCC_GetUSARTClockFreq+0x11e>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80009f8:	f000 f884 	bl	8000b04 <RCC_GetSystemClockFreq>
 80009fc:	60f8      	str	r0, [r7, #12]
          break;
 80009fe:	e027      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 8000a00:	f7ff fe92 	bl	8000728 <LL_RCC_HSI_IsReady>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d01f      	beq.n	8000a4a <LL_RCC_GetUSARTClockFreq+0x146>
          {
            usart_frequency = HSI_VALUE;
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <LL_RCC_GetUSARTClockFreq+0x160>)
 8000a0c:	60fb      	str	r3, [r7, #12]
          }
          break;
 8000a0e:	e01c      	b.n	8000a4a <LL_RCC_GetUSARTClockFreq+0x146>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 8000a10:	f7ff fe9e 	bl	8000750 <LL_RCC_LSE_IsReady>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d019      	beq.n	8000a4e <LL_RCC_GetUSARTClockFreq+0x14a>
          {
            usart_frequency = LSE_VALUE;
 8000a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a1e:	60fb      	str	r3, [r7, #12]
          }
          break;
 8000a20:	e015      	b.n	8000a4e <LL_RCC_GetUSARTClockFreq+0x14a>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000a22:	f000 f86f 	bl	8000b04 <RCC_GetSystemClockFreq>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f8fb 	bl	8000c24 <RCC_GetHCLKClockFreq>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 f90d 	bl	8000c50 <RCC_GetPCLK1ClockFreq>
 8000a36:	60f8      	str	r0, [r7, #12]
          break;
 8000a38:	e00a      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 8000a3a:	bf00      	nop
 8000a3c:	e008      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 8000a3e:	bf00      	nop
 8000a40:	e006      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 8000a42:	bf00      	nop
 8000a44:	e004      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 8000a46:	bf00      	nop
 8000a48:	e002      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
          break;
 8000a4a:	bf00      	nop
 8000a4c:	e000      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
          break;
 8000a4e:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8000a50:	68fb      	ldr	r3, [r7, #12]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	00030002 	.word	0x00030002
 8000a60:	00030001 	.word	0x00030001
 8000a64:	00f42400 	.word	0x00f42400
 8000a68:	000c0008 	.word	0x000c0008
 8000a6c:	000c0004 	.word	0x000c0004
 8000a70:	00300020 	.word	0x00300020
 8000a74:	00300010 	.word	0x00300010

08000a78 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2bc0      	cmp	r3, #192	; 0xc0
 8000a88:	d130      	bne.n	8000aec <LL_RCC_GetUARTClockFreq+0x74>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff feee 	bl	800086c <LL_RCC_GetUARTClockSource>
 8000a90:	4603      	mov	r3, r0
 8000a92:	4a19      	ldr	r2, [pc, #100]	; (8000af8 <LL_RCC_GetUARTClockFreq+0x80>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d009      	beq.n	8000aac <LL_RCC_GetUARTClockFreq+0x34>
 8000a98:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8000a9c:	d00e      	beq.n	8000abc <LL_RCC_GetUARTClockFreq+0x44>
 8000a9e:	4a17      	ldr	r2, [pc, #92]	; (8000afc <LL_RCC_GetUARTClockFreq+0x84>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d114      	bne.n	8000ace <LL_RCC_GetUARTClockFreq+0x56>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8000aa4:	f000 f82e 	bl	8000b04 <RCC_GetSystemClockFreq>
 8000aa8:	60f8      	str	r0, [r7, #12]
        break;
 8000aaa:	e01f      	b.n	8000aec <LL_RCC_GetUARTClockFreq+0x74>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8000aac:	f7ff fe3c 	bl	8000728 <LL_RCC_HSI_IsReady>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d017      	beq.n	8000ae6 <LL_RCC_GetUARTClockFreq+0x6e>
        {
          uart_frequency = HSI_VALUE;
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <LL_RCC_GetUARTClockFreq+0x88>)
 8000ab8:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000aba:	e014      	b.n	8000ae6 <LL_RCC_GetUARTClockFreq+0x6e>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8000abc:	f7ff fe48 	bl	8000750 <LL_RCC_LSE_IsReady>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d011      	beq.n	8000aea <LL_RCC_GetUARTClockFreq+0x72>
        {
          uart_frequency = LSE_VALUE;
 8000ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aca:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000acc:	e00d      	b.n	8000aea <LL_RCC_GetUARTClockFreq+0x72>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000ace:	f000 f819 	bl	8000b04 <RCC_GetSystemClockFreq>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 f8a5 	bl	8000c24 <RCC_GetHCLKClockFreq>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f8b7 	bl	8000c50 <RCC_GetPCLK1ClockFreq>
 8000ae2:	60f8      	str	r0, [r7, #12]
        break;
 8000ae4:	e002      	b.n	8000aec <LL_RCC_GetUARTClockFreq+0x74>
        break;
 8000ae6:	bf00      	nop
 8000ae8:	e000      	b.n	8000aec <LL_RCC_GetUARTClockFreq+0x74>
        break;
 8000aea:	bf00      	nop
        break;
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8000aec:	68fb      	ldr	r3, [r7, #12]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	00c00080 	.word	0x00c00080
 8000afc:	00c00040 	.word	0x00c00040
 8000b00:	00f42400 	.word	0x00f42400

08000b04 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000b0e:	f7ff fe61 	bl	80007d4 <LL_RCC_GetSysClkSource>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b0c      	cmp	r3, #12
 8000b16:	d851      	bhi.n	8000bbc <RCC_GetSystemClockFreq+0xb8>
 8000b18:	a201      	add	r2, pc, #4	; (adr r2, 8000b20 <RCC_GetSystemClockFreq+0x1c>)
 8000b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b1e:	bf00      	nop
 8000b20:	08000b55 	.word	0x08000b55
 8000b24:	08000bbd 	.word	0x08000bbd
 8000b28:	08000bbd 	.word	0x08000bbd
 8000b2c:	08000bbd 	.word	0x08000bbd
 8000b30:	08000ba9 	.word	0x08000ba9
 8000b34:	08000bbd 	.word	0x08000bbd
 8000b38:	08000bbd 	.word	0x08000bbd
 8000b3c:	08000bbd 	.word	0x08000bbd
 8000b40:	08000baf 	.word	0x08000baf
 8000b44:	08000bbd 	.word	0x08000bbd
 8000b48:	08000bbd 	.word	0x08000bbd
 8000b4c:	08000bbd 	.word	0x08000bbd
 8000b50:	08000bb5 	.word	0x08000bb5
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8000b54:	f7ff fe10 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d111      	bne.n	8000b82 <RCC_GetSystemClockFreq+0x7e>
 8000b5e:	f7ff fe0b 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d004      	beq.n	8000b72 <RCC_GetSystemClockFreq+0x6e>
 8000b68:	f7ff fe18 	bl	800079c <LL_RCC_MSI_GetRange>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	0a1b      	lsrs	r3, r3, #8
 8000b70:	e003      	b.n	8000b7a <RCC_GetSystemClockFreq+0x76>
 8000b72:	f7ff fe21 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000b76:	4603      	mov	r3, r0
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	4a28      	ldr	r2, [pc, #160]	; (8000c1c <RCC_GetSystemClockFreq+0x118>)
 8000b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b80:	e010      	b.n	8000ba4 <RCC_GetSystemClockFreq+0xa0>
 8000b82:	f7ff fdf9 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d004      	beq.n	8000b96 <RCC_GetSystemClockFreq+0x92>
 8000b8c:	f7ff fe06 	bl	800079c <LL_RCC_MSI_GetRange>
 8000b90:	4603      	mov	r3, r0
 8000b92:	091b      	lsrs	r3, r3, #4
 8000b94:	e003      	b.n	8000b9e <RCC_GetSystemClockFreq+0x9a>
 8000b96:	f7ff fe0f 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	091b      	lsrs	r3, r3, #4
 8000b9e:	4a1f      	ldr	r2, [pc, #124]	; (8000c1c <RCC_GetSystemClockFreq+0x118>)
 8000ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba4:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8000ba6:	e033      	b.n	8000c10 <RCC_GetSystemClockFreq+0x10c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <RCC_GetSystemClockFreq+0x11c>)
 8000baa:	607b      	str	r3, [r7, #4]
      break;
 8000bac:	e030      	b.n	8000c10 <RCC_GetSystemClockFreq+0x10c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <RCC_GetSystemClockFreq+0x11c>)
 8000bb0:	607b      	str	r3, [r7, #4]
      break;
 8000bb2:	e02d      	b.n	8000c10 <RCC_GetSystemClockFreq+0x10c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000bb4:	f000 f874 	bl	8000ca0 <RCC_PLL_GetFreqDomain_SYS>
 8000bb8:	6078      	str	r0, [r7, #4]
      break;
 8000bba:	e029      	b.n	8000c10 <RCC_GetSystemClockFreq+0x10c>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8000bbc:	f7ff fddc 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d111      	bne.n	8000bea <RCC_GetSystemClockFreq+0xe6>
 8000bc6:	f7ff fdd7 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d004      	beq.n	8000bda <RCC_GetSystemClockFreq+0xd6>
 8000bd0:	f7ff fde4 	bl	800079c <LL_RCC_MSI_GetRange>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	e003      	b.n	8000be2 <RCC_GetSystemClockFreq+0xde>
 8000bda:	f7ff fded 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000bde:	4603      	mov	r3, r0
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <RCC_GetSystemClockFreq+0x118>)
 8000be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be8:	e010      	b.n	8000c0c <RCC_GetSystemClockFreq+0x108>
 8000bea:	f7ff fdc5 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d004      	beq.n	8000bfe <RCC_GetSystemClockFreq+0xfa>
 8000bf4:	f7ff fdd2 	bl	800079c <LL_RCC_MSI_GetRange>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	091b      	lsrs	r3, r3, #4
 8000bfc:	e003      	b.n	8000c06 <RCC_GetSystemClockFreq+0x102>
 8000bfe:	f7ff fddb 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000c02:	4603      	mov	r3, r0
 8000c04:	091b      	lsrs	r3, r3, #4
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <RCC_GetSystemClockFreq+0x118>)
 8000c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0c:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8000c0e:	bf00      	nop
  }

  return frequency;
 8000c10:	687b      	ldr	r3, [r7, #4]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	08003388 	.word	0x08003388
 8000c20:	00f42400 	.word	0x00f42400

08000c24 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000c2c:	f7ff fde0 	bl	80007f0 <LL_RCC_GetAHBPrescaler>
 8000c30:	4603      	mov	r3, r0
 8000c32:	091b      	lsrs	r3, r3, #4
 8000c34:	f003 030f 	and.w	r3, r3, #15
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <RCC_GetHCLKClockFreq+0x28>)
 8000c3a:	5cd3      	ldrb	r3, [r2, r3]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	40d3      	lsrs	r3, r2
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	08003370 	.word	0x08003370

08000c50 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000c58:	f7ff fdd8 	bl	800080c <LL_RCC_GetAPB1Prescaler>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	0a1b      	lsrs	r3, r3, #8
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <RCC_GetPCLK1ClockFreq+0x24>)
 8000c62:	5cd3      	ldrb	r3, [r2, r3]
 8000c64:	461a      	mov	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	40d3      	lsrs	r3, r2
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	08003380 	.word	0x08003380

08000c78 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000c80:	f7ff fdd2 	bl	8000828 <LL_RCC_GetAPB2Prescaler>
 8000c84:	4603      	mov	r3, r0
 8000c86:	0adb      	lsrs	r3, r3, #11
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <RCC_GetPCLK2ClockFreq+0x24>)
 8000c8a:	5cd3      	ldrb	r3, [r2, r3]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	40d3      	lsrs	r3, r2
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	08003380 	.word	0x08003380

08000ca0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000cae:	f7ff fdf1 	bl	8000894 <LL_RCC_PLL_GetMainSource>
 8000cb2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d02d      	beq.n	8000d16 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8000cba:	2b03      	cmp	r3, #3
 8000cbc:	d02e      	beq.n	8000d1c <RCC_PLL_GetFreqDomain_SYS+0x7c>
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d12f      	bne.n	8000d22 <RCC_PLL_GetFreqDomain_SYS+0x82>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8000cc2:	f7ff fd59 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d111      	bne.n	8000cf0 <RCC_PLL_GetFreqDomain_SYS+0x50>
 8000ccc:	f7ff fd54 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d004      	beq.n	8000ce0 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8000cd6:	f7ff fd61 	bl	800079c <LL_RCC_MSI_GetRange>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	e003      	b.n	8000ce8 <RCC_PLL_GetFreqDomain_SYS+0x48>
 8000ce0:	f7ff fd6a 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	0a1b      	lsrs	r3, r3, #8
 8000ce8:	4a2f      	ldr	r2, [pc, #188]	; (8000da8 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8000cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cee:	e010      	b.n	8000d12 <RCC_PLL_GetFreqDomain_SYS+0x72>
 8000cf0:	f7ff fd42 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d004      	beq.n	8000d04 <RCC_PLL_GetFreqDomain_SYS+0x64>
 8000cfa:	f7ff fd4f 	bl	800079c <LL_RCC_MSI_GetRange>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	091b      	lsrs	r3, r3, #4
 8000d02:	e003      	b.n	8000d0c <RCC_PLL_GetFreqDomain_SYS+0x6c>
 8000d04:	f7ff fd58 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	091b      	lsrs	r3, r3, #4
 8000d0c:	4a26      	ldr	r2, [pc, #152]	; (8000da8 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8000d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d12:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8000d14:	e02f      	b.n	8000d76 <RCC_PLL_GetFreqDomain_SYS+0xd6>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8000d16:	4b25      	ldr	r3, [pc, #148]	; (8000dac <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8000d18:	607b      	str	r3, [r7, #4]
      break;
 8000d1a:	e02c      	b.n	8000d76 <RCC_PLL_GetFreqDomain_SYS+0xd6>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8000d1e:	607b      	str	r3, [r7, #4]
      break;
 8000d20:	e029      	b.n	8000d76 <RCC_PLL_GetFreqDomain_SYS+0xd6>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8000d22:	f7ff fd29 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d111      	bne.n	8000d50 <RCC_PLL_GetFreqDomain_SYS+0xb0>
 8000d2c:	f7ff fd24 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d004      	beq.n	8000d40 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 8000d36:	f7ff fd31 	bl	800079c <LL_RCC_MSI_GetRange>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	e003      	b.n	8000d48 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 8000d40:	f7ff fd3a 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000d44:	4603      	mov	r3, r0
 8000d46:	0a1b      	lsrs	r3, r3, #8
 8000d48:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8000d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4e:	e010      	b.n	8000d72 <RCC_PLL_GetFreqDomain_SYS+0xd2>
 8000d50:	f7ff fd12 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d004      	beq.n	8000d64 <RCC_PLL_GetFreqDomain_SYS+0xc4>
 8000d5a:	f7ff fd1f 	bl	800079c <LL_RCC_MSI_GetRange>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	091b      	lsrs	r3, r3, #4
 8000d62:	e003      	b.n	8000d6c <RCC_PLL_GetFreqDomain_SYS+0xcc>
 8000d64:	f7ff fd28 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	091b      	lsrs	r3, r3, #4
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8000d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d72:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8000d74:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8000d76:	f7ff fdb7 	bl	80008e8 <LL_RCC_PLL_GetDivider>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	091b      	lsrs	r3, r3, #4
 8000d7e:	3301      	adds	r3, #1
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	fbb2 f4f3 	udiv	r4, r2, r3
 8000d86:	f7ff fd93 	bl	80008b0 <LL_RCC_PLL_GetN>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	fb03 f404 	mul.w	r4, r3, r4
 8000d90:	f7ff fd9c 	bl	80008cc <LL_RCC_PLL_GetR>
 8000d94:	4603      	mov	r3, r0
 8000d96:	0e5b      	lsrs	r3, r3, #25
 8000d98:	3301      	adds	r3, #1
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd90      	pop	{r4, r7, pc}
 8000da8:	08003388 	.word	0x08003388
 8000dac:	00f42400 	.word	0x00f42400

08000db0 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc0:	2b40      	cmp	r3, #64	; 0x40
 8000dc2:	d101      	bne.n	8000dc8 <LL_SPI_IsEnabled+0x18>
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e000      	b.n	8000dca <LL_SPI_IsEnabled+0x1a>
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	461a      	mov	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	611a      	str	r2, [r3, #16]
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b084      	sub	sp, #16
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ffd3 	bl	8000db0 <LL_SPI_IsEnabled>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d13b      	bne.n	8000e88 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000e18:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	6811      	ldr	r1, [r2, #0]
 8000e20:	683a      	ldr	r2, [r7, #0]
 8000e22:	6852      	ldr	r2, [r2, #4]
 8000e24:	4311      	orrs	r1, r2
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	68d2      	ldr	r2, [r2, #12]
 8000e2a:	4311      	orrs	r1, r2
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	6912      	ldr	r2, [r2, #16]
 8000e30:	4311      	orrs	r1, r2
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	6952      	ldr	r2, [r2, #20]
 8000e36:	4311      	orrs	r1, r2
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	6992      	ldr	r2, [r2, #24]
 8000e3c:	4311      	orrs	r1, r2
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	69d2      	ldr	r2, [r2, #28]
 8000e42:	4311      	orrs	r1, r2
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	6a12      	ldr	r2, [r2, #32]
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e58:	f023 0304 	bic.w	r3, r3, #4
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	6891      	ldr	r1, [r2, #8]
 8000e60:	683a      	ldr	r2, [r7, #0]
 8000e62:	6952      	ldr	r2, [r2, #20]
 8000e64:	0c12      	lsrs	r2, r2, #16
 8000e66:	430a      	orrs	r2, r1
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	6a1b      	ldr	r3, [r3, #32]
 8000e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e76:	d105      	bne.n	8000e84 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ffa9 	bl	8000dd6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	bf0c      	ite	eq
 8000ea6:	2301      	moveq	r3, #1
 8000ea8:	2300      	movne	r3, #0
 8000eaa:	b2db      	uxtb	r3, r3
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	605a      	str	r2, [r3, #4]
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif
{
 8000f04:	b4b0      	push	{r4, r5, r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 8000f12:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 8000f14:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f1c:	d114      	bne.n	8000f48 <LL_USART_SetBaudRate+0x44>
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	005a      	lsls	r2, r3, #1
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	085b      	lsrs	r3, r3, #1
 8000f26:	441a      	add	r2, r3
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	461d      	mov	r5, r3
#endif
    brrtemp = usartdiv & 0xFFF0U;
 8000f32:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8000f36:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000f38:	086b      	lsrs	r3, r5, #1
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	60dc      	str	r4, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif
  }
}
 8000f46:	e00a      	b.n	8000f5e <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	085a      	lsrs	r2, r3, #1
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	441a      	add	r2, r3
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	461a      	mov	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	60da      	str	r2, [r3, #12]
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bcb0      	pop	{r4, r5, r7}
 8000f66:	4770      	bx	lr

08000f68 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000f72:	2300      	movs	r3, #0
 8000f74:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ff89 	bl	8000e92 <LL_USART_IsEnabled>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d151      	bne.n	800102a <LL_USART_Init+0xc2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <LL_USART_Init+0xcc>)
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	6851      	ldr	r1, [r2, #4]
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	68d2      	ldr	r2, [r2, #12]
 8000f96:	4311      	orrs	r1, r2
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	6912      	ldr	r2, [r2, #16]
 8000f9c:	4311      	orrs	r1, r2
 8000f9e:	683a      	ldr	r2, [r7, #0]
 8000fa0:	6992      	ldr	r2, [r2, #24]
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff81 	bl	8000eb8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff8e 	bl	8000ede <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a1c      	ldr	r2, [pc, #112]	; (8001038 <LL_USART_Init+0xd0>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d104      	bne.n	8000fd4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8000fca:	2003      	movs	r0, #3
 8000fcc:	f7ff fc9a 	bl	8000904 <LL_RCC_GetUSARTClockFreq>
 8000fd0:	60b8      	str	r0, [r7, #8]
 8000fd2:	e019      	b.n	8001008 <LL_USART_Init+0xa0>
    }
    else if (USARTx == USART2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a19      	ldr	r2, [pc, #100]	; (800103c <LL_USART_Init+0xd4>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d104      	bne.n	8000fe6 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8000fdc:	200c      	movs	r0, #12
 8000fde:	f7ff fc91 	bl	8000904 <LL_RCC_GetUSARTClockFreq>
 8000fe2:	60b8      	str	r0, [r7, #8]
 8000fe4:	e010      	b.n	8001008 <LL_USART_Init+0xa0>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a15      	ldr	r2, [pc, #84]	; (8001040 <LL_USART_Init+0xd8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d104      	bne.n	8000ff8 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8000fee:	2030      	movs	r0, #48	; 0x30
 8000ff0:	f7ff fc88 	bl	8000904 <LL_RCC_GetUSARTClockFreq>
 8000ff4:	60b8      	str	r0, [r7, #8]
 8000ff6:	e007      	b.n	8001008 <LL_USART_Init+0xa0>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <LL_USART_Init+0xdc>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d103      	bne.n	8001008 <LL_USART_Init+0xa0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8001000:	20c0      	movs	r0, #192	; 0xc0
 8001002:	f7ff fd39 	bl	8000a78 <LL_RCC_GetUARTClockFreq>
 8001006:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00d      	beq.n	800102a <LL_USART_Init+0xc2>
        && (USART_InitStruct->BaudRate != 0U))
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d009      	beq.n	800102a <LL_USART_Init+0xc2>
    {
      status = SUCCESS;
 8001016:	2301      	movs	r3, #1
 8001018:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	699a      	ldr	r2, [r3, #24]
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff6d 	bl	8000f04 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800102a:	7bfb      	ldrb	r3, [r7, #15]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	efff69f3 	.word	0xefff69f3
 8001038:	40013800 	.word	0x40013800
 800103c:	40004400 	.word	0x40004400
 8001040:	40004800 	.word	0x40004800
 8001044:	40004c00 	.word	0x40004c00

08001048 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001052:	4909      	ldr	r1, [pc, #36]	; (8001078 <LL_InitTick+0x30>)
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	fbb2 f3f3 	udiv	r3, r2, r3
 800105c:	3b01      	subs	r3, #1
 800105e:	604b      	str	r3, [r1, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <LL_InitTick+0x30>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <LL_InitTick+0x30>)
 8001068:	2205      	movs	r2, #5
 800106a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000e010 	.word	0xe000e010

0800107c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001084:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ffdd 	bl	8001048 <LL_InitTick>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <LL_SetSystemCoreClock+0x1c>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000008 	.word	0x20000008

080010b8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <NVIC_SetPriorityGrouping+0x44>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ea:	4a04      	ldr	r2, [pc, #16]	; (80010fc <NVIC_SetPriorityGrouping+0x44>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	60d3      	str	r3, [r2, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	da0b      	bge.n	8001148 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	490d      	ldr	r1, [pc, #52]	; (8001168 <NVIC_SetPriority+0x4c>)
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f003 030f 	and.w	r3, r3, #15
 8001138:	3b04      	subs	r3, #4
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001146:	e009      	b.n	800115c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	4908      	ldr	r1, [pc, #32]	; (800116c <NVIC_SetPriority+0x50>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00
 800116c:	e000e100 	.word	0xe000e100

08001170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	; 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	2201      	movs	r2, #1
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	1e5a      	subs	r2, r3, #1
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	401a      	ands	r2, r3
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b6:	2101      	movs	r1, #1
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	1e59      	subs	r1, r3, #1
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80011dc:	4906      	ldr	r1, [pc, #24]	; (80011f8 <LL_FLASH_SetLatency+0x24>)
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <LL_FLASH_SetLatency+0x24>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f023 0207 	bic.w	r2, r3, #7
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	600b      	str	r3, [r1, #0]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	40022000 	.word	0x40022000

080011fc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <LL_FLASH_GetLatency+0x18>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0307 	and.w	r3, r3, #7
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40022000 	.word	0x40022000

08001218 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b04      	cmp	r3, #4
 8001224:	d106      	bne.n	8001234 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001226:	4a09      	ldr	r2, [pc, #36]	; (800124c <LL_SYSTICK_SetClkSource+0x34>)
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <LL_SYSTICK_SetClkSource+0x34>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001232:	e005      	b.n	8001240 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001234:	4a05      	ldr	r2, [pc, #20]	; (800124c <LL_SYSTICK_SetClkSource+0x34>)
 8001236:	4b05      	ldr	r3, [pc, #20]	; (800124c <LL_SYSTICK_SetClkSource+0x34>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f023 0304 	bic.w	r3, r3, #4
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000e010 	.word	0xe000e010

08001250 <LL_RCC_HSE_EnableBypass>:
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001254:	4a05      	ldr	r2, [pc, #20]	; (800126c <LL_RCC_HSE_EnableBypass+0x1c>)
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <LL_RCC_HSE_EnableBypass+0x1c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000

08001270 <LL_RCC_HSE_Enable>:
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001274:	4a05      	ldr	r2, [pc, #20]	; (800128c <LL_RCC_HSE_Enable+0x1c>)
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <LL_RCC_HSE_Enable+0x1c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000

08001290 <LL_RCC_HSE_IsReady>:
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <LL_RCC_HSE_IsReady+0x24>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012a0:	bf0c      	ite	eq
 80012a2:	2301      	moveq	r3, #1
 80012a4:	2300      	movne	r3, #0
 80012a6:	b2db      	uxtb	r3, r3
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000

080012b8 <LL_RCC_LSI_Enable>:
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80012bc:	4a06      	ldr	r2, [pc, #24]	; (80012d8 <LL_RCC_LSI_Enable+0x20>)
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <LL_RCC_LSI_Enable+0x20>)
 80012c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40021000 	.word	0x40021000

080012dc <LL_RCC_LSI_IsReady>:
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <LL_RCC_LSI_IsReady+0x24>)
 80012e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	bf0c      	ite	eq
 80012ee:	2301      	moveq	r3, #1
 80012f0:	2300      	movne	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000

08001304 <LL_RCC_SetSysClkSource>:
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800130c:	4906      	ldr	r1, [pc, #24]	; (8001328 <LL_RCC_SetSysClkSource+0x24>)
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <LL_RCC_SetSysClkSource+0x24>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f023 0203 	bic.w	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4313      	orrs	r3, r2
 800131a:	608b      	str	r3, [r1, #8]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	40021000 	.word	0x40021000

0800132c <LL_RCC_GetSysClkSource>:
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <LL_RCC_GetSysClkSource+0x18>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 030c 	and.w	r3, r3, #12
}
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000

08001348 <LL_RCC_SetAHBPrescaler>:
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001350:	4906      	ldr	r1, [pc, #24]	; (800136c <LL_RCC_SetAHBPrescaler+0x24>)
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <LL_RCC_SetAHBPrescaler+0x24>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4313      	orrs	r3, r2
 800135e:	608b      	str	r3, [r1, #8]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	40021000 	.word	0x40021000

08001370 <LL_RCC_SetAPB1Prescaler>:
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001378:	4906      	ldr	r1, [pc, #24]	; (8001394 <LL_RCC_SetAPB1Prescaler+0x24>)
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <LL_RCC_SetAPB1Prescaler+0x24>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4313      	orrs	r3, r2
 8001386:	608b      	str	r3, [r1, #8]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	40021000 	.word	0x40021000

08001398 <LL_RCC_SetAPB2Prescaler>:
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80013a0:	4906      	ldr	r1, [pc, #24]	; (80013bc <LL_RCC_SetAPB2Prescaler+0x24>)
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <LL_RCC_SetAPB2Prescaler+0x24>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	608b      	str	r3, [r1, #8]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	40021000 	.word	0x40021000

080013c0 <LL_RCC_SetUSARTClockSource>:
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFF));
 80013c8:	4909      	ldr	r1, [pc, #36]	; (80013f0 <LL_RCC_SetUSARTClockSource+0x30>)
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <LL_RCC_SetUSARTClockSource+0x30>)
 80013cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	0c1b      	lsrs	r3, r3, #16
 80013d4:	43db      	mvns	r3, r3
 80013d6:	401a      	ands	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	4313      	orrs	r3, r2
 80013de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000

080013f4 <LL_RCC_SetI2CClockSource>:
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	0e1a      	lsrs	r2, r3, #24
 8001400:	4b0e      	ldr	r3, [pc, #56]	; (800143c <LL_RCC_SetI2CClockSource+0x48>)
 8001402:	4413      	add	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3U << ((I2CxSource & 0x00FF0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x00FF0000U) >> 16U)));
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	0c1b      	lsrs	r3, r3, #16
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2103      	movs	r1, #3
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	401a      	ands	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	b2d9      	uxtb	r1, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	0c1b      	lsrs	r3, r3, #16
 8001422:	b2db      	uxtb	r3, r3
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	431a      	orrs	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	601a      	str	r2, [r3, #0]
}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40021088 	.word	0x40021088

08001440 <LL_RCC_PLL_Enable>:
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001444:	4a05      	ldr	r2, [pc, #20]	; (800145c <LL_RCC_PLL_Enable+0x1c>)
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <LL_RCC_PLL_Enable+0x1c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000

08001460 <LL_RCC_PLL_IsReady>:
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <LL_RCC_PLL_IsReady+0x24>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001470:	bf0c      	ite	eq
 8001472:	2301      	moveq	r3, #1
 8001474:	2300      	movne	r3, #0
 8001476:	b2db      	uxtb	r3, r3
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000

08001488 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8001496:	480a      	ldr	r0, [pc, #40]	; (80014c0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800149e:	4013      	ands	r3, r2
 80014a0:	68f9      	ldr	r1, [r7, #12]
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	4311      	orrs	r1, r2
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	0212      	lsls	r2, r2, #8
 80014aa:	4311      	orrs	r1, r2
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	4313      	orrs	r3, r2
 80014b2:	60c3      	str	r3, [r0, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	40021000 	.word	0x40021000
 80014c4:	f9ff808c 	.word	0xf9ff808c

080014c8 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80014cc:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014d6:	60d3      	str	r3, [r2, #12]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000

080014e8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80014f0:	4906      	ldr	r1, [pc, #24]	; (800150c <LL_PWR_SetRegulVoltageScaling+0x24>)
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <LL_PWR_SetRegulVoltageScaling+0x24>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	600b      	str	r3, [r1, #0]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40007000 	.word	0x40007000

08001510 <LL_I2C_Enable>:
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f043 0201 	orr.w	r2, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	601a      	str	r2, [r3, #0]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_I2C_EnableClockStretching>:
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	601a      	str	r2, [r3, #0]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_I2C_DisableGeneralCall>:
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	601a      	str	r2, [r3, #0]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <LL_I2C_SetOwnAddress2>:
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001584:	f023 0306 	bic.w	r3, r3, #6
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	430a      	orrs	r2, r1
 800158e:	431a      	orrs	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	60da      	str	r2, [r3, #12]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_I2C_DisableOwnAddress2>:
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	60da      	str	r2, [r3, #12]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_I2C_EnableAutoEndMode>:
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	605a      	str	r2, [r3, #4]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015e8:	4908      	ldr	r1, [pc, #32]	; (800160c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4013      	ands	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015fe:	68fb      	ldr	r3, [r7, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	40021000 	.word	0x40021000

08001610 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001618:	4908      	ldr	r1, [pc, #32]	; (800163c <LL_APB1_GRP1_EnableClock+0x2c>)
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <LL_APB1_GRP1_EnableClock+0x2c>)
 800161c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4313      	orrs	r3, r2
 8001622:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001626:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4013      	ands	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800162e:	68fb      	ldr	r3, [r7, #12]
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	40021000 	.word	0x40021000

08001640 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001648:	4908      	ldr	r1, [pc, #32]	; (800166c <LL_APB2_GRP1_EnableClock+0x2c>)
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <LL_APB2_GRP1_EnableClock+0x2c>)
 800164c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4313      	orrs	r3, r2
 8001652:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001656:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4013      	ands	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800165e:	68fb      	ldr	r3, [r7, #12]
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	40021000 	.word	0x40021000

08001670 <LL_SPI_Enable>:
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	601a      	str	r2, [r3, #0]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_SPI_Disable>:
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	601a      	str	r2, [r3, #0]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_SPI_SetStandard>:
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f023 0210 	bic.w	r2, r3, #16
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	605a      	str	r2, [r3, #4]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f043 0208 	orr.w	r2, r3, #8
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	605a      	str	r2, [r3, #4]
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	619a      	str	r2, [r3, #24]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <LL_USART_Enable>:
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f043 0201 	orr.w	r2, r3, #1
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	601a      	str	r2, [r3, #0]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LL_USART_SetTXRXSwap>:
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	605a      	str	r2, [r3, #4]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	609a      	str	r2, [r3, #8]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <LL_Init>:

//#include "stm32l4xx_ll_dma.h"



void LL_Init(void){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f7ff ff4b 	bl	8001640 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80017aa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80017ae:	f7ff ff2f 	bl	8001610 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b2:	2003      	movs	r0, #3
 80017b4:	f7ff fc80 	bl	80010b8 <NVIC_SetPriorityGrouping>

	/* System interrupt init*/
	/* MemoryManagement_IRQn interrupt configuration */
	NVIC_SetPriority(MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80017b8:	f7ff fca2 	bl	8001100 <NVIC_GetPriorityGrouping>
 80017bc:	4603      	mov	r3, r0
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fcd4 	bl	8001170 <NVIC_EncodePriority>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4619      	mov	r1, r3
 80017cc:	f06f 000b 	mvn.w	r0, #11
 80017d0:	f7ff fca4 	bl	800111c <NVIC_SetPriority>
	/* BusFault_IRQn interrupt configuration */
	NVIC_SetPriority(BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80017d4:	f7ff fc94 	bl	8001100 <NVIC_GetPriorityGrouping>
 80017d8:	4603      	mov	r3, r0
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fcc6 	bl	8001170 <NVIC_EncodePriority>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4619      	mov	r1, r3
 80017e8:	f06f 000a 	mvn.w	r0, #10
 80017ec:	f7ff fc96 	bl	800111c <NVIC_SetPriority>
	/* UsageFault_IRQn interrupt configuration */
	NVIC_SetPriority(UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80017f0:	f7ff fc86 	bl	8001100 <NVIC_GetPriorityGrouping>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2200      	movs	r2, #0
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fcb8 	bl	8001170 <NVIC_EncodePriority>
 8001800:	4603      	mov	r3, r0
 8001802:	4619      	mov	r1, r3
 8001804:	f06f 0009 	mvn.w	r0, #9
 8001808:	f7ff fc88 	bl	800111c <NVIC_SetPriority>
	/* SVCall_IRQn interrupt configuration */
	NVIC_SetPriority(SVCall_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800180c:	f7ff fc78 	bl	8001100 <NVIC_GetPriorityGrouping>
 8001810:	4603      	mov	r3, r0
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fcaa 	bl	8001170 <NVIC_EncodePriority>
 800181c:	4603      	mov	r3, r0
 800181e:	4619      	mov	r1, r3
 8001820:	f06f 0004 	mvn.w	r0, #4
 8001824:	f7ff fc7a 	bl	800111c <NVIC_SetPriority>
	/* DebugMonitor_IRQn interrupt configuration */
	NVIC_SetPriority(DebugMonitor_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001828:	f7ff fc6a 	bl	8001100 <NVIC_GetPriorityGrouping>
 800182c:	4603      	mov	r3, r0
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fc9c 	bl	8001170 <NVIC_EncodePriority>
 8001838:	4603      	mov	r3, r0
 800183a:	4619      	mov	r1, r3
 800183c:	f06f 0003 	mvn.w	r0, #3
 8001840:	f7ff fc6c 	bl	800111c <NVIC_SetPriority>
	/* PendSV_IRQn interrupt configuration */
	NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001844:	f7ff fc5c 	bl	8001100 <NVIC_GetPriorityGrouping>
 8001848:	4603      	mov	r3, r0
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fc8e 	bl	8001170 <NVIC_EncodePriority>
 8001854:	4603      	mov	r3, r0
 8001856:	4619      	mov	r1, r3
 8001858:	f06f 0001 	mvn.w	r0, #1
 800185c:	f7ff fc5e 	bl	800111c <NVIC_SetPriority>
	/* SysTick_IRQn interrupt configuration */
	//NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void){
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0

	LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001868:	2004      	movs	r0, #4
 800186a:	f7ff fcb3 	bl	80011d4 <LL_FLASH_SetLatency>

	if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4){
 800186e:	f7ff fcc5 	bl	80011fc <LL_FLASH_GetLatency>
 8001872:	4603      	mov	r3, r0
 8001874:	2b04      	cmp	r3, #4
 8001876:	d003      	beq.n	8001880 <SystemClock_Config+0x1c>
		Error_Handler();
 8001878:	2146      	movs	r1, #70	; 0x46
 800187a:	482d      	ldr	r0, [pc, #180]	; (8001930 <SystemClock_Config+0xcc>)
 800187c:	f000 fa30 	bl	8001ce0 <_Error_Handler>
	}

	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001880:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001884:	f7ff fe30 	bl	80014e8 <LL_PWR_SetRegulVoltageScaling>

  	//Enable HSE
  	LL_RCC_HSE_EnableBypass();
 8001888:	f7ff fce2 	bl	8001250 <LL_RCC_HSE_EnableBypass>
  	LL_RCC_HSE_Enable();
 800188c:	f7ff fcf0 	bl	8001270 <LL_RCC_HSE_Enable>
   	// Wait till HSE is ready
  	while(LL_RCC_HSE_IsReady() != 1);
 8001890:	bf00      	nop
 8001892:	f7ff fcfd 	bl	8001290 <LL_RCC_HSE_IsReady>
 8001896:	4603      	mov	r3, r0
 8001898:	2b01      	cmp	r3, #1
 800189a:	d1fa      	bne.n	8001892 <SystemClock_Config+0x2e>
	//Wait till HSI is ready
	while(LL_RCC_HSI_IsReady() != 1);
	//LL_RCC_HSI_SetCalibTrimming(16);//not need to do this */

	// Enable LSI
	LL_RCC_LSI_Enable();
 800189c:	f7ff fd0c 	bl	80012b8 <LL_RCC_LSI_Enable>

	/* Wait till LSI is ready */
	while(LL_RCC_LSI_IsReady() != 1);
 80018a0:	bf00      	nop
 80018a2:	f7ff fd1b 	bl	80012dc <LL_RCC_LSI_IsReady>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d1fa      	bne.n	80018a2 <SystemClock_Config+0x3e>

	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_1, 10, LL_RCC_PLLR_DIV_2);
 80018ac:	2300      	movs	r3, #0
 80018ae:	220a      	movs	r2, #10
 80018b0:	2100      	movs	r1, #0
 80018b2:	2003      	movs	r0, #3
 80018b4:	f7ff fde8 	bl	8001488 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 80018b8:	f7ff fdc2 	bl	8001440 <LL_RCC_PLL_Enable>
	LL_RCC_PLL_EnableDomain_SYS();
 80018bc:	f7ff fe04 	bl	80014c8 <LL_RCC_PLL_EnableDomain_SYS>

	/* Wait till PLL is ready */
	while(LL_RCC_PLL_IsReady() != 1);
 80018c0:	bf00      	nop
 80018c2:	f7ff fdcd 	bl	8001460 <LL_RCC_PLL_IsReady>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d1fa      	bne.n	80018c2 <SystemClock_Config+0x5e>

	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f7ff fd19 	bl	8001304 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80018d2:	bf00      	nop
 80018d4:	f7ff fd2a 	bl	800132c <LL_RCC_GetSysClkSource>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b0c      	cmp	r3, #12
 80018dc:	d1fa      	bne.n	80018d4 <SystemClock_Config+0x70>

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80018de:	2000      	movs	r0, #0
 80018e0:	f7ff fd32 	bl	8001348 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80018e4:	2000      	movs	r0, #0
 80018e6:	f7ff fd43 	bl	8001370 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80018ea:	2000      	movs	r0, #0
 80018ec:	f7ff fd54 	bl	8001398 <LL_RCC_SetAPB2Prescaler>
	LL_Init1msTick(80000000);
 80018f0:	4810      	ldr	r0, [pc, #64]	; (8001934 <SystemClock_Config+0xd0>)
 80018f2:	f7ff fbc3 	bl	800107c <LL_Init1msTick>
	LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 80018f6:	2004      	movs	r0, #4
 80018f8:	f7ff fc8e 	bl	8001218 <LL_SYSTICK_SetClkSource>
	LL_SetSystemCoreClock(80000000);
 80018fc:	480d      	ldr	r0, [pc, #52]	; (8001934 <SystemClock_Config+0xd0>)
 80018fe:	f7ff fbcb 	bl	8001098 <LL_SetSystemCoreClock>

  /* Setup clock source for USART1 and I2C */
	LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_SYSCLK);
 8001902:	480d      	ldr	r0, [pc, #52]	; (8001938 <SystemClock_Config+0xd4>)
 8001904:	f7ff fd5c 	bl	80013c0 <LL_RCC_SetUSARTClockSource>
	LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_SYSCLK);
 8001908:	480c      	ldr	r0, [pc, #48]	; (800193c <SystemClock_Config+0xd8>)
 800190a:	f7ff fd73 	bl	80013f4 <LL_RCC_SetI2CClockSource>

	/* SysTick_IRQn interrupt configuration */
	NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800190e:	f7ff fbf7 	bl	8001100 <NVIC_GetPriorityGrouping>
 8001912:	4603      	mov	r3, r0
 8001914:	2200      	movs	r2, #0
 8001916:	210f      	movs	r1, #15
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fc29 	bl	8001170 <NVIC_EncodePriority>
 800191e:	4603      	mov	r3, r0
 8001920:	4619      	mov	r1, r3
 8001922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001926:	f7ff fbf9 	bl	800111c <NVIC_SetPriority>
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	080032a0 	.word	0x080032a0
 8001934:	04c4b400 	.word	0x04c4b400
 8001938:	00030001 	.word	0x00030001
 800193c:	000c0001 	.word	0x000c0001

08001940 <SetupLED>:

/**
  * @brief  This function setup  Led on the KTIVT_SS_board.
  * @retval None
*/
void SetupLED(void){
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001946:	2004      	movs	r0, #4
 8001948:	f7ff fe4a 	bl	80015e0 <LL_AHB2_GRP1_EnableClock>

	 /*Configure LED_Yellow_HL1 (PC10), LED_Green_HL2 (PC11), LED_Green_HL3 (PC12) as output Push-Pull      */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 800194c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001950:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001952:	2301      	movs	r3, #1
 8001954:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL; // try set - LL_GPIO_OUTPUT_OPENDRAIN on real board
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800195e:	2301      	movs	r3, #1
 8001960:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001962:	463b      	mov	r3, r7
 8001964:	4619      	mov	r1, r3
 8001966:	4806      	ldr	r0, [pc, #24]	; (8001980 <SetupLED+0x40>)
 8001968:	f7fe fd85 	bl	8000476 <LL_GPIO_Init>

	/* Diode is off */
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12);
 800196c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001970:	4803      	ldr	r0, [pc, #12]	; (8001980 <SetupLED+0x40>)
 8001972:	f7ff fec0 	bl	80016f6 <LL_GPIO_SetOutputPin>
	/*For ON/OFF LED need to use function:                            */
	  /*LED_Yellow_HL1_ON()       LED_Yellow_HL1_OFF()                */
	  /*LED_Green_HL2_ON()        LED_Green_HL2_OFF()                 */
	  /*LED_Green_HL3_ON()        LED_Green_HL3_OFF()                 */
	  /*Define in SetupPeriph.h                                       */
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	48000800 	.word	0x48000800

08001984 <SetupGPIO>:

/**
  * @brief  This function setup GPIO to control IC on the KTIVT_SS_board.
  * @retval None
*/
void SetupGPIO(void){
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800198a:	2001      	movs	r0, #1
 800198c:	f7ff fe28 	bl	80015e0 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001990:	2004      	movs	r0, #4
 8001992:	f7ff fe25 	bl	80015e0 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001996:	2002      	movs	r0, #2
 8001998:	f7ff fe22 	bl	80015e0 <LL_AHB2_GRP1_EnableClock>


	/* Configure pins out for control preamplifier K1. PA3=10 PA4=100 PA5=1000 for AG1411 ON=0 OFF=1    */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800199c:	2338      	movs	r3, #56	; 0x38
 800199e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019a0:	2301      	movs	r3, #1
 80019a2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80019ac:	2301      	movs	r3, #1
 80019ae:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b0:	463b      	mov	r3, r7
 80019b2:	4619      	mov	r1, r3
 80019b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b8:	f7fe fd5d 	bl	8000476 <LL_GPIO_Init>
	/*off K1 */
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 80019bc:	2138      	movs	r1, #56	; 0x38
 80019be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c2:	f7ff fe98 	bl	80016f6 <LL_GPIO_SetOutputPin>
	/*Define in SetupPeriph.h                       */



	/* Configure pins in for control COMPorators COMP1=PC0, COMP2=PC1, COMP3=PA0*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80019c6:	2303      	movs	r3, #3
 80019c8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d2:	463b      	mov	r3, r7
 80019d4:	4619      	mov	r1, r3
 80019d6:	4836      	ldr	r0, [pc, #216]	; (8001ab0 <SetupGPIO+0x12c>)
 80019d8:	f7fe fd4d 	bl	8000476 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80019dc:	2301      	movs	r3, #1
 80019de:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80019e0:	2300      	movs	r3, #0
 80019e2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	463b      	mov	r3, r7
 80019ea:	4619      	mov	r1, r3
 80019ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f0:	f7fe fd41 	bl	8000476 <LL_GPIO_Init>


	/* Configure pins ???? PC8=F_SA0 PC9=F_SA1 PA8=F_SA2 for AG1411 ON=0 OFF=1 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 80019f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019f8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019fa:	2301      	movs	r3, #1
 80019fc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001a06:	2301      	movs	r3, #1
 8001a08:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4828      	ldr	r0, [pc, #160]	; (8001ab0 <SetupGPIO+0x12c>)
 8001a10:	f7fe fd31 	bl	8000476 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a18:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	463b      	mov	r3, r7
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a32:	f7fe fd20 	bl	8000476 <LL_GPIO_Init>

	/*off F_SA*/
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_8|LL_GPIO_PIN_9);
 8001a36:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001a3a:	481d      	ldr	r0, [pc, #116]	; (8001ab0 <SetupGPIO+0x12c>)
 8001a3c:	f7ff fe69 	bl	8001712 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001a40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a48:	f7ff fe55 	bl	80016f6 <LL_GPIO_SetOutputPin>
	/*F_SA2_Set()       F_SA2_Reset()               */
	/*Define in SetupPeriph.h                       */


	/* Configure pins for control main amplifier K2. out: PB0=G0 PB1=G1 PB2=G2 PB10=G3 PB11=G4  in: COMP4=PA2   */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8001a4c:	f640 4307 	movw	r3, #3079	; 0xc07
 8001a50:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a52:	2301      	movs	r3, #1
 8001a54:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a62:	463b      	mov	r3, r7
 8001a64:	4619      	mov	r1, r3
 8001a66:	4813      	ldr	r0, [pc, #76]	; (8001ab4 <SetupGPIO+0x130>)
 8001a68:	f7fe fd05 	bl	8000476 <LL_GPIO_Init>

	/*off K2=1 */
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11);
 8001a6c:	f640 4107 	movw	r1, #3079	; 0xc07
 8001a70:	4810      	ldr	r0, [pc, #64]	; (8001ab4 <SetupGPIO+0x130>)
 8001a72:	f7ff fe4e 	bl	8001712 <LL_GPIO_ResetOutputPin>
	/* Config COMP4*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001a76:	2304      	movs	r3, #4
 8001a78:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
	//GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
	//GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a82:	463b      	mov	r3, r7
 8001a84:	4619      	mov	r1, r3
 8001a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8a:	f7fe fcf4 	bl	8000476 <LL_GPIO_Init>
	/*Define in SetupPeriph.h                       */


	////////удалить только для отладки на NUcleo board

	GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8001a8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a92:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001a94:	2300      	movs	r3, #0
 8001a96:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4803      	ldr	r0, [pc, #12]	; (8001ab0 <SetupGPIO+0x12c>)
 8001aa2:	f7fe fce8 	bl	8000476 <LL_GPIO_Init>


}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	48000800 	.word	0x48000800
 8001ab4:	48000400 	.word	0x48000400

08001ab8 <USART1_Init>:

void USART1_Init(void){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08e      	sub	sp, #56	; 0x38
 8001abc:	af00      	add	r7, sp, #0

  	LL_USART_InitTypeDef USART_InitStruct;
  	LL_GPIO_InitTypeDef GPIO_InitStruct;

  	/* Peripheral clock enable */
  	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001abe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ac2:	f7ff fdbd 	bl	8001640 <LL_APB2_GRP1_EnableClock>
  	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f7ff fd8a 	bl	80015e0 <LL_AHB2_GRP1_EnableClock>
  
  	/**USART1 GPIO Configuration  
  	PA9   ------> USART1_TX
  	PA10   ------> USART1_RX 
  	*/
  	GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8001acc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ad0:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
  	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001ae2:	2307      	movs	r3, #7
 8001ae4:	61bb      	str	r3, [r7, #24]
  	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aee:	f7fe fcc2 	bl	8000476 <LL_GPIO_Init>
            - One Stop Bit
            - No parity
            - Hardware flow control disabled (RTS and CTS signals)
            - Receive and transmit enabled
      */
  	USART_InitStruct.BaudRate = 5000000;
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <USART1_Init+0xbc>)
 8001af4:	61fb      	str	r3, [r7, #28]
  	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8001af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afa:	623b      	str	r3, [r7, #32]
  	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
  	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
  	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001b04:	230c      	movs	r3, #12
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	633b      	str	r3, [r7, #48]	; 0x30
  	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	637b      	str	r3, [r7, #52]	; 0x34
  	LL_USART_Init(USART1, &USART_InitStruct);
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	4619      	mov	r1, r3
 8001b16:	4818      	ldr	r0, [pc, #96]	; (8001b78 <USART1_Init+0xc0>)
 8001b18:	f7ff fa26 	bl	8000f68 <LL_USART_Init>

  	LL_USART_SetTXRXSwap(USART1, LL_USART_TXRX_SWAPPED);
 8001b1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b20:	4815      	ldr	r0, [pc, #84]	; (8001b78 <USART1_Init+0xc0>)
 8001b22:	f7ff fe14 	bl	800174e <LL_USART_SetTXRXSwap>

  	LL_USART_ConfigAsyncMode(USART1); 
 8001b26:	4814      	ldr	r0, [pc, #80]	; (8001b78 <USART1_Init+0xc0>)
 8001b28:	f7ff fe24 	bl	8001774 <LL_USART_ConfigAsyncMode>
  	LL_USART_Enable(USART1);
 8001b2c:	4812      	ldr	r0, [pc, #72]	; (8001b78 <USART1_Init+0xc0>)
 8001b2e:	f7ff fdfe 	bl	800172e <LL_USART_Enable>

    /* Configure pins RE and TE to control transfer data throughISO3086DW, PA11=RE PA12=DE */
    GPIO_InitStruct.Pin = LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8001b32:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b36:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001b44:	2301      	movs	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b50:	f7fe fc91 	bl	8000476 <LL_GPIO_Init>
    /**/
    //RE -Enable when low
    //TE - Enbale when high
    LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11); //Enable receive data
 8001b54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5c:	f7ff fdd9 	bl	8001712 <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_12); //Enable transmit data
 8001b60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b68:	f7ff fdc5 	bl	80016f6 <LL_GPIO_SetOutputPin>

}
 8001b6c:	bf00      	nop
 8001b6e:	3738      	adds	r7, #56	; 0x38
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	004c4b40 	.word	0x004c4b40
 8001b78:	40013800 	.word	0x40013800

08001b7c <SPI2_Init>:
/**
  * @brief  Setup I2C.
  * @param  None
  * @retval None
*/
void SPI2_Init(void){
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b090      	sub	sp, #64	; 0x40
 8001b80:	af00      	add	r7, sp, #0

	LL_SPI_Disable(SPI2); ///Возможно убрать после теста
 8001b82:	482d      	ldr	r0, [pc, #180]	; (8001c38 <SPI2_Init+0xbc>)
 8001b84:	f7ff fd84 	bl	8001690 <LL_SPI_Disable>

  	LL_SPI_InitTypeDef SPI_InitStruct;

  	LL_GPIO_InitTypeDef GPIO_InitStruct;
  	/* Peripheral clock enable */
  	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001b88:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b8c:	f7ff fd40 	bl	8001610 <LL_APB1_GRP1_EnableClock>
  	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001b90:	2004      	movs	r0, #4
 8001b92:	f7ff fd25 	bl	80015e0 <LL_AHB2_GRP1_EnableClock>
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001b96:	2002      	movs	r0, #2
 8001b98:	f7ff fd22 	bl	80015e0 <LL_AHB2_GRP1_EnableClock>
  	PC2   ------> SPI2_MISO
  	PC3   ------> SPI2_MOSI
  	PB12   ------> SPI2_NSS
  	PB13   ------> SPI2_SCK 
  	*/
  	GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001b9c:	230c      	movs	r3, #12
 8001b9e:	603b      	str	r3, [r7, #0]
  	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
  	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001bb0:	2305      	movs	r3, #5
 8001bb2:	617b      	str	r3, [r7, #20]
  	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4820      	ldr	r0, [pc, #128]	; (8001c3c <SPI2_Init+0xc0>)
 8001bba:	f7fe fc5c 	bl	8000476 <LL_GPIO_Init>

  	GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13;
 8001bbe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001bc2:	603b      	str	r3, [r7, #0]
  	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
  	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001bd4:	2305      	movs	r3, #5
 8001bd6:	617b      	str	r3, [r7, #20]
  	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd8:	463b      	mov	r3, r7
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4818      	ldr	r0, [pc, #96]	; (8001c40 <SPI2_Init+0xc4>)
 8001bde:	f7fe fc4a 	bl	8000476 <LL_GPIO_Init>

  	/*Setup SPI2 */
  	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
  	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001be6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001bea:	61fb      	str	r3, [r7, #28]
  	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001bec:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001bf0:	623b      	str	r3, [r7, #32]
  	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
  	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  	SPI_InitStruct.NSS = LL_SPI_NSS_HARD_OUTPUT;
 8001bfa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2; /// Скорость обмена нужно уточнить у Саши
 8001c00:	2300      	movs	r3, #0
 8001c02:	633b      	str	r3, [r7, #48]	; 0x30
  	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001c04:	2300      	movs	r3, #0
 8001c06:	637b      	str	r3, [r7, #52]	; 0x34
  	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	63bb      	str	r3, [r7, #56]	; 0x38
  	SPI_InitStruct.CRCPoly = 0;//7;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  	LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001c10:	f107 0318 	add.w	r3, r7, #24
 8001c14:	4619      	mov	r1, r3
 8001c16:	4808      	ldr	r0, [pc, #32]	; (8001c38 <SPI2_Init+0xbc>)
 8001c18:	f7ff f8ed 	bl	8000df6 <LL_SPI_Init>

  	LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4806      	ldr	r0, [pc, #24]	; (8001c38 <SPI2_Init+0xbc>)
 8001c20:	f7ff fd46 	bl	80016b0 <LL_SPI_SetStandard>

  	LL_SPI_EnableNSSPulseMgt(SPI2);
 8001c24:	4804      	ldr	r0, [pc, #16]	; (8001c38 <SPI2_Init+0xbc>)
 8001c26:	f7ff fd56 	bl	80016d6 <LL_SPI_EnableNSSPulseMgt>

  	LL_SPI_Enable(SPI2);// Добавлял сам проверить почему не сгенерилось автоматом
 8001c2a:	4803      	ldr	r0, [pc, #12]	; (8001c38 <SPI2_Init+0xbc>)
 8001c2c:	f7ff fd20 	bl	8001670 <LL_SPI_Enable>

}
 8001c30:	bf00      	nop
 8001c32:	3740      	adds	r7, #64	; 0x40
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40003800 	.word	0x40003800
 8001c3c:	48000800 	.word	0x48000800
 8001c40:	48000400 	.word	0x48000400

08001c44 <I2C1_Init>:
/**
  * @brief  Setup I2C.
  * @param  None
  * @retval None
*/
void I2C1_Init(void){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08e      	sub	sp, #56	; 0x38
 8001c48:	af00      	add	r7, sp, #0
	LL_I2C_InitTypeDef I2C_InitStruct;

  	LL_GPIO_InitTypeDef GPIO_InitStruct;

  	/* Peripheral clock enable */
  	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001c4a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001c4e:	f7ff fcdf 	bl	8001610 <LL_APB1_GRP1_EnableClock>
  	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001c52:	2002      	movs	r0, #2
 8001c54:	f7ff fcc4 	bl	80015e0 <LL_AHB2_GRP1_EnableClock>
  
  	/**I2C1 GPIO Configuration  
  	PB6   ------> I2C1_SCL
  	PB7   ------> I2C1_SDA 
  	*/
  	GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001c58:	23c0      	movs	r3, #192	; 0xc0
 8001c5a:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c60:	2303      	movs	r3, #3
 8001c62:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001c64:	2301      	movs	r3, #1
 8001c66:	613b      	str	r3, [r7, #16]
  	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
  	GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	61bb      	str	r3, [r7, #24]
  	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	4619      	mov	r1, r3
 8001c74:	4817      	ldr	r0, [pc, #92]	; (8001cd4 <I2C1_Init+0x90>)
 8001c76:	f7fe fbfe 	bl	8000476 <LL_GPIO_Init>

    /**I2C Initialization 
    */
  	LL_I2C_EnableAutoEndMode(I2C1);
 8001c7a:	4817      	ldr	r0, [pc, #92]	; (8001cd8 <I2C1_Init+0x94>)
 8001c7c:	f7ff fca0 	bl	80015c0 <LL_I2C_EnableAutoEndMode>
	LL_I2C_DisableOwnAddress2(I2C1);
 8001c80:	4815      	ldr	r0, [pc, #84]	; (8001cd8 <I2C1_Init+0x94>)
 8001c82:	f7ff fc8d 	bl	80015a0 <LL_I2C_DisableOwnAddress2>
  	LL_I2C_DisableGeneralCall(I2C1);
 8001c86:	4814      	ldr	r0, [pc, #80]	; (8001cd8 <I2C1_Init+0x94>)
 8001c88:	f7ff fc62 	bl	8001550 <LL_I2C_DisableGeneralCall>
  	LL_I2C_EnableClockStretching(I2C1);
 8001c8c:	4812      	ldr	r0, [pc, #72]	; (8001cd8 <I2C1_Init+0x94>)
 8001c8e:	f7ff fc4f 	bl	8001530 <LL_I2C_EnableClockStretching>

  	I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
  	I2C_InitStruct.Timing = 0x10909CEC;//0x00702991;
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <I2C1_Init+0x98>)
 8001c98:	623b      	str	r3, [r7, #32]
  	I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  	I2C_InitStruct.DigitalFilter = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  	I2C_InitStruct.OwnAddress1 = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  	I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK; //LL_I2C_NACK 
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	633b      	str	r3, [r7, #48]	; 0x30
  	I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001caa:	2300      	movs	r3, #0
 8001cac:	637b      	str	r3, [r7, #52]	; 0x34
  	LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001cae:	f107 031c 	add.w	r3, r7, #28
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4808      	ldr	r0, [pc, #32]	; (8001cd8 <I2C1_Init+0x94>)
 8001cb6:	f7fe fcfb 	bl	80006b0 <LL_I2C_Init>

  	LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4806      	ldr	r0, [pc, #24]	; (8001cd8 <I2C1_Init+0x94>)
 8001cc0:	f7ff fc56 	bl	8001570 <LL_I2C_SetOwnAddress2>

  	LL_I2C_Enable(I2C1);
 8001cc4:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <I2C1_Init+0x94>)
 8001cc6:	f7ff fc23 	bl	8001510 <LL_I2C_Enable>
}
 8001cca:	bf00      	nop
 8001ccc:	3738      	adds	r7, #56	; 0x38
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	48000400 	.word	0x48000400
 8001cd8:	40005400 	.word	0x40005400
 8001cdc:	10909cec 	.word	0x10909cec

08001ce0 <_Error_Handler>:
  *
  *
  *
  */
void _Error_Handler(char *file, int line)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]

	printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	4803      	ldr	r0, [pc, #12]	; (8001cfc <_Error_Handler+0x1c>)
 8001cf0:	f000 fb66 	bl	80023c0 <iprintf>
  /* User can add his own implementation to report the HAL error return state */
 //while(1)
  //{
 // }
  /* USER CODE END Error_Handler_Debug */
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	080032b8 	.word	0x080032b8

08001d00 <LL_I2C_IsActiveFlag_TXE>:
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <LL_I2C_IsActiveFlag_RXNE>:
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	bf0c      	ite	eq
 8001d3a:	2301      	moveq	r3, #1
 8001d3c:	2300      	movne	r3, #0
 8001d3e:	b2db      	uxtb	r3, r3
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_I2C_IsActiveFlag_STOP>:
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0320 	and.w	r3, r3, #32
 8001d5c:	2b20      	cmp	r3, #32
 8001d5e:	bf0c      	ite	eq
 8001d60:	2301      	moveq	r3, #1
 8001d62:	2300      	movne	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <LL_I2C_IsActiveFlag_TC>:
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d82:	2b40      	cmp	r3, #64	; 0x40
 8001d84:	bf0c      	ite	eq
 8001d86:	2301      	moveq	r3, #1
 8001d88:	2300      	movne	r3, #0
 8001d8a:	b2db      	uxtb	r3, r3
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_I2C_IsActiveFlag_BUSY>:
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dac:	bf0c      	ite	eq
 8001dae:	2301      	moveq	r3, #1
 8001db0:	2300      	movne	r3, #0
 8001db2:	b2db      	uxtb	r3, r3
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_I2C_ClearFlag_STOP>:
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	f043 0220 	orr.w	r2, r3, #32
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	61da      	str	r2, [r3, #28]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	0d5b      	lsrs	r3, r3, #21
 8001df6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <LL_I2C_HandleTransfer+0x48>)
 8001dfc:	430b      	orrs	r3, r1
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	401a      	ands	r2, r3
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4319      	orrs	r1, r3
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	041b      	lsls	r3, r3, #16
 8001e0c:	4319      	orrs	r1, r3
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4319      	orrs	r1, r3
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	430b      	orrs	r3, r1
 8001e16:	431a      	orrs	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	03ff7bff 	.word	0x03ff7bff

08001e2c <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	b2db      	uxtb	r3, r3
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001e52:	78fa      	ldrb	r2, [r7, #3]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <I2C_Read_addr_a_module>:
  * @param  namber_value
  * @retval An ErrorStatus enumeration
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
uint8_t I2C_Read_addr_a_module(I2C_TypeDef *I2Cx,uint32_t SlaveAddr){
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af02      	add	r7, sp, #8
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]

	uint8_t address_module;

	SlaveAddr=SlaveAddr<<1;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	603b      	str	r3, [r7, #0]
	
	while(LL_I2C_IsActiveFlag_BUSY(I2Cx)==SET); 
 8001e74:	bf00      	nop
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff ff8e 	bl	8001d98 <LL_I2C_IsActiveFlag_BUSY>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d0f9      	beq.n	8001e76 <I2C_Read_addr_a_module+0x12>

	LL_I2C_HandleTransfer(I2Cx, SlaveAddr,LL_I2C_ADDRSLAVE_7BIT, 1,LL_I2C_MODE_SOFTEND,LL_I2C_GENERATE_START_WRITE ); //LL_I2C_GENERATE_START_READ
 8001e82:	4b28      	ldr	r3, [pc, #160]	; (8001f24 <I2C_Read_addr_a_module+0xc0>)
 8001e84:	9301      	str	r3, [sp, #4]
 8001e86:	2300      	movs	r3, #0
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	6839      	ldr	r1, [r7, #0]
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff ffa5 	bl	8001de0 <LL_I2C_HandleTransfer>
	while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);
 8001e96:	bf00      	nop
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ff31 	bl	8001d00 <LL_I2C_IsActiveFlag_TXE>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f9      	beq.n	8001e98 <I2C_Read_addr_a_module+0x34>


	LL_I2C_TransmitData8(I2Cx, 0x00);
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffcd 	bl	8001e46 <LL_I2C_TransmitData8>
	while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);
 8001eac:	bf00      	nop
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ff26 	bl	8001d00 <LL_I2C_IsActiveFlag_TXE>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f9      	beq.n	8001eae <I2C_Read_addr_a_module+0x4a>
	while(LL_I2C_IsActiveFlag_TC(I2Cx)==RESET);
 8001eba:	bf00      	nop
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ff58 	bl	8001d72 <LL_I2C_IsActiveFlag_TC>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f9      	beq.n	8001ebc <I2C_Read_addr_a_module+0x58>

	LL_I2C_HandleTransfer(I2Cx, SlaveAddr,LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_RESTART_7BIT_READ); //LL_I2C_MODE_SOFTEND
 8001ec8:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <I2C_Read_addr_a_module+0xc4>)
 8001eca:	9301      	str	r3, [sp, #4]
 8001ecc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	6839      	ldr	r1, [r7, #0]
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff81 	bl	8001de0 <LL_I2C_HandleTransfer>

	while(LL_I2C_IsActiveFlag_STOP(I2Cx)==RESET);
 8001ede:	bf00      	nop
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ff33 	bl	8001d4c <LL_I2C_IsActiveFlag_STOP>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f9      	beq.n	8001ee0 <I2C_Read_addr_a_module+0x7c>
	while(LL_I2C_IsActiveFlag_RXNE(I2Cx)==RESET);
 8001eec:	bf00      	nop
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ff19 	bl	8001d26 <LL_I2C_IsActiveFlag_RXNE>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f9      	beq.n	8001eee <I2C_Read_addr_a_module+0x8a>

	address_module=(0x1F & (LL_I2C_ReceiveData8(I2Cx))); //0x1F & - because address contain only 5 bits (xxxAAAAA)
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff ff96 	bl	8001e2c <LL_I2C_ReceiveData8>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f003 031f 	and.w	r3, r3, #31
 8001f06:	73fb      	strb	r3, [r7, #15]

	LL_I2C_ClearFlag_STOP(I2Cx);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ff59 	bl	8001dc0 <LL_I2C_ClearFlag_STOP>

#ifdef DEBUGprintf
			printf("Address Module=%d \r\n", address_module);
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	4619      	mov	r1, r3
 8001f12:	4806      	ldr	r0, [pc, #24]	; (8001f2c <I2C_Read_addr_a_module+0xc8>)
 8001f14:	f000 fa54 	bl	80023c0 <iprintf>
#endif

	return address_module;
 8001f18:	7bfb      	ldrb	r3, [r7, #15]

}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	80002000 	.word	0x80002000
 8001f28:	80002400 	.word	0x80002400
 8001f2c:	080032e8 	.word	0x080032e8

08001f30 <LL_GPIO_ResetOutputPin>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <main>:
_SETTINGS_MODULE config_mod, *CONF_MOD_ptr=&config_mod;

_UART_BUF uart1_buf, *UART1_BUF_ptr=&uart1_buf;


int main(void){
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0

	uint8_t i=0, pin=1;
 8001f52:	2300      	movs	r3, #0
 8001f54:	71fb      	strb	r3, [r7, #7]
 8001f56:	2301      	movs	r3, #1
 8001f58:	71bb      	strb	r3, [r7, #6]

	LL_Init();
 8001f5a:	f7ff fc21 	bl	80017a0 <LL_Init>
	SystemClock_Config(); //Setup sysytem clock at 80 MHz
 8001f5e:	f7ff fc81 	bl	8001864 <SystemClock_Config>
	//LL_RCC_GetSystemClocksFreq(CHECK_RCC_CLOCKS); // Only for check setup clock Not need use in release
	printf("Hello human. I am Analog module.\r\n");
 8001f62:	4810      	ldr	r0, [pc, #64]	; (8001fa4 <main+0x58>)
 8001f64:	f000 faa0 	bl	80024a8 <puts>
	printf("Start setup periphery STM32L452.....\r\n");
 8001f68:	480f      	ldr	r0, [pc, #60]	; (8001fa8 <main+0x5c>)
 8001f6a:	f000 fa9d 	bl	80024a8 <puts>
	SetupLED(); //протестить с LL_GPIO_OUTPUT_OPENDRAIN
 8001f6e:	f7ff fce7 	bl	8001940 <SetupLED>
	SetupGPIO();
 8001f72:	f7ff fd07 	bl	8001984 <SetupGPIO>
	USART1_Init();
 8001f76:	f7ff fd9f 	bl	8001ab8 <USART1_Init>
	SPI2_Init();
 8001f7a:	f7ff fdff 	bl	8001b7c <SPI2_Init>
	I2C1_Init();
 8001f7e:	f7ff fe61 	bl	8001c44 <I2C1_Init>

	LED_Yellow_HL1_ON();
 8001f82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f86:	4809      	ldr	r0, [pc, #36]	; (8001fac <main+0x60>)
 8001f88:	f7ff ffd2 	bl	8001f30 <LL_GPIO_ResetOutputPin>

	printf("Finish setup periphery. Success! \r\n");
 8001f8c:	4808      	ldr	r0, [pc, #32]	; (8001fb0 <main+0x64>)
 8001f8e:	f000 fa8b 	bl	80024a8 <puts>
while(1){
	CONF_MOD_ptr->addr_module =I2C_Read_addr_a_module(I2C1, ADDR_I2C_TCA9554PWR);
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <main+0x68>)
 8001f94:	681c      	ldr	r4, [r3, #0]
 8001f96:	2120      	movs	r1, #32
 8001f98:	4807      	ldr	r0, [pc, #28]	; (8001fb8 <main+0x6c>)
 8001f9a:	f7ff ff63 	bl	8001e64 <I2C_Read_addr_a_module>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	7023      	strb	r3, [r4, #0]
 8001fa2:	e7f6      	b.n	8001f92 <main+0x46>
 8001fa4:	08003300 	.word	0x08003300
 8001fa8:	08003324 	.word	0x08003324
 8001fac:	48000800 	.word	0x48000800
 8001fb0:	0800334c 	.word	0x0800334c
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	40005400 	.word	0x40005400

08001fbc <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	f003 0320 	and.w	r3, r3, #32
 8001fcc:	2b20      	cmp	r3, #32
 8001fce:	bf0c      	ite	eq
 8001fd0:	2301      	moveq	r3, #1
 8001fd2:	2300      	movne	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ff4:	b29b      	uxth	r3, r3
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <HardFault_Handler+0x4>

08002016 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800201a:	e7fe      	b.n	800201a <MemManage_Handler+0x4>

0800201c <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002020:	e7fe      	b.n	8002020 <BusFault_Handler+0x4>

08002022 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002026:	e7fe      	b.n	8002026 <UsageFault_Handler+0x4>

08002028 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <USART1_IRQHandler>:
/******************************************************************************/

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void){
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0

    uint16_t input_data9b = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	80fb      	strh	r3, [r7, #6]
    uint8_t input_data8b = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	717b      	strb	r3, [r7, #5]
   
    if(LL_USART_IsActiveFlag_RXNE(USART1)){
 800206e:	482e      	ldr	r0, [pc, #184]	; (8002128 <USART1_IRQHandler+0xc8>)
 8002070:	f7ff ffa4 	bl	8001fbc <LL_USART_IsActiveFlag_RXNE>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d052      	beq.n	8002120 <USART1_IRQHandler+0xc0>

        input_data9b = LL_USART_ReceiveData9(USART1);
 800207a:	482b      	ldr	r0, [pc, #172]	; (8002128 <USART1_IRQHandler+0xc8>)
 800207c:	f7ff ffb1 	bl	8001fe2 <LL_USART_ReceiveData9>
 8002080:	4603      	mov	r3, r0
 8002082:	80fb      	strh	r3, [r7, #6]

        if( (input_data9b & 0x0100) != 0 ){ //check that we got byte with address 
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d028      	beq.n	80020e0 <USART1_IRQHandler+0x80>

            input_data8b = (uint8_t)input_data9b;
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	717b      	strb	r3, [r7, #5]

            if( input_data8b == CONF_MOD_ptr->addr_module_req_data_adc ){ // check got request ADC data 
 8002092:	4b26      	ldr	r3, [pc, #152]	; (800212c <USART1_IRQHandler+0xcc>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	785b      	ldrb	r3, [r3, #1]
 8002098:	797a      	ldrb	r2, [r7, #5]
 800209a:	429a      	cmp	r2, r3
 800209c:	d108      	bne.n	80020b0 <USART1_IRQHandler+0x50>

                UART1_BUF_ptr->ADC_data_request_flag = 1;
 800209e:	4b24      	ldr	r3, [pc, #144]	; (8002130 <USART1_IRQHandler+0xd0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2201      	movs	r2, #1
 80020a4:	71da      	strb	r2, [r3, #7]
                UART1_BUF_ptr->received_command_flag = 1;
 80020a6:	4b22      	ldr	r3, [pc, #136]	; (8002130 <USART1_IRQHandler+0xd0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2201      	movs	r2, #1
 80020ac:	719a      	strb	r2, [r3, #6]
  	 a read to the USART_RDR register. The RXNE
  	flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register.
  	An interrupt is generated if RXNEIE=1 in the USART_CR1 register.
  	0: data is not received
  	1: Received data is ready to be read.*/
}
 80020ae:	e037      	b.n	8002120 <USART1_IRQHandler+0xc0>
            } else if( (input_data8b == 0x00) || ((input_data8b>>3) == CONF_MOD_ptr->addr_module) ){ // chaeck we got broadcast message or me address module
 80020b0:	797b      	ldrb	r3, [r7, #5]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d007      	beq.n	80020c6 <USART1_IRQHandler+0x66>
 80020b6:	797b      	ldrb	r3, [r7, #5]
 80020b8:	08db      	lsrs	r3, r3, #3
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <USART1_IRQHandler+0xcc>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d12c      	bne.n	8002120 <USART1_IRQHandler+0xc0>
                  UART1_BUF_ptr->UART_Recive_Buf[0] = input_data8b;
 80020c6:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <USART1_IRQHandler+0xd0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	797a      	ldrb	r2, [r7, #5]
 80020cc:	701a      	strb	r2, [r3, #0]
                  UART1_BUF_ptr->UART_rec_buf_len = 1;
 80020ce:	4b18      	ldr	r3, [pc, #96]	; (8002130 <USART1_IRQHandler+0xd0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2201      	movs	r2, #1
 80020d4:	711a      	strb	r2, [r3, #4]
                  UART1_BUF_ptr->recive_data_permit_flag = 1;
 80020d6:	4b16      	ldr	r3, [pc, #88]	; (8002130 <USART1_IRQHandler+0xd0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2201      	movs	r2, #1
 80020dc:	715a      	strb	r2, [r3, #5]
}
 80020de:	e01f      	b.n	8002120 <USART1_IRQHandler+0xc0>
        } else if( UART1_BUF_ptr->recive_data_permit_flag == 1 ){ // getting data if we have permit to recive byte with data 
 80020e0:	4b13      	ldr	r3, [pc, #76]	; (8002130 <USART1_IRQHandler+0xd0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	795b      	ldrb	r3, [r3, #5]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d11a      	bne.n	8002120 <USART1_IRQHandler+0xc0>
            UART1_BUF_ptr->UART_Recive_Buf[ UART1_BUF_ptr->UART_rec_buf_len ] = (uint8_t)input_data9b;
 80020ea:	4b11      	ldr	r3, [pc, #68]	; (8002130 <USART1_IRQHandler+0xd0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a10      	ldr	r2, [pc, #64]	; (8002130 <USART1_IRQHandler+0xd0>)
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	7912      	ldrb	r2, [r2, #4]
 80020f4:	88f9      	ldrh	r1, [r7, #6]
 80020f6:	b2c9      	uxtb	r1, r1
 80020f8:	5499      	strb	r1, [r3, r2]
            UART1_BUF_ptr->UART_rec_buf_len++;
 80020fa:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <USART1_IRQHandler+0xd0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	791a      	ldrb	r2, [r3, #4]
 8002100:	3201      	adds	r2, #1
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	711a      	strb	r2, [r3, #4]
            if( UART1_BUF_ptr->UART_rec_buf_len == 4 ){ // finish getting command
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <USART1_IRQHandler+0xd0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	791b      	ldrb	r3, [r3, #4]
 800210c:	2b04      	cmp	r3, #4
 800210e:	d107      	bne.n	8002120 <USART1_IRQHandler+0xc0>
                UART1_BUF_ptr->received_command_flag = 1;
 8002110:	4b07      	ldr	r3, [pc, #28]	; (8002130 <USART1_IRQHandler+0xd0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2201      	movs	r2, #1
 8002116:	719a      	strb	r2, [r3, #6]
                UART1_BUF_ptr->recive_data_permit_flag = 0;
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <USART1_IRQHandler+0xd0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2200      	movs	r2, #0
 800211e:	715a      	strb	r2, [r3, #5]
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40013800 	.word	0x40013800
 800212c:	20000000 	.word	0x20000000
 8002130:	20000004 	.word	0x20000004

08002134 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800213c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002140:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d013      	beq.n	8002174 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800214c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002150:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002154:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00b      	beq.n	8002174 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800215c:	e000      	b.n	8002160 <ITM_SendChar+0x2c>
  __ASM volatile ("nop");
 800215e:	bf00      	nop
 8002160:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f9      	beq.n	800215e <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800216a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002174:	687b      	ldr	r3, [r7, #4]
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b086      	sub	sp, #24
 8002186:	af00      	add	r7, sp, #0
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
	/* return len; */
	
	//errno = ENOSYS;
	//return -1;

	int i=0;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++){
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	e009      	b.n	80021ac <_write+0x2a>
		ITM_SendChar((*ptr++));
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	60ba      	str	r2, [r7, #8]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ffc7 	bl	8002134 <ITM_SendChar>
	for(i=0;i<len;i++){
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	3301      	adds	r3, #1
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	dbf1      	blt.n	8002198 <_write+0x16>
	}
	return len;
 80021b4:	687b      	ldr	r3, [r7, #4]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <_sbrk>:

void * _sbrk(int32_t incr)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <_sbrk+0x38>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d102      	bne.n	80021d6 <_sbrk+0x16>
		heap_end = & end;
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <_sbrk+0x38>)
 80021d2:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <_sbrk+0x3c>)
 80021d4:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <_sbrk+0x38>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <_sbrk+0x38>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4413      	add	r3, r2
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <_sbrk+0x38>)
 80021e6:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 80021e8:	68fb      	ldr	r3, [r7, #12]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	2000008c 	.word	0x2000008c
 80021fc:	200000a8 	.word	0x200000a8

08002200 <_close>:

int _close(int32_t file)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <_close+0x20>)
 800220a:	2258      	movs	r2, #88	; 0x58
 800220c:	601a      	str	r2, [r3, #0]
	return -1;
 800220e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	200000a4 	.word	0x200000a4

08002224 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <_fstat+0x20>)
 8002230:	2258      	movs	r2, #88	; 0x58
 8002232:	601a      	str	r2, [r3, #0]
	return -1;
 8002234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	200000a4 	.word	0x200000a4

08002248 <_isatty>:

int _isatty(int32_t file)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <_isatty+0x1c>)
 8002252:	2258      	movs	r2, #88	; 0x58
 8002254:	601a      	str	r2, [r3, #0]
	return 0;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	200000a4 	.word	0x200000a4

08002268 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <_lseek+0x24>)
 8002276:	2258      	movs	r2, #88	; 0x58
 8002278:	601a      	str	r2, [r3, #0]
	return -1;
 800227a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800227e:	4618      	mov	r0, r3
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	200000a4 	.word	0x200000a4

08002290 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <_read+0x24>)
 800229e:	2258      	movs	r2, #88	; 0x58
 80022a0:	601a      	str	r2, [r3, #0]
	return -1;
 80022a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	200000a4 	.word	0x200000a4

080022b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022bc:	4a17      	ldr	r2, [pc, #92]	; (800231c <SystemInit+0x64>)
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <SystemInit+0x64>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80022cc:	4a14      	ldr	r2, [pc, #80]	; (8002320 <SystemInit+0x68>)
 80022ce:	4b14      	ldr	r3, [pc, #80]	; (8002320 <SystemInit+0x68>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <SystemInit+0x68>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80022de:	4a10      	ldr	r2, [pc, #64]	; (8002320 <SystemInit+0x68>)
 80022e0:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <SystemInit+0x68>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80022e8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80022ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <SystemInit+0x68>)
 80022f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022f4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022f6:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <SystemInit+0x68>)
 80022f8:	4b09      	ldr	r3, [pc, #36]	; (8002320 <SystemInit+0x68>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002300:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <SystemInit+0x68>)
 8002304:	2200      	movs	r2, #0
 8002306:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <SystemInit+0x64>)
 800230a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800230e:	609a      	str	r2, [r3, #8]
#endif
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	e000ed00 	.word	0xe000ed00
 8002320:	40021000 	.word	0x40021000

08002324 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800235c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002328:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800232a:	e003      	b.n	8002334 <LoopCopyDataInit>

0800232c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800232e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002330:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002332:	3104      	adds	r1, #4

08002334 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002334:	480b      	ldr	r0, [pc, #44]	; (8002364 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002336:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002338:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800233a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800233c:	d3f6      	bcc.n	800232c <CopyDataInit>
	ldr	r2, =_sbss
 800233e:	4a0b      	ldr	r2, [pc, #44]	; (800236c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002340:	e002      	b.n	8002348 <LoopFillZerobss>

08002342 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002342:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002344:	f842 3b04 	str.w	r3, [r2], #4

08002348 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <LoopForever+0x16>)
	cmp	r2, r3
 800234a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800234c:	d3f9      	bcc.n	8002342 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800234e:	f7ff ffb3 	bl	80022b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002352:	f000 f811 	bl	8002378 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002356:	f7ff fdf9 	bl	8001f4c <main>

0800235a <LoopForever>:

LoopForever:
    b LoopForever
 800235a:	e7fe      	b.n	800235a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800235c:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8002360:	08003458 	.word	0x08003458
	ldr	r0, =_sdata
 8002364:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002368:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 800236c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8002370:	200000a8 	.word	0x200000a8

08002374 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002374:	e7fe      	b.n	8002374 <ADC1_IRQHandler>
	...

08002378 <__libc_init_array>:
 8002378:	b570      	push	{r4, r5, r6, lr}
 800237a:	4e0d      	ldr	r6, [pc, #52]	; (80023b0 <__libc_init_array+0x38>)
 800237c:	4c0d      	ldr	r4, [pc, #52]	; (80023b4 <__libc_init_array+0x3c>)
 800237e:	1ba4      	subs	r4, r4, r6
 8002380:	10a4      	asrs	r4, r4, #2
 8002382:	2500      	movs	r5, #0
 8002384:	42a5      	cmp	r5, r4
 8002386:	d109      	bne.n	800239c <__libc_init_array+0x24>
 8002388:	4e0b      	ldr	r6, [pc, #44]	; (80023b8 <__libc_init_array+0x40>)
 800238a:	4c0c      	ldr	r4, [pc, #48]	; (80023bc <__libc_init_array+0x44>)
 800238c:	f000 ff7c 	bl	8003288 <_init>
 8002390:	1ba4      	subs	r4, r4, r6
 8002392:	10a4      	asrs	r4, r4, #2
 8002394:	2500      	movs	r5, #0
 8002396:	42a5      	cmp	r5, r4
 8002398:	d105      	bne.n	80023a6 <__libc_init_array+0x2e>
 800239a:	bd70      	pop	{r4, r5, r6, pc}
 800239c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023a0:	4798      	blx	r3
 80023a2:	3501      	adds	r5, #1
 80023a4:	e7ee      	b.n	8002384 <__libc_init_array+0xc>
 80023a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023aa:	4798      	blx	r3
 80023ac:	3501      	adds	r5, #1
 80023ae:	e7f2      	b.n	8002396 <__libc_init_array+0x1e>
 80023b0:	08003450 	.word	0x08003450
 80023b4:	08003450 	.word	0x08003450
 80023b8:	08003450 	.word	0x08003450
 80023bc:	08003454 	.word	0x08003454

080023c0 <iprintf>:
 80023c0:	b40f      	push	{r0, r1, r2, r3}
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <iprintf+0x2c>)
 80023c4:	b513      	push	{r0, r1, r4, lr}
 80023c6:	681c      	ldr	r4, [r3, #0]
 80023c8:	b124      	cbz	r4, 80023d4 <iprintf+0x14>
 80023ca:	69a3      	ldr	r3, [r4, #24]
 80023cc:	b913      	cbnz	r3, 80023d4 <iprintf+0x14>
 80023ce:	4620      	mov	r0, r4
 80023d0:	f000 fa24 	bl	800281c <__sinit>
 80023d4:	ab05      	add	r3, sp, #20
 80023d6:	9a04      	ldr	r2, [sp, #16]
 80023d8:	68a1      	ldr	r1, [r4, #8]
 80023da:	9301      	str	r3, [sp, #4]
 80023dc:	4620      	mov	r0, r4
 80023de:	f000 fbe9 	bl	8002bb4 <_vfiprintf_r>
 80023e2:	b002      	add	sp, #8
 80023e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023e8:	b004      	add	sp, #16
 80023ea:	4770      	bx	lr
 80023ec:	2000000c 	.word	0x2000000c

080023f0 <_puts_r>:
 80023f0:	b570      	push	{r4, r5, r6, lr}
 80023f2:	460e      	mov	r6, r1
 80023f4:	4605      	mov	r5, r0
 80023f6:	b118      	cbz	r0, 8002400 <_puts_r+0x10>
 80023f8:	6983      	ldr	r3, [r0, #24]
 80023fa:	b90b      	cbnz	r3, 8002400 <_puts_r+0x10>
 80023fc:	f000 fa0e 	bl	800281c <__sinit>
 8002400:	69ab      	ldr	r3, [r5, #24]
 8002402:	68ac      	ldr	r4, [r5, #8]
 8002404:	b913      	cbnz	r3, 800240c <_puts_r+0x1c>
 8002406:	4628      	mov	r0, r5
 8002408:	f000 fa08 	bl	800281c <__sinit>
 800240c:	4b23      	ldr	r3, [pc, #140]	; (800249c <_puts_r+0xac>)
 800240e:	429c      	cmp	r4, r3
 8002410:	d117      	bne.n	8002442 <_puts_r+0x52>
 8002412:	686c      	ldr	r4, [r5, #4]
 8002414:	89a3      	ldrh	r3, [r4, #12]
 8002416:	071b      	lsls	r3, r3, #28
 8002418:	d51d      	bpl.n	8002456 <_puts_r+0x66>
 800241a:	6923      	ldr	r3, [r4, #16]
 800241c:	b1db      	cbz	r3, 8002456 <_puts_r+0x66>
 800241e:	3e01      	subs	r6, #1
 8002420:	68a3      	ldr	r3, [r4, #8]
 8002422:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002426:	3b01      	subs	r3, #1
 8002428:	60a3      	str	r3, [r4, #8]
 800242a:	b9e9      	cbnz	r1, 8002468 <_puts_r+0x78>
 800242c:	2b00      	cmp	r3, #0
 800242e:	da2e      	bge.n	800248e <_puts_r+0x9e>
 8002430:	4622      	mov	r2, r4
 8002432:	210a      	movs	r1, #10
 8002434:	4628      	mov	r0, r5
 8002436:	f000 f83f 	bl	80024b8 <__swbuf_r>
 800243a:	3001      	adds	r0, #1
 800243c:	d011      	beq.n	8002462 <_puts_r+0x72>
 800243e:	200a      	movs	r0, #10
 8002440:	bd70      	pop	{r4, r5, r6, pc}
 8002442:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <_puts_r+0xb0>)
 8002444:	429c      	cmp	r4, r3
 8002446:	d101      	bne.n	800244c <_puts_r+0x5c>
 8002448:	68ac      	ldr	r4, [r5, #8]
 800244a:	e7e3      	b.n	8002414 <_puts_r+0x24>
 800244c:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <_puts_r+0xb4>)
 800244e:	429c      	cmp	r4, r3
 8002450:	bf08      	it	eq
 8002452:	68ec      	ldreq	r4, [r5, #12]
 8002454:	e7de      	b.n	8002414 <_puts_r+0x24>
 8002456:	4621      	mov	r1, r4
 8002458:	4628      	mov	r0, r5
 800245a:	f000 f87f 	bl	800255c <__swsetup_r>
 800245e:	2800      	cmp	r0, #0
 8002460:	d0dd      	beq.n	800241e <_puts_r+0x2e>
 8002462:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002466:	bd70      	pop	{r4, r5, r6, pc}
 8002468:	2b00      	cmp	r3, #0
 800246a:	da04      	bge.n	8002476 <_puts_r+0x86>
 800246c:	69a2      	ldr	r2, [r4, #24]
 800246e:	4293      	cmp	r3, r2
 8002470:	db06      	blt.n	8002480 <_puts_r+0x90>
 8002472:	290a      	cmp	r1, #10
 8002474:	d004      	beq.n	8002480 <_puts_r+0x90>
 8002476:	6823      	ldr	r3, [r4, #0]
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	6022      	str	r2, [r4, #0]
 800247c:	7019      	strb	r1, [r3, #0]
 800247e:	e7cf      	b.n	8002420 <_puts_r+0x30>
 8002480:	4622      	mov	r2, r4
 8002482:	4628      	mov	r0, r5
 8002484:	f000 f818 	bl	80024b8 <__swbuf_r>
 8002488:	3001      	adds	r0, #1
 800248a:	d1c9      	bne.n	8002420 <_puts_r+0x30>
 800248c:	e7e9      	b.n	8002462 <_puts_r+0x72>
 800248e:	6823      	ldr	r3, [r4, #0]
 8002490:	200a      	movs	r0, #10
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	6022      	str	r2, [r4, #0]
 8002496:	7018      	strb	r0, [r3, #0]
 8002498:	bd70      	pop	{r4, r5, r6, pc}
 800249a:	bf00      	nop
 800249c:	080033d8 	.word	0x080033d8
 80024a0:	080033f8 	.word	0x080033f8
 80024a4:	080033b8 	.word	0x080033b8

080024a8 <puts>:
 80024a8:	4b02      	ldr	r3, [pc, #8]	; (80024b4 <puts+0xc>)
 80024aa:	4601      	mov	r1, r0
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	f7ff bf9f 	b.w	80023f0 <_puts_r>
 80024b2:	bf00      	nop
 80024b4:	2000000c 	.word	0x2000000c

080024b8 <__swbuf_r>:
 80024b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ba:	460e      	mov	r6, r1
 80024bc:	4614      	mov	r4, r2
 80024be:	4605      	mov	r5, r0
 80024c0:	b118      	cbz	r0, 80024ca <__swbuf_r+0x12>
 80024c2:	6983      	ldr	r3, [r0, #24]
 80024c4:	b90b      	cbnz	r3, 80024ca <__swbuf_r+0x12>
 80024c6:	f000 f9a9 	bl	800281c <__sinit>
 80024ca:	4b21      	ldr	r3, [pc, #132]	; (8002550 <__swbuf_r+0x98>)
 80024cc:	429c      	cmp	r4, r3
 80024ce:	d12a      	bne.n	8002526 <__swbuf_r+0x6e>
 80024d0:	686c      	ldr	r4, [r5, #4]
 80024d2:	69a3      	ldr	r3, [r4, #24]
 80024d4:	60a3      	str	r3, [r4, #8]
 80024d6:	89a3      	ldrh	r3, [r4, #12]
 80024d8:	071a      	lsls	r2, r3, #28
 80024da:	d52e      	bpl.n	800253a <__swbuf_r+0x82>
 80024dc:	6923      	ldr	r3, [r4, #16]
 80024de:	b363      	cbz	r3, 800253a <__swbuf_r+0x82>
 80024e0:	6923      	ldr	r3, [r4, #16]
 80024e2:	6820      	ldr	r0, [r4, #0]
 80024e4:	1ac0      	subs	r0, r0, r3
 80024e6:	6963      	ldr	r3, [r4, #20]
 80024e8:	b2f6      	uxtb	r6, r6
 80024ea:	4298      	cmp	r0, r3
 80024ec:	4637      	mov	r7, r6
 80024ee:	db04      	blt.n	80024fa <__swbuf_r+0x42>
 80024f0:	4621      	mov	r1, r4
 80024f2:	4628      	mov	r0, r5
 80024f4:	f000 f928 	bl	8002748 <_fflush_r>
 80024f8:	bb28      	cbnz	r0, 8002546 <__swbuf_r+0x8e>
 80024fa:	68a3      	ldr	r3, [r4, #8]
 80024fc:	3b01      	subs	r3, #1
 80024fe:	60a3      	str	r3, [r4, #8]
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	6022      	str	r2, [r4, #0]
 8002506:	701e      	strb	r6, [r3, #0]
 8002508:	6963      	ldr	r3, [r4, #20]
 800250a:	3001      	adds	r0, #1
 800250c:	4298      	cmp	r0, r3
 800250e:	d004      	beq.n	800251a <__swbuf_r+0x62>
 8002510:	89a3      	ldrh	r3, [r4, #12]
 8002512:	07db      	lsls	r3, r3, #31
 8002514:	d519      	bpl.n	800254a <__swbuf_r+0x92>
 8002516:	2e0a      	cmp	r6, #10
 8002518:	d117      	bne.n	800254a <__swbuf_r+0x92>
 800251a:	4621      	mov	r1, r4
 800251c:	4628      	mov	r0, r5
 800251e:	f000 f913 	bl	8002748 <_fflush_r>
 8002522:	b190      	cbz	r0, 800254a <__swbuf_r+0x92>
 8002524:	e00f      	b.n	8002546 <__swbuf_r+0x8e>
 8002526:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <__swbuf_r+0x9c>)
 8002528:	429c      	cmp	r4, r3
 800252a:	d101      	bne.n	8002530 <__swbuf_r+0x78>
 800252c:	68ac      	ldr	r4, [r5, #8]
 800252e:	e7d0      	b.n	80024d2 <__swbuf_r+0x1a>
 8002530:	4b09      	ldr	r3, [pc, #36]	; (8002558 <__swbuf_r+0xa0>)
 8002532:	429c      	cmp	r4, r3
 8002534:	bf08      	it	eq
 8002536:	68ec      	ldreq	r4, [r5, #12]
 8002538:	e7cb      	b.n	80024d2 <__swbuf_r+0x1a>
 800253a:	4621      	mov	r1, r4
 800253c:	4628      	mov	r0, r5
 800253e:	f000 f80d 	bl	800255c <__swsetup_r>
 8002542:	2800      	cmp	r0, #0
 8002544:	d0cc      	beq.n	80024e0 <__swbuf_r+0x28>
 8002546:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800254a:	4638      	mov	r0, r7
 800254c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800254e:	bf00      	nop
 8002550:	080033d8 	.word	0x080033d8
 8002554:	080033f8 	.word	0x080033f8
 8002558:	080033b8 	.word	0x080033b8

0800255c <__swsetup_r>:
 800255c:	4b32      	ldr	r3, [pc, #200]	; (8002628 <__swsetup_r+0xcc>)
 800255e:	b570      	push	{r4, r5, r6, lr}
 8002560:	681d      	ldr	r5, [r3, #0]
 8002562:	4606      	mov	r6, r0
 8002564:	460c      	mov	r4, r1
 8002566:	b125      	cbz	r5, 8002572 <__swsetup_r+0x16>
 8002568:	69ab      	ldr	r3, [r5, #24]
 800256a:	b913      	cbnz	r3, 8002572 <__swsetup_r+0x16>
 800256c:	4628      	mov	r0, r5
 800256e:	f000 f955 	bl	800281c <__sinit>
 8002572:	4b2e      	ldr	r3, [pc, #184]	; (800262c <__swsetup_r+0xd0>)
 8002574:	429c      	cmp	r4, r3
 8002576:	d10f      	bne.n	8002598 <__swsetup_r+0x3c>
 8002578:	686c      	ldr	r4, [r5, #4]
 800257a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800257e:	b29a      	uxth	r2, r3
 8002580:	0715      	lsls	r5, r2, #28
 8002582:	d42c      	bmi.n	80025de <__swsetup_r+0x82>
 8002584:	06d0      	lsls	r0, r2, #27
 8002586:	d411      	bmi.n	80025ac <__swsetup_r+0x50>
 8002588:	2209      	movs	r2, #9
 800258a:	6032      	str	r2, [r6, #0]
 800258c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002590:	81a3      	strh	r3, [r4, #12]
 8002592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002596:	bd70      	pop	{r4, r5, r6, pc}
 8002598:	4b25      	ldr	r3, [pc, #148]	; (8002630 <__swsetup_r+0xd4>)
 800259a:	429c      	cmp	r4, r3
 800259c:	d101      	bne.n	80025a2 <__swsetup_r+0x46>
 800259e:	68ac      	ldr	r4, [r5, #8]
 80025a0:	e7eb      	b.n	800257a <__swsetup_r+0x1e>
 80025a2:	4b24      	ldr	r3, [pc, #144]	; (8002634 <__swsetup_r+0xd8>)
 80025a4:	429c      	cmp	r4, r3
 80025a6:	bf08      	it	eq
 80025a8:	68ec      	ldreq	r4, [r5, #12]
 80025aa:	e7e6      	b.n	800257a <__swsetup_r+0x1e>
 80025ac:	0751      	lsls	r1, r2, #29
 80025ae:	d512      	bpl.n	80025d6 <__swsetup_r+0x7a>
 80025b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80025b2:	b141      	cbz	r1, 80025c6 <__swsetup_r+0x6a>
 80025b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80025b8:	4299      	cmp	r1, r3
 80025ba:	d002      	beq.n	80025c2 <__swsetup_r+0x66>
 80025bc:	4630      	mov	r0, r6
 80025be:	f000 fa23 	bl	8002a08 <_free_r>
 80025c2:	2300      	movs	r3, #0
 80025c4:	6363      	str	r3, [r4, #52]	; 0x34
 80025c6:	89a3      	ldrh	r3, [r4, #12]
 80025c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80025cc:	81a3      	strh	r3, [r4, #12]
 80025ce:	2300      	movs	r3, #0
 80025d0:	6063      	str	r3, [r4, #4]
 80025d2:	6923      	ldr	r3, [r4, #16]
 80025d4:	6023      	str	r3, [r4, #0]
 80025d6:	89a3      	ldrh	r3, [r4, #12]
 80025d8:	f043 0308 	orr.w	r3, r3, #8
 80025dc:	81a3      	strh	r3, [r4, #12]
 80025de:	6923      	ldr	r3, [r4, #16]
 80025e0:	b94b      	cbnz	r3, 80025f6 <__swsetup_r+0x9a>
 80025e2:	89a3      	ldrh	r3, [r4, #12]
 80025e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80025e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ec:	d003      	beq.n	80025f6 <__swsetup_r+0x9a>
 80025ee:	4621      	mov	r1, r4
 80025f0:	4630      	mov	r0, r6
 80025f2:	f000 f9c1 	bl	8002978 <__smakebuf_r>
 80025f6:	89a2      	ldrh	r2, [r4, #12]
 80025f8:	f012 0301 	ands.w	r3, r2, #1
 80025fc:	d00c      	beq.n	8002618 <__swsetup_r+0xbc>
 80025fe:	2300      	movs	r3, #0
 8002600:	60a3      	str	r3, [r4, #8]
 8002602:	6963      	ldr	r3, [r4, #20]
 8002604:	425b      	negs	r3, r3
 8002606:	61a3      	str	r3, [r4, #24]
 8002608:	6923      	ldr	r3, [r4, #16]
 800260a:	b953      	cbnz	r3, 8002622 <__swsetup_r+0xc6>
 800260c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002610:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002614:	d1ba      	bne.n	800258c <__swsetup_r+0x30>
 8002616:	bd70      	pop	{r4, r5, r6, pc}
 8002618:	0792      	lsls	r2, r2, #30
 800261a:	bf58      	it	pl
 800261c:	6963      	ldrpl	r3, [r4, #20]
 800261e:	60a3      	str	r3, [r4, #8]
 8002620:	e7f2      	b.n	8002608 <__swsetup_r+0xac>
 8002622:	2000      	movs	r0, #0
 8002624:	e7f7      	b.n	8002616 <__swsetup_r+0xba>
 8002626:	bf00      	nop
 8002628:	2000000c 	.word	0x2000000c
 800262c:	080033d8 	.word	0x080033d8
 8002630:	080033f8 	.word	0x080033f8
 8002634:	080033b8 	.word	0x080033b8

08002638 <__sflush_r>:
 8002638:	898a      	ldrh	r2, [r1, #12]
 800263a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800263e:	4605      	mov	r5, r0
 8002640:	0710      	lsls	r0, r2, #28
 8002642:	460c      	mov	r4, r1
 8002644:	d45a      	bmi.n	80026fc <__sflush_r+0xc4>
 8002646:	684b      	ldr	r3, [r1, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	dc05      	bgt.n	8002658 <__sflush_r+0x20>
 800264c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	dc02      	bgt.n	8002658 <__sflush_r+0x20>
 8002652:	2000      	movs	r0, #0
 8002654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800265a:	2e00      	cmp	r6, #0
 800265c:	d0f9      	beq.n	8002652 <__sflush_r+0x1a>
 800265e:	2300      	movs	r3, #0
 8002660:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002664:	682f      	ldr	r7, [r5, #0]
 8002666:	602b      	str	r3, [r5, #0]
 8002668:	d033      	beq.n	80026d2 <__sflush_r+0x9a>
 800266a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800266c:	89a3      	ldrh	r3, [r4, #12]
 800266e:	075a      	lsls	r2, r3, #29
 8002670:	d505      	bpl.n	800267e <__sflush_r+0x46>
 8002672:	6863      	ldr	r3, [r4, #4]
 8002674:	1ac0      	subs	r0, r0, r3
 8002676:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002678:	b10b      	cbz	r3, 800267e <__sflush_r+0x46>
 800267a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800267c:	1ac0      	subs	r0, r0, r3
 800267e:	2300      	movs	r3, #0
 8002680:	4602      	mov	r2, r0
 8002682:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002684:	6a21      	ldr	r1, [r4, #32]
 8002686:	4628      	mov	r0, r5
 8002688:	47b0      	blx	r6
 800268a:	1c43      	adds	r3, r0, #1
 800268c:	89a3      	ldrh	r3, [r4, #12]
 800268e:	d106      	bne.n	800269e <__sflush_r+0x66>
 8002690:	6829      	ldr	r1, [r5, #0]
 8002692:	291d      	cmp	r1, #29
 8002694:	d84b      	bhi.n	800272e <__sflush_r+0xf6>
 8002696:	4a2b      	ldr	r2, [pc, #172]	; (8002744 <__sflush_r+0x10c>)
 8002698:	40ca      	lsrs	r2, r1
 800269a:	07d6      	lsls	r6, r2, #31
 800269c:	d547      	bpl.n	800272e <__sflush_r+0xf6>
 800269e:	2200      	movs	r2, #0
 80026a0:	6062      	str	r2, [r4, #4]
 80026a2:	04d9      	lsls	r1, r3, #19
 80026a4:	6922      	ldr	r2, [r4, #16]
 80026a6:	6022      	str	r2, [r4, #0]
 80026a8:	d504      	bpl.n	80026b4 <__sflush_r+0x7c>
 80026aa:	1c42      	adds	r2, r0, #1
 80026ac:	d101      	bne.n	80026b2 <__sflush_r+0x7a>
 80026ae:	682b      	ldr	r3, [r5, #0]
 80026b0:	b903      	cbnz	r3, 80026b4 <__sflush_r+0x7c>
 80026b2:	6560      	str	r0, [r4, #84]	; 0x54
 80026b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026b6:	602f      	str	r7, [r5, #0]
 80026b8:	2900      	cmp	r1, #0
 80026ba:	d0ca      	beq.n	8002652 <__sflush_r+0x1a>
 80026bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80026c0:	4299      	cmp	r1, r3
 80026c2:	d002      	beq.n	80026ca <__sflush_r+0x92>
 80026c4:	4628      	mov	r0, r5
 80026c6:	f000 f99f 	bl	8002a08 <_free_r>
 80026ca:	2000      	movs	r0, #0
 80026cc:	6360      	str	r0, [r4, #52]	; 0x34
 80026ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026d2:	6a21      	ldr	r1, [r4, #32]
 80026d4:	2301      	movs	r3, #1
 80026d6:	4628      	mov	r0, r5
 80026d8:	47b0      	blx	r6
 80026da:	1c41      	adds	r1, r0, #1
 80026dc:	d1c6      	bne.n	800266c <__sflush_r+0x34>
 80026de:	682b      	ldr	r3, [r5, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0c3      	beq.n	800266c <__sflush_r+0x34>
 80026e4:	2b1d      	cmp	r3, #29
 80026e6:	d001      	beq.n	80026ec <__sflush_r+0xb4>
 80026e8:	2b16      	cmp	r3, #22
 80026ea:	d101      	bne.n	80026f0 <__sflush_r+0xb8>
 80026ec:	602f      	str	r7, [r5, #0]
 80026ee:	e7b0      	b.n	8002652 <__sflush_r+0x1a>
 80026f0:	89a3      	ldrh	r3, [r4, #12]
 80026f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f6:	81a3      	strh	r3, [r4, #12]
 80026f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026fc:	690f      	ldr	r7, [r1, #16]
 80026fe:	2f00      	cmp	r7, #0
 8002700:	d0a7      	beq.n	8002652 <__sflush_r+0x1a>
 8002702:	0793      	lsls	r3, r2, #30
 8002704:	680e      	ldr	r6, [r1, #0]
 8002706:	bf08      	it	eq
 8002708:	694b      	ldreq	r3, [r1, #20]
 800270a:	600f      	str	r7, [r1, #0]
 800270c:	bf18      	it	ne
 800270e:	2300      	movne	r3, #0
 8002710:	eba6 0807 	sub.w	r8, r6, r7
 8002714:	608b      	str	r3, [r1, #8]
 8002716:	f1b8 0f00 	cmp.w	r8, #0
 800271a:	dd9a      	ble.n	8002652 <__sflush_r+0x1a>
 800271c:	4643      	mov	r3, r8
 800271e:	463a      	mov	r2, r7
 8002720:	6a21      	ldr	r1, [r4, #32]
 8002722:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002724:	4628      	mov	r0, r5
 8002726:	47b0      	blx	r6
 8002728:	2800      	cmp	r0, #0
 800272a:	dc07      	bgt.n	800273c <__sflush_r+0x104>
 800272c:	89a3      	ldrh	r3, [r4, #12]
 800272e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002732:	81a3      	strh	r3, [r4, #12]
 8002734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800273c:	4407      	add	r7, r0
 800273e:	eba8 0800 	sub.w	r8, r8, r0
 8002742:	e7e8      	b.n	8002716 <__sflush_r+0xde>
 8002744:	20400001 	.word	0x20400001

08002748 <_fflush_r>:
 8002748:	b538      	push	{r3, r4, r5, lr}
 800274a:	690b      	ldr	r3, [r1, #16]
 800274c:	4605      	mov	r5, r0
 800274e:	460c      	mov	r4, r1
 8002750:	b1db      	cbz	r3, 800278a <_fflush_r+0x42>
 8002752:	b118      	cbz	r0, 800275c <_fflush_r+0x14>
 8002754:	6983      	ldr	r3, [r0, #24]
 8002756:	b90b      	cbnz	r3, 800275c <_fflush_r+0x14>
 8002758:	f000 f860 	bl	800281c <__sinit>
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <_fflush_r+0x48>)
 800275e:	429c      	cmp	r4, r3
 8002760:	d109      	bne.n	8002776 <_fflush_r+0x2e>
 8002762:	686c      	ldr	r4, [r5, #4]
 8002764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002768:	b17b      	cbz	r3, 800278a <_fflush_r+0x42>
 800276a:	4621      	mov	r1, r4
 800276c:	4628      	mov	r0, r5
 800276e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002772:	f7ff bf61 	b.w	8002638 <__sflush_r>
 8002776:	4b07      	ldr	r3, [pc, #28]	; (8002794 <_fflush_r+0x4c>)
 8002778:	429c      	cmp	r4, r3
 800277a:	d101      	bne.n	8002780 <_fflush_r+0x38>
 800277c:	68ac      	ldr	r4, [r5, #8]
 800277e:	e7f1      	b.n	8002764 <_fflush_r+0x1c>
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <_fflush_r+0x50>)
 8002782:	429c      	cmp	r4, r3
 8002784:	bf08      	it	eq
 8002786:	68ec      	ldreq	r4, [r5, #12]
 8002788:	e7ec      	b.n	8002764 <_fflush_r+0x1c>
 800278a:	2000      	movs	r0, #0
 800278c:	bd38      	pop	{r3, r4, r5, pc}
 800278e:	bf00      	nop
 8002790:	080033d8 	.word	0x080033d8
 8002794:	080033f8 	.word	0x080033f8
 8002798:	080033b8 	.word	0x080033b8

0800279c <_cleanup_r>:
 800279c:	4901      	ldr	r1, [pc, #4]	; (80027a4 <_cleanup_r+0x8>)
 800279e:	f000 b8a9 	b.w	80028f4 <_fwalk_reent>
 80027a2:	bf00      	nop
 80027a4:	08002749 	.word	0x08002749

080027a8 <std.isra.0>:
 80027a8:	2300      	movs	r3, #0
 80027aa:	b510      	push	{r4, lr}
 80027ac:	4604      	mov	r4, r0
 80027ae:	6003      	str	r3, [r0, #0]
 80027b0:	6043      	str	r3, [r0, #4]
 80027b2:	6083      	str	r3, [r0, #8]
 80027b4:	8181      	strh	r1, [r0, #12]
 80027b6:	6643      	str	r3, [r0, #100]	; 0x64
 80027b8:	81c2      	strh	r2, [r0, #14]
 80027ba:	6103      	str	r3, [r0, #16]
 80027bc:	6143      	str	r3, [r0, #20]
 80027be:	6183      	str	r3, [r0, #24]
 80027c0:	4619      	mov	r1, r3
 80027c2:	2208      	movs	r2, #8
 80027c4:	305c      	adds	r0, #92	; 0x5c
 80027c6:	f000 f917 	bl	80029f8 <memset>
 80027ca:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <std.isra.0+0x38>)
 80027cc:	6263      	str	r3, [r4, #36]	; 0x24
 80027ce:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <std.isra.0+0x3c>)
 80027d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80027d2:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <std.isra.0+0x40>)
 80027d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <std.isra.0+0x44>)
 80027d8:	6224      	str	r4, [r4, #32]
 80027da:	6323      	str	r3, [r4, #48]	; 0x30
 80027dc:	bd10      	pop	{r4, pc}
 80027de:	bf00      	nop
 80027e0:	0800312d 	.word	0x0800312d
 80027e4:	0800314f 	.word	0x0800314f
 80027e8:	08003187 	.word	0x08003187
 80027ec:	080031ab 	.word	0x080031ab

080027f0 <__sfmoreglue>:
 80027f0:	b570      	push	{r4, r5, r6, lr}
 80027f2:	1e4a      	subs	r2, r1, #1
 80027f4:	2568      	movs	r5, #104	; 0x68
 80027f6:	4355      	muls	r5, r2
 80027f8:	460e      	mov	r6, r1
 80027fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80027fe:	f000 f951 	bl	8002aa4 <_malloc_r>
 8002802:	4604      	mov	r4, r0
 8002804:	b140      	cbz	r0, 8002818 <__sfmoreglue+0x28>
 8002806:	2100      	movs	r1, #0
 8002808:	e880 0042 	stmia.w	r0, {r1, r6}
 800280c:	300c      	adds	r0, #12
 800280e:	60a0      	str	r0, [r4, #8]
 8002810:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002814:	f000 f8f0 	bl	80029f8 <memset>
 8002818:	4620      	mov	r0, r4
 800281a:	bd70      	pop	{r4, r5, r6, pc}

0800281c <__sinit>:
 800281c:	6983      	ldr	r3, [r0, #24]
 800281e:	b510      	push	{r4, lr}
 8002820:	4604      	mov	r4, r0
 8002822:	bb33      	cbnz	r3, 8002872 <__sinit+0x56>
 8002824:	6483      	str	r3, [r0, #72]	; 0x48
 8002826:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002828:	6503      	str	r3, [r0, #80]	; 0x50
 800282a:	4b12      	ldr	r3, [pc, #72]	; (8002874 <__sinit+0x58>)
 800282c:	4a12      	ldr	r2, [pc, #72]	; (8002878 <__sinit+0x5c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6282      	str	r2, [r0, #40]	; 0x28
 8002832:	4298      	cmp	r0, r3
 8002834:	bf04      	itt	eq
 8002836:	2301      	moveq	r3, #1
 8002838:	6183      	streq	r3, [r0, #24]
 800283a:	f000 f81f 	bl	800287c <__sfp>
 800283e:	6060      	str	r0, [r4, #4]
 8002840:	4620      	mov	r0, r4
 8002842:	f000 f81b 	bl	800287c <__sfp>
 8002846:	60a0      	str	r0, [r4, #8]
 8002848:	4620      	mov	r0, r4
 800284a:	f000 f817 	bl	800287c <__sfp>
 800284e:	2200      	movs	r2, #0
 8002850:	60e0      	str	r0, [r4, #12]
 8002852:	2104      	movs	r1, #4
 8002854:	6860      	ldr	r0, [r4, #4]
 8002856:	f7ff ffa7 	bl	80027a8 <std.isra.0>
 800285a:	2201      	movs	r2, #1
 800285c:	2109      	movs	r1, #9
 800285e:	68a0      	ldr	r0, [r4, #8]
 8002860:	f7ff ffa2 	bl	80027a8 <std.isra.0>
 8002864:	2202      	movs	r2, #2
 8002866:	2112      	movs	r1, #18
 8002868:	68e0      	ldr	r0, [r4, #12]
 800286a:	f7ff ff9d 	bl	80027a8 <std.isra.0>
 800286e:	2301      	movs	r3, #1
 8002870:	61a3      	str	r3, [r4, #24]
 8002872:	bd10      	pop	{r4, pc}
 8002874:	08003418 	.word	0x08003418
 8002878:	0800279d 	.word	0x0800279d

0800287c <__sfp>:
 800287c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287e:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <__sfp+0x74>)
 8002880:	681e      	ldr	r6, [r3, #0]
 8002882:	69b3      	ldr	r3, [r6, #24]
 8002884:	4607      	mov	r7, r0
 8002886:	b913      	cbnz	r3, 800288e <__sfp+0x12>
 8002888:	4630      	mov	r0, r6
 800288a:	f7ff ffc7 	bl	800281c <__sinit>
 800288e:	3648      	adds	r6, #72	; 0x48
 8002890:	68b4      	ldr	r4, [r6, #8]
 8002892:	6873      	ldr	r3, [r6, #4]
 8002894:	3b01      	subs	r3, #1
 8002896:	d503      	bpl.n	80028a0 <__sfp+0x24>
 8002898:	6833      	ldr	r3, [r6, #0]
 800289a:	b133      	cbz	r3, 80028aa <__sfp+0x2e>
 800289c:	6836      	ldr	r6, [r6, #0]
 800289e:	e7f7      	b.n	8002890 <__sfp+0x14>
 80028a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80028a4:	b16d      	cbz	r5, 80028c2 <__sfp+0x46>
 80028a6:	3468      	adds	r4, #104	; 0x68
 80028a8:	e7f4      	b.n	8002894 <__sfp+0x18>
 80028aa:	2104      	movs	r1, #4
 80028ac:	4638      	mov	r0, r7
 80028ae:	f7ff ff9f 	bl	80027f0 <__sfmoreglue>
 80028b2:	6030      	str	r0, [r6, #0]
 80028b4:	2800      	cmp	r0, #0
 80028b6:	d1f1      	bne.n	800289c <__sfp+0x20>
 80028b8:	230c      	movs	r3, #12
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	4604      	mov	r4, r0
 80028be:	4620      	mov	r0, r4
 80028c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028c6:	81e3      	strh	r3, [r4, #14]
 80028c8:	2301      	movs	r3, #1
 80028ca:	81a3      	strh	r3, [r4, #12]
 80028cc:	6665      	str	r5, [r4, #100]	; 0x64
 80028ce:	6025      	str	r5, [r4, #0]
 80028d0:	60a5      	str	r5, [r4, #8]
 80028d2:	6065      	str	r5, [r4, #4]
 80028d4:	6125      	str	r5, [r4, #16]
 80028d6:	6165      	str	r5, [r4, #20]
 80028d8:	61a5      	str	r5, [r4, #24]
 80028da:	2208      	movs	r2, #8
 80028dc:	4629      	mov	r1, r5
 80028de:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80028e2:	f000 f889 	bl	80029f8 <memset>
 80028e6:	6365      	str	r5, [r4, #52]	; 0x34
 80028e8:	63a5      	str	r5, [r4, #56]	; 0x38
 80028ea:	64a5      	str	r5, [r4, #72]	; 0x48
 80028ec:	64e5      	str	r5, [r4, #76]	; 0x4c
 80028ee:	e7e6      	b.n	80028be <__sfp+0x42>
 80028f0:	08003418 	.word	0x08003418

080028f4 <_fwalk_reent>:
 80028f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028f8:	4680      	mov	r8, r0
 80028fa:	4689      	mov	r9, r1
 80028fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002900:	2600      	movs	r6, #0
 8002902:	b914      	cbnz	r4, 800290a <_fwalk_reent+0x16>
 8002904:	4630      	mov	r0, r6
 8002906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800290a:	68a5      	ldr	r5, [r4, #8]
 800290c:	6867      	ldr	r7, [r4, #4]
 800290e:	3f01      	subs	r7, #1
 8002910:	d501      	bpl.n	8002916 <_fwalk_reent+0x22>
 8002912:	6824      	ldr	r4, [r4, #0]
 8002914:	e7f5      	b.n	8002902 <_fwalk_reent+0xe>
 8002916:	89ab      	ldrh	r3, [r5, #12]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d907      	bls.n	800292c <_fwalk_reent+0x38>
 800291c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002920:	3301      	adds	r3, #1
 8002922:	d003      	beq.n	800292c <_fwalk_reent+0x38>
 8002924:	4629      	mov	r1, r5
 8002926:	4640      	mov	r0, r8
 8002928:	47c8      	blx	r9
 800292a:	4306      	orrs	r6, r0
 800292c:	3568      	adds	r5, #104	; 0x68
 800292e:	e7ee      	b.n	800290e <_fwalk_reent+0x1a>

08002930 <__swhatbuf_r>:
 8002930:	b570      	push	{r4, r5, r6, lr}
 8002932:	460e      	mov	r6, r1
 8002934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002938:	2900      	cmp	r1, #0
 800293a:	b090      	sub	sp, #64	; 0x40
 800293c:	4614      	mov	r4, r2
 800293e:	461d      	mov	r5, r3
 8002940:	da07      	bge.n	8002952 <__swhatbuf_r+0x22>
 8002942:	2300      	movs	r3, #0
 8002944:	602b      	str	r3, [r5, #0]
 8002946:	89b3      	ldrh	r3, [r6, #12]
 8002948:	061a      	lsls	r2, r3, #24
 800294a:	d410      	bmi.n	800296e <__swhatbuf_r+0x3e>
 800294c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002950:	e00e      	b.n	8002970 <__swhatbuf_r+0x40>
 8002952:	aa01      	add	r2, sp, #4
 8002954:	f000 fc50 	bl	80031f8 <_fstat_r>
 8002958:	2800      	cmp	r0, #0
 800295a:	dbf2      	blt.n	8002942 <__swhatbuf_r+0x12>
 800295c:	9a02      	ldr	r2, [sp, #8]
 800295e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002962:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002966:	425a      	negs	r2, r3
 8002968:	415a      	adcs	r2, r3
 800296a:	602a      	str	r2, [r5, #0]
 800296c:	e7ee      	b.n	800294c <__swhatbuf_r+0x1c>
 800296e:	2340      	movs	r3, #64	; 0x40
 8002970:	2000      	movs	r0, #0
 8002972:	6023      	str	r3, [r4, #0]
 8002974:	b010      	add	sp, #64	; 0x40
 8002976:	bd70      	pop	{r4, r5, r6, pc}

08002978 <__smakebuf_r>:
 8002978:	898b      	ldrh	r3, [r1, #12]
 800297a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800297c:	079d      	lsls	r5, r3, #30
 800297e:	4606      	mov	r6, r0
 8002980:	460c      	mov	r4, r1
 8002982:	d507      	bpl.n	8002994 <__smakebuf_r+0x1c>
 8002984:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002988:	6023      	str	r3, [r4, #0]
 800298a:	6123      	str	r3, [r4, #16]
 800298c:	2301      	movs	r3, #1
 800298e:	6163      	str	r3, [r4, #20]
 8002990:	b002      	add	sp, #8
 8002992:	bd70      	pop	{r4, r5, r6, pc}
 8002994:	ab01      	add	r3, sp, #4
 8002996:	466a      	mov	r2, sp
 8002998:	f7ff ffca 	bl	8002930 <__swhatbuf_r>
 800299c:	9900      	ldr	r1, [sp, #0]
 800299e:	4605      	mov	r5, r0
 80029a0:	4630      	mov	r0, r6
 80029a2:	f000 f87f 	bl	8002aa4 <_malloc_r>
 80029a6:	b948      	cbnz	r0, 80029bc <__smakebuf_r+0x44>
 80029a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029ac:	059a      	lsls	r2, r3, #22
 80029ae:	d4ef      	bmi.n	8002990 <__smakebuf_r+0x18>
 80029b0:	f023 0303 	bic.w	r3, r3, #3
 80029b4:	f043 0302 	orr.w	r3, r3, #2
 80029b8:	81a3      	strh	r3, [r4, #12]
 80029ba:	e7e3      	b.n	8002984 <__smakebuf_r+0xc>
 80029bc:	4b0d      	ldr	r3, [pc, #52]	; (80029f4 <__smakebuf_r+0x7c>)
 80029be:	62b3      	str	r3, [r6, #40]	; 0x28
 80029c0:	89a3      	ldrh	r3, [r4, #12]
 80029c2:	6020      	str	r0, [r4, #0]
 80029c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c8:	81a3      	strh	r3, [r4, #12]
 80029ca:	9b00      	ldr	r3, [sp, #0]
 80029cc:	6163      	str	r3, [r4, #20]
 80029ce:	9b01      	ldr	r3, [sp, #4]
 80029d0:	6120      	str	r0, [r4, #16]
 80029d2:	b15b      	cbz	r3, 80029ec <__smakebuf_r+0x74>
 80029d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029d8:	4630      	mov	r0, r6
 80029da:	f000 fc1f 	bl	800321c <_isatty_r>
 80029de:	b128      	cbz	r0, 80029ec <__smakebuf_r+0x74>
 80029e0:	89a3      	ldrh	r3, [r4, #12]
 80029e2:	f023 0303 	bic.w	r3, r3, #3
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	81a3      	strh	r3, [r4, #12]
 80029ec:	89a3      	ldrh	r3, [r4, #12]
 80029ee:	431d      	orrs	r5, r3
 80029f0:	81a5      	strh	r5, [r4, #12]
 80029f2:	e7cd      	b.n	8002990 <__smakebuf_r+0x18>
 80029f4:	0800279d 	.word	0x0800279d

080029f8 <memset>:
 80029f8:	4402      	add	r2, r0
 80029fa:	4603      	mov	r3, r0
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d100      	bne.n	8002a02 <memset+0xa>
 8002a00:	4770      	bx	lr
 8002a02:	f803 1b01 	strb.w	r1, [r3], #1
 8002a06:	e7f9      	b.n	80029fc <memset+0x4>

08002a08 <_free_r>:
 8002a08:	b538      	push	{r3, r4, r5, lr}
 8002a0a:	4605      	mov	r5, r0
 8002a0c:	2900      	cmp	r1, #0
 8002a0e:	d045      	beq.n	8002a9c <_free_r+0x94>
 8002a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a14:	1f0c      	subs	r4, r1, #4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	bfb8      	it	lt
 8002a1a:	18e4      	addlt	r4, r4, r3
 8002a1c:	f000 fc20 	bl	8003260 <__malloc_lock>
 8002a20:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <_free_r+0x98>)
 8002a22:	6813      	ldr	r3, [r2, #0]
 8002a24:	4610      	mov	r0, r2
 8002a26:	b933      	cbnz	r3, 8002a36 <_free_r+0x2e>
 8002a28:	6063      	str	r3, [r4, #4]
 8002a2a:	6014      	str	r4, [r2, #0]
 8002a2c:	4628      	mov	r0, r5
 8002a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a32:	f000 bc16 	b.w	8003262 <__malloc_unlock>
 8002a36:	42a3      	cmp	r3, r4
 8002a38:	d90c      	bls.n	8002a54 <_free_r+0x4c>
 8002a3a:	6821      	ldr	r1, [r4, #0]
 8002a3c:	1862      	adds	r2, r4, r1
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	bf04      	itt	eq
 8002a42:	681a      	ldreq	r2, [r3, #0]
 8002a44:	685b      	ldreq	r3, [r3, #4]
 8002a46:	6063      	str	r3, [r4, #4]
 8002a48:	bf04      	itt	eq
 8002a4a:	1852      	addeq	r2, r2, r1
 8002a4c:	6022      	streq	r2, [r4, #0]
 8002a4e:	6004      	str	r4, [r0, #0]
 8002a50:	e7ec      	b.n	8002a2c <_free_r+0x24>
 8002a52:	4613      	mov	r3, r2
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	b10a      	cbz	r2, 8002a5c <_free_r+0x54>
 8002a58:	42a2      	cmp	r2, r4
 8002a5a:	d9fa      	bls.n	8002a52 <_free_r+0x4a>
 8002a5c:	6819      	ldr	r1, [r3, #0]
 8002a5e:	1858      	adds	r0, r3, r1
 8002a60:	42a0      	cmp	r0, r4
 8002a62:	d10b      	bne.n	8002a7c <_free_r+0x74>
 8002a64:	6820      	ldr	r0, [r4, #0]
 8002a66:	4401      	add	r1, r0
 8002a68:	1858      	adds	r0, r3, r1
 8002a6a:	4282      	cmp	r2, r0
 8002a6c:	6019      	str	r1, [r3, #0]
 8002a6e:	d1dd      	bne.n	8002a2c <_free_r+0x24>
 8002a70:	6810      	ldr	r0, [r2, #0]
 8002a72:	6852      	ldr	r2, [r2, #4]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	4401      	add	r1, r0
 8002a78:	6019      	str	r1, [r3, #0]
 8002a7a:	e7d7      	b.n	8002a2c <_free_r+0x24>
 8002a7c:	d902      	bls.n	8002a84 <_free_r+0x7c>
 8002a7e:	230c      	movs	r3, #12
 8002a80:	602b      	str	r3, [r5, #0]
 8002a82:	e7d3      	b.n	8002a2c <_free_r+0x24>
 8002a84:	6820      	ldr	r0, [r4, #0]
 8002a86:	1821      	adds	r1, r4, r0
 8002a88:	428a      	cmp	r2, r1
 8002a8a:	bf04      	itt	eq
 8002a8c:	6811      	ldreq	r1, [r2, #0]
 8002a8e:	6852      	ldreq	r2, [r2, #4]
 8002a90:	6062      	str	r2, [r4, #4]
 8002a92:	bf04      	itt	eq
 8002a94:	1809      	addeq	r1, r1, r0
 8002a96:	6021      	streq	r1, [r4, #0]
 8002a98:	605c      	str	r4, [r3, #4]
 8002a9a:	e7c7      	b.n	8002a2c <_free_r+0x24>
 8002a9c:	bd38      	pop	{r3, r4, r5, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000090 	.word	0x20000090

08002aa4 <_malloc_r>:
 8002aa4:	b570      	push	{r4, r5, r6, lr}
 8002aa6:	1ccd      	adds	r5, r1, #3
 8002aa8:	f025 0503 	bic.w	r5, r5, #3
 8002aac:	3508      	adds	r5, #8
 8002aae:	2d0c      	cmp	r5, #12
 8002ab0:	bf38      	it	cc
 8002ab2:	250c      	movcc	r5, #12
 8002ab4:	2d00      	cmp	r5, #0
 8002ab6:	4606      	mov	r6, r0
 8002ab8:	db01      	blt.n	8002abe <_malloc_r+0x1a>
 8002aba:	42a9      	cmp	r1, r5
 8002abc:	d903      	bls.n	8002ac6 <_malloc_r+0x22>
 8002abe:	230c      	movs	r3, #12
 8002ac0:	6033      	str	r3, [r6, #0]
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	bd70      	pop	{r4, r5, r6, pc}
 8002ac6:	f000 fbcb 	bl	8003260 <__malloc_lock>
 8002aca:	4a23      	ldr	r2, [pc, #140]	; (8002b58 <_malloc_r+0xb4>)
 8002acc:	6814      	ldr	r4, [r2, #0]
 8002ace:	4621      	mov	r1, r4
 8002ad0:	b991      	cbnz	r1, 8002af8 <_malloc_r+0x54>
 8002ad2:	4c22      	ldr	r4, [pc, #136]	; (8002b5c <_malloc_r+0xb8>)
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	b91b      	cbnz	r3, 8002ae0 <_malloc_r+0x3c>
 8002ad8:	4630      	mov	r0, r6
 8002ada:	f000 fb17 	bl	800310c <_sbrk_r>
 8002ade:	6020      	str	r0, [r4, #0]
 8002ae0:	4629      	mov	r1, r5
 8002ae2:	4630      	mov	r0, r6
 8002ae4:	f000 fb12 	bl	800310c <_sbrk_r>
 8002ae8:	1c43      	adds	r3, r0, #1
 8002aea:	d126      	bne.n	8002b3a <_malloc_r+0x96>
 8002aec:	230c      	movs	r3, #12
 8002aee:	6033      	str	r3, [r6, #0]
 8002af0:	4630      	mov	r0, r6
 8002af2:	f000 fbb6 	bl	8003262 <__malloc_unlock>
 8002af6:	e7e4      	b.n	8002ac2 <_malloc_r+0x1e>
 8002af8:	680b      	ldr	r3, [r1, #0]
 8002afa:	1b5b      	subs	r3, r3, r5
 8002afc:	d41a      	bmi.n	8002b34 <_malloc_r+0x90>
 8002afe:	2b0b      	cmp	r3, #11
 8002b00:	d90f      	bls.n	8002b22 <_malloc_r+0x7e>
 8002b02:	600b      	str	r3, [r1, #0]
 8002b04:	50cd      	str	r5, [r1, r3]
 8002b06:	18cc      	adds	r4, r1, r3
 8002b08:	4630      	mov	r0, r6
 8002b0a:	f000 fbaa 	bl	8003262 <__malloc_unlock>
 8002b0e:	f104 000b 	add.w	r0, r4, #11
 8002b12:	1d23      	adds	r3, r4, #4
 8002b14:	f020 0007 	bic.w	r0, r0, #7
 8002b18:	1ac3      	subs	r3, r0, r3
 8002b1a:	d01b      	beq.n	8002b54 <_malloc_r+0xb0>
 8002b1c:	425a      	negs	r2, r3
 8002b1e:	50e2      	str	r2, [r4, r3]
 8002b20:	bd70      	pop	{r4, r5, r6, pc}
 8002b22:	428c      	cmp	r4, r1
 8002b24:	bf0d      	iteet	eq
 8002b26:	6863      	ldreq	r3, [r4, #4]
 8002b28:	684b      	ldrne	r3, [r1, #4]
 8002b2a:	6063      	strne	r3, [r4, #4]
 8002b2c:	6013      	streq	r3, [r2, #0]
 8002b2e:	bf18      	it	ne
 8002b30:	460c      	movne	r4, r1
 8002b32:	e7e9      	b.n	8002b08 <_malloc_r+0x64>
 8002b34:	460c      	mov	r4, r1
 8002b36:	6849      	ldr	r1, [r1, #4]
 8002b38:	e7ca      	b.n	8002ad0 <_malloc_r+0x2c>
 8002b3a:	1cc4      	adds	r4, r0, #3
 8002b3c:	f024 0403 	bic.w	r4, r4, #3
 8002b40:	42a0      	cmp	r0, r4
 8002b42:	d005      	beq.n	8002b50 <_malloc_r+0xac>
 8002b44:	1a21      	subs	r1, r4, r0
 8002b46:	4630      	mov	r0, r6
 8002b48:	f000 fae0 	bl	800310c <_sbrk_r>
 8002b4c:	3001      	adds	r0, #1
 8002b4e:	d0cd      	beq.n	8002aec <_malloc_r+0x48>
 8002b50:	6025      	str	r5, [r4, #0]
 8002b52:	e7d9      	b.n	8002b08 <_malloc_r+0x64>
 8002b54:	bd70      	pop	{r4, r5, r6, pc}
 8002b56:	bf00      	nop
 8002b58:	20000090 	.word	0x20000090
 8002b5c:	20000094 	.word	0x20000094

08002b60 <__sfputc_r>:
 8002b60:	6893      	ldr	r3, [r2, #8]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	b410      	push	{r4}
 8002b68:	6093      	str	r3, [r2, #8]
 8002b6a:	da09      	bge.n	8002b80 <__sfputc_r+0x20>
 8002b6c:	6994      	ldr	r4, [r2, #24]
 8002b6e:	42a3      	cmp	r3, r4
 8002b70:	db02      	blt.n	8002b78 <__sfputc_r+0x18>
 8002b72:	b2cb      	uxtb	r3, r1
 8002b74:	2b0a      	cmp	r3, #10
 8002b76:	d103      	bne.n	8002b80 <__sfputc_r+0x20>
 8002b78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b7c:	f7ff bc9c 	b.w	80024b8 <__swbuf_r>
 8002b80:	6813      	ldr	r3, [r2, #0]
 8002b82:	1c58      	adds	r0, r3, #1
 8002b84:	6010      	str	r0, [r2, #0]
 8002b86:	7019      	strb	r1, [r3, #0]
 8002b88:	b2c8      	uxtb	r0, r1
 8002b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <__sfputs_r>:
 8002b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b92:	4606      	mov	r6, r0
 8002b94:	460f      	mov	r7, r1
 8002b96:	4614      	mov	r4, r2
 8002b98:	18d5      	adds	r5, r2, r3
 8002b9a:	42ac      	cmp	r4, r5
 8002b9c:	d101      	bne.n	8002ba2 <__sfputs_r+0x12>
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	e007      	b.n	8002bb2 <__sfputs_r+0x22>
 8002ba2:	463a      	mov	r2, r7
 8002ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ba8:	4630      	mov	r0, r6
 8002baa:	f7ff ffd9 	bl	8002b60 <__sfputc_r>
 8002bae:	1c43      	adds	r3, r0, #1
 8002bb0:	d1f3      	bne.n	8002b9a <__sfputs_r+0xa>
 8002bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002bb4 <_vfiprintf_r>:
 8002bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bb8:	b09d      	sub	sp, #116	; 0x74
 8002bba:	460c      	mov	r4, r1
 8002bbc:	4617      	mov	r7, r2
 8002bbe:	9303      	str	r3, [sp, #12]
 8002bc0:	4606      	mov	r6, r0
 8002bc2:	b118      	cbz	r0, 8002bcc <_vfiprintf_r+0x18>
 8002bc4:	6983      	ldr	r3, [r0, #24]
 8002bc6:	b90b      	cbnz	r3, 8002bcc <_vfiprintf_r+0x18>
 8002bc8:	f7ff fe28 	bl	800281c <__sinit>
 8002bcc:	4b7c      	ldr	r3, [pc, #496]	; (8002dc0 <_vfiprintf_r+0x20c>)
 8002bce:	429c      	cmp	r4, r3
 8002bd0:	d157      	bne.n	8002c82 <_vfiprintf_r+0xce>
 8002bd2:	6874      	ldr	r4, [r6, #4]
 8002bd4:	89a3      	ldrh	r3, [r4, #12]
 8002bd6:	0718      	lsls	r0, r3, #28
 8002bd8:	d55d      	bpl.n	8002c96 <_vfiprintf_r+0xe2>
 8002bda:	6923      	ldr	r3, [r4, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d05a      	beq.n	8002c96 <_vfiprintf_r+0xe2>
 8002be0:	2300      	movs	r3, #0
 8002be2:	9309      	str	r3, [sp, #36]	; 0x24
 8002be4:	2320      	movs	r3, #32
 8002be6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002bea:	2330      	movs	r3, #48	; 0x30
 8002bec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002bf0:	f04f 0b01 	mov.w	fp, #1
 8002bf4:	46b8      	mov	r8, r7
 8002bf6:	4645      	mov	r5, r8
 8002bf8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d155      	bne.n	8002cac <_vfiprintf_r+0xf8>
 8002c00:	ebb8 0a07 	subs.w	sl, r8, r7
 8002c04:	d00b      	beq.n	8002c1e <_vfiprintf_r+0x6a>
 8002c06:	4653      	mov	r3, sl
 8002c08:	463a      	mov	r2, r7
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	4630      	mov	r0, r6
 8002c0e:	f7ff ffbf 	bl	8002b90 <__sfputs_r>
 8002c12:	3001      	adds	r0, #1
 8002c14:	f000 80c4 	beq.w	8002da0 <_vfiprintf_r+0x1ec>
 8002c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c1a:	4453      	add	r3, sl
 8002c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c1e:	f898 3000 	ldrb.w	r3, [r8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 80bc 	beq.w	8002da0 <_vfiprintf_r+0x1ec>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c2e:	9304      	str	r3, [sp, #16]
 8002c30:	9307      	str	r3, [sp, #28]
 8002c32:	9205      	str	r2, [sp, #20]
 8002c34:	9306      	str	r3, [sp, #24]
 8002c36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c3a:	931a      	str	r3, [sp, #104]	; 0x68
 8002c3c:	2205      	movs	r2, #5
 8002c3e:	7829      	ldrb	r1, [r5, #0]
 8002c40:	4860      	ldr	r0, [pc, #384]	; (8002dc4 <_vfiprintf_r+0x210>)
 8002c42:	f7fd facd 	bl	80001e0 <memchr>
 8002c46:	f105 0801 	add.w	r8, r5, #1
 8002c4a:	9b04      	ldr	r3, [sp, #16]
 8002c4c:	2800      	cmp	r0, #0
 8002c4e:	d131      	bne.n	8002cb4 <_vfiprintf_r+0x100>
 8002c50:	06d9      	lsls	r1, r3, #27
 8002c52:	bf44      	itt	mi
 8002c54:	2220      	movmi	r2, #32
 8002c56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002c5a:	071a      	lsls	r2, r3, #28
 8002c5c:	bf44      	itt	mi
 8002c5e:	222b      	movmi	r2, #43	; 0x2b
 8002c60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002c64:	782a      	ldrb	r2, [r5, #0]
 8002c66:	2a2a      	cmp	r2, #42	; 0x2a
 8002c68:	d02c      	beq.n	8002cc4 <_vfiprintf_r+0x110>
 8002c6a:	9a07      	ldr	r2, [sp, #28]
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	200a      	movs	r0, #10
 8002c70:	46a8      	mov	r8, r5
 8002c72:	3501      	adds	r5, #1
 8002c74:	f898 3000 	ldrb.w	r3, [r8]
 8002c78:	3b30      	subs	r3, #48	; 0x30
 8002c7a:	2b09      	cmp	r3, #9
 8002c7c:	d96d      	bls.n	8002d5a <_vfiprintf_r+0x1a6>
 8002c7e:	b371      	cbz	r1, 8002cde <_vfiprintf_r+0x12a>
 8002c80:	e026      	b.n	8002cd0 <_vfiprintf_r+0x11c>
 8002c82:	4b51      	ldr	r3, [pc, #324]	; (8002dc8 <_vfiprintf_r+0x214>)
 8002c84:	429c      	cmp	r4, r3
 8002c86:	d101      	bne.n	8002c8c <_vfiprintf_r+0xd8>
 8002c88:	68b4      	ldr	r4, [r6, #8]
 8002c8a:	e7a3      	b.n	8002bd4 <_vfiprintf_r+0x20>
 8002c8c:	4b4f      	ldr	r3, [pc, #316]	; (8002dcc <_vfiprintf_r+0x218>)
 8002c8e:	429c      	cmp	r4, r3
 8002c90:	bf08      	it	eq
 8002c92:	68f4      	ldreq	r4, [r6, #12]
 8002c94:	e79e      	b.n	8002bd4 <_vfiprintf_r+0x20>
 8002c96:	4621      	mov	r1, r4
 8002c98:	4630      	mov	r0, r6
 8002c9a:	f7ff fc5f 	bl	800255c <__swsetup_r>
 8002c9e:	2800      	cmp	r0, #0
 8002ca0:	d09e      	beq.n	8002be0 <_vfiprintf_r+0x2c>
 8002ca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ca6:	b01d      	add	sp, #116	; 0x74
 8002ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cac:	2b25      	cmp	r3, #37	; 0x25
 8002cae:	d0a7      	beq.n	8002c00 <_vfiprintf_r+0x4c>
 8002cb0:	46a8      	mov	r8, r5
 8002cb2:	e7a0      	b.n	8002bf6 <_vfiprintf_r+0x42>
 8002cb4:	4a43      	ldr	r2, [pc, #268]	; (8002dc4 <_vfiprintf_r+0x210>)
 8002cb6:	1a80      	subs	r0, r0, r2
 8002cb8:	fa0b f000 	lsl.w	r0, fp, r0
 8002cbc:	4318      	orrs	r0, r3
 8002cbe:	9004      	str	r0, [sp, #16]
 8002cc0:	4645      	mov	r5, r8
 8002cc2:	e7bb      	b.n	8002c3c <_vfiprintf_r+0x88>
 8002cc4:	9a03      	ldr	r2, [sp, #12]
 8002cc6:	1d11      	adds	r1, r2, #4
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	9103      	str	r1, [sp, #12]
 8002ccc:	2a00      	cmp	r2, #0
 8002cce:	db01      	blt.n	8002cd4 <_vfiprintf_r+0x120>
 8002cd0:	9207      	str	r2, [sp, #28]
 8002cd2:	e004      	b.n	8002cde <_vfiprintf_r+0x12a>
 8002cd4:	4252      	negs	r2, r2
 8002cd6:	f043 0302 	orr.w	r3, r3, #2
 8002cda:	9207      	str	r2, [sp, #28]
 8002cdc:	9304      	str	r3, [sp, #16]
 8002cde:	f898 3000 	ldrb.w	r3, [r8]
 8002ce2:	2b2e      	cmp	r3, #46	; 0x2e
 8002ce4:	d110      	bne.n	8002d08 <_vfiprintf_r+0x154>
 8002ce6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002cea:	2b2a      	cmp	r3, #42	; 0x2a
 8002cec:	f108 0101 	add.w	r1, r8, #1
 8002cf0:	d137      	bne.n	8002d62 <_vfiprintf_r+0x1ae>
 8002cf2:	9b03      	ldr	r3, [sp, #12]
 8002cf4:	1d1a      	adds	r2, r3, #4
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	9203      	str	r2, [sp, #12]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bfb8      	it	lt
 8002cfe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002d02:	f108 0802 	add.w	r8, r8, #2
 8002d06:	9305      	str	r3, [sp, #20]
 8002d08:	4d31      	ldr	r5, [pc, #196]	; (8002dd0 <_vfiprintf_r+0x21c>)
 8002d0a:	f898 1000 	ldrb.w	r1, [r8]
 8002d0e:	2203      	movs	r2, #3
 8002d10:	4628      	mov	r0, r5
 8002d12:	f7fd fa65 	bl	80001e0 <memchr>
 8002d16:	b140      	cbz	r0, 8002d2a <_vfiprintf_r+0x176>
 8002d18:	2340      	movs	r3, #64	; 0x40
 8002d1a:	1b40      	subs	r0, r0, r5
 8002d1c:	fa03 f000 	lsl.w	r0, r3, r0
 8002d20:	9b04      	ldr	r3, [sp, #16]
 8002d22:	4303      	orrs	r3, r0
 8002d24:	9304      	str	r3, [sp, #16]
 8002d26:	f108 0801 	add.w	r8, r8, #1
 8002d2a:	f898 1000 	ldrb.w	r1, [r8]
 8002d2e:	4829      	ldr	r0, [pc, #164]	; (8002dd4 <_vfiprintf_r+0x220>)
 8002d30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d34:	2206      	movs	r2, #6
 8002d36:	f108 0701 	add.w	r7, r8, #1
 8002d3a:	f7fd fa51 	bl	80001e0 <memchr>
 8002d3e:	2800      	cmp	r0, #0
 8002d40:	d034      	beq.n	8002dac <_vfiprintf_r+0x1f8>
 8002d42:	4b25      	ldr	r3, [pc, #148]	; (8002dd8 <_vfiprintf_r+0x224>)
 8002d44:	bb03      	cbnz	r3, 8002d88 <_vfiprintf_r+0x1d4>
 8002d46:	9b03      	ldr	r3, [sp, #12]
 8002d48:	3307      	adds	r3, #7
 8002d4a:	f023 0307 	bic.w	r3, r3, #7
 8002d4e:	3308      	adds	r3, #8
 8002d50:	9303      	str	r3, [sp, #12]
 8002d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d54:	444b      	add	r3, r9
 8002d56:	9309      	str	r3, [sp, #36]	; 0x24
 8002d58:	e74c      	b.n	8002bf4 <_vfiprintf_r+0x40>
 8002d5a:	fb00 3202 	mla	r2, r0, r2, r3
 8002d5e:	2101      	movs	r1, #1
 8002d60:	e786      	b.n	8002c70 <_vfiprintf_r+0xbc>
 8002d62:	2300      	movs	r3, #0
 8002d64:	9305      	str	r3, [sp, #20]
 8002d66:	4618      	mov	r0, r3
 8002d68:	250a      	movs	r5, #10
 8002d6a:	4688      	mov	r8, r1
 8002d6c:	3101      	adds	r1, #1
 8002d6e:	f898 2000 	ldrb.w	r2, [r8]
 8002d72:	3a30      	subs	r2, #48	; 0x30
 8002d74:	2a09      	cmp	r2, #9
 8002d76:	d903      	bls.n	8002d80 <_vfiprintf_r+0x1cc>
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0c5      	beq.n	8002d08 <_vfiprintf_r+0x154>
 8002d7c:	9005      	str	r0, [sp, #20]
 8002d7e:	e7c3      	b.n	8002d08 <_vfiprintf_r+0x154>
 8002d80:	fb05 2000 	mla	r0, r5, r0, r2
 8002d84:	2301      	movs	r3, #1
 8002d86:	e7f0      	b.n	8002d6a <_vfiprintf_r+0x1b6>
 8002d88:	ab03      	add	r3, sp, #12
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	4622      	mov	r2, r4
 8002d8e:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <_vfiprintf_r+0x228>)
 8002d90:	a904      	add	r1, sp, #16
 8002d92:	4630      	mov	r0, r6
 8002d94:	f3af 8000 	nop.w
 8002d98:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002d9c:	4681      	mov	r9, r0
 8002d9e:	d1d8      	bne.n	8002d52 <_vfiprintf_r+0x19e>
 8002da0:	89a3      	ldrh	r3, [r4, #12]
 8002da2:	065b      	lsls	r3, r3, #25
 8002da4:	f53f af7d 	bmi.w	8002ca2 <_vfiprintf_r+0xee>
 8002da8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002daa:	e77c      	b.n	8002ca6 <_vfiprintf_r+0xf2>
 8002dac:	ab03      	add	r3, sp, #12
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	4622      	mov	r2, r4
 8002db2:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <_vfiprintf_r+0x228>)
 8002db4:	a904      	add	r1, sp, #16
 8002db6:	4630      	mov	r0, r6
 8002db8:	f000 f888 	bl	8002ecc <_printf_i>
 8002dbc:	e7ec      	b.n	8002d98 <_vfiprintf_r+0x1e4>
 8002dbe:	bf00      	nop
 8002dc0:	080033d8 	.word	0x080033d8
 8002dc4:	0800341c 	.word	0x0800341c
 8002dc8:	080033f8 	.word	0x080033f8
 8002dcc:	080033b8 	.word	0x080033b8
 8002dd0:	08003422 	.word	0x08003422
 8002dd4:	08003426 	.word	0x08003426
 8002dd8:	00000000 	.word	0x00000000
 8002ddc:	08002b91 	.word	0x08002b91

08002de0 <_printf_common>:
 8002de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002de4:	4691      	mov	r9, r2
 8002de6:	461f      	mov	r7, r3
 8002de8:	688a      	ldr	r2, [r1, #8]
 8002dea:	690b      	ldr	r3, [r1, #16]
 8002dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002df0:	4293      	cmp	r3, r2
 8002df2:	bfb8      	it	lt
 8002df4:	4613      	movlt	r3, r2
 8002df6:	f8c9 3000 	str.w	r3, [r9]
 8002dfa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002dfe:	4606      	mov	r6, r0
 8002e00:	460c      	mov	r4, r1
 8002e02:	b112      	cbz	r2, 8002e0a <_printf_common+0x2a>
 8002e04:	3301      	adds	r3, #1
 8002e06:	f8c9 3000 	str.w	r3, [r9]
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	0699      	lsls	r1, r3, #26
 8002e0e:	bf42      	ittt	mi
 8002e10:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002e14:	3302      	addmi	r3, #2
 8002e16:	f8c9 3000 	strmi.w	r3, [r9]
 8002e1a:	6825      	ldr	r5, [r4, #0]
 8002e1c:	f015 0506 	ands.w	r5, r5, #6
 8002e20:	d107      	bne.n	8002e32 <_printf_common+0x52>
 8002e22:	f104 0a19 	add.w	sl, r4, #25
 8002e26:	68e3      	ldr	r3, [r4, #12]
 8002e28:	f8d9 2000 	ldr.w	r2, [r9]
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	429d      	cmp	r5, r3
 8002e30:	db29      	blt.n	8002e86 <_printf_common+0xa6>
 8002e32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002e36:	6822      	ldr	r2, [r4, #0]
 8002e38:	3300      	adds	r3, #0
 8002e3a:	bf18      	it	ne
 8002e3c:	2301      	movne	r3, #1
 8002e3e:	0692      	lsls	r2, r2, #26
 8002e40:	d42e      	bmi.n	8002ea0 <_printf_common+0xc0>
 8002e42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e46:	4639      	mov	r1, r7
 8002e48:	4630      	mov	r0, r6
 8002e4a:	47c0      	blx	r8
 8002e4c:	3001      	adds	r0, #1
 8002e4e:	d021      	beq.n	8002e94 <_printf_common+0xb4>
 8002e50:	6823      	ldr	r3, [r4, #0]
 8002e52:	68e5      	ldr	r5, [r4, #12]
 8002e54:	f8d9 2000 	ldr.w	r2, [r9]
 8002e58:	f003 0306 	and.w	r3, r3, #6
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	bf08      	it	eq
 8002e60:	1aad      	subeq	r5, r5, r2
 8002e62:	68a3      	ldr	r3, [r4, #8]
 8002e64:	6922      	ldr	r2, [r4, #16]
 8002e66:	bf0c      	ite	eq
 8002e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e6c:	2500      	movne	r5, #0
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	bfc4      	itt	gt
 8002e72:	1a9b      	subgt	r3, r3, r2
 8002e74:	18ed      	addgt	r5, r5, r3
 8002e76:	f04f 0900 	mov.w	r9, #0
 8002e7a:	341a      	adds	r4, #26
 8002e7c:	454d      	cmp	r5, r9
 8002e7e:	d11b      	bne.n	8002eb8 <_printf_common+0xd8>
 8002e80:	2000      	movs	r0, #0
 8002e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e86:	2301      	movs	r3, #1
 8002e88:	4652      	mov	r2, sl
 8002e8a:	4639      	mov	r1, r7
 8002e8c:	4630      	mov	r0, r6
 8002e8e:	47c0      	blx	r8
 8002e90:	3001      	adds	r0, #1
 8002e92:	d103      	bne.n	8002e9c <_printf_common+0xbc>
 8002e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e9c:	3501      	adds	r5, #1
 8002e9e:	e7c2      	b.n	8002e26 <_printf_common+0x46>
 8002ea0:	18e1      	adds	r1, r4, r3
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	2030      	movs	r0, #48	; 0x30
 8002ea6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002eaa:	4422      	add	r2, r4
 8002eac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002eb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002eb4:	3302      	adds	r3, #2
 8002eb6:	e7c4      	b.n	8002e42 <_printf_common+0x62>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	4622      	mov	r2, r4
 8002ebc:	4639      	mov	r1, r7
 8002ebe:	4630      	mov	r0, r6
 8002ec0:	47c0      	blx	r8
 8002ec2:	3001      	adds	r0, #1
 8002ec4:	d0e6      	beq.n	8002e94 <_printf_common+0xb4>
 8002ec6:	f109 0901 	add.w	r9, r9, #1
 8002eca:	e7d7      	b.n	8002e7c <_printf_common+0x9c>

08002ecc <_printf_i>:
 8002ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ed0:	4617      	mov	r7, r2
 8002ed2:	7e0a      	ldrb	r2, [r1, #24]
 8002ed4:	b085      	sub	sp, #20
 8002ed6:	2a6e      	cmp	r2, #110	; 0x6e
 8002ed8:	4698      	mov	r8, r3
 8002eda:	4606      	mov	r6, r0
 8002edc:	460c      	mov	r4, r1
 8002ede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ee0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002ee4:	f000 80bc 	beq.w	8003060 <_printf_i+0x194>
 8002ee8:	d81a      	bhi.n	8002f20 <_printf_i+0x54>
 8002eea:	2a63      	cmp	r2, #99	; 0x63
 8002eec:	d02e      	beq.n	8002f4c <_printf_i+0x80>
 8002eee:	d80a      	bhi.n	8002f06 <_printf_i+0x3a>
 8002ef0:	2a00      	cmp	r2, #0
 8002ef2:	f000 80c8 	beq.w	8003086 <_printf_i+0x1ba>
 8002ef6:	2a58      	cmp	r2, #88	; 0x58
 8002ef8:	f000 808a 	beq.w	8003010 <_printf_i+0x144>
 8002efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f00:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002f04:	e02a      	b.n	8002f5c <_printf_i+0x90>
 8002f06:	2a64      	cmp	r2, #100	; 0x64
 8002f08:	d001      	beq.n	8002f0e <_printf_i+0x42>
 8002f0a:	2a69      	cmp	r2, #105	; 0x69
 8002f0c:	d1f6      	bne.n	8002efc <_printf_i+0x30>
 8002f0e:	6821      	ldr	r1, [r4, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002f16:	d023      	beq.n	8002f60 <_printf_i+0x94>
 8002f18:	1d11      	adds	r1, r2, #4
 8002f1a:	6019      	str	r1, [r3, #0]
 8002f1c:	6813      	ldr	r3, [r2, #0]
 8002f1e:	e027      	b.n	8002f70 <_printf_i+0xa4>
 8002f20:	2a73      	cmp	r2, #115	; 0x73
 8002f22:	f000 80b4 	beq.w	800308e <_printf_i+0x1c2>
 8002f26:	d808      	bhi.n	8002f3a <_printf_i+0x6e>
 8002f28:	2a6f      	cmp	r2, #111	; 0x6f
 8002f2a:	d02a      	beq.n	8002f82 <_printf_i+0xb6>
 8002f2c:	2a70      	cmp	r2, #112	; 0x70
 8002f2e:	d1e5      	bne.n	8002efc <_printf_i+0x30>
 8002f30:	680a      	ldr	r2, [r1, #0]
 8002f32:	f042 0220 	orr.w	r2, r2, #32
 8002f36:	600a      	str	r2, [r1, #0]
 8002f38:	e003      	b.n	8002f42 <_printf_i+0x76>
 8002f3a:	2a75      	cmp	r2, #117	; 0x75
 8002f3c:	d021      	beq.n	8002f82 <_printf_i+0xb6>
 8002f3e:	2a78      	cmp	r2, #120	; 0x78
 8002f40:	d1dc      	bne.n	8002efc <_printf_i+0x30>
 8002f42:	2278      	movs	r2, #120	; 0x78
 8002f44:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002f48:	496e      	ldr	r1, [pc, #440]	; (8003104 <_printf_i+0x238>)
 8002f4a:	e064      	b.n	8003016 <_printf_i+0x14a>
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002f52:	1d11      	adds	r1, r2, #4
 8002f54:	6019      	str	r1, [r3, #0]
 8002f56:	6813      	ldr	r3, [r2, #0]
 8002f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0a3      	b.n	80030a8 <_printf_i+0x1dc>
 8002f60:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002f64:	f102 0104 	add.w	r1, r2, #4
 8002f68:	6019      	str	r1, [r3, #0]
 8002f6a:	d0d7      	beq.n	8002f1c <_printf_i+0x50>
 8002f6c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	da03      	bge.n	8002f7c <_printf_i+0xb0>
 8002f74:	222d      	movs	r2, #45	; 0x2d
 8002f76:	425b      	negs	r3, r3
 8002f78:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002f7c:	4962      	ldr	r1, [pc, #392]	; (8003108 <_printf_i+0x23c>)
 8002f7e:	220a      	movs	r2, #10
 8002f80:	e017      	b.n	8002fb2 <_printf_i+0xe6>
 8002f82:	6820      	ldr	r0, [r4, #0]
 8002f84:	6819      	ldr	r1, [r3, #0]
 8002f86:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002f8a:	d003      	beq.n	8002f94 <_printf_i+0xc8>
 8002f8c:	1d08      	adds	r0, r1, #4
 8002f8e:	6018      	str	r0, [r3, #0]
 8002f90:	680b      	ldr	r3, [r1, #0]
 8002f92:	e006      	b.n	8002fa2 <_printf_i+0xd6>
 8002f94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f98:	f101 0004 	add.w	r0, r1, #4
 8002f9c:	6018      	str	r0, [r3, #0]
 8002f9e:	d0f7      	beq.n	8002f90 <_printf_i+0xc4>
 8002fa0:	880b      	ldrh	r3, [r1, #0]
 8002fa2:	4959      	ldr	r1, [pc, #356]	; (8003108 <_printf_i+0x23c>)
 8002fa4:	2a6f      	cmp	r2, #111	; 0x6f
 8002fa6:	bf14      	ite	ne
 8002fa8:	220a      	movne	r2, #10
 8002faa:	2208      	moveq	r2, #8
 8002fac:	2000      	movs	r0, #0
 8002fae:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002fb2:	6865      	ldr	r5, [r4, #4]
 8002fb4:	60a5      	str	r5, [r4, #8]
 8002fb6:	2d00      	cmp	r5, #0
 8002fb8:	f2c0 809c 	blt.w	80030f4 <_printf_i+0x228>
 8002fbc:	6820      	ldr	r0, [r4, #0]
 8002fbe:	f020 0004 	bic.w	r0, r0, #4
 8002fc2:	6020      	str	r0, [r4, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d13f      	bne.n	8003048 <_printf_i+0x17c>
 8002fc8:	2d00      	cmp	r5, #0
 8002fca:	f040 8095 	bne.w	80030f8 <_printf_i+0x22c>
 8002fce:	4675      	mov	r5, lr
 8002fd0:	2a08      	cmp	r2, #8
 8002fd2:	d10b      	bne.n	8002fec <_printf_i+0x120>
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	07da      	lsls	r2, r3, #31
 8002fd8:	d508      	bpl.n	8002fec <_printf_i+0x120>
 8002fda:	6923      	ldr	r3, [r4, #16]
 8002fdc:	6862      	ldr	r2, [r4, #4]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	bfde      	ittt	le
 8002fe2:	2330      	movle	r3, #48	; 0x30
 8002fe4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002fe8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002fec:	ebae 0305 	sub.w	r3, lr, r5
 8002ff0:	6123      	str	r3, [r4, #16]
 8002ff2:	f8cd 8000 	str.w	r8, [sp]
 8002ff6:	463b      	mov	r3, r7
 8002ff8:	aa03      	add	r2, sp, #12
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	4630      	mov	r0, r6
 8002ffe:	f7ff feef 	bl	8002de0 <_printf_common>
 8003002:	3001      	adds	r0, #1
 8003004:	d155      	bne.n	80030b2 <_printf_i+0x1e6>
 8003006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800300a:	b005      	add	sp, #20
 800300c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003010:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003014:	493c      	ldr	r1, [pc, #240]	; (8003108 <_printf_i+0x23c>)
 8003016:	6822      	ldr	r2, [r4, #0]
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800301e:	f100 0504 	add.w	r5, r0, #4
 8003022:	601d      	str	r5, [r3, #0]
 8003024:	d001      	beq.n	800302a <_printf_i+0x15e>
 8003026:	6803      	ldr	r3, [r0, #0]
 8003028:	e002      	b.n	8003030 <_printf_i+0x164>
 800302a:	0655      	lsls	r5, r2, #25
 800302c:	d5fb      	bpl.n	8003026 <_printf_i+0x15a>
 800302e:	8803      	ldrh	r3, [r0, #0]
 8003030:	07d0      	lsls	r0, r2, #31
 8003032:	bf44      	itt	mi
 8003034:	f042 0220 	orrmi.w	r2, r2, #32
 8003038:	6022      	strmi	r2, [r4, #0]
 800303a:	b91b      	cbnz	r3, 8003044 <_printf_i+0x178>
 800303c:	6822      	ldr	r2, [r4, #0]
 800303e:	f022 0220 	bic.w	r2, r2, #32
 8003042:	6022      	str	r2, [r4, #0]
 8003044:	2210      	movs	r2, #16
 8003046:	e7b1      	b.n	8002fac <_printf_i+0xe0>
 8003048:	4675      	mov	r5, lr
 800304a:	fbb3 f0f2 	udiv	r0, r3, r2
 800304e:	fb02 3310 	mls	r3, r2, r0, r3
 8003052:	5ccb      	ldrb	r3, [r1, r3]
 8003054:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003058:	4603      	mov	r3, r0
 800305a:	2800      	cmp	r0, #0
 800305c:	d1f5      	bne.n	800304a <_printf_i+0x17e>
 800305e:	e7b7      	b.n	8002fd0 <_printf_i+0x104>
 8003060:	6808      	ldr	r0, [r1, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	6949      	ldr	r1, [r1, #20]
 8003066:	f010 0f80 	tst.w	r0, #128	; 0x80
 800306a:	d004      	beq.n	8003076 <_printf_i+0x1aa>
 800306c:	1d10      	adds	r0, r2, #4
 800306e:	6018      	str	r0, [r3, #0]
 8003070:	6813      	ldr	r3, [r2, #0]
 8003072:	6019      	str	r1, [r3, #0]
 8003074:	e007      	b.n	8003086 <_printf_i+0x1ba>
 8003076:	f010 0f40 	tst.w	r0, #64	; 0x40
 800307a:	f102 0004 	add.w	r0, r2, #4
 800307e:	6018      	str	r0, [r3, #0]
 8003080:	6813      	ldr	r3, [r2, #0]
 8003082:	d0f6      	beq.n	8003072 <_printf_i+0x1a6>
 8003084:	8019      	strh	r1, [r3, #0]
 8003086:	2300      	movs	r3, #0
 8003088:	6123      	str	r3, [r4, #16]
 800308a:	4675      	mov	r5, lr
 800308c:	e7b1      	b.n	8002ff2 <_printf_i+0x126>
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	1d11      	adds	r1, r2, #4
 8003092:	6019      	str	r1, [r3, #0]
 8003094:	6815      	ldr	r5, [r2, #0]
 8003096:	6862      	ldr	r2, [r4, #4]
 8003098:	2100      	movs	r1, #0
 800309a:	4628      	mov	r0, r5
 800309c:	f7fd f8a0 	bl	80001e0 <memchr>
 80030a0:	b108      	cbz	r0, 80030a6 <_printf_i+0x1da>
 80030a2:	1b40      	subs	r0, r0, r5
 80030a4:	6060      	str	r0, [r4, #4]
 80030a6:	6863      	ldr	r3, [r4, #4]
 80030a8:	6123      	str	r3, [r4, #16]
 80030aa:	2300      	movs	r3, #0
 80030ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030b0:	e79f      	b.n	8002ff2 <_printf_i+0x126>
 80030b2:	6923      	ldr	r3, [r4, #16]
 80030b4:	462a      	mov	r2, r5
 80030b6:	4639      	mov	r1, r7
 80030b8:	4630      	mov	r0, r6
 80030ba:	47c0      	blx	r8
 80030bc:	3001      	adds	r0, #1
 80030be:	d0a2      	beq.n	8003006 <_printf_i+0x13a>
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	079b      	lsls	r3, r3, #30
 80030c4:	d507      	bpl.n	80030d6 <_printf_i+0x20a>
 80030c6:	2500      	movs	r5, #0
 80030c8:	f104 0919 	add.w	r9, r4, #25
 80030cc:	68e3      	ldr	r3, [r4, #12]
 80030ce:	9a03      	ldr	r2, [sp, #12]
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	429d      	cmp	r5, r3
 80030d4:	db05      	blt.n	80030e2 <_printf_i+0x216>
 80030d6:	68e0      	ldr	r0, [r4, #12]
 80030d8:	9b03      	ldr	r3, [sp, #12]
 80030da:	4298      	cmp	r0, r3
 80030dc:	bfb8      	it	lt
 80030de:	4618      	movlt	r0, r3
 80030e0:	e793      	b.n	800300a <_printf_i+0x13e>
 80030e2:	2301      	movs	r3, #1
 80030e4:	464a      	mov	r2, r9
 80030e6:	4639      	mov	r1, r7
 80030e8:	4630      	mov	r0, r6
 80030ea:	47c0      	blx	r8
 80030ec:	3001      	adds	r0, #1
 80030ee:	d08a      	beq.n	8003006 <_printf_i+0x13a>
 80030f0:	3501      	adds	r5, #1
 80030f2:	e7eb      	b.n	80030cc <_printf_i+0x200>
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1a7      	bne.n	8003048 <_printf_i+0x17c>
 80030f8:	780b      	ldrb	r3, [r1, #0]
 80030fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003102:	e765      	b.n	8002fd0 <_printf_i+0x104>
 8003104:	0800343e 	.word	0x0800343e
 8003108:	0800342d 	.word	0x0800342d

0800310c <_sbrk_r>:
 800310c:	b538      	push	{r3, r4, r5, lr}
 800310e:	4c06      	ldr	r4, [pc, #24]	; (8003128 <_sbrk_r+0x1c>)
 8003110:	2300      	movs	r3, #0
 8003112:	4605      	mov	r5, r0
 8003114:	4608      	mov	r0, r1
 8003116:	6023      	str	r3, [r4, #0]
 8003118:	f7ff f852 	bl	80021c0 <_sbrk>
 800311c:	1c43      	adds	r3, r0, #1
 800311e:	d102      	bne.n	8003126 <_sbrk_r+0x1a>
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	b103      	cbz	r3, 8003126 <_sbrk_r+0x1a>
 8003124:	602b      	str	r3, [r5, #0]
 8003126:	bd38      	pop	{r3, r4, r5, pc}
 8003128:	200000a4 	.word	0x200000a4

0800312c <__sread>:
 800312c:	b510      	push	{r4, lr}
 800312e:	460c      	mov	r4, r1
 8003130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003134:	f000 f896 	bl	8003264 <_read_r>
 8003138:	2800      	cmp	r0, #0
 800313a:	bfab      	itete	ge
 800313c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800313e:	89a3      	ldrhlt	r3, [r4, #12]
 8003140:	181b      	addge	r3, r3, r0
 8003142:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003146:	bfac      	ite	ge
 8003148:	6563      	strge	r3, [r4, #84]	; 0x54
 800314a:	81a3      	strhlt	r3, [r4, #12]
 800314c:	bd10      	pop	{r4, pc}

0800314e <__swrite>:
 800314e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003152:	461f      	mov	r7, r3
 8003154:	898b      	ldrh	r3, [r1, #12]
 8003156:	05db      	lsls	r3, r3, #23
 8003158:	4605      	mov	r5, r0
 800315a:	460c      	mov	r4, r1
 800315c:	4616      	mov	r6, r2
 800315e:	d505      	bpl.n	800316c <__swrite+0x1e>
 8003160:	2302      	movs	r3, #2
 8003162:	2200      	movs	r2, #0
 8003164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003168:	f000 f868 	bl	800323c <_lseek_r>
 800316c:	89a3      	ldrh	r3, [r4, #12]
 800316e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003176:	81a3      	strh	r3, [r4, #12]
 8003178:	4632      	mov	r2, r6
 800317a:	463b      	mov	r3, r7
 800317c:	4628      	mov	r0, r5
 800317e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003182:	f000 b817 	b.w	80031b4 <_write_r>

08003186 <__sseek>:
 8003186:	b510      	push	{r4, lr}
 8003188:	460c      	mov	r4, r1
 800318a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800318e:	f000 f855 	bl	800323c <_lseek_r>
 8003192:	1c43      	adds	r3, r0, #1
 8003194:	89a3      	ldrh	r3, [r4, #12]
 8003196:	bf15      	itete	ne
 8003198:	6560      	strne	r0, [r4, #84]	; 0x54
 800319a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800319e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80031a2:	81a3      	strheq	r3, [r4, #12]
 80031a4:	bf18      	it	ne
 80031a6:	81a3      	strhne	r3, [r4, #12]
 80031a8:	bd10      	pop	{r4, pc}

080031aa <__sclose>:
 80031aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031ae:	f000 b813 	b.w	80031d8 <_close_r>
	...

080031b4 <_write_r>:
 80031b4:	b538      	push	{r3, r4, r5, lr}
 80031b6:	4c07      	ldr	r4, [pc, #28]	; (80031d4 <_write_r+0x20>)
 80031b8:	4605      	mov	r5, r0
 80031ba:	4608      	mov	r0, r1
 80031bc:	4611      	mov	r1, r2
 80031be:	2200      	movs	r2, #0
 80031c0:	6022      	str	r2, [r4, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	f7fe ffdd 	bl	8002182 <_write>
 80031c8:	1c43      	adds	r3, r0, #1
 80031ca:	d102      	bne.n	80031d2 <_write_r+0x1e>
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	b103      	cbz	r3, 80031d2 <_write_r+0x1e>
 80031d0:	602b      	str	r3, [r5, #0]
 80031d2:	bd38      	pop	{r3, r4, r5, pc}
 80031d4:	200000a4 	.word	0x200000a4

080031d8 <_close_r>:
 80031d8:	b538      	push	{r3, r4, r5, lr}
 80031da:	4c06      	ldr	r4, [pc, #24]	; (80031f4 <_close_r+0x1c>)
 80031dc:	2300      	movs	r3, #0
 80031de:	4605      	mov	r5, r0
 80031e0:	4608      	mov	r0, r1
 80031e2:	6023      	str	r3, [r4, #0]
 80031e4:	f7ff f80c 	bl	8002200 <_close>
 80031e8:	1c43      	adds	r3, r0, #1
 80031ea:	d102      	bne.n	80031f2 <_close_r+0x1a>
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	b103      	cbz	r3, 80031f2 <_close_r+0x1a>
 80031f0:	602b      	str	r3, [r5, #0]
 80031f2:	bd38      	pop	{r3, r4, r5, pc}
 80031f4:	200000a4 	.word	0x200000a4

080031f8 <_fstat_r>:
 80031f8:	b538      	push	{r3, r4, r5, lr}
 80031fa:	4c07      	ldr	r4, [pc, #28]	; (8003218 <_fstat_r+0x20>)
 80031fc:	2300      	movs	r3, #0
 80031fe:	4605      	mov	r5, r0
 8003200:	4608      	mov	r0, r1
 8003202:	4611      	mov	r1, r2
 8003204:	6023      	str	r3, [r4, #0]
 8003206:	f7ff f80d 	bl	8002224 <_fstat>
 800320a:	1c43      	adds	r3, r0, #1
 800320c:	d102      	bne.n	8003214 <_fstat_r+0x1c>
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	b103      	cbz	r3, 8003214 <_fstat_r+0x1c>
 8003212:	602b      	str	r3, [r5, #0]
 8003214:	bd38      	pop	{r3, r4, r5, pc}
 8003216:	bf00      	nop
 8003218:	200000a4 	.word	0x200000a4

0800321c <_isatty_r>:
 800321c:	b538      	push	{r3, r4, r5, lr}
 800321e:	4c06      	ldr	r4, [pc, #24]	; (8003238 <_isatty_r+0x1c>)
 8003220:	2300      	movs	r3, #0
 8003222:	4605      	mov	r5, r0
 8003224:	4608      	mov	r0, r1
 8003226:	6023      	str	r3, [r4, #0]
 8003228:	f7ff f80e 	bl	8002248 <_isatty>
 800322c:	1c43      	adds	r3, r0, #1
 800322e:	d102      	bne.n	8003236 <_isatty_r+0x1a>
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	b103      	cbz	r3, 8003236 <_isatty_r+0x1a>
 8003234:	602b      	str	r3, [r5, #0]
 8003236:	bd38      	pop	{r3, r4, r5, pc}
 8003238:	200000a4 	.word	0x200000a4

0800323c <_lseek_r>:
 800323c:	b538      	push	{r3, r4, r5, lr}
 800323e:	4c07      	ldr	r4, [pc, #28]	; (800325c <_lseek_r+0x20>)
 8003240:	4605      	mov	r5, r0
 8003242:	4608      	mov	r0, r1
 8003244:	4611      	mov	r1, r2
 8003246:	2200      	movs	r2, #0
 8003248:	6022      	str	r2, [r4, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	f7ff f80c 	bl	8002268 <_lseek>
 8003250:	1c43      	adds	r3, r0, #1
 8003252:	d102      	bne.n	800325a <_lseek_r+0x1e>
 8003254:	6823      	ldr	r3, [r4, #0]
 8003256:	b103      	cbz	r3, 800325a <_lseek_r+0x1e>
 8003258:	602b      	str	r3, [r5, #0]
 800325a:	bd38      	pop	{r3, r4, r5, pc}
 800325c:	200000a4 	.word	0x200000a4

08003260 <__malloc_lock>:
 8003260:	4770      	bx	lr

08003262 <__malloc_unlock>:
 8003262:	4770      	bx	lr

08003264 <_read_r>:
 8003264:	b538      	push	{r3, r4, r5, lr}
 8003266:	4c07      	ldr	r4, [pc, #28]	; (8003284 <_read_r+0x20>)
 8003268:	4605      	mov	r5, r0
 800326a:	4608      	mov	r0, r1
 800326c:	4611      	mov	r1, r2
 800326e:	2200      	movs	r2, #0
 8003270:	6022      	str	r2, [r4, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	f7ff f80c 	bl	8002290 <_read>
 8003278:	1c43      	adds	r3, r0, #1
 800327a:	d102      	bne.n	8003282 <_read_r+0x1e>
 800327c:	6823      	ldr	r3, [r4, #0]
 800327e:	b103      	cbz	r3, 8003282 <_read_r+0x1e>
 8003280:	602b      	str	r3, [r5, #0]
 8003282:	bd38      	pop	{r3, r4, r5, pc}
 8003284:	200000a4 	.word	0x200000a4

08003288 <_init>:
 8003288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328a:	bf00      	nop
 800328c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800328e:	bc08      	pop	{r3}
 8003290:	469e      	mov	lr, r3
 8003292:	4770      	bx	lr

08003294 <_fini>:
 8003294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003296:	bf00      	nop
 8003298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800329a:	bc08      	pop	{r3}
 800329c:	469e      	mov	lr, r3
 800329e:	4770      	bx	lr
