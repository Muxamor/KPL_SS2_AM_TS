
KPL_SS2_AM_TS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  0800639c  0800639c  0001639c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080065bc  080065bc  000165bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080065c0  080065c0  000165c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  080065c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000044  20000074  08006638  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000b8  08006638  000200b8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e1da  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000231d  00000000  00000000  0002e27e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d38  00000000  00000000  000305a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c20  00000000  00000000  000312d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000054b7  00000000  00000000  00031ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003898  00000000  00000000  000373af  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003ac47  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003f50  00000000  00000000  0003acc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006384 	.word	0x08006384

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006384 	.word	0x08006384

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__aeabi_d2f>:
 8000a14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a1c:	bf24      	itt	cs
 8000a1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a26:	d90d      	bls.n	8000a44 <__aeabi_d2f+0x30>
 8000a28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a48:	d121      	bne.n	8000a8e <__aeabi_d2f+0x7a>
 8000a4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a4e:	bfbc      	itt	lt
 8000a50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a54:	4770      	bxlt	lr
 8000a56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a5e:	f1c2 0218 	rsb	r2, r2, #24
 8000a62:	f1c2 0c20 	rsb	ip, r2, #32
 8000a66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a6e:	bf18      	it	ne
 8000a70:	f040 0001 	orrne.w	r0, r0, #1
 8000a74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a80:	ea40 000c 	orr.w	r0, r0, ip
 8000a84:	fa23 f302 	lsr.w	r3, r3, r2
 8000a88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a8c:	e7cc      	b.n	8000a28 <__aeabi_d2f+0x14>
 8000a8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a92:	d107      	bne.n	8000aa4 <__aeabi_d2f+0x90>
 8000a94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a98:	bf1e      	ittt	ne
 8000a9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aa2:	4770      	bxne	lr
 8000aa4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop

08000ab4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000abc:	4905      	ldr	r1, [pc, #20]	; (8000ad4 <LL_EXTI_EnableIT_0_31+0x20>)
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <LL_EXTI_EnableIT_0_31+0x20>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	600b      	str	r3, [r1, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	40010400 	.word	0x40010400

08000ad8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000ae0:	4905      	ldr	r1, [pc, #20]	; (8000af8 <LL_EXTI_EnableIT_32_63+0x20>)
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <LL_EXTI_EnableIT_32_63+0x20>)
 8000ae4:	6a1a      	ldr	r2, [r3, #32]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	620b      	str	r3, [r1, #32]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	40010400 	.word	0x40010400

08000afc <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8000b04:	4906      	ldr	r1, [pc, #24]	; (8000b20 <LL_EXTI_DisableIT_0_31+0x24>)
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <LL_EXTI_DisableIT_0_31+0x24>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	4013      	ands	r3, r2
 8000b10:	600b      	str	r3, [r1, #0]
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40010400 	.word	0x40010400

08000b24 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000b2c:	4906      	ldr	r1, [pc, #24]	; (8000b48 <LL_EXTI_DisableIT_32_63+0x24>)
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <LL_EXTI_DisableIT_32_63+0x24>)
 8000b30:	6a1a      	ldr	r2, [r3, #32]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	4013      	ands	r3, r2
 8000b38:	620b      	str	r3, [r1, #32]
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40010400 	.word	0x40010400

08000b4c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8000b54:	4905      	ldr	r1, [pc, #20]	; (8000b6c <LL_EXTI_EnableEvent_0_31+0x20>)
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <LL_EXTI_EnableEvent_0_31+0x20>)
 8000b58:	685a      	ldr	r2, [r3, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	604b      	str	r3, [r1, #4]

}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	40010400 	.word	0x40010400

08000b70 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000b78:	4905      	ldr	r1, [pc, #20]	; (8000b90 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	40010400 	.word	0x40010400

08000b94 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8000b9c:	4906      	ldr	r1, [pc, #24]	; (8000bb8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	604b      	str	r3, [r1, #4]
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40010400 	.word	0x40010400

08000bbc <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000bc4:	4906      	ldr	r1, [pc, #24]	; (8000be0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	4013      	ands	r3, r2
 8000bd0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40010400 	.word	0x40010400

08000be4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000bec:	4905      	ldr	r1, [pc, #20]	; (8000c04 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	608b      	str	r3, [r1, #8]

}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	40010400 	.word	0x40010400

08000c08 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000c10:	4905      	ldr	r1, [pc, #20]	; (8000c28 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000c14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	40010400 	.word	0x40010400

08000c2c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8000c34:	4906      	ldr	r1, [pc, #24]	; (8000c50 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000c38:	689a      	ldr	r2, [r3, #8]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	4013      	ands	r3, r2
 8000c40:	608b      	str	r3, [r1, #8]

}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40010400 	.word	0x40010400

08000c54 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000c5c:	4906      	ldr	r1, [pc, #24]	; (8000c78 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	43db      	mvns	r3, r3
 8000c66:	4013      	ands	r3, r2
 8000c68:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40010400 	.word	0x40010400

08000c7c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8000c84:	4905      	ldr	r1, [pc, #20]	; (8000c9c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000c86:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000c88:	68da      	ldr	r2, [r3, #12]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	60cb      	str	r3, [r1, #12]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	40010400 	.word	0x40010400

08000ca0 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000ca8:	4905      	ldr	r1, [pc, #20]	; (8000cc0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	40010400 	.word	0x40010400

08000cc4 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8000ccc:	4906      	ldr	r1, [pc, #24]	; (8000ce8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000cd0:	68da      	ldr	r2, [r3, #12]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	60cb      	str	r3, [r1, #12]
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40010400 	.word	0x40010400

08000cec <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000cf4:	4906      	ldr	r1, [pc, #24]	; (8000d10 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	4013      	ands	r3, r2
 8000d00:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40010400 	.word	0x40010400

08000d14 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7a1b      	ldrb	r3, [r3, #8]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	f000 80c1 	beq.w	8000eac <LL_EXTI_Init+0x198>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d05b      	beq.n	8000dea <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	7a5b      	ldrb	r3, [r3, #9]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d00e      	beq.n	8000d58 <LL_EXTI_Init+0x44>
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d017      	beq.n	8000d6e <LL_EXTI_Init+0x5a>
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d120      	bne.n	8000d84 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff24 	bl	8000b94 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff feaf 	bl	8000ab4 <LL_EXTI_EnableIT_0_31>
          break;
 8000d56:	e018      	b.n	8000d8a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fecd 	bl	8000afc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fef0 	bl	8000b4c <LL_EXTI_EnableEvent_0_31>
          break;
 8000d6c:	e00d      	b.n	8000d8a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fe9e 	bl	8000ab4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fee5 	bl	8000b4c <LL_EXTI_EnableEvent_0_31>
          break;
 8000d82:	e002      	b.n	8000d8a <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 8000d84:	2300      	movs	r3, #0
 8000d86:	73fb      	strb	r3, [r7, #15]
          break;
 8000d88:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	7a9b      	ldrb	r3, [r3, #10]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d02b      	beq.n	8000dea <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	7a9b      	ldrb	r3, [r3, #10]
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d00e      	beq.n	8000db8 <LL_EXTI_Init+0xa4>
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	d017      	beq.n	8000dce <LL_EXTI_Init+0xba>
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d120      	bne.n	8000de4 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ff8c 	bl	8000cc4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff17 	bl	8000be4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000db6:	e018      	b.n	8000dea <LL_EXTI_Init+0xd6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff35 	bl	8000c2c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff58 	bl	8000c7c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000dcc:	e00d      	b.n	8000dea <LL_EXTI_Init+0xd6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff06 	bl	8000be4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff4d 	bl	8000c7c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000de2:	e002      	b.n	8000dea <LL_EXTI_Init+0xd6>
          default:
            status = ERROR;
 8000de4:	2300      	movs	r3, #0
 8000de6:	73fb      	strb	r3, [r7, #15]
            break;
 8000de8:	bf00      	nop
        }
      }
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d070      	beq.n	8000ed4 <LL_EXTI_Init+0x1c0>
    {
      switch (EXTI_InitStruct->Mode)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	7a5b      	ldrb	r3, [r3, #9]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d00e      	beq.n	8000e18 <LL_EXTI_Init+0x104>
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d017      	beq.n	8000e2e <LL_EXTI_Init+0x11a>
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d120      	bne.n	8000e44 <LL_EXTI_Init+0x130>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fed8 	bl	8000bbc <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fe61 	bl	8000ad8 <LL_EXTI_EnableIT_32_63>
          break;
 8000e16:	e018      	b.n	8000e4a <LL_EXTI_Init+0x136>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fe81 	bl	8000b24 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fea2 	bl	8000b70 <LL_EXTI_EnableEvent_32_63>
          break;
 8000e2c:	e00d      	b.n	8000e4a <LL_EXTI_Init+0x136>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fe50 	bl	8000ad8 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fe97 	bl	8000b70 <LL_EXTI_EnableEvent_32_63>
          break;
 8000e42:	e002      	b.n	8000e4a <LL_EXTI_Init+0x136>
        default:
          status = ERROR;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]
          break;
 8000e48:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	7a9b      	ldrb	r3, [r3, #10]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d040      	beq.n	8000ed4 <LL_EXTI_Init+0x1c0>
      {
        switch (EXTI_InitStruct->Trigger)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	7a9b      	ldrb	r3, [r3, #10]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d00e      	beq.n	8000e78 <LL_EXTI_Init+0x164>
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	d017      	beq.n	8000e8e <LL_EXTI_Init+0x17a>
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d120      	bne.n	8000ea4 <LL_EXTI_Init+0x190>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff40 	bl	8000cec <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fec9 	bl	8000c08 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8000e76:	e02d      	b.n	8000ed4 <LL_EXTI_Init+0x1c0>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fee9 	bl	8000c54 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ff0a 	bl	8000ca0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000e8c:	e022      	b.n	8000ed4 <LL_EXTI_Init+0x1c0>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff feb8 	bl	8000c08 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff feff 	bl	8000ca0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000ea2:	e017      	b.n	8000ed4 <LL_EXTI_Init+0x1c0>
          default:
            status = ERROR;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]
            break;
 8000ea8:	bf00      	nop
 8000eaa:	e013      	b.n	8000ed4 <LL_EXTI_Init+0x1c0>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fe23 	bl	8000afc <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fe6a 	bl	8000b94 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fe2d 	bl	8000b24 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fe74 	bl	8000bbc <LL_EXTI_DisableEvent_32_63>
  }
  return status;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b089      	sub	sp, #36	; 0x24
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	60f8      	str	r0, [r7, #12]
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	fa93 f3a3 	rbit	r3, r3
 8000ef8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	fab3 f383 	clz	r3, r3
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2103      	movs	r1, #3
 8000f04:	fa01 f303 	lsl.w	r3, r1, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	fa93 f3a3 	rbit	r3, r3
 8000f16:	61bb      	str	r3, [r7, #24]
  return(result);
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	fab3 f383 	clz	r3, r3
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	431a      	orrs	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	601a      	str	r2, [r3, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	3724      	adds	r7, #36	; 0x24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	401a      	ands	r2, r3
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	fb01 f303 	mul.w	r3, r1, r3
 8000f56:	431a      	orrs	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	605a      	str	r2, [r3, #4]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa93 f3a3 	rbit	r3, r3
 8000f82:	613b      	str	r3, [r7, #16]
  return(result);
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	fab3 f383 	clz	r3, r3
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2103      	movs	r1, #3
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	401a      	ands	r2, r3
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa93 f3a3 	rbit	r3, r3
 8000fa0:	61bb      	str	r3, [r7, #24]
  return(result);
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	fab3 f383 	clz	r3, r3
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000fb6:	bf00      	nop
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b089      	sub	sp, #36	; 0x24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	fa93 f3a3 	rbit	r3, r3
 8000fdc:	613b      	str	r3, [r7, #16]
  return(result);
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	fab3 f383 	clz	r3, r3
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2103      	movs	r1, #3
 8000fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	401a      	ands	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	fa93 f3a3 	rbit	r3, r3
 8000ffa:	61bb      	str	r3, [r7, #24]
  return(result);
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fab3 f383 	clz	r3, r3
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	431a      	orrs	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	60da      	str	r2, [r3, #12]
}
 8001010:	bf00      	nop
 8001012:	3724      	adds	r7, #36	; 0x24
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6a1a      	ldr	r2, [r3, #32]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa93 f3a3 	rbit	r3, r3
 8001036:	613b      	str	r3, [r7, #16]
  return(result);
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	fab3 f383 	clz	r3, r3
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	210f      	movs	r1, #15
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	401a      	ands	r2, r3
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa93 f3a3 	rbit	r3, r3
 8001054:	61bb      	str	r3, [r7, #24]
  return(result);
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	fab3 f383 	clz	r3, r3
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	fa01 f303 	lsl.w	r3, r1, r3
 8001064:	431a      	orrs	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800106a:	bf00      	nop
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001076:	b480      	push	{r7}
 8001078:	b089      	sub	sp, #36	; 0x24
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	0a1b      	lsrs	r3, r3, #8
 800108a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa93 f3a3 	rbit	r3, r3
 8001092:	613b      	str	r3, [r7, #16]
  return(result);
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	fab3 f383 	clz	r3, r3
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	210f      	movs	r1, #15
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	401a      	ands	r2, r3
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	fa93 f3a3 	rbit	r3, r3
 80010b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	fab3 f383 	clz	r3, r3
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	431a      	orrs	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80010c8:	bf00      	nop
 80010ca:	3724      	adds	r7, #36	; 0x24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa93 f3a3 	rbit	r3, r3
 80010f2:	613b      	str	r3, [r7, #16]
  return(result);
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	fab3 f383 	clz	r3, r3
 80010fa:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80010fc:	e048      	b.n	8001190 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	2101      	movs	r1, #1
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d03a      	beq.n	800118a <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	461a      	mov	r2, r3
 800111a:	69b9      	ldr	r1, [r7, #24]
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fede 	bl	8000ede <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d003      	beq.n	8001132 <LL_GPIO_Init+0x5e>
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b02      	cmp	r3, #2
 8001130:	d106      	bne.n	8001140 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	461a      	mov	r2, r3
 8001138:	69b9      	ldr	r1, [r7, #24]
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff14 	bl	8000f68 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	461a      	mov	r2, r3
 8001146:	69b9      	ldr	r1, [r7, #24]
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff3a 	bl	8000fc2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d119      	bne.n	800118a <LL_GPIO_Init+0xb6>
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	fa93 f3a3 	rbit	r3, r3
 8001160:	60bb      	str	r3, [r7, #8]
  return(result);
 8001162:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001164:	fab3 f383 	clz	r3, r3
 8001168:	2b07      	cmp	r3, #7
 800116a:	d807      	bhi.n	800117c <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	461a      	mov	r2, r3
 8001172:	69b9      	ldr	r1, [r7, #24]
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff51 	bl	800101c <LL_GPIO_SetAFPin_0_7>
 800117a:	e006      	b.n	800118a <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	461a      	mov	r2, r3
 8001182:	69b9      	ldr	r1, [r7, #24]
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff76 	bl	8001076 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3301      	adds	r3, #1
 800118e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	fa22 f303 	lsr.w	r3, r2, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1af      	bne.n	80010fe <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d003      	beq.n	80011ae <LL_GPIO_Init+0xda>
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d107      	bne.n	80011be <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	6819      	ldr	r1, [r3, #0]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	461a      	mov	r2, r3
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff febd 	bl	8000f38 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f043 0201 	orr.w	r2, r3, #1
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	601a      	str	r2, [r3, #0]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f023 0201 	bic.w	r2, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	601a      	str	r2, [r3, #0]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	0219      	lsls	r1, r3, #8
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	430b      	orrs	r3, r1
 8001224:	431a      	orrs	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	601a      	str	r2, [r3, #0]
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8001236:	b480      	push	{r7}
 8001238:	b085      	sub	sp, #20
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800124a:	f023 0307 	bic.w	r3, r3, #7
 800124e:	68b9      	ldr	r1, [r7, #8]
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	430a      	orrs	r2, r1
 8001254:	431a      	orrs	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	609a      	str	r2, [r3, #8]
}
 800125a:	bf00      	nop
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	609a      	str	r2, [r3, #8]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	609a      	str	r2, [r3, #8]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	611a      	str	r2, [r3, #16]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	601a      	str	r2, [r3, #0]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	431a      	orrs	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	605a      	str	r2, [r3, #4]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff65 	bl	80011e8 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	6899      	ldr	r1, [r3, #8]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	461a      	mov	r2, r3
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff6d 	bl	8001208 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	4619      	mov	r1, r3
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ffb6 	bl	80012a6 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ff44 	bl	80011c8 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ffa0 	bl	8001286 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	6919      	ldr	r1, [r3, #16]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	461a      	mov	r2, r3
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff70 	bl	8001236 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d002      	beq.n	8001364 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ff81 	bl	8001266 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ffa9 	bl	80012c2 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	4619      	mov	r1, r3
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ffb6 	bl	80012e8 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800137c:	2301      	movs	r3, #1
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <LL_RCC_HSI_IsReady+0x24>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001398:	bf0c      	ite	eq
 800139a:	2301      	moveq	r3, #1
 800139c:	2300      	movne	r3, #0
 800139e:	b2db      	uxtb	r3, r3
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000

080013b0 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <LL_RCC_LSE_IsReady+0x24>)
 80013b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b02      	cmp	r3, #2
 80013c0:	bf0c      	ite	eq
 80013c2:	2301      	moveq	r3, #1
 80013c4:	2300      	movne	r3, #0
 80013c6:	b2db      	uxtb	r3, r3
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40021000 	.word	0x40021000

080013d8 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL));
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0308 	and.w	r3, r3, #8
 80013e4:	2b08      	cmp	r3, #8
 80013e6:	bf0c      	ite	eq
 80013e8:	2301      	moveq	r3, #1
 80013ea:	2300      	movne	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	40021000 	.word	0x40021000

080013fc <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <LL_RCC_MSI_GetRange+0x18>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000

08001418 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800141e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001422:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	40021000 	.word	0x40021000

08001434 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <LL_RCC_GetSysClkSource+0x18>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 030c 	and.w	r3, r3, #12
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000

08001450 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <LL_RCC_GetAHBPrescaler+0x18>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000

0800146c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000

08001488 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <LL_RCC_GetAPB2Prescaler+0x18>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001494:	4618      	mov	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40021000 	.word	0x40021000

080014a4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <LL_RCC_GetUSARTClockSource+0x24>)
 80014ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	401a      	ands	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	041b      	lsls	r3, r3, #16
 80014ba:	4313      	orrs	r3, r2
}
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	40021000 	.word	0x40021000

080014cc <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <LL_RCC_GetUARTClockSource+0x24>)
 80014d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	401a      	ands	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	041b      	lsls	r3, r3, #16
 80014e2:	4313      	orrs	r3, r2
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	40021000 	.word	0x40021000

080014f4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <LL_RCC_PLL_GetMainSource+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	f003 0303 	and.w	r3, r3, #3
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000

08001510 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001514:	4b04      	ldr	r3, [pc, #16]	; (8001528 <LL_RCC_PLL_GetN+0x18>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	40021000 	.word	0x40021000

0800152c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <LL_RCC_PLL_GetR+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000

08001548 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <LL_RCC_PLL_GetDivider+0x18>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000

08001564 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b03      	cmp	r3, #3
 8001574:	d12e      	bne.n	80015d4 <LL_RCC_GetUSARTClockFreq+0x70>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ff94 	bl	80014a4 <LL_RCC_GetUSARTClockSource>
 800157c:	4603      	mov	r3, r0
 800157e:	4a4f      	ldr	r2, [pc, #316]	; (80016bc <LL_RCC_GetUSARTClockFreq+0x158>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d009      	beq.n	8001598 <LL_RCC_GetUSARTClockFreq+0x34>
 8001584:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8001588:	d00e      	beq.n	80015a8 <LL_RCC_GetUSARTClockFreq+0x44>
 800158a:	4a4d      	ldr	r2, [pc, #308]	; (80016c0 <LL_RCC_GetUSARTClockFreq+0x15c>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d114      	bne.n	80015ba <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001590:	f000 f8e8 	bl	8001764 <RCC_GetSystemClockFreq>
 8001594:	60f8      	str	r0, [r7, #12]
        break;
 8001596:	e08b      	b.n	80016b0 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001598:	f7ff fef6 	bl	8001388 <LL_RCC_HSI_IsReady>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d07b      	beq.n	800169a <LL_RCC_GetUSARTClockFreq+0x136>
        {
          usart_frequency = HSI_VALUE;
 80015a2:	4b48      	ldr	r3, [pc, #288]	; (80016c4 <LL_RCC_GetUSARTClockFreq+0x160>)
 80015a4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80015a6:	e078      	b.n	800169a <LL_RCC_GetUSARTClockFreq+0x136>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80015a8:	f7ff ff02 	bl	80013b0 <LL_RCC_LSE_IsReady>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d075      	beq.n	800169e <LL_RCC_GetUSARTClockFreq+0x13a>
        {
          usart_frequency = LSE_VALUE;
 80015b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015b6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80015b8:	e071      	b.n	800169e <LL_RCC_GetUSARTClockFreq+0x13a>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80015ba:	f000 f8d3 	bl	8001764 <RCC_GetSystemClockFreq>
 80015be:	4603      	mov	r3, r0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 f95f 	bl	8001884 <RCC_GetHCLKClockFreq>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 f985 	bl	80018d8 <RCC_GetPCLK2ClockFreq>
 80015ce:	60f8      	str	r0, [r7, #12]
        break;
 80015d0:	bf00      	nop
 80015d2:	e06d      	b.n	80016b0 <LL_RCC_GetUSARTClockFreq+0x14c>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b0c      	cmp	r3, #12
 80015d8:	d12e      	bne.n	8001638 <LL_RCC_GetUSARTClockFreq+0xd4>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ff62 	bl	80014a4 <LL_RCC_GetUSARTClockSource>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4a39      	ldr	r2, [pc, #228]	; (80016c8 <LL_RCC_GetUSARTClockFreq+0x164>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d009      	beq.n	80015fc <LL_RCC_GetUSARTClockFreq+0x98>
 80015e8:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 80015ec:	d00e      	beq.n	800160c <LL_RCC_GetUSARTClockFreq+0xa8>
 80015ee:	4a37      	ldr	r2, [pc, #220]	; (80016cc <LL_RCC_GetUSARTClockFreq+0x168>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d114      	bne.n	800161e <LL_RCC_GetUSARTClockFreq+0xba>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80015f4:	f000 f8b6 	bl	8001764 <RCC_GetSystemClockFreq>
 80015f8:	60f8      	str	r0, [r7, #12]
        break;
 80015fa:	e059      	b.n	80016b0 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80015fc:	f7ff fec4 	bl	8001388 <LL_RCC_HSI_IsReady>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d04d      	beq.n	80016a2 <LL_RCC_GetUSARTClockFreq+0x13e>
        {
          usart_frequency = HSI_VALUE;
 8001606:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <LL_RCC_GetUSARTClockFreq+0x160>)
 8001608:	60fb      	str	r3, [r7, #12]
        }
        break;
 800160a:	e04a      	b.n	80016a2 <LL_RCC_GetUSARTClockFreq+0x13e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800160c:	f7ff fed0 	bl	80013b0 <LL_RCC_LSE_IsReady>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d047      	beq.n	80016a6 <LL_RCC_GetUSARTClockFreq+0x142>
        {
          usart_frequency = LSE_VALUE;
 8001616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800161a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800161c:	e043      	b.n	80016a6 <LL_RCC_GetUSARTClockFreq+0x142>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800161e:	f000 f8a1 	bl	8001764 <RCC_GetSystemClockFreq>
 8001622:	4603      	mov	r3, r0
 8001624:	4618      	mov	r0, r3
 8001626:	f000 f92d 	bl	8001884 <RCC_GetHCLKClockFreq>
 800162a:	4603      	mov	r3, r0
 800162c:	4618      	mov	r0, r3
 800162e:	f000 f93f 	bl	80018b0 <RCC_GetPCLK1ClockFreq>
 8001632:	60f8      	str	r0, [r7, #12]
        break;
 8001634:	bf00      	nop
 8001636:	e03b      	b.n	80016b0 <LL_RCC_GetUSARTClockFreq+0x14c>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b30      	cmp	r3, #48	; 0x30
 800163c:	d138      	bne.n	80016b0 <LL_RCC_GetUSARTClockFreq+0x14c>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ff30 	bl	80014a4 <LL_RCC_GetUSARTClockSource>
 8001644:	4603      	mov	r3, r0
 8001646:	4a22      	ldr	r2, [pc, #136]	; (80016d0 <LL_RCC_GetUSARTClockFreq+0x16c>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d009      	beq.n	8001660 <LL_RCC_GetUSARTClockFreq+0xfc>
 800164c:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8001650:	d00e      	beq.n	8001670 <LL_RCC_GetUSARTClockFreq+0x10c>
 8001652:	4a20      	ldr	r2, [pc, #128]	; (80016d4 <LL_RCC_GetUSARTClockFreq+0x170>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d114      	bne.n	8001682 <LL_RCC_GetUSARTClockFreq+0x11e>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8001658:	f000 f884 	bl	8001764 <RCC_GetSystemClockFreq>
 800165c:	60f8      	str	r0, [r7, #12]
          break;
 800165e:	e027      	b.n	80016b0 <LL_RCC_GetUSARTClockFreq+0x14c>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 8001660:	f7ff fe92 	bl	8001388 <LL_RCC_HSI_IsReady>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d01f      	beq.n	80016aa <LL_RCC_GetUSARTClockFreq+0x146>
          {
            usart_frequency = HSI_VALUE;
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <LL_RCC_GetUSARTClockFreq+0x160>)
 800166c:	60fb      	str	r3, [r7, #12]
          }
          break;
 800166e:	e01c      	b.n	80016aa <LL_RCC_GetUSARTClockFreq+0x146>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 8001670:	f7ff fe9e 	bl	80013b0 <LL_RCC_LSE_IsReady>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d019      	beq.n	80016ae <LL_RCC_GetUSARTClockFreq+0x14a>
          {
            usart_frequency = LSE_VALUE;
 800167a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800167e:	60fb      	str	r3, [r7, #12]
          }
          break;
 8001680:	e015      	b.n	80016ae <LL_RCC_GetUSARTClockFreq+0x14a>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001682:	f000 f86f 	bl	8001764 <RCC_GetSystemClockFreq>
 8001686:	4603      	mov	r3, r0
 8001688:	4618      	mov	r0, r3
 800168a:	f000 f8fb 	bl	8001884 <RCC_GetHCLKClockFreq>
 800168e:	4603      	mov	r3, r0
 8001690:	4618      	mov	r0, r3
 8001692:	f000 f90d 	bl	80018b0 <RCC_GetPCLK1ClockFreq>
 8001696:	60f8      	str	r0, [r7, #12]
          break;
 8001698:	e00a      	b.n	80016b0 <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 800169a:	bf00      	nop
 800169c:	e008      	b.n	80016b0 <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 800169e:	bf00      	nop
 80016a0:	e006      	b.n	80016b0 <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 80016a2:	bf00      	nop
 80016a4:	e004      	b.n	80016b0 <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 80016a6:	bf00      	nop
 80016a8:	e002      	b.n	80016b0 <LL_RCC_GetUSARTClockFreq+0x14c>
          break;
 80016aa:	bf00      	nop
 80016ac:	e000      	b.n	80016b0 <LL_RCC_GetUSARTClockFreq+0x14c>
          break;
 80016ae:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 80016b0:	68fb      	ldr	r3, [r7, #12]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	00030002 	.word	0x00030002
 80016c0:	00030001 	.word	0x00030001
 80016c4:	00f42400 	.word	0x00f42400
 80016c8:	000c0008 	.word	0x000c0008
 80016cc:	000c0004 	.word	0x000c0004
 80016d0:	00300020 	.word	0x00300020
 80016d4:	00300010 	.word	0x00300010

080016d8 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2bc0      	cmp	r3, #192	; 0xc0
 80016e8:	d130      	bne.n	800174c <LL_RCC_GetUARTClockFreq+0x74>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff feee 	bl	80014cc <LL_RCC_GetUARTClockSource>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4a19      	ldr	r2, [pc, #100]	; (8001758 <LL_RCC_GetUARTClockFreq+0x80>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d009      	beq.n	800170c <LL_RCC_GetUARTClockFreq+0x34>
 80016f8:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80016fc:	d00e      	beq.n	800171c <LL_RCC_GetUARTClockFreq+0x44>
 80016fe:	4a17      	ldr	r2, [pc, #92]	; (800175c <LL_RCC_GetUARTClockFreq+0x84>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d114      	bne.n	800172e <LL_RCC_GetUARTClockFreq+0x56>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8001704:	f000 f82e 	bl	8001764 <RCC_GetSystemClockFreq>
 8001708:	60f8      	str	r0, [r7, #12]
        break;
 800170a:	e01f      	b.n	800174c <LL_RCC_GetUARTClockFreq+0x74>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800170c:	f7ff fe3c 	bl	8001388 <LL_RCC_HSI_IsReady>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d017      	beq.n	8001746 <LL_RCC_GetUARTClockFreq+0x6e>
        {
          uart_frequency = HSI_VALUE;
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <LL_RCC_GetUARTClockFreq+0x88>)
 8001718:	60fb      	str	r3, [r7, #12]
        }
        break;
 800171a:	e014      	b.n	8001746 <LL_RCC_GetUARTClockFreq+0x6e>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800171c:	f7ff fe48 	bl	80013b0 <LL_RCC_LSE_IsReady>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d011      	beq.n	800174a <LL_RCC_GetUARTClockFreq+0x72>
        {
          uart_frequency = LSE_VALUE;
 8001726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800172a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800172c:	e00d      	b.n	800174a <LL_RCC_GetUARTClockFreq+0x72>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800172e:	f000 f819 	bl	8001764 <RCC_GetSystemClockFreq>
 8001732:	4603      	mov	r3, r0
 8001734:	4618      	mov	r0, r3
 8001736:	f000 f8a5 	bl	8001884 <RCC_GetHCLKClockFreq>
 800173a:	4603      	mov	r3, r0
 800173c:	4618      	mov	r0, r3
 800173e:	f000 f8b7 	bl	80018b0 <RCC_GetPCLK1ClockFreq>
 8001742:	60f8      	str	r0, [r7, #12]
        break;
 8001744:	e002      	b.n	800174c <LL_RCC_GetUARTClockFreq+0x74>
        break;
 8001746:	bf00      	nop
 8001748:	e000      	b.n	800174c <LL_RCC_GetUARTClockFreq+0x74>
        break;
 800174a:	bf00      	nop
        break;
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 800174c:	68fb      	ldr	r3, [r7, #12]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	00c00080 	.word	0x00c00080
 800175c:	00c00040 	.word	0x00c00040
 8001760:	00f42400 	.word	0x00f42400

08001764 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800176e:	f7ff fe61 	bl	8001434 <LL_RCC_GetSysClkSource>
 8001772:	4603      	mov	r3, r0
 8001774:	2b0c      	cmp	r3, #12
 8001776:	d851      	bhi.n	800181c <RCC_GetSystemClockFreq+0xb8>
 8001778:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <RCC_GetSystemClockFreq+0x1c>)
 800177a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177e:	bf00      	nop
 8001780:	080017b5 	.word	0x080017b5
 8001784:	0800181d 	.word	0x0800181d
 8001788:	0800181d 	.word	0x0800181d
 800178c:	0800181d 	.word	0x0800181d
 8001790:	08001809 	.word	0x08001809
 8001794:	0800181d 	.word	0x0800181d
 8001798:	0800181d 	.word	0x0800181d
 800179c:	0800181d 	.word	0x0800181d
 80017a0:	0800180f 	.word	0x0800180f
 80017a4:	0800181d 	.word	0x0800181d
 80017a8:	0800181d 	.word	0x0800181d
 80017ac:	0800181d 	.word	0x0800181d
 80017b0:	08001815 	.word	0x08001815
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80017b4:	f7ff fe10 	bl	80013d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d111      	bne.n	80017e2 <RCC_GetSystemClockFreq+0x7e>
 80017be:	f7ff fe0b 	bl	80013d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <RCC_GetSystemClockFreq+0x6e>
 80017c8:	f7ff fe18 	bl	80013fc <LL_RCC_MSI_GetRange>
 80017cc:	4603      	mov	r3, r0
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	e003      	b.n	80017da <RCC_GetSystemClockFreq+0x76>
 80017d2:	f7ff fe21 	bl	8001418 <LL_RCC_MSI_GetRangeAfterStandby>
 80017d6:	4603      	mov	r3, r0
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	4a28      	ldr	r2, [pc, #160]	; (800187c <RCC_GetSystemClockFreq+0x118>)
 80017dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e0:	e010      	b.n	8001804 <RCC_GetSystemClockFreq+0xa0>
 80017e2:	f7ff fdf9 	bl	80013d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d004      	beq.n	80017f6 <RCC_GetSystemClockFreq+0x92>
 80017ec:	f7ff fe06 	bl	80013fc <LL_RCC_MSI_GetRange>
 80017f0:	4603      	mov	r3, r0
 80017f2:	091b      	lsrs	r3, r3, #4
 80017f4:	e003      	b.n	80017fe <RCC_GetSystemClockFreq+0x9a>
 80017f6:	f7ff fe0f 	bl	8001418 <LL_RCC_MSI_GetRangeAfterStandby>
 80017fa:	4603      	mov	r3, r0
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	4a1f      	ldr	r2, [pc, #124]	; (800187c <RCC_GetSystemClockFreq+0x118>)
 8001800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001804:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001806:	e033      	b.n	8001870 <RCC_GetSystemClockFreq+0x10c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <RCC_GetSystemClockFreq+0x11c>)
 800180a:	607b      	str	r3, [r7, #4]
      break;
 800180c:	e030      	b.n	8001870 <RCC_GetSystemClockFreq+0x10c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <RCC_GetSystemClockFreq+0x11c>)
 8001810:	607b      	str	r3, [r7, #4]
      break;
 8001812:	e02d      	b.n	8001870 <RCC_GetSystemClockFreq+0x10c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001814:	f000 f874 	bl	8001900 <RCC_PLL_GetFreqDomain_SYS>
 8001818:	6078      	str	r0, [r7, #4]
      break;
 800181a:	e029      	b.n	8001870 <RCC_GetSystemClockFreq+0x10c>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800181c:	f7ff fddc 	bl	80013d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d111      	bne.n	800184a <RCC_GetSystemClockFreq+0xe6>
 8001826:	f7ff fdd7 	bl	80013d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d004      	beq.n	800183a <RCC_GetSystemClockFreq+0xd6>
 8001830:	f7ff fde4 	bl	80013fc <LL_RCC_MSI_GetRange>
 8001834:	4603      	mov	r3, r0
 8001836:	0a1b      	lsrs	r3, r3, #8
 8001838:	e003      	b.n	8001842 <RCC_GetSystemClockFreq+0xde>
 800183a:	f7ff fded 	bl	8001418 <LL_RCC_MSI_GetRangeAfterStandby>
 800183e:	4603      	mov	r3, r0
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	4a0e      	ldr	r2, [pc, #56]	; (800187c <RCC_GetSystemClockFreq+0x118>)
 8001844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001848:	e010      	b.n	800186c <RCC_GetSystemClockFreq+0x108>
 800184a:	f7ff fdc5 	bl	80013d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d004      	beq.n	800185e <RCC_GetSystemClockFreq+0xfa>
 8001854:	f7ff fdd2 	bl	80013fc <LL_RCC_MSI_GetRange>
 8001858:	4603      	mov	r3, r0
 800185a:	091b      	lsrs	r3, r3, #4
 800185c:	e003      	b.n	8001866 <RCC_GetSystemClockFreq+0x102>
 800185e:	f7ff fddb 	bl	8001418 <LL_RCC_MSI_GetRangeAfterStandby>
 8001862:	4603      	mov	r3, r0
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <RCC_GetSystemClockFreq+0x118>)
 8001868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186c:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800186e:	bf00      	nop
  }

  return frequency;
 8001870:	687b      	ldr	r3, [r7, #4]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	080064f4 	.word	0x080064f4
 8001880:	00f42400 	.word	0x00f42400

08001884 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800188c:	f7ff fde0 	bl	8001450 <LL_RCC_GetAHBPrescaler>
 8001890:	4603      	mov	r3, r0
 8001892:	091b      	lsrs	r3, r3, #4
 8001894:	f003 030f 	and.w	r3, r3, #15
 8001898:	4a04      	ldr	r2, [pc, #16]	; (80018ac <RCC_GetHCLKClockFreq+0x28>)
 800189a:	5cd3      	ldrb	r3, [r2, r3]
 800189c:	461a      	mov	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	40d3      	lsrs	r3, r2
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	080064dc 	.word	0x080064dc

080018b0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80018b8:	f7ff fdd8 	bl	800146c <LL_RCC_GetAPB1Prescaler>
 80018bc:	4603      	mov	r3, r0
 80018be:	0a1b      	lsrs	r3, r3, #8
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <RCC_GetPCLK1ClockFreq+0x24>)
 80018c2:	5cd3      	ldrb	r3, [r2, r3]
 80018c4:	461a      	mov	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	40d3      	lsrs	r3, r2
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	080064ec 	.word	0x080064ec

080018d8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80018e0:	f7ff fdd2 	bl	8001488 <LL_RCC_GetAPB2Prescaler>
 80018e4:	4603      	mov	r3, r0
 80018e6:	0adb      	lsrs	r3, r3, #11
 80018e8:	4a04      	ldr	r2, [pc, #16]	; (80018fc <RCC_GetPCLK2ClockFreq+0x24>)
 80018ea:	5cd3      	ldrb	r3, [r2, r3]
 80018ec:	461a      	mov	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	40d3      	lsrs	r3, r2
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	080064ec 	.word	0x080064ec

08001900 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	2300      	movs	r3, #0
 800190c:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800190e:	f7ff fdf1 	bl	80014f4 <LL_RCC_PLL_GetMainSource>
 8001912:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d02d      	beq.n	8001976 <RCC_PLL_GetFreqDomain_SYS+0x76>
 800191a:	2b03      	cmp	r3, #3
 800191c:	d02e      	beq.n	800197c <RCC_PLL_GetFreqDomain_SYS+0x7c>
 800191e:	2b01      	cmp	r3, #1
 8001920:	d12f      	bne.n	8001982 <RCC_PLL_GetFreqDomain_SYS+0x82>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001922:	f7ff fd59 	bl	80013d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d111      	bne.n	8001950 <RCC_PLL_GetFreqDomain_SYS+0x50>
 800192c:	f7ff fd54 	bl	80013d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d004      	beq.n	8001940 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8001936:	f7ff fd61 	bl	80013fc <LL_RCC_MSI_GetRange>
 800193a:	4603      	mov	r3, r0
 800193c:	0a1b      	lsrs	r3, r3, #8
 800193e:	e003      	b.n	8001948 <RCC_PLL_GetFreqDomain_SYS+0x48>
 8001940:	f7ff fd6a 	bl	8001418 <LL_RCC_MSI_GetRangeAfterStandby>
 8001944:	4603      	mov	r3, r0
 8001946:	0a1b      	lsrs	r3, r3, #8
 8001948:	4a2f      	ldr	r2, [pc, #188]	; (8001a08 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 800194a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194e:	e010      	b.n	8001972 <RCC_PLL_GetFreqDomain_SYS+0x72>
 8001950:	f7ff fd42 	bl	80013d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d004      	beq.n	8001964 <RCC_PLL_GetFreqDomain_SYS+0x64>
 800195a:	f7ff fd4f 	bl	80013fc <LL_RCC_MSI_GetRange>
 800195e:	4603      	mov	r3, r0
 8001960:	091b      	lsrs	r3, r3, #4
 8001962:	e003      	b.n	800196c <RCC_PLL_GetFreqDomain_SYS+0x6c>
 8001964:	f7ff fd58 	bl	8001418 <LL_RCC_MSI_GetRangeAfterStandby>
 8001968:	4603      	mov	r3, r0
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	4a26      	ldr	r2, [pc, #152]	; (8001a08 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 800196e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001972:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001974:	e02f      	b.n	80019d6 <RCC_PLL_GetFreqDomain_SYS+0xd6>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001976:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8001978:	607b      	str	r3, [r7, #4]
      break;
 800197a:	e02c      	b.n	80019d6 <RCC_PLL_GetFreqDomain_SYS+0xd6>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800197c:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800197e:	607b      	str	r3, [r7, #4]
      break;
 8001980:	e029      	b.n	80019d6 <RCC_PLL_GetFreqDomain_SYS+0xd6>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001982:	f7ff fd29 	bl	80013d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d111      	bne.n	80019b0 <RCC_PLL_GetFreqDomain_SYS+0xb0>
 800198c:	f7ff fd24 	bl	80013d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d004      	beq.n	80019a0 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 8001996:	f7ff fd31 	bl	80013fc <LL_RCC_MSI_GetRange>
 800199a:	4603      	mov	r3, r0
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	e003      	b.n	80019a8 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 80019a0:	f7ff fd3a 	bl	8001418 <LL_RCC_MSI_GetRangeAfterStandby>
 80019a4:	4603      	mov	r3, r0
 80019a6:	0a1b      	lsrs	r3, r3, #8
 80019a8:	4a17      	ldr	r2, [pc, #92]	; (8001a08 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 80019aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ae:	e010      	b.n	80019d2 <RCC_PLL_GetFreqDomain_SYS+0xd2>
 80019b0:	f7ff fd12 	bl	80013d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d004      	beq.n	80019c4 <RCC_PLL_GetFreqDomain_SYS+0xc4>
 80019ba:	f7ff fd1f 	bl	80013fc <LL_RCC_MSI_GetRange>
 80019be:	4603      	mov	r3, r0
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	e003      	b.n	80019cc <RCC_PLL_GetFreqDomain_SYS+0xcc>
 80019c4:	f7ff fd28 	bl	8001418 <LL_RCC_MSI_GetRangeAfterStandby>
 80019c8:	4603      	mov	r3, r0
 80019ca:	091b      	lsrs	r3, r3, #4
 80019cc:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 80019ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d2:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80019d4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80019d6:	f7ff fdb7 	bl	8001548 <LL_RCC_PLL_GetDivider>
 80019da:	4603      	mov	r3, r0
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	3301      	adds	r3, #1
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	fbb2 f4f3 	udiv	r4, r2, r3
 80019e6:	f7ff fd93 	bl	8001510 <LL_RCC_PLL_GetN>
 80019ea:	4603      	mov	r3, r0
 80019ec:	fb03 f404 	mul.w	r4, r3, r4
 80019f0:	f7ff fd9c 	bl	800152c <LL_RCC_PLL_GetR>
 80019f4:	4603      	mov	r3, r0
 80019f6:	0e5b      	lsrs	r3, r3, #25
 80019f8:	3301      	adds	r3, #1
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd90      	pop	{r4, r7, pc}
 8001a08:	080064f4 	.word	0x080064f4
 8001a0c:	00f42400 	.word	0x00f42400

08001a10 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a20:	2b40      	cmp	r3, #64	; 0x40
 8001a22:	d101      	bne.n	8001a28 <LL_SPI_IsEnabled+0x18>
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <LL_SPI_IsEnabled+0x1a>
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	461a      	mov	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	611a      	str	r2, [r3, #16]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b084      	sub	sp, #16
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ffd3 	bl	8001a10 <LL_SPI_IsEnabled>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d13b      	bne.n	8001ae8 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a78:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	6811      	ldr	r1, [r2, #0]
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	6852      	ldr	r2, [r2, #4]
 8001a84:	4311      	orrs	r1, r2
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	68d2      	ldr	r2, [r2, #12]
 8001a8a:	4311      	orrs	r1, r2
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	6912      	ldr	r2, [r2, #16]
 8001a90:	4311      	orrs	r1, r2
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	6952      	ldr	r2, [r2, #20]
 8001a96:	4311      	orrs	r1, r2
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	6992      	ldr	r2, [r2, #24]
 8001a9c:	4311      	orrs	r1, r2
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	69d2      	ldr	r2, [r2, #28]
 8001aa2:	4311      	orrs	r1, r2
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	6a12      	ldr	r2, [r2, #32]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ab8:	f023 0304 	bic.w	r3, r3, #4
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	6891      	ldr	r1, [r2, #8]
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	6952      	ldr	r2, [r2, #20]
 8001ac4:	0c12      	lsrs	r2, r2, #16
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ad6:	d105      	bne.n	8001ae4 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	4619      	mov	r1, r3
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff ffa9 	bl	8001a36 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <LL_TIM_OC_SetCompareCH5>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <LL_TIM_OC_SetCompareCH6>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	f043 0201 	orr.w	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	615a      	str	r2, [r3, #20]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <LL_TIM_StructInit>:
  *         to their default values.
  * @param  TIM_InitStruct pointer to a @ref LL_TIM_InitTypeDef structure (time base unit configuration data structure)
  * @retval None
  */
void LL_TIM_StructInit(LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	605a      	str	r2, [r3, #4]
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295
 8001c28:	609a      	str	r2, [r3, #8]
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	60da      	str	r2, [r3, #12]
  TIM_InitStruct->RepetitionCounter = (uint8_t)0x00;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	741a      	strb	r2, [r3, #16]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a2b      	ldr	r2, [pc, #172]	; (8001d04 <LL_TIM_Init+0xc0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d007      	beq.n	8001c6c <LL_TIM_Init+0x28>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c62:	d003      	beq.n	8001c6c <LL_TIM_Init+0x28>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a28      	ldr	r2, [pc, #160]	; (8001d08 <LL_TIM_Init+0xc4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d106      	bne.n	8001c7a <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a21      	ldr	r2, [pc, #132]	; (8001d04 <LL_TIM_Init+0xc0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00f      	beq.n	8001ca2 <LL_TIM_Init+0x5e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c88:	d00b      	beq.n	8001ca2 <LL_TIM_Init+0x5e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a1e      	ldr	r2, [pc, #120]	; (8001d08 <LL_TIM_Init+0xc4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d007      	beq.n	8001ca2 <LL_TIM_Init+0x5e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a1d      	ldr	r2, [pc, #116]	; (8001d0c <LL_TIM_Init+0xc8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d003      	beq.n	8001ca2 <LL_TIM_Init+0x5e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a1c      	ldr	r2, [pc, #112]	; (8001d10 <LL_TIM_Init+0xcc>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d106      	bne.n	8001cb0 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff26 	bl	8001b0e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff12 	bl	8001af2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a0c      	ldr	r2, [pc, #48]	; (8001d04 <LL_TIM_Init+0xc0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d007      	beq.n	8001ce6 <LL_TIM_Init+0xa2>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a0c      	ldr	r2, [pc, #48]	; (8001d0c <LL_TIM_Init+0xc8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d003      	beq.n	8001ce6 <LL_TIM_Init+0xa2>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <LL_TIM_Init+0xcc>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d105      	bne.n	8001cf2 <LL_TIM_Init+0xae>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	7c1b      	ldrb	r3, [r3, #16]
 8001cea:	4619      	mov	r1, r3
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ff1c 	bl	8001b2a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ff7b 	bl	8001bee <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001cf8:	2301      	movs	r3, #1
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40012c00 	.word	0x40012c00
 8001d08:	40000400 	.word	0x40000400
 8001d0c:	40014000 	.word	0x40014000
 8001d10:	40014400 	.word	0x40014400

08001d14 <LL_TIM_OC_StructInit>:
  *         structure to their default values.
  * @param  TIM_OC_InitStruct pointer to a @ref LL_TIM_OC_InitTypeDef structure (the output channel configuration data structure)
  * @retval None
  */
void LL_TIM_OC_StructInit(LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct->OCNState     = LL_TIM_OCSTATE_DISABLE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	60da      	str	r2, [r3, #12]
  TIM_OC_InitStruct->OCPolarity   = LL_TIM_OCPOLARITY_HIGH;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	615a      	str	r2, [r3, #20]
  TIM_OC_InitStruct->OCIdleState  = LL_TIM_OCIDLESTATE_LOW;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	619a      	str	r2, [r3, #24]
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	61da      	str	r2, [r3, #28]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001d64:	2300      	movs	r3, #0
 8001d66:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d6e:	d01f      	beq.n	8001db0 <LL_TIM_OC_Init+0x58>
 8001d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d74:	d804      	bhi.n	8001d80 <LL_TIM_OC_Init+0x28>
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d00c      	beq.n	8001d94 <LL_TIM_OC_Init+0x3c>
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	d011      	beq.n	8001da2 <LL_TIM_OC_Init+0x4a>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001d7e:	e033      	b.n	8001de8 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8001d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d84:	d022      	beq.n	8001dcc <LL_TIM_OC_Init+0x74>
 8001d86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d8a:	d026      	beq.n	8001dda <LL_TIM_OC_Init+0x82>
 8001d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d90:	d015      	beq.n	8001dbe <LL_TIM_OC_Init+0x66>
      break;
 8001d92:	e029      	b.n	8001de8 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 f82c 	bl	8001df4 <OC1Config>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8001da0:	e022      	b.n	8001de8 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 f899 	bl	8001edc <OC2Config>
 8001daa:	4603      	mov	r3, r0
 8001dac:	75fb      	strb	r3, [r7, #23]
      break;
 8001dae:	e01b      	b.n	8001de8 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f90a 	bl	8001fcc <OC3Config>
 8001db8:	4603      	mov	r3, r0
 8001dba:	75fb      	strb	r3, [r7, #23]
      break;
 8001dbc:	e014      	b.n	8001de8 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 f97b 	bl	80020bc <OC4Config>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8001dca:	e00d      	b.n	8001de8 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f9d4 	bl	800217c <OC5Config>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8001dd8:	e006      	b.n	8001de8 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 fa25 	bl	800222c <OC6Config>
 8001de2:	4603      	mov	r3, r0
 8001de4:	75fb      	strb	r3, [r7, #23]
      break;
 8001de6:	bf00      	nop
  }

  return result;
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	f023 0201 	bic.w	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f023 0303 	bic.w	r3, r3, #3
 8001e22:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f023 0202 	bic.w	r2, r3, #2
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f023 0201 	bic.w	r2, r3, #1
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a1e      	ldr	r2, [pc, #120]	; (8001ed0 <OC1Config+0xdc>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d007      	beq.n	8001e6a <OC1Config+0x76>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a1d      	ldr	r2, [pc, #116]	; (8001ed4 <OC1Config+0xe0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d003      	beq.n	8001e6a <OC1Config+0x76>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a1c      	ldr	r2, [pc, #112]	; (8001ed8 <OC1Config+0xe4>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d11e      	bne.n	8001ea8 <OC1Config+0xb4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f023 0208 	bic.w	r2, r3, #8
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4313      	orrs	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f023 0204 	bic.w	r2, r3, #4
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4313      	orrs	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff fe43 	bl	8001b46 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001ec6:	2301      	movs	r3, #1
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40012c00 	.word	0x40012c00
 8001ed4:	40014000 	.word	0x40014000
 8001ed8:	40014400 	.word	0x40014400

08001edc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	f023 0210 	bic.w	r2, r3, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	0212      	lsls	r2, r2, #8
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f023 0220 	bic.w	r2, r3, #32
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f023 0210 	bic.w	r2, r3, #16
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a1f      	ldr	r2, [pc, #124]	; (8001fc0 <OC2Config+0xe4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d007      	beq.n	8001f58 <OC2Config+0x7c>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <OC2Config+0xe8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d003      	beq.n	8001f58 <OC2Config+0x7c>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a1d      	ldr	r2, [pc, #116]	; (8001fc8 <OC2Config+0xec>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d11f      	bne.n	8001f98 <OC2Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	019b      	lsls	r3, r3, #6
 8001f64:	4313      	orrs	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	019b      	lsls	r3, r3, #6
 8001f74:	4313      	orrs	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff fdd9 	bl	8001b62 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40012c00 	.word	0x40012c00
 8001fc4:	40014000 	.word	0x40014000
 8001fc8:	40014400 	.word	0x40014400

08001fcc <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f023 0303 	bic.w	r3, r3, #3
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	021b      	lsls	r3, r3, #8
 800201a:	4313      	orrs	r3, r2
 800201c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	4313      	orrs	r3, r2
 800202c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a1f      	ldr	r2, [pc, #124]	; (80020b0 <OC3Config+0xe4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d007      	beq.n	8002046 <OC3Config+0x7a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a1e      	ldr	r2, [pc, #120]	; (80020b4 <OC3Config+0xe8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d003      	beq.n	8002046 <OC3Config+0x7a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <OC3Config+0xec>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d11f      	bne.n	8002086 <OC3Config+0xba>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	029b      	lsls	r3, r3, #10
 8002052:	4313      	orrs	r3, r2
 8002054:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	029b      	lsls	r3, r3, #10
 8002062:	4313      	orrs	r3, r2
 8002064:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	015b      	lsls	r3, r3, #5
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	4619      	mov	r1, r3
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff fd70 	bl	8001b7e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80020a4:	2301      	movs	r3, #1
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40012c00 	.word	0x40012c00
 80020b4:	40014000 	.word	0x40014000
 80020b8:	40014400 	.word	0x40014400

080020bc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	0212      	lsls	r2, r2, #8
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	031b      	lsls	r3, r3, #12
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	031b      	lsls	r3, r3, #12
 800211c:	4313      	orrs	r3, r2
 800211e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a13      	ldr	r2, [pc, #76]	; (8002170 <OC4Config+0xb4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d007      	beq.n	8002138 <OC4Config+0x7c>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a12      	ldr	r2, [pc, #72]	; (8002174 <OC4Config+0xb8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d003      	beq.n	8002138 <OC4Config+0x7c>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a11      	ldr	r2, [pc, #68]	; (8002178 <OC4Config+0xbc>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d107      	bne.n	8002148 <OC4Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	019b      	lsls	r3, r3, #6
 8002144:	4313      	orrs	r3, r2
 8002146:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4619      	mov	r1, r3
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff fd1d 	bl	8001b9a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002166:	2301      	movs	r3, #1
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40012c00 	.word	0x40012c00
 8002174:	40014000 	.word	0x40014000
 8002178:	40014400 	.word	0x40014400

0800217c <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	041b      	lsls	r3, r3, #16
 80021bc:	4313      	orrs	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	041b      	lsls	r3, r3, #16
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a13      	ldr	r2, [pc, #76]	; (8002220 <OC5Config+0xa4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d007      	beq.n	80021e8 <OC5Config+0x6c>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a12      	ldr	r2, [pc, #72]	; (8002224 <OC5Config+0xa8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d003      	beq.n	80021e8 <OC5Config+0x6c>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a11      	ldr	r2, [pc, #68]	; (8002228 <OC5Config+0xac>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d109      	bne.n	80021fc <OC5Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	4619      	mov	r1, r3
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff fcd4 	bl	8001bb6 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002214:	2301      	movs	r3, #1
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40012c00 	.word	0x40012c00
 8002224:	40014000 	.word	0x40014000
 8002228:	40014400 	.word	0x40014400

0800222c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	0212      	lsls	r2, r2, #8
 800225e:	4313      	orrs	r3, r2
 8002260:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	051b      	lsls	r3, r3, #20
 800226e:	4313      	orrs	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	051b      	lsls	r3, r3, #20
 800227e:	4313      	orrs	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <OC6Config+0xa4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d007      	beq.n	800229a <OC6Config+0x6e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <OC6Config+0xa8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d003      	beq.n	800229a <OC6Config+0x6e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a10      	ldr	r2, [pc, #64]	; (80022d8 <OC6Config+0xac>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d109      	bne.n	80022ae <OC6Config+0x82>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	029b      	lsls	r3, r3, #10
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4619      	mov	r1, r3
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff fc89 	bl	8001bd2 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80022c6:	2301      	movs	r3, #1
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40012c00 	.word	0x40012c00
 80022d4:	40014000 	.word	0x40014000
 80022d8:	40014400 	.word	0x40014400

080022dc <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	bf0c      	ite	eq
 80022f0:	2301      	moveq	r3, #1
 80022f2:	2300      	movne	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	605a      	str	r2, [r3, #4]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	609a      	str	r2, [r3, #8]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif
{
 800234e:	b4b0      	push	{r4, r5, r7}
 8002350:	b085      	sub	sp, #20
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
 800235a:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 800235c:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 800235e:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002366:	d114      	bne.n	8002392 <LL_USART_SetBaudRate+0x44>
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	005a      	lsls	r2, r3, #1
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	085b      	lsrs	r3, r3, #1
 8002370:	441a      	add	r2, r3
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	fbb2 f3f3 	udiv	r3, r2, r3
 8002378:	b29b      	uxth	r3, r3
 800237a:	461d      	mov	r5, r3
#endif
    brrtemp = usartdiv & 0xFFF0U;
 800237c:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8002380:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002382:	086b      	lsrs	r3, r5, #1
 8002384:	b29b      	uxth	r3, r3
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	60dc      	str	r4, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif
  }
}
 8002390:	e00a      	b.n	80023a8 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	085a      	lsrs	r2, r3, #1
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	441a      	add	r2, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	461a      	mov	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	60da      	str	r2, [r3, #12]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bcb0      	pop	{r4, r5, r7}
 80023b0:	4770      	bx	lr
	...

080023b4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80023be:	2300      	movs	r3, #0
 80023c0:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ff88 	bl	80022dc <LL_USART_IsEnabled>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d151      	bne.n	8002476 <LL_USART_Init+0xc2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <LL_USART_Init+0xcc>)
 80023d8:	4013      	ands	r3, r2
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	6851      	ldr	r1, [r2, #4]
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	68d2      	ldr	r2, [r2, #12]
 80023e2:	4311      	orrs	r1, r2
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	6912      	ldr	r2, [r2, #16]
 80023e8:	4311      	orrs	r1, r2
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	6992      	ldr	r2, [r2, #24]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	4619      	mov	r1, r3
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ff80 	bl	8002302 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	4619      	mov	r1, r3
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ff8d 	bl	8002328 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a1c      	ldr	r2, [pc, #112]	; (8002484 <LL_USART_Init+0xd0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d104      	bne.n	8002420 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002416:	2003      	movs	r0, #3
 8002418:	f7ff f8a4 	bl	8001564 <LL_RCC_GetUSARTClockFreq>
 800241c:	60b8      	str	r0, [r7, #8]
 800241e:	e019      	b.n	8002454 <LL_USART_Init+0xa0>
    }
    else if (USARTx == USART2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a19      	ldr	r2, [pc, #100]	; (8002488 <LL_USART_Init+0xd4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d104      	bne.n	8002432 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002428:	200c      	movs	r0, #12
 800242a:	f7ff f89b 	bl	8001564 <LL_RCC_GetUSARTClockFreq>
 800242e:	60b8      	str	r0, [r7, #8]
 8002430:	e010      	b.n	8002454 <LL_USART_Init+0xa0>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a15      	ldr	r2, [pc, #84]	; (800248c <LL_USART_Init+0xd8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d104      	bne.n	8002444 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800243a:	2030      	movs	r0, #48	; 0x30
 800243c:	f7ff f892 	bl	8001564 <LL_RCC_GetUSARTClockFreq>
 8002440:	60b8      	str	r0, [r7, #8]
 8002442:	e007      	b.n	8002454 <LL_USART_Init+0xa0>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a12      	ldr	r2, [pc, #72]	; (8002490 <LL_USART_Init+0xdc>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d103      	bne.n	8002454 <LL_USART_Init+0xa0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800244c:	20c0      	movs	r0, #192	; 0xc0
 800244e:	f7ff f943 	bl	80016d8 <LL_RCC_GetUARTClockFreq>
 8002452:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00d      	beq.n	8002476 <LL_USART_Init+0xc2>
        && (USART_InitStruct->BaudRate != 0U))
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <LL_USART_Init+0xc2>
    {
      status = SUCCESS;
 8002462:	2301      	movs	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	699a      	ldr	r2, [r3, #24]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ff6c 	bl	800234e <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002476:	7bfb      	ldrb	r3, [r7, #15]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	efff69f3 	.word	0xefff69f3
 8002484:	40013800 	.word	0x40013800
 8002488:	40004400 	.word	0x40004400
 800248c:	40004800 	.word	0x40004800
 8002490:	40004c00 	.word	0x40004c00

08002494 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800249e:	4909      	ldr	r1, [pc, #36]	; (80024c4 <LL_InitTick+0x30>)
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a8:	3b01      	subs	r3, #1
 80024aa:	604b      	str	r3, [r1, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <LL_InitTick+0x30>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b2:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <LL_InitTick+0x30>)
 80024b4:	2205      	movs	r2, #5
 80024b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000e010 	.word	0xe000e010

080024c8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80024d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ffdd 	bl	8002494 <LL_InitTick>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80024ec:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <LL_mDelay+0x44>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80024f2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fa:	d00c      	beq.n	8002516 <LL_mDelay+0x32>
  {
    Delay++;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3301      	adds	r3, #1
 8002500:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002502:	e008      	b.n	8002516 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <LL_mDelay+0x44>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <LL_mDelay+0x32>
    {
      Delay--;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f3      	bne.n	8002504 <LL_mDelay+0x20>
    }
  }
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000e010 	.word	0xe000e010

0800252c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002534:	4a04      	ldr	r2, [pc, #16]	; (8002548 <LL_SetSystemCoreClock+0x1c>)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6013      	str	r3, [r2, #0]
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	2000000c 	.word	0x2000000c

0800254c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <NVIC_SetPriorityGrouping+0x44>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002568:	4013      	ands	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257e:	4a04      	ldr	r2, [pc, #16]	; (8002590 <NVIC_SetPriorityGrouping+0x44>)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	60d3      	str	r3, [r2, #12]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <NVIC_GetPriorityGrouping+0x18>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	f003 0307 	and.w	r3, r3, #7
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80025ba:	4909      	ldr	r1, [pc, #36]	; (80025e0 <NVIC_EnableIRQ+0x30>)
 80025bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c0:	095b      	lsrs	r3, r3, #5
 80025c2:	79fa      	ldrb	r2, [r7, #7]
 80025c4:	f002 021f 	and.w	r2, r2, #31
 80025c8:	2001      	movs	r0, #1
 80025ca:	fa00 f202 	lsl.w	r2, r0, r2
 80025ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000e100 	.word	0xe000e100

080025e4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	6039      	str	r1, [r7, #0]
 80025ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	da0b      	bge.n	8002610 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f8:	490d      	ldr	r1, [pc, #52]	; (8002630 <NVIC_SetPriority+0x4c>)
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	3b04      	subs	r3, #4
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	0112      	lsls	r2, r2, #4
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	440b      	add	r3, r1
 800260c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800260e:	e009      	b.n	8002624 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002610:	4908      	ldr	r1, [pc, #32]	; (8002634 <NVIC_SetPriority+0x50>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	0112      	lsls	r2, r2, #4
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	440b      	add	r3, r1
 8002620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00
 8002634:	e000e100 	.word	0xe000e100

08002638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f1c3 0307 	rsb	r3, r3, #7
 8002652:	2b04      	cmp	r3, #4
 8002654:	bf28      	it	cs
 8002656:	2304      	movcs	r3, #4
 8002658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3304      	adds	r3, #4
 800265e:	2b06      	cmp	r3, #6
 8002660:	d902      	bls.n	8002668 <NVIC_EncodePriority+0x30>
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3b03      	subs	r3, #3
 8002666:	e000      	b.n	800266a <NVIC_EncodePriority+0x32>
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	2201      	movs	r2, #1
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	1e5a      	subs	r2, r3, #1
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	401a      	ands	r2, r3
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800267e:	2101      	movs	r1, #1
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	1e59      	subs	r1, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800268c:	4313      	orrs	r3, r2
         );
}
 800268e:	4618      	mov	r0, r3
 8002690:	3724      	adds	r7, #36	; 0x24
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
	...

0800269c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800269c:	b490      	push	{r4, r7}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80026a6:	4c11      	ldr	r4, [pc, #68]	; (80026ec <LL_SYSCFG_SetEXTISource+0x50>)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	490f      	ldr	r1, [pc, #60]	; (80026ec <LL_SYSCFG_SetEXTISource+0x50>)
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	3202      	adds	r2, #2
 80026b4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	0c12      	lsrs	r2, r2, #16
 80026bc:	43d2      	mvns	r2, r2
 80026be:	4011      	ands	r1, r2
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	0c12      	lsrs	r2, r2, #16
 80026c4:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	fa92 f2a2 	rbit	r2, r2
 80026cc:	60ba      	str	r2, [r7, #8]
  return(result);
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	fab2 f282 	clz	r2, r2
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	fa00 f202 	lsl.w	r2, r0, r2
 80026da:	430a      	orrs	r2, r1
 80026dc:	3302      	adds	r3, #2
 80026de:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc90      	pop	{r4, r7}
 80026ea:	4770      	bx	lr
 80026ec:	40010000 	.word	0x40010000

080026f0 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80026f8:	4906      	ldr	r1, [pc, #24]	; (8002714 <LL_FLASH_SetLatency+0x24>)
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <LL_FLASH_SetLatency+0x24>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 0207 	bic.w	r2, r3, #7
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40022000 	.word	0x40022000

08002718 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <LL_FLASH_GetLatency+0x18>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40022000 	.word	0x40022000

08002734 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b04      	cmp	r3, #4
 8002740:	d106      	bne.n	8002750 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002742:	4a09      	ldr	r2, [pc, #36]	; (8002768 <LL_SYSTICK_SetClkSource+0x34>)
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <LL_SYSTICK_SetClkSource+0x34>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 800274e:	e005      	b.n	800275c <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002750:	4a05      	ldr	r2, [pc, #20]	; (8002768 <LL_SYSTICK_SetClkSource+0x34>)
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <LL_SYSTICK_SetClkSource+0x34>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 0304 	bic.w	r3, r3, #4
 800275a:	6013      	str	r3, [r2, #0]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000e010 	.word	0xe000e010

0800276c <LL_RCC_HSE_EnableBypass>:
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002770:	4a05      	ldr	r2, [pc, #20]	; (8002788 <LL_RCC_HSE_EnableBypass+0x1c>)
 8002772:	4b05      	ldr	r3, [pc, #20]	; (8002788 <LL_RCC_HSE_EnableBypass+0x1c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800277a:	6013      	str	r3, [r2, #0]
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000

0800278c <LL_RCC_HSE_Enable>:
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002790:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <LL_RCC_HSE_Enable+0x1c>)
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <LL_RCC_HSE_Enable+0x1c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279a:	6013      	str	r3, [r2, #0]
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000

080027ac <LL_RCC_HSE_IsReady>:
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80027b0:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <LL_RCC_HSE_IsReady+0x24>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027bc:	bf0c      	ite	eq
 80027be:	2301      	moveq	r3, #1
 80027c0:	2300      	movne	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000

080027d4 <LL_RCC_LSI_Enable>:
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80027d8:	4a06      	ldr	r2, [pc, #24]	; (80027f4 <LL_RCC_LSI_Enable+0x20>)
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <LL_RCC_LSI_Enable+0x20>)
 80027dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000

080027f8 <LL_RCC_LSI_IsReady>:
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 80027fc:	4b07      	ldr	r3, [pc, #28]	; (800281c <LL_RCC_LSI_IsReady+0x24>)
 80027fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b02      	cmp	r3, #2
 8002808:	bf0c      	ite	eq
 800280a:	2301      	moveq	r3, #1
 800280c:	2300      	movne	r3, #0
 800280e:	b2db      	uxtb	r3, r3
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40021000 	.word	0x40021000

08002820 <LL_RCC_SetSysClkSource>:
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002828:	4906      	ldr	r1, [pc, #24]	; (8002844 <LL_RCC_SetSysClkSource+0x24>)
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <LL_RCC_SetSysClkSource+0x24>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f023 0203 	bic.w	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4313      	orrs	r3, r2
 8002836:	608b      	str	r3, [r1, #8]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	40021000 	.word	0x40021000

08002848 <LL_RCC_GetSysClkSource>:
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <LL_RCC_GetSysClkSource+0x18>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 030c 	and.w	r3, r3, #12
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000

08002864 <LL_RCC_SetAHBPrescaler>:
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800286c:	4906      	ldr	r1, [pc, #24]	; (8002888 <LL_RCC_SetAHBPrescaler+0x24>)
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <LL_RCC_SetAHBPrescaler+0x24>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4313      	orrs	r3, r2
 800287a:	608b      	str	r3, [r1, #8]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	40021000 	.word	0x40021000

0800288c <LL_RCC_SetAPB1Prescaler>:
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002894:	4906      	ldr	r1, [pc, #24]	; (80028b0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	608b      	str	r3, [r1, #8]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	40021000 	.word	0x40021000

080028b4 <LL_RCC_SetAPB2Prescaler>:
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80028bc:	4906      	ldr	r1, [pc, #24]	; (80028d8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	608b      	str	r3, [r1, #8]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	40021000 	.word	0x40021000

080028dc <LL_RCC_SetUSARTClockSource>:
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFF));
 80028e4:	4909      	ldr	r1, [pc, #36]	; (800290c <LL_RCC_SetUSARTClockSource+0x30>)
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <LL_RCC_SetUSARTClockSource+0x30>)
 80028e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	0c1b      	lsrs	r3, r3, #16
 80028f0:	43db      	mvns	r3, r3
 80028f2:	401a      	ands	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40021000 	.word	0x40021000

08002910 <LL_RCC_SetI2CClockSource>:
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	0e1a      	lsrs	r2, r3, #24
 800291c:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <LL_RCC_SetI2CClockSource+0x48>)
 800291e:	4413      	add	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3U << ((I2CxSource & 0x00FF0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x00FF0000U) >> 16U)));
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	0c1b      	lsrs	r3, r3, #16
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2103      	movs	r1, #3
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	401a      	ands	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	b2d9      	uxtb	r1, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	b2db      	uxtb	r3, r3
 8002940:	fa01 f303 	lsl.w	r3, r1, r3
 8002944:	431a      	orrs	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	601a      	str	r2, [r3, #0]
}
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40021088 	.word	0x40021088

0800295c <LL_RCC_PLL_Enable>:
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002960:	4a05      	ldr	r2, [pc, #20]	; (8002978 <LL_RCC_PLL_Enable+0x1c>)
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <LL_RCC_PLL_Enable+0x1c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800296a:	6013      	str	r3, [r2, #0]
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000

0800297c <LL_RCC_PLL_IsReady>:
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8002980:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <LL_RCC_PLL_IsReady+0x24>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002988:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800298c:	bf0c      	ite	eq
 800298e:	2301      	moveq	r3, #1
 8002990:	2300      	movne	r3, #0
 8002992:	b2db      	uxtb	r3, r3
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000

080029a4 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80029b2:	480a      	ldr	r0, [pc, #40]	; (80029dc <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	68f9      	ldr	r1, [r7, #12]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	4311      	orrs	r1, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	0212      	lsls	r2, r2, #8
 80029c6:	4311      	orrs	r1, r2
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60c3      	str	r3, [r0, #12]
}
 80029d0:	bf00      	nop
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	40021000 	.word	0x40021000
 80029e0:	f9ff808c 	.word	0xf9ff808c

080029e4 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80029e8:	4a05      	ldr	r2, [pc, #20]	; (8002a00 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029f2:	60d3      	str	r3, [r2, #12]
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000

08002a04 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002a0c:	4906      	ldr	r1, [pc, #24]	; (8002a28 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	600b      	str	r3, [r1, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	40007000 	.word	0x40007000

08002a2c <LL_I2C_Enable>:
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f043 0201 	orr.w	r2, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	601a      	str	r2, [r3, #0]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <LL_I2C_EnableClockStretching>:
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	601a      	str	r2, [r3, #0]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_I2C_DisableGeneralCall>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	601a      	str	r2, [r3, #0]
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <LL_I2C_SetOwnAddress2>:
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002aa0:	f023 0306 	bic.w	r3, r3, #6
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	60da      	str	r2, [r3, #12]
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_I2C_DisableOwnAddress2>:
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	60da      	str	r2, [r3, #12]
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_I2C_EnableAutoEndMode>:
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	605a      	str	r2, [r3, #4]
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <LL_IWDG_Enable>:
  * @rmtoll KR           KEY           LL_IWDG_Enable
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_Enable(IWDG_TypeDef *IWDGx)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDG->KR, LL_IWDG_KEY_ENABLE);
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <LL_IWDG_Enable+0x1c>)
 8002b06:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002b0a:	601a      	str	r2, [r3, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	40003000 	.word	0x40003000

08002b1c <LL_IWDG_ReloadCounter>:
  * @rmtoll KR           KEY           LL_IWDG_ReloadCounter
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDG->KR, LL_IWDG_KEY_RELOAD);
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <LL_IWDG_ReloadCounter+0x1c>)
 8002b26:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002b2a:	601a      	str	r2, [r3, #0]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	40003000 	.word	0x40003000

08002b3c <LL_IWDG_EnableWriteAccess>:
  * @rmtoll KR           KEY           LL_IWDG_EnableWriteAccess
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDG->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 8002b44:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <LL_IWDG_EnableWriteAccess+0x1c>)
 8002b46:	f245 5255 	movw	r2, #21845	; 0x5555
 8002b4a:	601a      	str	r2, [r3, #0]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	40003000 	.word	0x40003000

08002b5c <LL_IWDG_SetPrescaler>:
  *         @arg @ref LL_IWDG_PRESCALER_128
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	f003 0207 	and.w	r2, r3, #7
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	605a      	str	r2, [r3, #4]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_IWDG_SetReloadCounter>:
  * @param  IWDGx IWDG Instance
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <LL_IWDG_SetWindow>:
  * @param  IWDGx IWDG Instance
  * @param  Window Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetWindow(IWDG_TypeDef *IWDGx, uint32_t Window)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->WINR, IWDG_WINR_WIN & Window);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	611a      	str	r2, [r3, #16]
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <LL_IWDG_IsReady>:
  *         SR           RVU           LL_IWDG_IsReady
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf0c      	ite	eq
 8002bd0:	2301      	moveq	r3, #1
 8002bd2:	2300      	movne	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002bec:	4908      	ldr	r1, [pc, #32]	; (8002c10 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002bf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002bfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c02:	68fb      	ldr	r3, [r7, #12]
}
 8002c04:	bf00      	nop
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	40021000 	.word	0x40021000

08002c14 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002c1c:	4908      	ldr	r1, [pc, #32]	; (8002c40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002c1e:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002c20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002c2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c32:	68fb      	ldr	r3, [r7, #12]
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	40021000 	.word	0x40021000

08002c44 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002c4c:	4908      	ldr	r1, [pc, #32]	; (8002c70 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002c50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002c58:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002c5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c62:	68fb      	ldr	r3, [r7, #12]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	40021000 	.word	0x40021000

08002c74 <LL_EXTI_DisableIT_0_31>:
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002c7c:	4906      	ldr	r1, [pc, #24]	; (8002c98 <LL_EXTI_DisableIT_0_31+0x24>)
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <LL_EXTI_DisableIT_0_31+0x24>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	4013      	ands	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40010400 	.word	0x40010400

08002c9c <LL_SPI_Enable>:
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	601a      	str	r2, [r3, #0]
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_SPI_SetStandard>:
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f023 0210 	bic.w	r2, r3, #16
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	605a      	str	r2, [r3, #4]
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_SPI_SetRxFIFOThreshold>:
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	605a      	str	r2, [r3, #4]
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f043 0208 	orr.w	r2, r3, #8
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	605a      	str	r2, [r3, #4]
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_GPIO_SetPinMode>:
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b089      	sub	sp, #36	; 0x24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	613b      	str	r3, [r7, #16]
  return(result);
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	2103      	movs	r1, #3
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	43db      	mvns	r3, r3
 8002d54:	401a      	ands	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d70:	431a      	orrs	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	601a      	str	r2, [r3, #0]
}
 8002d76:	bf00      	nop
 8002d78:	3724      	adds	r7, #36	; 0x24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <LL_GPIO_SetPinPull>:
{
 8002d82:	b480      	push	{r7}
 8002d84:	b089      	sub	sp, #36	; 0x24
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	fa93 f3a3 	rbit	r3, r3
 8002d9c:	613b      	str	r3, [r7, #16]
  return(result);
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	fab3 f383 	clz	r3, r3
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	2103      	movs	r1, #3
 8002da8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	401a      	ands	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	61bb      	str	r3, [r7, #24]
  return(result);
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	fab3 f383 	clz	r3, r3
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	60da      	str	r2, [r3, #12]
}
 8002dd0:	bf00      	nop
 8002dd2:	3724      	adds	r7, #36	; 0x24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	619a      	str	r2, [r3, #24]
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <LL_TIM_EnableCounter>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f043 0201 	orr.w	r2, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	601a      	str	r2, [r3, #0]
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_TIM_OC_EnablePreload>:
{
 8002e34:	b4b0      	push	{r4, r5, r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d028      	beq.n	8002e96 <LL_TIM_OC_EnablePreload+0x62>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d023      	beq.n	8002e92 <LL_TIM_OC_EnablePreload+0x5e>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b10      	cmp	r3, #16
 8002e4e:	d01e      	beq.n	8002e8e <LL_TIM_OC_EnablePreload+0x5a>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2b40      	cmp	r3, #64	; 0x40
 8002e54:	d019      	beq.n	8002e8a <LL_TIM_OC_EnablePreload+0x56>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e5c:	d013      	beq.n	8002e86 <LL_TIM_OC_EnablePreload+0x52>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e64:	d00d      	beq.n	8002e82 <LL_TIM_OC_EnablePreload+0x4e>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6c:	d007      	beq.n	8002e7e <LL_TIM_OC_EnablePreload+0x4a>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e74:	d101      	bne.n	8002e7a <LL_TIM_OC_EnablePreload+0x46>
 8002e76:	2307      	movs	r3, #7
 8002e78:	e00e      	b.n	8002e98 <LL_TIM_OC_EnablePreload+0x64>
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	e00c      	b.n	8002e98 <LL_TIM_OC_EnablePreload+0x64>
 8002e7e:	2306      	movs	r3, #6
 8002e80:	e00a      	b.n	8002e98 <LL_TIM_OC_EnablePreload+0x64>
 8002e82:	2305      	movs	r3, #5
 8002e84:	e008      	b.n	8002e98 <LL_TIM_OC_EnablePreload+0x64>
 8002e86:	2304      	movs	r3, #4
 8002e88:	e006      	b.n	8002e98 <LL_TIM_OC_EnablePreload+0x64>
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e004      	b.n	8002e98 <LL_TIM_OC_EnablePreload+0x64>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e002      	b.n	8002e98 <LL_TIM_OC_EnablePreload+0x64>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <LL_TIM_OC_EnablePreload+0x64>
 8002e96:	2300      	movs	r3, #0
 8002e98:	461d      	mov	r5, r3
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3318      	adds	r3, #24
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <LL_TIM_OC_EnablePreload+0x94>)
 8002ea4:	5c5b      	ldrb	r3, [r3, r1]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002eaa:	6822      	ldr	r2, [r4, #0]
 8002eac:	4629      	mov	r1, r5
 8002eae:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <LL_TIM_OC_EnablePreload+0x98>)
 8002eb0:	5c5b      	ldrb	r3, [r3, r1]
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	2308      	movs	r3, #8
 8002eb6:	408b      	lsls	r3, r1
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	6023      	str	r3, [r4, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bcb0      	pop	{r4, r5, r7}
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	080064c4 	.word	0x080064c4
 8002ecc:	080064d0 	.word	0x080064d0

08002ed0 <LL_TIM_SetClockSource>:
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002ee2:	f023 0307 	bic.w	r3, r3, #7
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	609a      	str	r2, [r3, #8]
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <LL_USART_Enable>:
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f043 0201 	orr.w	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	601a      	str	r2, [r3, #0]
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <LL_USART_SetTXRXSwap>:
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	605a      	str	r2, [r3, #4]
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <LL_USART_EnableOverrunDetect>:
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	609a      	str	r2, [r3, #8]
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f043 0220 	orr.w	r2, r3, #32
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	601a      	str	r2, [r3, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LL_Init>:

//#include "stm32l4xx_ll_dma.h"



void LL_Init(void){
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	f7ff fe47 	bl	8002c44 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002fb6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002fba:	f7ff fe2b 	bl	8002c14 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fbe:	2003      	movs	r0, #3
 8002fc0:	f7ff fac4 	bl	800254c <NVIC_SetPriorityGrouping>

	/* System interrupt init*/
	/* MemoryManagement_IRQn interrupt configuration */
	NVIC_SetPriority(MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002fc4:	f7ff fae6 	bl	8002594 <NVIC_GetPriorityGrouping>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fb32 	bl	8002638 <NVIC_EncodePriority>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f06f 000b 	mvn.w	r0, #11
 8002fdc:	f7ff fb02 	bl	80025e4 <NVIC_SetPriority>
	/* BusFault_IRQn interrupt configuration */
	NVIC_SetPriority(BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002fe0:	f7ff fad8 	bl	8002594 <NVIC_GetPriorityGrouping>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fb24 	bl	8002638 <NVIC_EncodePriority>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	f06f 000a 	mvn.w	r0, #10
 8002ff8:	f7ff faf4 	bl	80025e4 <NVIC_SetPriority>
	/* UsageFault_IRQn interrupt configuration */
	NVIC_SetPriority(UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002ffc:	f7ff faca 	bl	8002594 <NVIC_GetPriorityGrouping>
 8003000:	4603      	mov	r3, r0
 8003002:	2200      	movs	r2, #0
 8003004:	2100      	movs	r1, #0
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fb16 	bl	8002638 <NVIC_EncodePriority>
 800300c:	4603      	mov	r3, r0
 800300e:	4619      	mov	r1, r3
 8003010:	f06f 0009 	mvn.w	r0, #9
 8003014:	f7ff fae6 	bl	80025e4 <NVIC_SetPriority>
	/* SVCall_IRQn interrupt configuration */
	NVIC_SetPriority(SVCall_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003018:	f7ff fabc 	bl	8002594 <NVIC_GetPriorityGrouping>
 800301c:	4603      	mov	r3, r0
 800301e:	2200      	movs	r2, #0
 8003020:	2100      	movs	r1, #0
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff fb08 	bl	8002638 <NVIC_EncodePriority>
 8003028:	4603      	mov	r3, r0
 800302a:	4619      	mov	r1, r3
 800302c:	f06f 0004 	mvn.w	r0, #4
 8003030:	f7ff fad8 	bl	80025e4 <NVIC_SetPriority>
	/* DebugMonitor_IRQn interrupt configuration */
	NVIC_SetPriority(DebugMonitor_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003034:	f7ff faae 	bl	8002594 <NVIC_GetPriorityGrouping>
 8003038:	4603      	mov	r3, r0
 800303a:	2200      	movs	r2, #0
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fafa 	bl	8002638 <NVIC_EncodePriority>
 8003044:	4603      	mov	r3, r0
 8003046:	4619      	mov	r1, r3
 8003048:	f06f 0003 	mvn.w	r0, #3
 800304c:	f7ff faca 	bl	80025e4 <NVIC_SetPriority>
	/* PendSV_IRQn interrupt configuration */
	NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003050:	f7ff faa0 	bl	8002594 <NVIC_GetPriorityGrouping>
 8003054:	4603      	mov	r3, r0
 8003056:	2200      	movs	r2, #0
 8003058:	2100      	movs	r1, #0
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff faec 	bl	8002638 <NVIC_EncodePriority>
 8003060:	4603      	mov	r3, r0
 8003062:	4619      	mov	r1, r3
 8003064:	f06f 0001 	mvn.w	r0, #1
 8003068:	f7ff fabc 	bl	80025e4 <NVIC_SetPriority>
	/* SysTick_IRQn interrupt configuration */
	//NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
}
 800306c:	bf00      	nop
 800306e:	bd80      	pop	{r7, pc}

08003070 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void){
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0

	LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8003074:	2004      	movs	r0, #4
 8003076:	f7ff fb3b 	bl	80026f0 <LL_FLASH_SetLatency>

	if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4){
 800307a:	f7ff fb4d 	bl	8002718 <LL_FLASH_GetLatency>
 800307e:	4603      	mov	r3, r0
 8003080:	2b04      	cmp	r3, #4
 8003082:	d003      	beq.n	800308c <SystemClock_Config+0x1c>
		Error_Handler();
 8003084:	2146      	movs	r1, #70	; 0x46
 8003086:	482d      	ldr	r0, [pc, #180]	; (800313c <SystemClock_Config+0xcc>)
 8003088:	f000 fc0c 	bl	80038a4 <_Error_Handler>
	}

	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800308c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003090:	f7ff fcb8 	bl	8002a04 <LL_PWR_SetRegulVoltageScaling>

  	//Enable HSE
  	LL_RCC_HSE_EnableBypass();
 8003094:	f7ff fb6a 	bl	800276c <LL_RCC_HSE_EnableBypass>
  	LL_RCC_HSE_Enable();
 8003098:	f7ff fb78 	bl	800278c <LL_RCC_HSE_Enable>
   	// Wait till HSE is ready
  	while(LL_RCC_HSE_IsReady() != 1);
 800309c:	bf00      	nop
 800309e:	f7ff fb85 	bl	80027ac <LL_RCC_HSE_IsReady>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d1fa      	bne.n	800309e <SystemClock_Config+0x2e>
	while(LL_RCC_HSI_IsReady() != 1);
	//LL_RCC_HSI_SetCalibTrimming(16);//not need to do this
    */

	// Enable LSI
	LL_RCC_LSI_Enable();
 80030a8:	f7ff fb94 	bl	80027d4 <LL_RCC_LSI_Enable>

	/* Wait till LSI is ready */
	while(LL_RCC_LSI_IsReady() != 1);
 80030ac:	bf00      	nop
 80030ae:	f7ff fba3 	bl	80027f8 <LL_RCC_LSI_IsReady>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d1fa      	bne.n	80030ae <SystemClock_Config+0x3e>

	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_1, 10, LL_RCC_PLLR_DIV_2); // LL_RCC_PLLSOURCE_HSE
 80030b8:	2300      	movs	r3, #0
 80030ba:	220a      	movs	r2, #10
 80030bc:	2100      	movs	r1, #0
 80030be:	2003      	movs	r0, #3
 80030c0:	f7ff fc70 	bl	80029a4 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 80030c4:	f7ff fc4a 	bl	800295c <LL_RCC_PLL_Enable>
	LL_RCC_PLL_EnableDomain_SYS();
 80030c8:	f7ff fc8c 	bl	80029e4 <LL_RCC_PLL_EnableDomain_SYS>

	/* Wait till PLL is ready */
	while(LL_RCC_PLL_IsReady() != 1);
 80030cc:	bf00      	nop
 80030ce:	f7ff fc55 	bl	800297c <LL_RCC_PLL_IsReady>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d1fa      	bne.n	80030ce <SystemClock_Config+0x5e>

	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80030d8:	2003      	movs	r0, #3
 80030da:	f7ff fba1 	bl	8002820 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80030de:	bf00      	nop
 80030e0:	f7ff fbb2 	bl	8002848 <LL_RCC_GetSysClkSource>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b0c      	cmp	r3, #12
 80030e8:	d1fa      	bne.n	80030e0 <SystemClock_Config+0x70>

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7ff fbba 	bl	8002864 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80030f0:	2000      	movs	r0, #0
 80030f2:	f7ff fbcb 	bl	800288c <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80030f6:	2000      	movs	r0, #0
 80030f8:	f7ff fbdc 	bl	80028b4 <LL_RCC_SetAPB2Prescaler>
	LL_Init1msTick(80000000);
 80030fc:	4810      	ldr	r0, [pc, #64]	; (8003140 <SystemClock_Config+0xd0>)
 80030fe:	f7ff f9e3 	bl	80024c8 <LL_Init1msTick>
	LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8003102:	2004      	movs	r0, #4
 8003104:	f7ff fb16 	bl	8002734 <LL_SYSTICK_SetClkSource>
	LL_SetSystemCoreClock(80000000);
 8003108:	480d      	ldr	r0, [pc, #52]	; (8003140 <SystemClock_Config+0xd0>)
 800310a:	f7ff fa0f 	bl	800252c <LL_SetSystemCoreClock>

  /* Setup clock source for USART1 and I2C */
	LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_SYSCLK);
 800310e:	480d      	ldr	r0, [pc, #52]	; (8003144 <SystemClock_Config+0xd4>)
 8003110:	f7ff fbe4 	bl	80028dc <LL_RCC_SetUSARTClockSource>
	LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_SYSCLK);
 8003114:	480c      	ldr	r0, [pc, #48]	; (8003148 <SystemClock_Config+0xd8>)
 8003116:	f7ff fbfb 	bl	8002910 <LL_RCC_SetI2CClockSource>

	/* SysTick_IRQn interrupt configuration */
	NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800311a:	f7ff fa3b 	bl	8002594 <NVIC_GetPriorityGrouping>
 800311e:	4603      	mov	r3, r0
 8003120:	2200      	movs	r2, #0
 8003122:	210f      	movs	r1, #15
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fa87 	bl	8002638 <NVIC_EncodePriority>
 800312a:	4603      	mov	r3, r0
 800312c:	4619      	mov	r1, r3
 800312e:	f04f 30ff 	mov.w	r0, #4294967295
 8003132:	f7ff fa57 	bl	80025e4 <NVIC_SetPriority>
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	0800639c 	.word	0x0800639c
 8003140:	04c4b400 	.word	0x04c4b400
 8003144:	00030001 	.word	0x00030001
 8003148:	000c0001 	.word	0x000c0001

0800314c <SetupLED>:

/**
  * @brief  This function setup  Led on the KTIVT_SS_board.
  * @retval None
*/
void SetupLED(void){
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8003152:	2004      	movs	r0, #4
 8003154:	f7ff fd46 	bl	8002be4 <LL_AHB2_GRP1_EnableClock>

	 /*Configure LED_Yellow_HL1 (PC10), LED_Green_HL2 (PC11), LED_Green_HL3 (PC12) as output Push-Pull      */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8003158:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800315c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800315e:	2301      	movs	r3, #1
 8003160:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003162:	2300      	movs	r3, #0
 8003164:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800316a:	2301      	movs	r3, #1
 800316c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800316e:	463b      	mov	r3, r7
 8003170:	4619      	mov	r1, r3
 8003172:	4806      	ldr	r0, [pc, #24]	; (800318c <SetupLED+0x40>)
 8003174:	f7fd ffae 	bl	80010d4 <LL_GPIO_Init>

	/* Diode is off */
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12);
 8003178:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800317c:	4803      	ldr	r0, [pc, #12]	; (800318c <SetupLED+0x40>)
 800317e:	f7ff fe2d 	bl	8002ddc <LL_GPIO_SetOutputPin>
	/*For ON/OFF LED need to use function:                            */
	  /*LED_Yellow_HL1_ON()       LED_Yellow_HL1_OFF()                */
	  /*LED_Green_HL2_ON()        LED_Green_HL2_OFF()                 */
	  /*LED_Green_HL3_ON()        LED_Green_HL3_OFF()                 */
	  /*Define in SetupPeriph.h                                       */
}
 8003182:	bf00      	nop
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	48000800 	.word	0x48000800

08003190 <SetupGPIO>:

/**
  * @brief  This function setup GPIO to control IC on the KTIVT_SS_board.
  * @retval None
*/
void SetupGPIO(void){
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8003196:	2001      	movs	r0, #1
 8003198:	f7ff fd24 	bl	8002be4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800319c:	2004      	movs	r0, #4
 800319e:	f7ff fd21 	bl	8002be4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80031a2:	2002      	movs	r0, #2
 80031a4:	f7ff fd1e 	bl	8002be4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80031a8:	2008      	movs	r0, #8
 80031aa:	f7ff fd1b 	bl	8002be4 <LL_AHB2_GRP1_EnableClock>


	/* Configure pins out for control preamplifier K1. PA3=10 PA4=100 PA5=1000 for AG1411 ON=0 OFF=1    */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80031ae:	2338      	movs	r3, #56	; 0x38
 80031b0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80031b2:	2301      	movs	r3, #1
 80031b4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80031be:	2301      	movs	r3, #1
 80031c0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c2:	463b      	mov	r3, r7
 80031c4:	4619      	mov	r1, r3
 80031c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031ca:	f7fd ff83 	bl	80010d4 <LL_GPIO_Init>
	/*off K1 */
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 80031ce:	2138      	movs	r1, #56	; 0x38
 80031d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031d4:	f7ff fe02 	bl	8002ddc <LL_GPIO_SetOutputPin>
	/*Define in SetupPeriph.h                       */



	/* Configure pins in for control COMPorators COMP1=PC0, COMP2=PC1, COMP3=PA0, COMP4=PA2*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80031d8:	2303      	movs	r3, #3
 80031da:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80031dc:	2300      	movs	r3, #0
 80031de:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80031e0:	2300      	movs	r3, #0
 80031e2:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031e4:	463b      	mov	r3, r7
 80031e6:	4619      	mov	r1, r3
 80031e8:	484e      	ldr	r0, [pc, #312]	; (8003324 <SetupGPIO+0x194>)
 80031ea:	f7fd ff73 	bl	80010d4 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_2;
 80031ee:	2305      	movs	r3, #5
 80031f0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80031f2:	2300      	movs	r3, #0
 80031f4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80031f6:	2300      	movs	r3, #0
 80031f8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fa:	463b      	mov	r3, r7
 80031fc:	4619      	mov	r1, r3
 80031fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003202:	f7fd ff67 	bl	80010d4 <LL_GPIO_Init>
  /* VALUE_COMP3()                        */
  /* VALUE_COMP4()                        */
  /*Define in SetupPeriph.h               */

	/* Configure pins ???? PC8=F_SA0 PC9=F_SA1 PA8=F_SA2 for AG1411 ON=0 OFF=1 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8003206:	f44f 7340 	mov.w	r3, #768	; 0x300
 800320a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800320c:	2301      	movs	r3, #1
 800320e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003210:	2300      	movs	r3, #0
 8003212:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8003218:	2301      	movs	r3, #1
 800321a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800321c:	463b      	mov	r3, r7
 800321e:	4619      	mov	r1, r3
 8003220:	4840      	ldr	r0, [pc, #256]	; (8003324 <SetupGPIO+0x194>)
 8003222:	f7fd ff57 	bl	80010d4 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8003226:	f44f 7380 	mov.w	r3, #256	; 0x100
 800322a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800322c:	2301      	movs	r3, #1
 800322e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003230:	2300      	movs	r3, #0
 8003232:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8003238:	2301      	movs	r3, #1
 800323a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800323c:	463b      	mov	r3, r7
 800323e:	4619      	mov	r1, r3
 8003240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003244:	f7fd ff46 	bl	80010d4 <LL_GPIO_Init>

	/*off F_SA*/
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_8|LL_GPIO_PIN_9);
 8003248:	f44f 7140 	mov.w	r1, #768	; 0x300
 800324c:	4835      	ldr	r0, [pc, #212]	; (8003324 <SetupGPIO+0x194>)
 800324e:	f7ff fdd3 	bl	8002df8 <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8003252:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800325a:	f7ff fdbf 	bl	8002ddc <LL_GPIO_SetOutputPin>
	/*F_SA1_Set()       F_SA1_Reset()          		*/
	/*F_SA2_Set()       F_SA2_Reset()               */
	/*Define in SetupPeriph.h                       */

	/* Configure pins for control main amplifier K2. out: PB0=G0 PB1=G1 PB2=G2 PB10=G3 PB11=G4  in: COMP4=PA2   */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 800325e:	f640 4307 	movw	r3, #3079	; 0xc07
 8003262:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003264:	2301      	movs	r3, #1
 8003266:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003268:	2300      	movs	r3, #0
 800326a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003270:	2300      	movs	r3, #0
 8003272:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003274:	463b      	mov	r3, r7
 8003276:	4619      	mov	r1, r3
 8003278:	482b      	ldr	r0, [pc, #172]	; (8003328 <SetupGPIO+0x198>)
 800327a:	f7fd ff2b 	bl	80010d4 <LL_GPIO_Init>

	/*off K2=1 */
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11);
 800327e:	f640 4107 	movw	r1, #3079	; 0xc07
 8003282:	4829      	ldr	r0, [pc, #164]	; (8003328 <SetupGPIO+0x198>)
 8003284:	f7ff fdb8 	bl	8002df8 <LL_GPIO_ResetOutputPin>

	/* Config COMP4*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8003288:	2304      	movs	r3, #4
 800328a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800328c:	2300      	movs	r3, #0
 800328e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003290:	2300      	movs	r3, #0
 8003292:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003294:	463b      	mov	r3, r7
 8003296:	4619      	mov	r1, r3
 8003298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800329c:	f7fd ff1a 	bl	80010d4 <LL_GPIO_Init>
	/*PB10_G3_Set()     PB10_G3_Reset()             */
	/*PB11_G4_Set()     PB11_G4_Reset()             */
	/*Define in SetupPeriph.h                       */

	/*Config input pin to start manual settup */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80032a0:	2304      	movs	r3, #4
 80032a2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80032a4:	2300      	movs	r3, #0
 80032a6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80032a8:	2301      	movs	r3, #1
 80032aa:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032ac:	463b      	mov	r3, r7
 80032ae:	4619      	mov	r1, r3
 80032b0:	481e      	ldr	r0, [pc, #120]	; (800332c <SetupGPIO+0x19c>)
 80032b2:	f7fd ff0f 	bl	80010d4 <LL_GPIO_Init>


	/* Configure pins STOP-ADC out: PB14= STOP-ADC*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 80032b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032ba:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80032bc:	2301      	movs	r3, #1
 80032be:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;//LL_GPIO_SPEED_FREQ_HIGH;
 80032c0:	2301      	movs	r3, #1
 80032c2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;//LL_GPIO_OUTPUT_PUSHPULL;
 80032c4:	2301      	movs	r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80032c8:	2300      	movs	r3, #0
 80032ca:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032cc:	463b      	mov	r3, r7
 80032ce:	4619      	mov	r1, r3
 80032d0:	4815      	ldr	r0, [pc, #84]	; (8003328 <SetupGPIO+0x198>)
 80032d2:	f7fd feff 	bl	80010d4 <LL_GPIO_Init>
	/*PB14_STOP_ADC_Reset()                       */
	/*Define in SetupPeriph.h                     */


	/* Configure pins MCLK+1 out: PC7= MCLK+1*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80032da:	2301      	movs	r3, #1
 80032dc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80032de:	2302      	movs	r3, #2
 80032e0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ea:	463b      	mov	r3, r7
 80032ec:	4619      	mov	r1, r3
 80032ee:	480d      	ldr	r0, [pc, #52]	; (8003324 <SetupGPIO+0x194>)
 80032f0:	f7fd fef0 	bl	80010d4 <LL_GPIO_Init>
	/*PC7_MCLK_Reset()                	      */
	/*Define in SetupPeriph.h                     */


	/* Configure pins DE-DRDY PC4*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80032f4:	2310      	movs	r3, #16
 80032f6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80032f8:	2301      	movs	r3, #1
 80032fa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 80032fc:	2301      	movs	r3, #1
 80032fe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003300:	2300      	movs	r3, #0
 8003302:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003304:	2300      	movs	r3, #0
 8003306:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003308:	463b      	mov	r3, r7
 800330a:	4619      	mov	r1, r3
 800330c:	4805      	ldr	r0, [pc, #20]	; (8003324 <SetupGPIO+0x194>)
 800330e:	f7fd fee1 	bl	80010d4 <LL_GPIO_Init>

	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_4);
 8003312:	2110      	movs	r1, #16
 8003314:	4803      	ldr	r0, [pc, #12]	; (8003324 <SetupGPIO+0x194>)
 8003316:	f7ff fd6f 	bl	8002df8 <LL_GPIO_ResetOutputPin>


}
 800331a:	bf00      	nop
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	48000800 	.word	0x48000800
 8003328:	48000400 	.word	0x48000400
 800332c:	48000c00 	.word	0x48000c00

08003330 <Set_Output_mode_PD2>:

void Set_Output_mode_PD2(void){
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct;

	/* Configure pins PD2 like uotput  */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8003336:	2304      	movs	r3, #4
 8003338:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800333a:	2301      	movs	r3, #1
 800333c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800333e:	2302      	movs	r3, #2
 8003340:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8003346:	2302      	movs	r3, #2
 8003348:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800334a:	463b      	mov	r3, r7
 800334c:	4619      	mov	r1, r3
 800334e:	4805      	ldr	r0, [pc, #20]	; (8003364 <Set_Output_mode_PD2+0x34>)
 8003350:	f7fd fec0 	bl	80010d4 <LL_GPIO_Init>

	LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_2);
 8003354:	2104      	movs	r1, #4
 8003356:	4803      	ldr	r0, [pc, #12]	; (8003364 <Set_Output_mode_PD2+0x34>)
 8003358:	f7ff fd4e 	bl	8002df8 <LL_GPIO_ResetOutputPin>

	/*For Set Reset PD2 need use:   */
	/*PD2_Set();					*/
	/*PD2_Reset();					*/
}	
 800335c:	bf00      	nop
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	48000c00 	.word	0x48000c00

08003368 <USART1_Init>:

void USART1_Init(void){
 8003368:	b580      	push	{r7, lr}
 800336a:	b08e      	sub	sp, #56	; 0x38
 800336c:	af00      	add	r7, sp, #0

  	LL_USART_InitTypeDef USART_InitStruct;
  	LL_GPIO_InitTypeDef GPIO_InitStruct;

  	/* Peripheral clock enable */
  	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800336e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003372:	f7ff fc67 	bl	8002c44 <LL_APB2_GRP1_EnableClock>
  	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8003376:	2001      	movs	r0, #1
 8003378:	f7ff fc34 	bl	8002be4 <LL_AHB2_GRP1_EnableClock>
  
  	/**USART1 GPIO Configuration  
  	PA9   ------> USART1_TX
  	PA10   ------> USART1_RX 
  	*/
  	GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 800337c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003380:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003382:	2302      	movs	r3, #2
 8003384:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003386:	2303      	movs	r3, #3
 8003388:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
  	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
  	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003392:	2307      	movs	r3, #7
 8003394:	61bb      	str	r3, [r7, #24]
  	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003396:	1d3b      	adds	r3, r7, #4
 8003398:	4619      	mov	r1, r3
 800339a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800339e:	f7fd fe99 	bl	80010d4 <LL_GPIO_Init>
            - One Stop Bit
            - No parity
            - Hardware flow control disabled (RTS and CTS signals)
            - Receive and transmit enabled
      */
  	USART_InitStruct.BaudRate = 10000000;
 80033a2:	4b22      	ldr	r3, [pc, #136]	; (800342c <USART1_Init+0xc4>)
 80033a4:	61fb      	str	r3, [r7, #28]
  	USART_InitStruct.DataWidth =  LL_USART_DATAWIDTH_9B;
 80033a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033aa:	623b      	str	r3, [r7, #32]
  	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80033ac:	2300      	movs	r3, #0
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
  	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	62bb      	str	r3, [r7, #40]	; 0x28
  	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80033b4:	230c      	movs	r3, #12
 80033b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	633b      	str	r3, [r7, #48]	; 0x30
  	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_8;
 80033bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033c0:	637b      	str	r3, [r7, #52]	; 0x34
  	LL_USART_Init(USART1, &USART_InitStruct);
 80033c2:	f107 031c 	add.w	r3, r7, #28
 80033c6:	4619      	mov	r1, r3
 80033c8:	4819      	ldr	r0, [pc, #100]	; (8003430 <USART1_Init+0xc8>)
 80033ca:	f7fe fff3 	bl	80023b4 <LL_USART_Init>

  	LL_USART_SetTXRXSwap(USART1, LL_USART_TXRX_SWAPPED);
 80033ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033d2:	4817      	ldr	r0, [pc, #92]	; (8003430 <USART1_Init+0xc8>)
 80033d4:	f7ff fda1 	bl	8002f1a <LL_USART_SetTXRXSwap>

  	LL_USART_EnableOverrunDetect(USART1);
 80033d8:	4815      	ldr	r0, [pc, #84]	; (8003430 <USART1_Init+0xc8>)
 80033da:	f7ff fdb1 	bl	8002f40 <LL_USART_EnableOverrunDetect>
  	LL_USART_ConfigAsyncMode(USART1); 
 80033de:	4814      	ldr	r0, [pc, #80]	; (8003430 <USART1_Init+0xc8>)
 80033e0:	f7ff fdbe 	bl	8002f60 <LL_USART_ConfigAsyncMode>
  	LL_USART_Enable(USART1);
 80033e4:	4812      	ldr	r0, [pc, #72]	; (8003430 <USART1_Init+0xc8>)
 80033e6:	f7ff fd88 	bl	8002efa <LL_USART_Enable>

    /* Configure pins RE and TE to control transfer data throughISO3086DW, PA11=RE PA12=DE */
    GPIO_InitStruct.Pin = LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 80033ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80033ee:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80033f0:	2301      	movs	r3, #1
 80033f2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80033f4:	2302      	movs	r3, #2
 80033f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80033fc:	2301      	movs	r3, #1
 80033fe:	617b      	str	r3, [r7, #20]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003400:	1d3b      	adds	r3, r7, #4
 8003402:	4619      	mov	r1, r3
 8003404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003408:	f7fd fe64 	bl	80010d4 <LL_GPIO_Init>
    /**/
    //RE -Enable when low
    //TE - Enbale when high
    LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11); //Enable receive data
 800340c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003410:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003414:	f7ff fcf0 	bl	8002df8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12); //Disable transmit data
 8003418:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800341c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003420:	f7ff fcea 	bl	8002df8 <LL_GPIO_ResetOutputPin>

    /*For enable/desible transmit throught USART1:                  */
	//Enable_transmit_USART1()  //Enable transmit data
    //Disable_transmit_USART1() //Disable transmit data

}
 8003424:	bf00      	nop
 8003426:	3738      	adds	r7, #56	; 0x38
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	00989680 	.word	0x00989680
 8003430:	40013800 	.word	0x40013800

08003434 <SPI2_Init>:
/**
  * @brief  Setup I2C.
  * @param  None
  * @retval None
*/
void SPI2_Init(void){
 8003434:	b580      	push	{r7, lr}
 8003436:	b090      	sub	sp, #64	; 0x40
 8003438:	af00      	add	r7, sp, #0

  	LL_SPI_InitTypeDef SPI_InitStruct;

  	LL_GPIO_InitTypeDef GPIO_InitStruct;
  	/* Peripheral clock enable */
  	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800343a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800343e:	f7ff fbe9 	bl	8002c14 <LL_APB1_GRP1_EnableClock>
  	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8003442:	2004      	movs	r0, #4
 8003444:	f7ff fbce 	bl	8002be4 <LL_AHB2_GRP1_EnableClock>
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8003448:	2002      	movs	r0, #2
 800344a:	f7ff fbcb 	bl	8002be4 <LL_AHB2_GRP1_EnableClock>
  	PC2   ------> SPI2_MISO
  	PC3   ------> SPI2_MOSI
  	PB12   ------> SPI2_NSS
  	PB13   ------> SPI2_SCK 
  	*/
  	GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800344e:	230c      	movs	r3, #12
 8003450:	603b      	str	r3, [r7, #0]
  	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003452:	2302      	movs	r3, #2
 8003454:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;//LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003456:	2302      	movs	r3, #2
 8003458:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800345e:	2300      	movs	r3, #0
 8003460:	613b      	str	r3, [r7, #16]
  	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003462:	2305      	movs	r3, #5
 8003464:	617b      	str	r3, [r7, #20]
  	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003466:	463b      	mov	r3, r7
 8003468:	4619      	mov	r1, r3
 800346a:	4822      	ldr	r0, [pc, #136]	; (80034f4 <SPI2_Init+0xc0>)
 800346c:	f7fd fe32 	bl	80010d4 <LL_GPIO_Init>

  	GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13;
 8003470:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003474:	603b      	str	r3, [r7, #0]
  	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003476:	2302      	movs	r3, #2
 8003478:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;//LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800347a:	2302      	movs	r3, #2
 800347c:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
  	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003486:	2305      	movs	r3, #5
 8003488:	617b      	str	r3, [r7, #20]
  	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800348a:	463b      	mov	r3, r7
 800348c:	4619      	mov	r1, r3
 800348e:	481a      	ldr	r0, [pc, #104]	; (80034f8 <SPI2_Init+0xc4>)
 8003490:	f7fd fe20 	bl	80010d4 <LL_GPIO_Init>

  	/*Setup SPI2 */
  	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003494:	2300      	movs	r3, #0
 8003496:	61bb      	str	r3, [r7, #24]
  	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003498:	f44f 7382 	mov.w	r3, #260	; 0x104
 800349c:	61fb      	str	r3, [r7, #28]
  	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800349e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80034a2:	623b      	str	r3, [r7, #32]
  	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW; //LL_SPI_POLARITY_HIGH;//
 80034a4:	2300      	movs	r3, #0
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
  	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE; //LL_SPI_PHASE_1EDGE ;//
 80034a8:	2301      	movs	r3, #1
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
  	SPI_InitStruct.NSS = LL_SPI_NSS_HARD_OUTPUT;
 80034ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80034b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 80034b2:	2300      	movs	r3, #0
 80034b4:	633b      	str	r3, [r7, #48]	; 0x30
  	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80034b6:	2300      	movs	r3, #0
 80034b8:	637b      	str	r3, [r7, #52]	; 0x34
  	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80034ba:	2300      	movs	r3, #0
 80034bc:	63bb      	str	r3, [r7, #56]	; 0x38
  	SPI_InitStruct.CRCPoly = 7;//0;//7;
 80034be:	2307      	movs	r3, #7
 80034c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  	LL_SPI_Init(SPI2, &SPI_InitStruct);
 80034c2:	f107 0318 	add.w	r3, r7, #24
 80034c6:	4619      	mov	r1, r3
 80034c8:	480c      	ldr	r0, [pc, #48]	; (80034fc <SPI2_Init+0xc8>)
 80034ca:	f7fe fac4 	bl	8001a56 <LL_SPI_Init>

  	LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 80034ce:	2100      	movs	r1, #0
 80034d0:	480a      	ldr	r0, [pc, #40]	; (80034fc <SPI2_Init+0xc8>)
 80034d2:	f7ff fbf3 	bl	8002cbc <LL_SPI_SetStandard>

  	LL_SPI_SetRxFIFOThreshold(SPI2, LL_SPI_RX_FIFO_TH_QUARTER);
 80034d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034da:	4808      	ldr	r0, [pc, #32]	; (80034fc <SPI2_Init+0xc8>)
 80034dc:	f7ff fc01 	bl	8002ce2 <LL_SPI_SetRxFIFOThreshold>

  	LL_SPI_EnableNSSPulseMgt(SPI2);
 80034e0:	4806      	ldr	r0, [pc, #24]	; (80034fc <SPI2_Init+0xc8>)
 80034e2:	f7ff fc11 	bl	8002d08 <LL_SPI_EnableNSSPulseMgt>

  	LL_SPI_Enable(SPI2);
 80034e6:	4805      	ldr	r0, [pc, #20]	; (80034fc <SPI2_Init+0xc8>)
 80034e8:	f7ff fbd8 	bl	8002c9c <LL_SPI_Enable>

}
 80034ec:	bf00      	nop
 80034ee:	3740      	adds	r7, #64	; 0x40
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	48000800 	.word	0x48000800
 80034f8:	48000400 	.word	0x48000400
 80034fc:	40003800 	.word	0x40003800

08003500 <I2C1_Init>:
/**
  * @brief  Setup I2C.
  * @param  None
  * @retval None
*/
void I2C1_Init(void){
 8003500:	b580      	push	{r7, lr}
 8003502:	b08e      	sub	sp, #56	; 0x38
 8003504:	af00      	add	r7, sp, #0
	LL_I2C_InitTypeDef I2C_InitStruct;

  	LL_GPIO_InitTypeDef GPIO_InitStruct;

  	/* Peripheral clock enable */
  	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8003506:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800350a:	f7ff fb83 	bl	8002c14 <LL_APB1_GRP1_EnableClock>
  	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800350e:	2002      	movs	r0, #2
 8003510:	f7ff fb68 	bl	8002be4 <LL_AHB2_GRP1_EnableClock>
  
  	/**I2C1 GPIO Configuration  
  	PB6   ------> I2C1_SCL
  	PB7   ------> I2C1_SDA 
  	*/
  	GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003514:	23c0      	movs	r3, #192	; 0xc0
 8003516:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003518:	2302      	movs	r3, #2
 800351a:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;//LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800351c:	2302      	movs	r3, #2
 800351e:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8003520:	2301      	movs	r3, #1
 8003522:	613b      	str	r3, [r7, #16]
  	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8003524:	2301      	movs	r3, #1
 8003526:	617b      	str	r3, [r7, #20]
  	GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8003528:	2304      	movs	r3, #4
 800352a:	61bb      	str	r3, [r7, #24]
  	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352c:	1d3b      	adds	r3, r7, #4
 800352e:	4619      	mov	r1, r3
 8003530:	4817      	ldr	r0, [pc, #92]	; (8003590 <I2C1_Init+0x90>)
 8003532:	f7fd fdcf 	bl	80010d4 <LL_GPIO_Init>

    /**I2C Initialization 
    */
  	LL_I2C_EnableAutoEndMode(I2C1);
 8003536:	4817      	ldr	r0, [pc, #92]	; (8003594 <I2C1_Init+0x94>)
 8003538:	f7ff fad0 	bl	8002adc <LL_I2C_EnableAutoEndMode>
	LL_I2C_DisableOwnAddress2(I2C1);
 800353c:	4815      	ldr	r0, [pc, #84]	; (8003594 <I2C1_Init+0x94>)
 800353e:	f7ff fabd 	bl	8002abc <LL_I2C_DisableOwnAddress2>
  	LL_I2C_DisableGeneralCall(I2C1);
 8003542:	4814      	ldr	r0, [pc, #80]	; (8003594 <I2C1_Init+0x94>)
 8003544:	f7ff fa92 	bl	8002a6c <LL_I2C_DisableGeneralCall>
  	LL_I2C_EnableClockStretching(I2C1);
 8003548:	4812      	ldr	r0, [pc, #72]	; (8003594 <I2C1_Init+0x94>)
 800354a:	f7ff fa7f 	bl	8002a4c <LL_I2C_EnableClockStretching>

  	I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
  	I2C_InitStruct.Timing = 0x10909CEC;//  - Frequenci I2C=100 kHz //0x00702991; - Frequenci I2C=400 kHz
 8003552:	4b11      	ldr	r3, [pc, #68]	; (8003598 <I2C1_Init+0x98>)
 8003554:	623b      	str	r3, [r7, #32]
  	I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8003556:	2300      	movs	r3, #0
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
  	I2C_InitStruct.DigitalFilter = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	62bb      	str	r3, [r7, #40]	; 0x28
  	I2C_InitStruct.OwnAddress1 = 0;
 800355e:	2300      	movs	r3, #0
 8003560:	62fb      	str	r3, [r7, #44]	; 0x2c
  	I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK; //LL_I2C_NACK 
 8003562:	2300      	movs	r3, #0
 8003564:	633b      	str	r3, [r7, #48]	; 0x30
  	I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8003566:	2300      	movs	r3, #0
 8003568:	637b      	str	r3, [r7, #52]	; 0x34
  	LL_I2C_Init(I2C1, &I2C_InitStruct);
 800356a:	f107 031c 	add.w	r3, r7, #28
 800356e:	4619      	mov	r1, r3
 8003570:	4808      	ldr	r0, [pc, #32]	; (8003594 <I2C1_Init+0x94>)
 8003572:	f7fd fecc 	bl	800130e <LL_I2C_Init>

  	LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8003576:	2200      	movs	r2, #0
 8003578:	2100      	movs	r1, #0
 800357a:	4806      	ldr	r0, [pc, #24]	; (8003594 <I2C1_Init+0x94>)
 800357c:	f7ff fa86 	bl	8002a8c <LL_I2C_SetOwnAddress2>

  	LL_I2C_Enable(I2C1);
 8003580:	4804      	ldr	r0, [pc, #16]	; (8003594 <I2C1_Init+0x94>)
 8003582:	f7ff fa53 	bl	8002a2c <LL_I2C_Enable>
}
 8003586:	bf00      	nop
 8003588:	3738      	adds	r7, #56	; 0x38
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	48000400 	.word	0x48000400
 8003594:	40005400 	.word	0x40005400
 8003598:	10909cec 	.word	0x10909cec

0800359c <PWM_Init>:
/**
  * @brief  Setup PWM Timer2 or Timer 3.
  * @param  None
  * @retval None
*/
void PWM_Init(enum PWR_TIMx timer_number){
 800359c:	b580      	push	{r7, lr}
 800359e:	b096      	sub	sp, #88	; 0x58
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
    LL_TIM_InitTypeDef TIM_InitStruct;
    LL_TIM_OC_InitTypeDef TIM_OC_InitStruct;
    LL_GPIO_InitTypeDef GPIO_InitStruct;

    /* Peripheral clock enable */
    LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80035a6:	2001      	movs	r0, #1
 80035a8:	f7ff fb1c 	bl	8002be4 <LL_AHB2_GRP1_EnableClock>

    if (timer_number == PWM_TIM2_CH2_PA1){
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d152      	bne.n	8003658 <PWM_Init+0xbc>

    	//Setup GPIO TIM2_CH2 ------> PA1
    	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80035b2:	2302      	movs	r3, #2
 80035b4:	60fb      	str	r3, [r7, #12]
    	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80035b6:	2302      	movs	r3, #2
 80035b8:	613b      	str	r3, [r7, #16]
    	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
    	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	61bb      	str	r3, [r7, #24]
    	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80035c6:	2301      	movs	r3, #1
 80035c8:	623b      	str	r3, [r7, #32]
    	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ca:	f107 030c 	add.w	r3, r7, #12
 80035ce:	4619      	mov	r1, r3
 80035d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035d4:	f7fd fd7e 	bl	80010d4 <LL_GPIO_Init>

    	/* TIM2 clock enable */
    	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80035d8:	2001      	movs	r0, #1
 80035da:	f7ff fb1b 	bl	8002c14 <LL_APB1_GRP1_EnableClock>

    	LL_TIM_StructInit(&TIM_InitStruct);
 80035de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe fb13 	bl	8001c0e <LL_TIM_StructInit>
    	TIM_InitStruct.Prescaler = 0;//(SystemCoreClock/1000000)-1;
 80035e8:	2300      	movs	r3, #0
 80035ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80035ee:	2300      	movs	r3, #0
 80035f0:	64bb      	str	r3, [r7, #72]	; 0x48
    	TIM_InitStruct.Autoreload = 61538-1;
 80035f2:	f24f 0361 	movw	r3, #61537	; 0xf061
 80035f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80035f8:	2300      	movs	r3, #0
 80035fa:	653b      	str	r3, [r7, #80]	; 0x50
    	LL_TIM_Init(TIM2, &TIM_InitStruct);
 80035fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003600:	4619      	mov	r1, r3
 8003602:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003606:	f7fe fb1d 	bl	8001c44 <LL_TIM_Init>

    	LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 800360a:	2100      	movs	r1, #0
 800360c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003610:	f7ff fc5e 	bl	8002ed0 <LL_TIM_SetClockSource>
    	LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8003614:	2110      	movs	r1, #16
 8003616:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800361a:	f7ff fc0b 	bl	8002e34 <LL_TIM_OC_EnablePreload>

    	LL_TIM_OC_StructInit(&TIM_OC_InitStruct);
 800361e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003622:	4618      	mov	r0, r3
 8003624:	f7fe fb76 	bl	8001d14 <LL_TIM_OC_StructInit>
    	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003628:	2360      	movs	r3, #96	; 0x60
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
    	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 800362c:	2301      	movs	r3, #1
 800362e:	62bb      	str	r3, [r7, #40]	; 0x28
    	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003630:	2300      	movs	r3, #0
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c
    	TIM_OC_InitStruct.CompareValue = 30769-1;
 8003634:	f647 0330 	movw	r3, #30768	; 0x7830
 8003638:	633b      	str	r3, [r7, #48]	; 0x30
    	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800363a:	2300      	movs	r3, #0
 800363c:	637b      	str	r3, [r7, #52]	; 0x34
    	LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800363e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003642:	461a      	mov	r2, r3
 8003644:	2110      	movs	r1, #16
 8003646:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800364a:	f7fe fb85 	bl	8001d58 <LL_TIM_OC_Init>

    	LL_TIM_EnableCounter(TIM2);
 800364e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003652:	f7ff fbdf 	bl	8002e14 <LL_TIM_EnableCounter>
        LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);

        LL_TIM_EnableCounter(TIM3);
    }

}
 8003656:	e04f      	b.n	80036f8 <PWM_Init+0x15c>
    } else if (timer_number == PWM_TIM3_CH1_PA6){
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d14c      	bne.n	80036f8 <PWM_Init+0x15c>
    	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800365e:	2340      	movs	r3, #64	; 0x40
 8003660:	60fb      	str	r3, [r7, #12]
    	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003662:	2302      	movs	r3, #2
 8003664:	613b      	str	r3, [r7, #16]
    	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]
    	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800366a:	2300      	movs	r3, #0
 800366c:	61bb      	str	r3, [r7, #24]
    	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003672:	2302      	movs	r3, #2
 8003674:	623b      	str	r3, [r7, #32]
    	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003676:	f107 030c 	add.w	r3, r7, #12
 800367a:	4619      	mov	r1, r3
 800367c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003680:	f7fd fd28 	bl	80010d4 <LL_GPIO_Init>
    	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8003684:	2002      	movs	r0, #2
 8003686:	f7ff fac5 	bl	8002c14 <LL_APB1_GRP1_EnableClock>
    	LL_TIM_StructInit(&TIM_InitStruct);
 800368a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800368e:	4618      	mov	r0, r3
 8003690:	f7fe fabd 	bl	8001c0e <LL_TIM_StructInit>
    	TIM_InitStruct.Prescaler = 0;//(SystemCoreClock/1000000)-1;;
 8003694:	2300      	movs	r3, #0
 8003696:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800369a:	2300      	movs	r3, #0
 800369c:	64bb      	str	r3, [r7, #72]	; 0x48
    	TIM_InitStruct.Autoreload = 61538-1;
 800369e:	f24f 0361 	movw	r3, #61537	; 0xf061
 80036a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80036a4:	2300      	movs	r3, #0
 80036a6:	653b      	str	r3, [r7, #80]	; 0x50
    	LL_TIM_Init(TIM3, &TIM_InitStruct);
 80036a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80036ac:	4619      	mov	r1, r3
 80036ae:	4814      	ldr	r0, [pc, #80]	; (8003700 <PWM_Init+0x164>)
 80036b0:	f7fe fac8 	bl	8001c44 <LL_TIM_Init>
        LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80036b4:	2100      	movs	r1, #0
 80036b6:	4812      	ldr	r0, [pc, #72]	; (8003700 <PWM_Init+0x164>)
 80036b8:	f7ff fc0a 	bl	8002ed0 <LL_TIM_SetClockSource>
        LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 80036bc:	2101      	movs	r1, #1
 80036be:	4810      	ldr	r0, [pc, #64]	; (8003700 <PWM_Init+0x164>)
 80036c0:	f7ff fbb8 	bl	8002e34 <LL_TIM_OC_EnablePreload>
        LL_TIM_OC_StructInit(&TIM_OC_InitStruct);
 80036c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fe fb23 	bl	8001d14 <LL_TIM_OC_StructInit>
        TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80036ce:	2360      	movs	r3, #96	; 0x60
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
        TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 80036d2:	2301      	movs	r3, #1
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
        TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80036d6:	2300      	movs	r3, #0
 80036d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        TIM_OC_InitStruct.CompareValue = 30769-1;
 80036da:	f647 0330 	movw	r3, #30768	; 0x7830
 80036de:	633b      	str	r3, [r7, #48]	; 0x30
        TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80036e0:	2300      	movs	r3, #0
 80036e2:	637b      	str	r3, [r7, #52]	; 0x34
        LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80036e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e8:	461a      	mov	r2, r3
 80036ea:	2101      	movs	r1, #1
 80036ec:	4804      	ldr	r0, [pc, #16]	; (8003700 <PWM_Init+0x164>)
 80036ee:	f7fe fb33 	bl	8001d58 <LL_TIM_OC_Init>
        LL_TIM_EnableCounter(TIM3);
 80036f2:	4803      	ldr	r0, [pc, #12]	; (8003700 <PWM_Init+0x164>)
 80036f4:	f7ff fb8e 	bl	8002e14 <LL_TIM_EnableCounter>
}
 80036f8:	bf00      	nop
 80036fa:	3758      	adds	r7, #88	; 0x58
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40000400 	.word	0x40000400

08003704 <SetupInterrupt>:
/**
  * @brief  This function setup interrupts for all ports and inside event .
  * @param  None
  * @retval None
*/
void SetupInterrupt(void){
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
	
    LL_EXTI_InitTypeDef EXTI_InitStruct;

  	/* Setup USART1 interrupt Init */
  	NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0)); //Set priority №1 from 0..15
 800370a:	f7fe ff43 	bl	8002594 <NVIC_GetPriorityGrouping>
 800370e:	4603      	mov	r3, r0
 8003710:	2200      	movs	r2, #0
 8003712:	2101      	movs	r1, #1
 8003714:	4618      	mov	r0, r3
 8003716:	f7fe ff8f 	bl	8002638 <NVIC_EncodePriority>
 800371a:	4603      	mov	r3, r0
 800371c:	4619      	mov	r1, r3
 800371e:	2025      	movs	r0, #37	; 0x25
 8003720:	f7fe ff60 	bl	80025e4 <NVIC_SetPriority>
 	  LL_USART_EnableIT_RXNE(USART1); //Enable RX no empty Interrupt
 8003724:	4847      	ldr	r0, [pc, #284]	; (8003844 <SetupInterrupt+0x140>)
 8003726:	f7ff fc31 	bl	8002f8c <LL_USART_EnableIT_RXNE>
  	//LL_USART_DisableIT_RXNE(USART1);
  	NVIC_EnableIRQ(USART1_IRQn);
 800372a:	2025      	movs	r0, #37	; 0x25
 800372c:	f7fe ff40 	bl	80025b0 <NVIC_EnableIRQ>
  	/**********************************************/


  	/*Setup interrupt PB15 ADC-DRDY*/
    LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE15);
 8003730:	4945      	ldr	r1, [pc, #276]	; (8003848 <SetupInterrupt+0x144>)
 8003732:	2001      	movs	r0, #1
 8003734:	f7fe ffb2 	bl	800269c <LL_SYSCFG_SetEXTISource>

    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8003738:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800373c:	607b      	str	r3, [r7, #4]
    EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800373e:	2300      	movs	r3, #0
 8003740:	60bb      	str	r3, [r7, #8]
    EXTI_InitStruct.LineCommand = ENABLE;
 8003742:	2301      	movs	r3, #1
 8003744:	733b      	strb	r3, [r7, #12]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003746:	2300      	movs	r3, #0
 8003748:	737b      	strb	r3, [r7, #13]
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800374a:	2302      	movs	r3, #2
 800374c:	73bb      	strb	r3, [r7, #14]
    LL_EXTI_Init(&EXTI_InitStruct);
 800374e:	1d3b      	adds	r3, r7, #4
 8003750:	4618      	mov	r0, r3
 8003752:	f7fd fadf 	bl	8000d14 <LL_EXTI_Init>

    LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_15, LL_GPIO_PULL_NO);
 8003756:	2200      	movs	r2, #0
 8003758:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800375c:	483b      	ldr	r0, [pc, #236]	; (800384c <SetupInterrupt+0x148>)
 800375e:	f7ff fb10 	bl	8002d82 <LL_GPIO_SetPinPull>
    LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_15, LL_GPIO_MODE_INPUT);
 8003762:	2200      	movs	r2, #0
 8003764:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003768:	4838      	ldr	r0, [pc, #224]	; (800384c <SetupInterrupt+0x148>)
 800376a:	f7ff fadd 	bl	8002d28 <LL_GPIO_SetPinMode>
    /*INTERRUPT_ADC_DRDY_Enable()       LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_15)                 */
    /*INTERRUPT_ADC_DRDY_Disable()      LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_15)                */
    /*Define in SetupPeriph.h                                                                  */

    // EXTI interrupt init
    NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0)); //Set priority №2 from 0..15
 800376e:	f7fe ff11 	bl	8002594 <NVIC_GetPriorityGrouping>
 8003772:	4603      	mov	r3, r0
 8003774:	2200      	movs	r2, #0
 8003776:	2102      	movs	r1, #2
 8003778:	4618      	mov	r0, r3
 800377a:	f7fe ff5d 	bl	8002638 <NVIC_EncodePriority>
 800377e:	4603      	mov	r3, r0
 8003780:	4619      	mov	r1, r3
 8003782:	2028      	movs	r0, #40	; 0x28
 8003784:	f7fe ff2e 	bl	80025e4 <NVIC_SetPriority>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003788:	2028      	movs	r0, #40	; 0x28
 800378a:	f7fe ff11 	bl	80025b0 <NVIC_EnableIRQ>
    INTERRUPT_ADC_DRDY_Disable();
 800378e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003792:	f7ff fa6f 	bl	8002c74 <LL_EXTI_DisableIT_0_31>
    /**********************************************/
 	  

    /*Setup interrupt PC5 DRDY_GOOD*/
    LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE5);
 8003796:	492e      	ldr	r1, [pc, #184]	; (8003850 <SetupInterrupt+0x14c>)
 8003798:	2002      	movs	r0, #2
 800379a:	f7fe ff7f 	bl	800269c <LL_SYSCFG_SetEXTISource>

    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 800379e:	2320      	movs	r3, #32
 80037a0:	607b      	str	r3, [r7, #4]
    EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60bb      	str	r3, [r7, #8]
    EXTI_InitStruct.LineCommand = ENABLE;
 80037a6:	2301      	movs	r3, #1
 80037a8:	733b      	strb	r3, [r7, #12]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80037aa:	2300      	movs	r3, #0
 80037ac:	737b      	strb	r3, [r7, #13]
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80037ae:	2301      	movs	r3, #1
 80037b0:	73bb      	strb	r3, [r7, #14]
    LL_EXTI_Init(&EXTI_InitStruct);
 80037b2:	1d3b      	adds	r3, r7, #4
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fd faad 	bl	8000d14 <LL_EXTI_Init>

    LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_5, LL_GPIO_PULL_NO);
 80037ba:	2200      	movs	r2, #0
 80037bc:	2120      	movs	r1, #32
 80037be:	4825      	ldr	r0, [pc, #148]	; (8003854 <SetupInterrupt+0x150>)
 80037c0:	f7ff fadf 	bl	8002d82 <LL_GPIO_SetPinPull>
    LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_5, LL_GPIO_MODE_INPUT);
 80037c4:	2200      	movs	r2, #0
 80037c6:	2120      	movs	r1, #32
 80037c8:	4822      	ldr	r0, [pc, #136]	; (8003854 <SetupInterrupt+0x150>)
 80037ca:	f7ff faad 	bl	8002d28 <LL_GPIO_SetPinMode>
    /*INTERRUPT_DRDY_GOOD_Disable()     LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_5)                */
    /*Define in SetupPeriph.h                                                                 */


    /*Setup interrupt PB8 PULSE*/
    LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE8);
 80037ce:	4922      	ldr	r1, [pc, #136]	; (8003858 <SetupInterrupt+0x154>)
 80037d0:	2001      	movs	r0, #1
 80037d2:	f7fe ff63 	bl	800269c <LL_SYSCFG_SetEXTISource>

    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 80037d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037da:	607b      	str	r3, [r7, #4]
    EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80037dc:	2300      	movs	r3, #0
 80037de:	60bb      	str	r3, [r7, #8]
    EXTI_InitStruct.LineCommand = ENABLE;
 80037e0:	2301      	movs	r3, #1
 80037e2:	733b      	strb	r3, [r7, #12]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80037e4:	2300      	movs	r3, #0
 80037e6:	737b      	strb	r3, [r7, #13]
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80037e8:	2302      	movs	r3, #2
 80037ea:	73bb      	strb	r3, [r7, #14]
    LL_EXTI_Init(&EXTI_InitStruct);
 80037ec:	1d3b      	adds	r3, r7, #4
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fd fa90 	bl	8000d14 <LL_EXTI_Init>

    LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_8, LL_GPIO_PULL_NO);
 80037f4:	2200      	movs	r2, #0
 80037f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037fa:	4814      	ldr	r0, [pc, #80]	; (800384c <SetupInterrupt+0x148>)
 80037fc:	f7ff fac1 	bl	8002d82 <LL_GPIO_SetPinPull>
    LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_8, LL_GPIO_MODE_INPUT);
 8003800:	2200      	movs	r2, #0
 8003802:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003806:	4811      	ldr	r0, [pc, #68]	; (800384c <SetupInterrupt+0x148>)
 8003808:	f7ff fa8e 	bl	8002d28 <LL_GPIO_SetPinMode>
    /*INTERRUPT_PULSE_Enable()           LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_8)                 */
    /*INTERRUPT_PULSE_Disable()          LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_8)                */
    /*Define in SetupPeriph.h                          */

    // EXTI interrupt init
    NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0)); //Set priority №3 from 0..15
 800380c:	f7fe fec2 	bl	8002594 <NVIC_GetPriorityGrouping>
 8003810:	4603      	mov	r3, r0
 8003812:	2200      	movs	r2, #0
 8003814:	2103      	movs	r1, #3
 8003816:	4618      	mov	r0, r3
 8003818:	f7fe ff0e 	bl	8002638 <NVIC_EncodePriority>
 800381c:	4603      	mov	r3, r0
 800381e:	4619      	mov	r1, r3
 8003820:	2017      	movs	r0, #23
 8003822:	f7fe fedf 	bl	80025e4 <NVIC_SetPriority>

    NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003826:	2017      	movs	r0, #23
 8003828:	f7fe fec2 	bl	80025b0 <NVIC_EnableIRQ>
    INTERRUPT_DRDY_GOOD_Disable();
 800382c:	2020      	movs	r0, #32
 800382e:	f7ff fa21 	bl	8002c74 <LL_EXTI_DisableIT_0_31>
    INTERRUPT_PULSE_Disable();
 8003832:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003836:	f7ff fa1d 	bl	8002c74 <LL_EXTI_DisableIT_0_31>
    /***************************************************/

}
 800383a:	bf00      	nop
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40013800 	.word	0x40013800
 8003848:	f0000003 	.word	0xf0000003
 800384c:	48000400 	.word	0x48000400
 8003850:	00f00001 	.word	0x00f00001
 8003854:	48000800 	.word	0x48000800
 8003858:	000f0002 	.word	0x000f0002

0800385c <IWDG_Init>:
/**
  * @brief  This function setup Watch Dog.
  * @retval None
*/

void IWDG_Init(void){
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0

    LL_IWDG_Enable(IWDG);
 8003860:	480f      	ldr	r0, [pc, #60]	; (80038a0 <IWDG_Init+0x44>)
 8003862:	f7ff f94b 	bl	8002afc <LL_IWDG_Enable>
  	LL_IWDG_EnableWriteAccess(IWDG);
 8003866:	480e      	ldr	r0, [pc, #56]	; (80038a0 <IWDG_Init+0x44>)
 8003868:	f7ff f968 	bl	8002b3c <LL_IWDG_EnableWriteAccess>
    LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_32);
 800386c:	2103      	movs	r1, #3
 800386e:	480c      	ldr	r0, [pc, #48]	; (80038a0 <IWDG_Init+0x44>)
 8003870:	f7ff f974 	bl	8002b5c <LL_IWDG_SetPrescaler>
    LL_IWDG_SetWindow(IWDG, 4095);
 8003874:	f640 71ff 	movw	r1, #4095	; 0xfff
 8003878:	4809      	ldr	r0, [pc, #36]	; (80038a0 <IWDG_Init+0x44>)
 800387a:	f7ff f98f 	bl	8002b9c <LL_IWDG_SetWindow>
    LL_IWDG_SetReloadCounter(IWDG, 4095);
 800387e:	f640 71ff 	movw	r1, #4095	; 0xfff
 8003882:	4807      	ldr	r0, [pc, #28]	; (80038a0 <IWDG_Init+0x44>)
 8003884:	f7ff f97a 	bl	8002b7c <LL_IWDG_SetReloadCounter>
    while (LL_IWDG_IsReady(IWDG) != 1);
 8003888:	bf00      	nop
 800388a:	4805      	ldr	r0, [pc, #20]	; (80038a0 <IWDG_Init+0x44>)
 800388c:	f7ff f996 	bl	8002bbc <LL_IWDG_IsReady>
 8003890:	4603      	mov	r3, r0
 8003892:	2b01      	cmp	r3, #1
 8003894:	d1f9      	bne.n	800388a <IWDG_Init+0x2e>

    LL_IWDG_ReloadCounter(IWDG);
 8003896:	4802      	ldr	r0, [pc, #8]	; (80038a0 <IWDG_Init+0x44>)
 8003898:	f7ff f940 	bl	8002b1c <LL_IWDG_ReloadCounter>
}
 800389c:	bf00      	nop
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40003000 	.word	0x40003000

080038a4 <_Error_Handler>:
  *
  *
  *
  */
void _Error_Handler(char *file, int line)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]

	printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4803      	ldr	r0, [pc, #12]	; (80038c0 <_Error_Handler+0x1c>)
 80038b4:	f001 fe02 	bl	80054bc <iprintf>
  /* User can add his own implementation to report the HAL error return state */
 //while(1)
  //{
 // }
  /* USER CODE END Error_Handler_Debug */
}
 80038b8:	bf00      	nop
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	080063b4 	.word	0x080063b4

080038c4 <LL_GPIO_SetOutputPin>:
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	619a      	str	r2, [r3, #24]
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <LL_GPIO_ResetOutputPin>:
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <LL_TIM_EnableCounter>:
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f043 0201 	orr.w	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	601a      	str	r2, [r3, #0]
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <LL_TIM_DisableCounter>:
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f023 0201 	bic.w	r2, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	601a      	str	r2, [r3, #0]
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <LL_TIM_SetCounter>:
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <LL_TIM_SetAutoReload>:
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <LL_TIM_OC_SetCompareCH1>:
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <LL_TIM_OC_SetCompareCH2>:
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	639a      	str	r2, [r3, #56]	; 0x38
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <Set_Ficlk_and_F_SAx>:
  * @param  PWM_TIM2_CH2_PA1 or PWM_TIM3_CH1_PA6
  * @retval An ErrorStatus enumeration
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus Set_Ficlk_and_F_SAx(uint8_t par_value, enum PWR_TIMx timer_number){
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	460a      	mov	r2, r1
 80039b6:	71fb      	strb	r3, [r7, #7]
 80039b8:	4613      	mov	r3, r2
 80039ba:	71bb      	strb	r3, [r7, #6]

	uint32_t Counter_TIM_Value, Fcut, Ficlk;
	//Fcut -  cutoff frequency of low-pass filter (Hz)
	//Ficlkt -  real value of the frequency fed to the low-pass filter (Hz)

	Fcut=par_value*10;// cutoff frequency of low-pass filter (Hz)
 80039bc:	79fa      	ldrb	r2, [r7, #7]
 80039be:	4613      	mov	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	617b      	str	r3, [r7, #20]

	if(Fcut == 10){
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2b0a      	cmp	r3, #10
 80039cc:	d103      	bne.n	80039d6 <Set_Ficlk_and_F_SAx+0x2a>
		Ficlk = 1300;//Hz
 80039ce:	f240 5314 	movw	r3, #1300	; 0x514
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	e026      	b.n	8003a24 <Set_Ficlk_and_F_SAx+0x78>
		
	}else if(Fcut == 700){
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80039dc:	d102      	bne.n	80039e4 <Set_Ficlk_and_F_SAx+0x38>
		Ficlk = 91000;//Hz
 80039de:	4b4e      	ldr	r3, [pc, #312]	; (8003b18 <Set_Ficlk_and_F_SAx+0x16c>)
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	e01f      	b.n	8003a24 <Set_Ficlk_and_F_SAx+0x78>

	}else if(Fcut >= 1270){
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f240 42f5 	movw	r2, #1269	; 0x4f5
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d902      	bls.n	80039f4 <Set_Ficlk_and_F_SAx+0x48>
		Ficlk = 130000;//Hz
 80039ee:	4b4b      	ldr	r3, [pc, #300]	; (8003b1c <Set_Ficlk_and_F_SAx+0x170>)
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	e017      	b.n	8003a24 <Set_Ficlk_and_F_SAx+0x78>

	}else{
		//Ficlk = ( ((Fcut%50)==0) ? ((Fcut<1000) ? (Fcut=Fcut+5) : (Fcut=Fcut+50)) : Fcut )*100;
		Ficlk = ( ((Fcut%50)==0) ? (Fcut=Fcut+5): Fcut )*100;
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4b4a      	ldr	r3, [pc, #296]	; (8003b20 <Set_Ficlk_and_F_SAx+0x174>)
 80039f8:	fba3 1302 	umull	r1, r3, r3, r2
 80039fc:	091b      	lsrs	r3, r3, #4
 80039fe:	2132      	movs	r1, #50	; 0x32
 8003a00:	fb01 f303 	mul.w	r3, r1, r3
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d107      	bne.n	8003a1a <Set_Ficlk_and_F_SAx+0x6e>
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	3305      	adds	r3, #5
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2264      	movs	r2, #100	; 0x64
 8003a14:	fb02 f303 	mul.w	r3, r2, r3
 8003a18:	e003      	b.n	8003a22 <Set_Ficlk_and_F_SAx+0x76>
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2264      	movs	r2, #100	; 0x64
 8003a1e:	fb02 f303 	mul.w	r3, r2, r3
 8003a22:	613b      	str	r3, [r7, #16]
	}

	Counter_TIM_Value = SystemCoreClock/Ficlk;
 8003a24:	4b3f      	ldr	r3, [pc, #252]	; (8003b24 <Set_Ficlk_and_F_SAx+0x178>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	60fb      	str	r3, [r7, #12]

	if(timer_number == PWM_TIM2_CH2_PA1){
 8003a30:	79bb      	ldrb	r3, [r7, #6]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d11c      	bne.n	8003a70 <Set_Ficlk_and_F_SAx+0xc4>
		LL_TIM_DisableCounter(TIM2); // Disable timer for resetup
 8003a36:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a3a:	f7ff ff6f 	bl	800391c <LL_TIM_DisableCounter>
		LL_TIM_SetCounter(TIM2, 0);
 8003a3e:	2100      	movs	r1, #0
 8003a40:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a44:	f7ff ff7a 	bl	800393c <LL_TIM_SetCounter>
		LL_TIM_SetAutoReload(TIM2, Counter_TIM_Value-1);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a52:	f7ff ff81 	bl	8003958 <LL_TIM_SetAutoReload>
		LL_TIM_OC_SetCompareCH2(TIM2, ((Counter_TIM_Value/2)-1));
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	085b      	lsrs	r3, r3, #1
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a62:	f7ff ff95 	bl	8003990 <LL_TIM_OC_SetCompareCH2>
		//LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
		LL_TIM_EnableCounter(TIM2);
 8003a66:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a6a:	f7ff ff47 	bl	80038fc <LL_TIM_EnableCounter>
 8003a6e:	e020      	b.n	8003ab2 <Set_Ficlk_and_F_SAx+0x106>
	}else if(timer_number == PWM_TIM3_CH1_PA6){
 8003a70:	79bb      	ldrb	r3, [r7, #6]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d117      	bne.n	8003aa6 <Set_Ficlk_and_F_SAx+0xfa>
		LL_TIM_DisableCounter(TIM3); // Disable timer for resetup
 8003a76:	482c      	ldr	r0, [pc, #176]	; (8003b28 <Set_Ficlk_and_F_SAx+0x17c>)
 8003a78:	f7ff ff50 	bl	800391c <LL_TIM_DisableCounter>
		LL_TIM_SetCounter(TIM3, 0);
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	482a      	ldr	r0, [pc, #168]	; (8003b28 <Set_Ficlk_and_F_SAx+0x17c>)
 8003a80:	f7ff ff5c 	bl	800393c <LL_TIM_SetCounter>
		LL_TIM_SetAutoReload(TIM3, Counter_TIM_Value-1);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4827      	ldr	r0, [pc, #156]	; (8003b28 <Set_Ficlk_and_F_SAx+0x17c>)
 8003a8c:	f7ff ff64 	bl	8003958 <LL_TIM_SetAutoReload>
		LL_TIM_OC_SetCompareCH1(TIM3, ((Counter_TIM_Value/2)-1));
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	085b      	lsrs	r3, r3, #1
 8003a94:	3b01      	subs	r3, #1
 8003a96:	4619      	mov	r1, r3
 8003a98:	4823      	ldr	r0, [pc, #140]	; (8003b28 <Set_Ficlk_and_F_SAx+0x17c>)
 8003a9a:	f7ff ff6b 	bl	8003974 <LL_TIM_OC_SetCompareCH1>
		//LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
		LL_TIM_EnableCounter(TIM3);
 8003a9e:	4822      	ldr	r0, [pc, #136]	; (8003b28 <Set_Ficlk_and_F_SAx+0x17c>)
 8003aa0:	f7ff ff2c 	bl	80038fc <LL_TIM_EnableCounter>
 8003aa4:	e005      	b.n	8003ab2 <Set_Ficlk_and_F_SAx+0x106>
	}else{
		Error_Handler();
 8003aa6:	2140      	movs	r1, #64	; 0x40
 8003aa8:	4820      	ldr	r0, [pc, #128]	; (8003b2c <Set_Ficlk_and_F_SAx+0x180>)
 8003aaa:	f7ff fefb 	bl	80038a4 <_Error_Handler>
		return ERROR;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	e02e      	b.n	8003b10 <Set_Ficlk_and_F_SAx+0x164>
	}

    // Control F_SAx
	if( Fcut==10 /*|| Fcut==20 */){
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b0a      	cmp	r3, #10
 8003ab6:	d10a      	bne.n	8003ace <Set_Ficlk_and_F_SAx+0x122>
		F_SA0_Reset();
 8003ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003abc:	481c      	ldr	r0, [pc, #112]	; (8003b30 <Set_Ficlk_and_F_SAx+0x184>)
 8003abe:	f7ff ff0f 	bl	80038e0 <LL_GPIO_ResetOutputPin>
		F_SA1_Reset();
 8003ac2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ac6:	481a      	ldr	r0, [pc, #104]	; (8003b30 <Set_Ficlk_and_F_SAx+0x184>)
 8003ac8:	f7ff ff0a 	bl	80038e0 <LL_GPIO_ResetOutputPin>
 8003acc:	e01f      	b.n	8003b0e <Set_Ficlk_and_F_SAx+0x162>
#ifdef DEBUGprintf
			printf("Param_value=%d  Fcut=%luHz  Ficlk=%luHz  F_SA0=0 F_SA1=0\r\n",par_value, (unsigned long)Fcut, (unsigned long)Ficlk );
#endif

	}else if ( Fcut >= 20 && Fcut < 330 ){
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b13      	cmp	r3, #19
 8003ad2:	d90e      	bls.n	8003af2 <Set_Ficlk_and_F_SAx+0x146>
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8003ada:	d20a      	bcs.n	8003af2 <Set_Ficlk_and_F_SAx+0x146>
		F_SA0_Set();
 8003adc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ae0:	4813      	ldr	r0, [pc, #76]	; (8003b30 <Set_Ficlk_and_F_SAx+0x184>)
 8003ae2:	f7ff feef 	bl	80038c4 <LL_GPIO_SetOutputPin>
		F_SA1_Reset();
 8003ae6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003aea:	4811      	ldr	r0, [pc, #68]	; (8003b30 <Set_Ficlk_and_F_SAx+0x184>)
 8003aec:	f7ff fef8 	bl	80038e0 <LL_GPIO_ResetOutputPin>
 8003af0:	e00d      	b.n	8003b0e <Set_Ficlk_and_F_SAx+0x162>
#ifdef DEBUGprintf
			printf("Param_value=%d  Fcut=%luHz  Ficlk=%luHz  F_SA0=1 F_SA1=0\r\n",par_value, (unsigned long)Fcut, (unsigned long)Ficlk );
#endif

	}else if( Fcut >= 330 ){
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8003af8:	d309      	bcc.n	8003b0e <Set_Ficlk_and_F_SAx+0x162>
		F_SA0_Set();
 8003afa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003afe:	480c      	ldr	r0, [pc, #48]	; (8003b30 <Set_Ficlk_and_F_SAx+0x184>)
 8003b00:	f7ff fee0 	bl	80038c4 <LL_GPIO_SetOutputPin>
		F_SA1_Set();
 8003b04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b08:	4809      	ldr	r0, [pc, #36]	; (8003b30 <Set_Ficlk_and_F_SAx+0x184>)
 8003b0a:	f7ff fedb 	bl	80038c4 <LL_GPIO_SetOutputPin>
			printf("Param_value=%d  Fcut=%luHz  Ficlk=%luHz  F_SA0=1 F_SA1=1\r\n",par_value, (unsigned long)Fcut, (unsigned long)Ficlk );
#endif

	}

	return SUCCESS;
 8003b0e:	2301      	movs	r3, #1
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	00016378 	.word	0x00016378
 8003b1c:	0001fbd0 	.word	0x0001fbd0
 8003b20:	51eb851f 	.word	0x51eb851f
 8003b24:	2000000c 	.word	0x2000000c
 8003b28:	40000400 	.word	0x40000400
 8003b2c:	080063e4 	.word	0x080063e4
 8003b30:	48000800 	.word	0x48000800

08003b34 <Set_Amp_Factor_K1>:
  * @param  namber_value
  * @retval An ErrorStatus enumeration
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus Set_Amp_Factor_K1(uint8_t namber_value){
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	71fb      	strb	r3, [r7, #7]

	uint16_t K1=0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	81fb      	strh	r3, [r7, #14]

	switch(namber_value){
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d854      	bhi.n	8003bf2 <Set_Amp_Factor_K1+0xbe>
 8003b48:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <Set_Amp_Factor_K1+0x1c>)
 8003b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4e:	bf00      	nop
 8003b50:	08003b61 	.word	0x08003b61
 8003b54:	08003b85 	.word	0x08003b85
 8003b58:	08003ba9 	.word	0x08003ba9
 8003b5c:	08003bcd 	.word	0x08003bcd
		case 0: // Set K1=1
			PA3_10_Set();
 8003b60:	2108      	movs	r1, #8
 8003b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b66:	f7ff fead 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PA4_100_Set();
 8003b6a:	2110      	movs	r1, #16
 8003b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b70:	f7ff fea8 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PA5_1000_Set();
 8003b74:	2120      	movs	r1, #32
 8003b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b7a:	f7ff fea3 	bl	80038c4 <LL_GPIO_SetOutputPin>
			K1=1;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	81fb      	strh	r3, [r7, #14]
			break;
 8003b82:	e03c      	b.n	8003bfe <Set_Amp_Factor_K1+0xca>
		case 1:// Set K1=10
			PA3_10_Reset();
 8003b84:	2108      	movs	r1, #8
 8003b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b8a:	f7ff fea9 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PA4_100_Set();
 8003b8e:	2110      	movs	r1, #16
 8003b90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b94:	f7ff fe96 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PA5_1000_Set();
 8003b98:	2120      	movs	r1, #32
 8003b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b9e:	f7ff fe91 	bl	80038c4 <LL_GPIO_SetOutputPin>
			K1=10;
 8003ba2:	230a      	movs	r3, #10
 8003ba4:	81fb      	strh	r3, [r7, #14]
			break;
 8003ba6:	e02a      	b.n	8003bfe <Set_Amp_Factor_K1+0xca>
		case 2:// Set K1=100
			PA3_10_Set();
 8003ba8:	2108      	movs	r1, #8
 8003baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bae:	f7ff fe89 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PA4_100_Reset();
 8003bb2:	2110      	movs	r1, #16
 8003bb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bb8:	f7ff fe92 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PA5_1000_Set();
 8003bbc:	2120      	movs	r1, #32
 8003bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bc2:	f7ff fe7f 	bl	80038c4 <LL_GPIO_SetOutputPin>
			K1=100;
 8003bc6:	2364      	movs	r3, #100	; 0x64
 8003bc8:	81fb      	strh	r3, [r7, #14]
			break;
 8003bca:	e018      	b.n	8003bfe <Set_Amp_Factor_K1+0xca>
		case 3:// Set K1=1000
			PA3_10_Set();
 8003bcc:	2108      	movs	r1, #8
 8003bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bd2:	f7ff fe77 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PA4_100_Set();
 8003bd6:	2110      	movs	r1, #16
 8003bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bdc:	f7ff fe72 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PA5_1000_Reset();
 8003be0:	2120      	movs	r1, #32
 8003be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003be6:	f7ff fe7b 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			K1=1000;
 8003bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bee:	81fb      	strh	r3, [r7, #14]
			break;
 8003bf0:	e005      	b.n	8003bfe <Set_Amp_Factor_K1+0xca>
		default:
			Error_Handler();
 8003bf2:	2184      	movs	r1, #132	; 0x84
 8003bf4:	4804      	ldr	r0, [pc, #16]	; (8003c08 <Set_Amp_Factor_K1+0xd4>)
 8003bf6:	f7ff fe55 	bl	80038a4 <_Error_Handler>
			return ERROR;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e000      	b.n	8003c00 <Set_Amp_Factor_K1+0xcc>

#ifdef DEBUGprintf
	printf("K1 = %d \r\n",K1);
#endif

	return SUCCESS;
 8003bfe:	2301      	movs	r3, #1
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	080063e4 	.word	0x080063e4

08003c0c <Set_Amp_Factor_K2>:
  * @param  namber_value
  * @retval An ErrorStatus enumeration
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus Set_Amp_Factor_K2(uint8_t namber_value){
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	71fb      	strb	r3, [r7, #7]

	uint16_t K2=0;
 8003c16:	2300      	movs	r3, #0
 8003c18:	81fb      	strh	r3, [r7, #14]

	switch(namber_value){
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	2b0b      	cmp	r3, #11
 8003c1e:	f200 8193 	bhi.w	8003f48 <Set_Amp_Factor_K2+0x33c>
 8003c22:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <Set_Amp_Factor_K2+0x1c>)
 8003c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c28:	08003c59 	.word	0x08003c59
 8003c2c:	08003c97 	.word	0x08003c97
 8003c30:	08003cd5 	.word	0x08003cd5
 8003c34:	08003d13 	.word	0x08003d13
 8003c38:	08003d51 	.word	0x08003d51
 8003c3c:	08003d8f 	.word	0x08003d8f
 8003c40:	08003dcd 	.word	0x08003dcd
 8003c44:	08003e0b 	.word	0x08003e0b
 8003c48:	08003e49 	.word	0x08003e49
 8003c4c:	08003e89 	.word	0x08003e89
 8003c50:	08003ec9 	.word	0x08003ec9
 8003c54:	08003f09 	.word	0x08003f09

		case 0: // Set K2=1
			PB0_G0_Reset();
 8003c58:	2101      	movs	r1, #1
 8003c5a:	48c1      	ldr	r0, [pc, #772]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003c5c:	f7ff fe40 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB1_G1_Set();
 8003c60:	2102      	movs	r1, #2
 8003c62:	48bf      	ldr	r0, [pc, #764]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003c64:	f7ff fe2e 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PB2_G2_Reset();
 8003c68:	2104      	movs	r1, #4
 8003c6a:	48bd      	ldr	r0, [pc, #756]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003c6c:	f7ff fe38 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB10_G3_Reset();
 8003c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c74:	48ba      	ldr	r0, [pc, #744]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003c76:	f7ff fe33 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB11_G4_Reset();
 8003c7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c7e:	48b8      	ldr	r0, [pc, #736]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003c80:	f7ff fe2e 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			F_SA2_Reset();
 8003c84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c8c:	f7ff fe28 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			K2=1;
 8003c90:	2301      	movs	r3, #1
 8003c92:	81fb      	strh	r3, [r7, #14]
			break;
 8003c94:	e15f      	b.n	8003f56 <Set_Amp_Factor_K2+0x34a>
		case 1: // Set K2=2
			PB0_G0_Set();
 8003c96:	2101      	movs	r1, #1
 8003c98:	48b1      	ldr	r0, [pc, #708]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003c9a:	f7ff fe13 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PB1_G1_Set();
 8003c9e:	2102      	movs	r1, #2
 8003ca0:	48af      	ldr	r0, [pc, #700]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003ca2:	f7ff fe0f 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PB2_G2_Reset();
 8003ca6:	2104      	movs	r1, #4
 8003ca8:	48ad      	ldr	r0, [pc, #692]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003caa:	f7ff fe19 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB10_G3_Reset();
 8003cae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003cb2:	48ab      	ldr	r0, [pc, #684]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003cb4:	f7ff fe14 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB11_G4_Reset();
 8003cb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cbc:	48a8      	ldr	r0, [pc, #672]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003cbe:	f7ff fe0f 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			F_SA2_Reset();
 8003cc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cca:	f7ff fe09 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			K2=2;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	81fb      	strh	r3, [r7, #14]
			break;
 8003cd2:	e140      	b.n	8003f56 <Set_Amp_Factor_K2+0x34a>
		case 2: // Set K2=4
			PB0_G0_Reset();
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	48a2      	ldr	r0, [pc, #648]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003cd8:	f7ff fe02 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB1_G1_Reset();
 8003cdc:	2102      	movs	r1, #2
 8003cde:	48a0      	ldr	r0, [pc, #640]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003ce0:	f7ff fdfe 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB2_G2_Set();
 8003ce4:	2104      	movs	r1, #4
 8003ce6:	489e      	ldr	r0, [pc, #632]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003ce8:	f7ff fdec 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PB10_G3_Reset();
 8003cec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003cf0:	489b      	ldr	r0, [pc, #620]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003cf2:	f7ff fdf5 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB11_G4_Reset();
 8003cf6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cfa:	4899      	ldr	r0, [pc, #612]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003cfc:	f7ff fdf0 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			F_SA2_Reset();
 8003d00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d08:	f7ff fdea 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			K2=4;
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	81fb      	strh	r3, [r7, #14]
			break;
 8003d10:	e121      	b.n	8003f56 <Set_Amp_Factor_K2+0x34a>
		case 3: // Set K2=8
			PB0_G0_Set();
 8003d12:	2101      	movs	r1, #1
 8003d14:	4892      	ldr	r0, [pc, #584]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003d16:	f7ff fdd5 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PB1_G1_Reset();
 8003d1a:	2102      	movs	r1, #2
 8003d1c:	4890      	ldr	r0, [pc, #576]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003d1e:	f7ff fddf 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB2_G2_Set();
 8003d22:	2104      	movs	r1, #4
 8003d24:	488e      	ldr	r0, [pc, #568]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003d26:	f7ff fdcd 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PB10_G3_Reset();
 8003d2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d2e:	488c      	ldr	r0, [pc, #560]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003d30:	f7ff fdd6 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB11_G4_Reset();
 8003d34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d38:	4889      	ldr	r0, [pc, #548]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003d3a:	f7ff fdd1 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			F_SA2_Reset();
 8003d3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d46:	f7ff fdcb 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			K2=8;
 8003d4a:	2308      	movs	r3, #8
 8003d4c:	81fb      	strh	r3, [r7, #14]
			break;
 8003d4e:	e102      	b.n	8003f56 <Set_Amp_Factor_K2+0x34a>
		case 4: // Set K2=16
			PB0_G0_Reset();
 8003d50:	2101      	movs	r1, #1
 8003d52:	4883      	ldr	r0, [pc, #524]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003d54:	f7ff fdc4 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB1_G1_Set();
 8003d58:	2102      	movs	r1, #2
 8003d5a:	4881      	ldr	r0, [pc, #516]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003d5c:	f7ff fdb2 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PB2_G2_Set();
 8003d60:	2104      	movs	r1, #4
 8003d62:	487f      	ldr	r0, [pc, #508]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003d64:	f7ff fdae 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PB10_G3_Reset();
 8003d68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d6c:	487c      	ldr	r0, [pc, #496]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003d6e:	f7ff fdb7 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB11_G4_Reset();
 8003d72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d76:	487a      	ldr	r0, [pc, #488]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003d78:	f7ff fdb2 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			F_SA2_Reset();
 8003d7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d84:	f7ff fdac 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			K2=16;
 8003d88:	2310      	movs	r3, #16
 8003d8a:	81fb      	strh	r3, [r7, #14]
			break;
 8003d8c:	e0e3      	b.n	8003f56 <Set_Amp_Factor_K2+0x34a>
		case 5: // Set K2=32
			PB0_G0_Set();
 8003d8e:	2101      	movs	r1, #1
 8003d90:	4873      	ldr	r0, [pc, #460]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003d92:	f7ff fd97 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PB1_G1_Set();
 8003d96:	2102      	movs	r1, #2
 8003d98:	4871      	ldr	r0, [pc, #452]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003d9a:	f7ff fd93 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PB2_G2_Set();
 8003d9e:	2104      	movs	r1, #4
 8003da0:	486f      	ldr	r0, [pc, #444]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003da2:	f7ff fd8f 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PB10_G3_Reset();
 8003da6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003daa:	486d      	ldr	r0, [pc, #436]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003dac:	f7ff fd98 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB11_G4_Reset();
 8003db0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003db4:	486a      	ldr	r0, [pc, #424]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003db6:	f7ff fd93 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			F_SA2_Reset();
 8003dba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dc2:	f7ff fd8d 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			K2=32;
 8003dc6:	2320      	movs	r3, #32
 8003dc8:	81fb      	strh	r3, [r7, #14]
			break;
 8003dca:	e0c4      	b.n	8003f56 <Set_Amp_Factor_K2+0x34a>
		case 6: // Set K2=64
			PB0_G0_Reset();
 8003dcc:	2101      	movs	r1, #1
 8003dce:	4864      	ldr	r0, [pc, #400]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003dd0:	f7ff fd86 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB1_G1_Reset();
 8003dd4:	2102      	movs	r1, #2
 8003dd6:	4862      	ldr	r0, [pc, #392]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003dd8:	f7ff fd82 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB2_G2_Reset();
 8003ddc:	2104      	movs	r1, #4
 8003dde:	4860      	ldr	r0, [pc, #384]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003de0:	f7ff fd7e 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB10_G3_Set();
 8003de4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003de8:	485d      	ldr	r0, [pc, #372]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003dea:	f7ff fd6b 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PB11_G4_Reset();
 8003dee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003df2:	485b      	ldr	r0, [pc, #364]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003df4:	f7ff fd74 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			F_SA2_Reset();
 8003df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e00:	f7ff fd6e 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			K2=64;
 8003e04:	2340      	movs	r3, #64	; 0x40
 8003e06:	81fb      	strh	r3, [r7, #14]
			break;
 8003e08:	e0a5      	b.n	8003f56 <Set_Amp_Factor_K2+0x34a>
		case 7: // Set K2=128
			PB0_G0_Set();
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	4854      	ldr	r0, [pc, #336]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003e0e:	f7ff fd59 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PB1_G1_Reset();
 8003e12:	2102      	movs	r1, #2
 8003e14:	4852      	ldr	r0, [pc, #328]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003e16:	f7ff fd63 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB2_G2_Reset();
 8003e1a:	2104      	movs	r1, #4
 8003e1c:	4850      	ldr	r0, [pc, #320]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003e1e:	f7ff fd5f 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB10_G3_Set();
 8003e22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e26:	484e      	ldr	r0, [pc, #312]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003e28:	f7ff fd4c 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PB11_G4_Reset();
 8003e2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e30:	484b      	ldr	r0, [pc, #300]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003e32:	f7ff fd55 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			F_SA2_Reset();
 8003e36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e3e:	f7ff fd4f 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			K2=128;
 8003e42:	2380      	movs	r3, #128	; 0x80
 8003e44:	81fb      	strh	r3, [r7, #14]
			break;
 8003e46:	e086      	b.n	8003f56 <Set_Amp_Factor_K2+0x34a>
		case 8: // Set K2=256
			PB0_G0_Reset();
 8003e48:	2101      	movs	r1, #1
 8003e4a:	4845      	ldr	r0, [pc, #276]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003e4c:	f7ff fd48 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB1_G1_Set();
 8003e50:	2102      	movs	r1, #2
 8003e52:	4843      	ldr	r0, [pc, #268]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003e54:	f7ff fd36 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PB2_G2_Reset();
 8003e58:	2104      	movs	r1, #4
 8003e5a:	4841      	ldr	r0, [pc, #260]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003e5c:	f7ff fd40 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB10_G3_Set();
 8003e60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e64:	483e      	ldr	r0, [pc, #248]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003e66:	f7ff fd2d 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PB11_G4_Reset();
 8003e6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e6e:	483c      	ldr	r0, [pc, #240]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003e70:	f7ff fd36 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			F_SA2_Reset();
 8003e74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e7c:	f7ff fd30 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			K2=256;
 8003e80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e84:	81fb      	strh	r3, [r7, #14]
			break;
 8003e86:	e066      	b.n	8003f56 <Set_Amp_Factor_K2+0x34a>
		case 9: // Set K2=512
			PB0_G0_Reset();
 8003e88:	2101      	movs	r1, #1
 8003e8a:	4835      	ldr	r0, [pc, #212]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003e8c:	f7ff fd28 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB1_G1_Reset();
 8003e90:	2102      	movs	r1, #2
 8003e92:	4833      	ldr	r0, [pc, #204]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003e94:	f7ff fd24 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB2_G2_Reset();
 8003e98:	2104      	movs	r1, #4
 8003e9a:	4831      	ldr	r0, [pc, #196]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003e9c:	f7ff fd20 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB10_G3_Set();
 8003ea0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ea4:	482e      	ldr	r0, [pc, #184]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003ea6:	f7ff fd0d 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PB11_G4_Reset();
 8003eaa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003eae:	482c      	ldr	r0, [pc, #176]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003eb0:	f7ff fd16 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			F_SA2_Set();
 8003eb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ebc:	f7ff fd02 	bl	80038c4 <LL_GPIO_SetOutputPin>
			K2=512;
 8003ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ec4:	81fb      	strh	r3, [r7, #14]
			break;
 8003ec6:	e046      	b.n	8003f56 <Set_Amp_Factor_K2+0x34a>
		case 10: // Set K2=1024
			PB0_G0_Set();
 8003ec8:	2101      	movs	r1, #1
 8003eca:	4825      	ldr	r0, [pc, #148]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003ecc:	f7ff fcfa 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PB1_G1_Reset();
 8003ed0:	2102      	movs	r1, #2
 8003ed2:	4823      	ldr	r0, [pc, #140]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003ed4:	f7ff fd04 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB2_G2_Reset();
 8003ed8:	2104      	movs	r1, #4
 8003eda:	4821      	ldr	r0, [pc, #132]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003edc:	f7ff fd00 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB10_G3_Set();
 8003ee0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ee4:	481e      	ldr	r0, [pc, #120]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003ee6:	f7ff fced 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PB11_G4_Reset();
 8003eea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003eee:	481c      	ldr	r0, [pc, #112]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003ef0:	f7ff fcf6 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			F_SA2_Set();
 8003ef4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003efc:	f7ff fce2 	bl	80038c4 <LL_GPIO_SetOutputPin>
			K2=1024;
 8003f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f04:	81fb      	strh	r3, [r7, #14]
			break;
 8003f06:	e026      	b.n	8003f56 <Set_Amp_Factor_K2+0x34a>
		case 11: // Set K2=2048
			PB0_G0_Reset();
 8003f08:	2101      	movs	r1, #1
 8003f0a:	4815      	ldr	r0, [pc, #84]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003f0c:	f7ff fce8 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB1_G1_Set();
 8003f10:	2102      	movs	r1, #2
 8003f12:	4813      	ldr	r0, [pc, #76]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003f14:	f7ff fcd6 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PB2_G2_Reset();
 8003f18:	2104      	movs	r1, #4
 8003f1a:	4811      	ldr	r0, [pc, #68]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003f1c:	f7ff fce0 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			PB10_G3_Set();
 8003f20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f24:	480e      	ldr	r0, [pc, #56]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003f26:	f7ff fccd 	bl	80038c4 <LL_GPIO_SetOutputPin>
			PB11_G4_Reset();
 8003f2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f2e:	480c      	ldr	r0, [pc, #48]	; (8003f60 <Set_Amp_Factor_K2+0x354>)
 8003f30:	f7ff fcd6 	bl	80038e0 <LL_GPIO_ResetOutputPin>
			F_SA2_Set();
 8003f34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f3c:	f7ff fcc2 	bl	80038c4 <LL_GPIO_SetOutputPin>
			K2=2048;
 8003f40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f44:	81fb      	strh	r3, [r7, #14]

			break;
 8003f46:	e006      	b.n	8003f56 <Set_Amp_Factor_K2+0x34a>
		default:
			Error_Handler();
 8003f48:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8003f4c:	4805      	ldr	r0, [pc, #20]	; (8003f64 <Set_Amp_Factor_K2+0x358>)
 8003f4e:	f7ff fca9 	bl	80038a4 <_Error_Handler>
			return ERROR;
 8003f52:	2300      	movs	r3, #0
 8003f54:	e000      	b.n	8003f58 <Set_Amp_Factor_K2+0x34c>

#ifdef DEBUGprintf
	printf("K2 = %d \r\n",K2);
#endif

	return SUCCESS;
 8003f56:	2301      	movs	r3, #1
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	48000400 	.word	0x48000400
 8003f64:	080063e4 	.word	0x080063e4

08003f68 <Manual_settings>:
  * @param  number_settings
  * @retval An ErrorStatus enumeration
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
 */
ErrorStatus Manual_settings(uint8_t namber_settings, enum PWR_TIMx timer_numberr){
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	460a      	mov	r2, r1
 8003f72:	71fb      	strb	r3, [r7, #7]
 8003f74:	4613      	mov	r3, r2
 8003f76:	71bb      	strb	r3, [r7, #6]

	uint8_t namber_settings_K1_k2,namber_settings_Fcut;

	namber_settings_K1_k2 = 0x7 & namber_settings;
 8003f78:	79fb      	ldrb	r3, [r7, #7]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	73fb      	strb	r3, [r7, #15]
	namber_settings_Fcut = namber_settings >> 3;
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	08db      	lsrs	r3, r3, #3
 8003f84:	73bb      	strb	r3, [r7, #14]

#ifdef DEBUGprintf
	printf("\r\nManual configuration of the analog module:\r\n");
#endif

	switch (namber_settings_K1_k2){
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	2b07      	cmp	r3, #7
 8003f8a:	d84b      	bhi.n	8004024 <Manual_settings+0xbc>
 8003f8c:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <Manual_settings+0x2c>)
 8003f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f92:	bf00      	nop
 8003f94:	08003fb5 	.word	0x08003fb5
 8003f98:	08003fc3 	.word	0x08003fc3
 8003f9c:	08003fd1 	.word	0x08003fd1
 8003fa0:	08003fdf 	.word	0x08003fdf
 8003fa4:	08003fed 	.word	0x08003fed
 8003fa8:	08003ffb 	.word	0x08003ffb
 8003fac:	08004009 	.word	0x08004009
 8003fb0:	08004017 	.word	0x08004017

		case 0: //K1=1 K2=1 
			Set_Amp_Factor_K1(0);
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	f7ff fdbd 	bl	8003b34 <Set_Amp_Factor_K1>
			Set_Amp_Factor_K2(0);
 8003fba:	2000      	movs	r0, #0
 8003fbc:	f7ff fe26 	bl	8003c0c <Set_Amp_Factor_K2>
			break;
 8003fc0:	e037      	b.n	8004032 <Manual_settings+0xca>

		case 1: //K1=10 K2=1 
			Set_Amp_Factor_K1(1);
 8003fc2:	2001      	movs	r0, #1
 8003fc4:	f7ff fdb6 	bl	8003b34 <Set_Amp_Factor_K1>
			Set_Amp_Factor_K2(0);
 8003fc8:	2000      	movs	r0, #0
 8003fca:	f7ff fe1f 	bl	8003c0c <Set_Amp_Factor_K2>
			break;
 8003fce:	e030      	b.n	8004032 <Manual_settings+0xca>

		case 2: //K1=10 K2=2
			Set_Amp_Factor_K1(1);
 8003fd0:	2001      	movs	r0, #1
 8003fd2:	f7ff fdaf 	bl	8003b34 <Set_Amp_Factor_K1>
			Set_Amp_Factor_K2(1);
 8003fd6:	2001      	movs	r0, #1
 8003fd8:	f7ff fe18 	bl	8003c0c <Set_Amp_Factor_K2>
			break;
 8003fdc:	e029      	b.n	8004032 <Manual_settings+0xca>

		case 3: //K1=10 K2=4
			Set_Amp_Factor_K1(1);
 8003fde:	2001      	movs	r0, #1
 8003fe0:	f7ff fda8 	bl	8003b34 <Set_Amp_Factor_K1>
			Set_Amp_Factor_K2(2);
 8003fe4:	2002      	movs	r0, #2
 8003fe6:	f7ff fe11 	bl	8003c0c <Set_Amp_Factor_K2>
			break;
 8003fea:	e022      	b.n	8004032 <Manual_settings+0xca>

		case 4: //K1=100 K2=1
			Set_Amp_Factor_K1(2);
 8003fec:	2002      	movs	r0, #2
 8003fee:	f7ff fda1 	bl	8003b34 <Set_Amp_Factor_K1>
			Set_Amp_Factor_K2(0);
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	f7ff fe0a 	bl	8003c0c <Set_Amp_Factor_K2>
			break;
 8003ff8:	e01b      	b.n	8004032 <Manual_settings+0xca>

		case 5: //K1=100 K2=2
			Set_Amp_Factor_K1(2);
 8003ffa:	2002      	movs	r0, #2
 8003ffc:	f7ff fd9a 	bl	8003b34 <Set_Amp_Factor_K1>
			Set_Amp_Factor_K2(1);
 8004000:	2001      	movs	r0, #1
 8004002:	f7ff fe03 	bl	8003c0c <Set_Amp_Factor_K2>
			break;
 8004006:	e014      	b.n	8004032 <Manual_settings+0xca>

		case 6: //K1=100 K2=4
			Set_Amp_Factor_K1(2);
 8004008:	2002      	movs	r0, #2
 800400a:	f7ff fd93 	bl	8003b34 <Set_Amp_Factor_K1>
			Set_Amp_Factor_K2(2);
 800400e:	2002      	movs	r0, #2
 8004010:	f7ff fdfc 	bl	8003c0c <Set_Amp_Factor_K2>
			break;
 8004014:	e00d      	b.n	8004032 <Manual_settings+0xca>

		case 7: //K1=1000 K2=2048
			Set_Amp_Factor_K1(3);
 8004016:	2003      	movs	r0, #3
 8004018:	f7ff fd8c 	bl	8003b34 <Set_Amp_Factor_K1>
			Set_Amp_Factor_K2(11);
 800401c:	200b      	movs	r0, #11
 800401e:	f7ff fdf5 	bl	8003c0c <Set_Amp_Factor_K2>
			break;
 8004022:	e006      	b.n	8004032 <Manual_settings+0xca>

		default:
			Error_Handler();
 8004024:	f240 1153 	movw	r1, #339	; 0x153
 8004028:	481b      	ldr	r0, [pc, #108]	; (8004098 <Manual_settings+0x130>)
 800402a:	f7ff fc3b 	bl	80038a4 <_Error_Handler>
			return ERROR;
 800402e:	2300      	movs	r3, #0
 8004030:	e02e      	b.n	8004090 <Manual_settings+0x128>
	}

	switch(namber_settings_Fcut){
 8004032:	7bbb      	ldrb	r3, [r7, #14]
 8004034:	2b03      	cmp	r3, #3
 8004036:	d823      	bhi.n	8004080 <Manual_settings+0x118>
 8004038:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <Manual_settings+0xd8>)
 800403a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403e:	bf00      	nop
 8004040:	08004051 	.word	0x08004051
 8004044:	0800405d 	.word	0x0800405d
 8004048:	08004069 	.word	0x08004069
 800404c:	08004075 	.word	0x08004075

		case 0: //Fcut=10
			Set_Ficlk_and_F_SAx(1, timer_numberr);
 8004050:	79bb      	ldrb	r3, [r7, #6]
 8004052:	4619      	mov	r1, r3
 8004054:	2001      	movs	r0, #1
 8004056:	f7ff fca9 	bl	80039ac <Set_Ficlk_and_F_SAx>
			break;
 800405a:	e018      	b.n	800408e <Manual_settings+0x126>

		case 1: //Fcut=300
			Set_Ficlk_and_F_SAx(30, timer_numberr);
 800405c:	79bb      	ldrb	r3, [r7, #6]
 800405e:	4619      	mov	r1, r3
 8004060:	201e      	movs	r0, #30
 8004062:	f7ff fca3 	bl	80039ac <Set_Ficlk_and_F_SAx>
			break;
 8004066:	e012      	b.n	800408e <Manual_settings+0x126>

		case 2: //Fcut=700
			Set_Ficlk_and_F_SAx(70, timer_numberr);
 8004068:	79bb      	ldrb	r3, [r7, #6]
 800406a:	4619      	mov	r1, r3
 800406c:	2046      	movs	r0, #70	; 0x46
 800406e:	f7ff fc9d 	bl	80039ac <Set_Ficlk_and_F_SAx>
			break;
 8004072:	e00c      	b.n	800408e <Manual_settings+0x126>

		case 3: ////Fcut=20
			Set_Ficlk_and_F_SAx(2, timer_numberr);
 8004074:	79bb      	ldrb	r3, [r7, #6]
 8004076:	4619      	mov	r1, r3
 8004078:	2002      	movs	r0, #2
 800407a:	f7ff fc97 	bl	80039ac <Set_Ficlk_and_F_SAx>
			break;
 800407e:	e006      	b.n	800408e <Manual_settings+0x126>

		default:
			Error_Handler();
 8004080:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8004084:	4804      	ldr	r0, [pc, #16]	; (8004098 <Manual_settings+0x130>)
 8004086:	f7ff fc0d 	bl	80038a4 <_Error_Handler>
			return ERROR;
 800408a:	2300      	movs	r3, #0
 800408c:	e000      	b.n	8004090 <Manual_settings+0x128>
	}

	return SUCCESS;
 800408e:	2301      	movs	r3, #1
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	080063e4 	.word	0x080063e4

0800409c <LL_I2C_IsActiveFlag_TXE>:
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	bf0c      	ite	eq
 80040b0:	2301      	moveq	r3, #1
 80040b2:	2300      	movne	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <LL_I2C_IsActiveFlag_RXNE>:
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f003 0304 	and.w	r3, r3, #4
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	bf0c      	ite	eq
 80040d6:	2301      	moveq	r3, #1
 80040d8:	2300      	movne	r3, #0
 80040da:	b2db      	uxtb	r3, r3
}
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <LL_I2C_IsActiveFlag_STOP>:
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	bf0c      	ite	eq
 80040fc:	2301      	moveq	r3, #1
 80040fe:	2300      	movne	r3, #0
 8004100:	b2db      	uxtb	r3, r3
}
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <LL_I2C_IsActiveFlag_TC>:
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411e:	2b40      	cmp	r3, #64	; 0x40
 8004120:	bf0c      	ite	eq
 8004122:	2301      	moveq	r3, #1
 8004124:	2300      	movne	r3, #0
 8004126:	b2db      	uxtb	r3, r3
}
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <LL_I2C_IsActiveFlag_BUSY>:
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004148:	bf0c      	ite	eq
 800414a:	2301      	moveq	r3, #1
 800414c:	2300      	movne	r3, #0
 800414e:	b2db      	uxtb	r3, r3
}
 8004150:	4618      	mov	r0, r3
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <LL_I2C_ClearFlag_STOP>:
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	f043 0220 	orr.w	r2, r3, #32
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	61da      	str	r2, [r3, #28]
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	0d5b      	lsrs	r3, r3, #21
 8004192:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <LL_I2C_HandleTransfer+0x48>)
 8004198:	430b      	orrs	r3, r1
 800419a:	43db      	mvns	r3, r3
 800419c:	401a      	ands	r2, r3
 800419e:	68b9      	ldr	r1, [r7, #8]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4319      	orrs	r1, r3
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	041b      	lsls	r3, r3, #16
 80041a8:	4319      	orrs	r1, r3
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	4319      	orrs	r1, r3
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	430b      	orrs	r3, r1
 80041b2:	431a      	orrs	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80041b8:	bf00      	nop
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	03ff7bff 	.word	0x03ff7bff

080041c8 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	b2db      	uxtb	r3, r3
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	460b      	mov	r3, r1
 80041ec:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80041ee:	78fa      	ldrb	r2, [r7, #3]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <I2C_Read_addr_a_module>:
  * @param  namber_value
  * @retval An ErrorStatus enumeration
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
uint8_t I2C_Read_addr_a_module(I2C_TypeDef *I2Cx,uint32_t SlaveAddr){
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af02      	add	r7, sp, #8
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]

	uint8_t address_module;

	SlaveAddr=SlaveAddr<<1;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	603b      	str	r3, [r7, #0]
	
	while(LL_I2C_IsActiveFlag_BUSY(I2Cx)==SET); 
 8004210:	bf00      	nop
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff ff8e 	bl	8004134 <LL_I2C_IsActiveFlag_BUSY>
 8004218:	4603      	mov	r3, r0
 800421a:	2b01      	cmp	r3, #1
 800421c:	d0f9      	beq.n	8004212 <I2C_Read_addr_a_module+0x12>

	LL_I2C_HandleTransfer(I2Cx, SlaveAddr,LL_I2C_ADDRSLAVE_7BIT, 1,LL_I2C_MODE_SOFTEND,LL_I2C_GENERATE_START_WRITE ); //LL_I2C_GENERATE_START_READ
 800421e:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <I2C_Read_addr_a_module+0xb4>)
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	2300      	movs	r3, #0
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	2301      	movs	r3, #1
 8004228:	2200      	movs	r2, #0
 800422a:	6839      	ldr	r1, [r7, #0]
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff ffa5 	bl	800417c <LL_I2C_HandleTransfer>
	while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);
 8004232:	bf00      	nop
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7ff ff31 	bl	800409c <LL_I2C_IsActiveFlag_TXE>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f9      	beq.n	8004234 <I2C_Read_addr_a_module+0x34>


	LL_I2C_TransmitData8(I2Cx, 0x00);
 8004240:	2100      	movs	r1, #0
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7ff ffcd 	bl	80041e2 <LL_I2C_TransmitData8>
	while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);
 8004248:	bf00      	nop
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff ff26 	bl	800409c <LL_I2C_IsActiveFlag_TXE>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f9      	beq.n	800424a <I2C_Read_addr_a_module+0x4a>
	while(LL_I2C_IsActiveFlag_TC(I2Cx)==RESET);
 8004256:	bf00      	nop
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7ff ff58 	bl	800410e <LL_I2C_IsActiveFlag_TC>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0f9      	beq.n	8004258 <I2C_Read_addr_a_module+0x58>

	LL_I2C_HandleTransfer(I2Cx, SlaveAddr,LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_RESTART_7BIT_READ); //LL_I2C_MODE_SOFTEND
 8004264:	4b14      	ldr	r3, [pc, #80]	; (80042b8 <I2C_Read_addr_a_module+0xb8>)
 8004266:	9301      	str	r3, [sp, #4]
 8004268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	2301      	movs	r3, #1
 8004270:	2200      	movs	r2, #0
 8004272:	6839      	ldr	r1, [r7, #0]
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7ff ff81 	bl	800417c <LL_I2C_HandleTransfer>

	while(LL_I2C_IsActiveFlag_STOP(I2Cx)==RESET);
 800427a:	bf00      	nop
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7ff ff33 	bl	80040e8 <LL_I2C_IsActiveFlag_STOP>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0f9      	beq.n	800427c <I2C_Read_addr_a_module+0x7c>
	while(LL_I2C_IsActiveFlag_RXNE(I2Cx)==RESET);
 8004288:	bf00      	nop
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7ff ff19 	bl	80040c2 <LL_I2C_IsActiveFlag_RXNE>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f9      	beq.n	800428a <I2C_Read_addr_a_module+0x8a>

	address_module=(0x1F & (LL_I2C_ReceiveData8(I2Cx))); //0x1F & - because address contain only 5 bits (xxxAAAAA)
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff ff96 	bl	80041c8 <LL_I2C_ReceiveData8>
 800429c:	4603      	mov	r3, r0
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	73fb      	strb	r3, [r7, #15]

	LL_I2C_ClearFlag_STOP(I2Cx);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff ff59 	bl	800415c <LL_I2C_ClearFlag_STOP>

#ifdef DEBUGprintf
			printf("Address Module=%d \r\n", address_module);
#endif

	return address_module;
 80042aa:	7bfb      	ldrb	r3, [r7, #15]

}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	80002000 	.word	0x80002000
 80042b8:	80002400 	.word	0x80002400

080042bc <LL_IWDG_ReloadCounter>:
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDG->KR, LL_IWDG_KEY_RELOAD);
 80042c4:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <LL_IWDG_ReloadCounter+0x1c>)
 80042c6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80042ca:	601a      	str	r2, [r3, #0]
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	40003000 	.word	0x40003000

080042dc <LL_GPIO_IsInputPinSet>:
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691a      	ldr	r2, [r3, #16]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	401a      	ands	r2, r3
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	bf0c      	ite	eq
 80042f4:	2301      	moveq	r3, #1
 80042f6:	2300      	movne	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <LL_GPIO_SetOutputPin>:
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	619a      	str	r2, [r3, #24]
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <LL_GPIO_ResetOutputPin>:
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	695a      	ldr	r2, [r3, #20]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	405a      	eors	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	615a      	str	r2, [r3, #20]
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <main>:
_UART_BUF uart1_buf, *UART1_BUF_ptr=&uart1_buf;

_ADC_PARAMETERS adc_param, *ADC_PARAM_ptr=&adc_param;


int main(void){
 8004360:	b5b0      	push	{r4, r5, r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af02      	add	r7, sp, #8

	uint8_t ADC_data_transmit[4];

	int16_t RAW_DATA_16_ADC = 0;
 8004366:	2300      	movs	r3, #0
 8004368:	81fb      	strh	r3, [r7, #14]
	int32_t RAW_DATA_24_ADC = 0;
 800436a:	2300      	movs	r3, #0
 800436c:	60bb      	str	r3, [r7, #8]
	
	//uint32_t RAW_DATA_24_ADC_unsigned = 0;

	LL_Init();
 800436e:	f7fe fe1d 	bl	8002fac <LL_Init>
	SystemClock_Config(); //Setup system clock at 80 MHz
 8004372:	f7fe fe7d 	bl	8003070 <SystemClock_Config>
	//LL_RCC_GetSystemClocksFreq(CHECK_RCC_CLOCKS); // Only for check setup clock Not need use in release
	printf("Hello human. I am Analog module.\r\n");
 8004376:	489c      	ldr	r0, [pc, #624]	; (80045e8 <main+0x288>)
 8004378:	f001 f914 	bl	80055a4 <puts>
	printf("Start setup periphery STM32L452.....\r\n");
 800437c:	489b      	ldr	r0, [pc, #620]	; (80045ec <main+0x28c>)
 800437e:	f001 f911 	bl	80055a4 <puts>
	SetupLED();
 8004382:	f7fe fee3 	bl	800314c <SetupLED>
	SetupGPIO();
 8004386:	f7fe ff03 	bl	8003190 <SetupGPIO>
	USART1_Init();
 800438a:	f7fe ffed 	bl	8003368 <USART1_Init>
	SPI2_Init();
 800438e:	f7ff f851 	bl	8003434 <SPI2_Init>
	I2C1_Init();
 8004392:	f7ff f8b5 	bl	8003500 <I2C1_Init>
	PWM_Init(PWM_TIM2_CH2_PA1); //PWM_TIM3_CH1_PA6
 8004396:	2000      	movs	r0, #0
 8004398:	f7ff f900 	bl	800359c <PWM_Init>
	SetupInterrupt();
 800439c:	f7ff f9b2 	bl	8003704 <SetupInterrupt>
	IWDG_Init();
 80043a0:	f7ff fa5c 	bl	800385c <IWDG_Init>
	printf("Finish setup periphery. Success! \r\n");
 80043a4:	4892      	ldr	r0, [pc, #584]	; (80045f0 <main+0x290>)
 80043a6:	f001 f8fd 	bl	80055a4 <puts>
	
	//Default configuration board;
	PB14_STOP_ADC_Set(); 
 80043aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80043ae:	4891      	ldr	r0, [pc, #580]	; (80045f4 <main+0x294>)
 80043b0:	f7ff ffa9 	bl	8004306 <LL_GPIO_SetOutputPin>
	PC7_MCLK_Reset();
 80043b4:	2180      	movs	r1, #128	; 0x80
 80043b6:	4890      	ldr	r0, [pc, #576]	; (80045f8 <main+0x298>)
 80043b8:	f7ff ffb3 	bl	8004322 <LL_GPIO_ResetOutputPin>
    ADC_PARAM_ptr->ADC_DRDY_flag = 0;
 80043bc:	4b8f      	ldr	r3, [pc, #572]	; (80045fc <main+0x29c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2200      	movs	r2, #0
 80043c2:	701a      	strb	r2, [r3, #0]
    ADC_PARAM_ptr->DRDY_GOOD_flag = 0;
 80043c4:	4b8d      	ldr	r3, [pc, #564]	; (80045fc <main+0x29c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2200      	movs	r2, #0
 80043ca:	705a      	strb	r2, [r3, #1]
    ADC_PARAM_ptr->PULSE_flag = 0;
 80043cc:	4b8b      	ldr	r3, [pc, #556]	; (80045fc <main+0x29c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2200      	movs	r2, #0
 80043d2:	709a      	strb	r2, [r3, #2]
    ADC_PARAM_ptr->Count_MCLK = 0;
 80043d4:	4b89      	ldr	r3, [pc, #548]	; (80045fc <main+0x29c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2200      	movs	r2, #0
 80043da:	70da      	strb	r2, [r3, #3]

    UART1_BUF_ptr->UART_rec_buf_len = 0; 
 80043dc:	4b88      	ldr	r3, [pc, #544]	; (8004600 <main+0x2a0>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2200      	movs	r2, #0
 80043e2:	711a      	strb	r2, [r3, #4]
    UART1_BUF_ptr->recive_data_permit_flag = 0; 
 80043e4:	4b86      	ldr	r3, [pc, #536]	; (8004600 <main+0x2a0>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2200      	movs	r2, #0
 80043ea:	715a      	strb	r2, [r3, #5]
    UART1_BUF_ptr->received_command_flag = 0;
 80043ec:	4b84      	ldr	r3, [pc, #528]	; (8004600 <main+0x2a0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2200      	movs	r2, #0
 80043f2:	719a      	strb	r2, [r3, #6]
    UART1_BUF_ptr->ADC_data_request_flag = 0;
 80043f4:	4b82      	ldr	r3, [pc, #520]	; (8004600 <main+0x2a0>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2200      	movs	r2, #0
 80043fa:	71da      	strb	r2, [r3, #7]

    Set_Ficlk_and_F_SAx(1,PWM_TIM2_CH2_PA1);
 80043fc:	2100      	movs	r1, #0
 80043fe:	2001      	movs	r0, #1
 8004400:	f7ff fad4 	bl	80039ac <Set_Ficlk_and_F_SAx>
    Set_Amp_Factor_K1(0);
 8004404:	2000      	movs	r0, #0
 8004406:	f7ff fb95 	bl	8003b34 <Set_Amp_Factor_K1>
    Set_Amp_Factor_K2(0);
 800440a:	2000      	movs	r0, #0
 800440c:	f7ff fbfe 	bl	8003c0c <Set_Amp_Factor_K2>

    CONF_MOD_ptr->Fcut_value = 1;
 8004410:	4b7c      	ldr	r3, [pc, #496]	; (8004604 <main+0x2a4>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2201      	movs	r2, #1
 8004416:	719a      	strb	r2, [r3, #6]
    CONF_MOD_ptr->amp_factor_K1 = 0;
 8004418:	4b7a      	ldr	r3, [pc, #488]	; (8004604 <main+0x2a4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2200      	movs	r2, #0
 800441e:	70da      	strb	r2, [r3, #3]
    CONF_MOD_ptr->amp_factor_K2 = 0;
 8004420:	4b78      	ldr	r3, [pc, #480]	; (8004604 <main+0x2a4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2200      	movs	r2, #0
 8004426:	711a      	strb	r2, [r3, #4]

    //TODO Read settings of module from flash.  
   	CONF_MOD_ptr->format_data_ADC_16b_24b = 0;
 8004428:	4b76      	ldr	r3, [pc, #472]	; (8004604 <main+0x2a4>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2200      	movs	r2, #0
 800442e:	725a      	strb	r2, [r3, #9]

    printf("Default settings. Success! \r\n");
 8004430:	4875      	ldr	r0, [pc, #468]	; (8004608 <main+0x2a8>)
 8004432:	f001 f8b7 	bl	80055a4 <puts>

    LL_IWDG_ReloadCounter(IWDG);
 8004436:	4875      	ldr	r0, [pc, #468]	; (800460c <main+0x2ac>)
 8004438:	f7ff ff40 	bl	80042bc <LL_IWDG_ReloadCounter>

	LED_Yellow_HL1_OFF();
 800443c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004440:	486d      	ldr	r0, [pc, #436]	; (80045f8 <main+0x298>)
 8004442:	f7ff ff60 	bl	8004306 <LL_GPIO_SetOutputPin>
	LED_Green_HL2_OFF();
 8004446:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800444a:	486b      	ldr	r0, [pc, #428]	; (80045f8 <main+0x298>)
 800444c:	f7ff ff5b 	bl	8004306 <LL_GPIO_SetOutputPin>

	CONF_MOD_ptr->addr_module = I2C_Read_addr_a_module(I2C1, ADDR_I2C_TCA9554PWR);	
 8004450:	4b6c      	ldr	r3, [pc, #432]	; (8004604 <main+0x2a4>)
 8004452:	681c      	ldr	r4, [r3, #0]
 8004454:	2120      	movs	r1, #32
 8004456:	486e      	ldr	r0, [pc, #440]	; (8004610 <main+0x2b0>)
 8004458:	f7ff fed2 	bl	8004200 <I2C_Read_addr_a_module>
 800445c:	4603      	mov	r3, r0
 800445e:	7023      	strb	r3, [r4, #0]
	
	// Manual settings if jumper is set
	if( LL_GPIO_IsInputPinSet(GPIOD, LL_GPIO_PIN_2) == RESET ){ //check jumper
 8004460:	2104      	movs	r1, #4
 8004462:	486c      	ldr	r0, [pc, #432]	; (8004614 <main+0x2b4>)
 8004464:	f7ff ff3a 	bl	80042dc <LL_GPIO_IsInputPinSet>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10b      	bne.n	8004486 <main+0x126>
		Manual_settings(CONF_MOD_ptr->addr_module, PWM_TIM2_CH2_PA1);
 800446e:	4b65      	ldr	r3, [pc, #404]	; (8004604 <main+0x2a4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2100      	movs	r1, #0
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff fd76 	bl	8003f68 <Manual_settings>
		CONF_MOD_ptr->addr_module = 0x01;
 800447c:	4b61      	ldr	r3, [pc, #388]	; (8004604 <main+0x2a4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2201      	movs	r2, #1
 8004482:	701a      	strb	r2, [r3, #0]
 8004484:	e001      	b.n	800448a <main+0x12a>
	}else{
		Set_Output_mode_PD2();
 8004486:	f7fe ff53 	bl	8003330 <Set_Output_mode_PD2>
	} 

	CONF_MOD_ptr->addr_module_req_data_adc = (CONF_MOD_ptr->addr_module << 3)| 0x01;
 800448a:	4b5e      	ldr	r3, [pc, #376]	; (8004604 <main+0x2a4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a5d      	ldr	r2, [pc, #372]	; (8004604 <main+0x2a4>)
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	7812      	ldrb	r2, [r2, #0]
 8004494:	00d2      	lsls	r2, r2, #3
 8004496:	b252      	sxtb	r2, r2
 8004498:	f042 0201 	orr.w	r2, r2, #1
 800449c:	b252      	sxtb	r2, r2
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	705a      	strb	r2, [r3, #1]
	CONF_MOD_ptr->status_module = 0x01;
 80044a2:	4b58      	ldr	r3, [pc, #352]	; (8004604 <main+0x2a4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2201      	movs	r2, #1
 80044a8:	71da      	strb	r2, [r3, #7]

	LED_Green_HL3_ON();
 80044aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044ae:	4852      	ldr	r0, [pc, #328]	; (80045f8 <main+0x298>)
 80044b0:	f7ff ff37 	bl	8004322 <LL_GPIO_ResetOutputPin>
	}*/
/***********************************************************/

	while(1){

		LL_IWDG_ReloadCounter(IWDG);
 80044b4:	4855      	ldr	r0, [pc, #340]	; (800460c <main+0x2ac>)
 80044b6:	f7ff ff01 	bl	80042bc <LL_IWDG_ReloadCounter>
		if(CONF_MOD_ptr->counter_toggle_led_hl3 == 128 ){
 80044ba:	4b52      	ldr	r3, [pc, #328]	; (8004604 <main+0x2a4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	7a1b      	ldrb	r3, [r3, #8]
 80044c0:	2b80      	cmp	r3, #128	; 0x80
 80044c2:	d108      	bne.n	80044d6 <main+0x176>
			CONF_MOD_ptr->counter_toggle_led_hl3=0;
 80044c4:	4b4f      	ldr	r3, [pc, #316]	; (8004604 <main+0x2a4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2200      	movs	r2, #0
 80044ca:	721a      	strb	r2, [r3, #8]
			LED_Green_HL3_TOGGLE();
 80044cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044d0:	4849      	ldr	r0, [pc, #292]	; (80045f8 <main+0x298>)
 80044d2:	f7ff ff34 	bl	800433e <LL_GPIO_TogglePin>
		}

		//Read ADC if we got ADC interrupt 
		if(CONF_MOD_ptr->start_stop_ADC == 0x02 && ADC_PARAM_ptr->ADC_DRDY_flag==1 ){
 80044d6:	4b4b      	ldr	r3, [pc, #300]	; (8004604 <main+0x2a4>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	789b      	ldrb	r3, [r3, #2]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	f040 80fd 	bne.w	80046dc <main+0x37c>
 80044e2:	4b46      	ldr	r3, [pc, #280]	; (80045fc <main+0x29c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	f040 80f7 	bne.w	80046dc <main+0x37c>

		//	PD2_Set(); // For to measure processing time

			ADC_PARAM_ptr->ADC_DRDY_flag=0;
 80044ee:	4b43      	ldr	r3, [pc, #268]	; (80045fc <main+0x29c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2200      	movs	r2, #0
 80044f4:	701a      	strb	r2, [r3, #0]
			RAW_DATA_24_ADC = 0;
 80044f6:	2300      	movs	r3, #0
 80044f8:	60bb      	str	r3, [r7, #8]
			ADC_data_transmit[0] = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	713b      	strb	r3, [r7, #4]
			//RAW_DATA_24_ADC_unsigned = 0;

			RAW_DATA_24_ADC = SPI_Get_RAW_data_ADC7767( SPI2 ); 
 80044fe:	4846      	ldr	r0, [pc, #280]	; (8004618 <main+0x2b8>)
 8004500:	f000 f98a 	bl	8004818 <SPI_Get_RAW_data_ADC7767>
 8004504:	60b8      	str	r0, [r7, #8]
			//RAW_DATA_24_ADC_unsigned = SPI_Get_RAW_data_ADC7767_unsigned ( SPI2 );

			if(RAW_DATA_24_ADC == -1){ //SPI hardware problem
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450c:	d108      	bne.n	8004520 <main+0x1c0>

				RAW_DATA_16_ADC = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	81fb      	strh	r3, [r7, #14]
				RAW_DATA_24_ADC = 0;
 8004512:	2300      	movs	r3, #0
 8004514:	60bb      	str	r3, [r7, #8]
				CONF_MOD_ptr->status_module = 0x05;
 8004516:	4b3b      	ldr	r3, [pc, #236]	; (8004604 <main+0x2a4>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2205      	movs	r2, #5
 800451c:	71da      	strb	r2, [r3, #7]
 800451e:	e0b0      	b.n	8004682 <main+0x322>

			}else{ //No Error
			//	LL_IWDG_ReloadCounter(IWDG);
				LL_IWDG_ReloadCounter(IWDG);
 8004520:	483a      	ldr	r0, [pc, #232]	; (800460c <main+0x2ac>)
 8004522:	f7ff fecb 	bl	80042bc <LL_IWDG_ReloadCounter>
				if(CONF_MOD_ptr->format_data_ADC_16b_24b == 0){ //16b format data ADC
 8004526:	4b37      	ldr	r3, [pc, #220]	; (8004604 <main+0x2a4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	7a5b      	ldrb	r3, [r3, #9]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d109      	bne.n	8004544 <main+0x1e4>
					RAW_DATA_16_ADC = Math_convert_RAW_data_ADC_24b_to_16b( RAW_DATA_24_ADC, 5.0, CONF_MOD_ptr);
 8004530:	4b34      	ldr	r3, [pc, #208]	; (8004604 <main+0x2a4>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4619      	mov	r1, r3
 8004536:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800453a:	68b8      	ldr	r0, [r7, #8]
 800453c:	f000 f9f0 	bl	8004920 <Math_convert_RAW_data_ADC_24b_to_16b>
 8004540:	4603      	mov	r3, r0
 8004542:	81fb      	strh	r3, [r7, #14]
				}

				if( VALUE_COMP1() == 1 && VALUE_COMP2() == 0 && VALUE_COMP4() == 0){ 
 8004544:	2101      	movs	r1, #1
 8004546:	482c      	ldr	r0, [pc, #176]	; (80045f8 <main+0x298>)
 8004548:	f7ff fec8 	bl	80042dc <LL_GPIO_IsInputPinSet>
 800454c:	4603      	mov	r3, r0
 800454e:	2b01      	cmp	r3, #1
 8004550:	d115      	bne.n	800457e <main+0x21e>
 8004552:	2102      	movs	r1, #2
 8004554:	4828      	ldr	r0, [pc, #160]	; (80045f8 <main+0x298>)
 8004556:	f7ff fec1 	bl	80042dc <LL_GPIO_IsInputPinSet>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10e      	bne.n	800457e <main+0x21e>
 8004560:	2104      	movs	r1, #4
 8004562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004566:	f7ff feb9 	bl	80042dc <LL_GPIO_IsInputPinSet>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d106      	bne.n	800457e <main+0x21e>
					ADC_data_transmit[0] = 0x04;  //Error  COMP2
 8004570:	2304      	movs	r3, #4
 8004572:	713b      	strb	r3, [r7, #4]
					CONF_MOD_ptr->status_module = 0x15;
 8004574:	4b23      	ldr	r3, [pc, #140]	; (8004604 <main+0x2a4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2215      	movs	r2, #21
 800457a:	71da      	strb	r2, [r3, #7]
 800457c:	e050      	b.n	8004620 <main+0x2c0>

				} else if( VALUE_COMP1() == 0 && VALUE_COMP2() ==1 && VALUE_COMP4() == 0){  
 800457e:	2101      	movs	r1, #1
 8004580:	481d      	ldr	r0, [pc, #116]	; (80045f8 <main+0x298>)
 8004582:	f7ff feab 	bl	80042dc <LL_GPIO_IsInputPinSet>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d115      	bne.n	80045b8 <main+0x258>
 800458c:	2102      	movs	r1, #2
 800458e:	481a      	ldr	r0, [pc, #104]	; (80045f8 <main+0x298>)
 8004590:	f7ff fea4 	bl	80042dc <LL_GPIO_IsInputPinSet>
 8004594:	4603      	mov	r3, r0
 8004596:	2b01      	cmp	r3, #1
 8004598:	d10e      	bne.n	80045b8 <main+0x258>
 800459a:	2104      	movs	r1, #4
 800459c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045a0:	f7ff fe9c 	bl	80042dc <LL_GPIO_IsInputPinSet>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <main+0x258>
					ADC_data_transmit[0] = 0x02; //Error  COMP1
 80045aa:	2302      	movs	r3, #2
 80045ac:	713b      	strb	r3, [r7, #4]
					CONF_MOD_ptr->status_module = 0x15;
 80045ae:	4b15      	ldr	r3, [pc, #84]	; (8004604 <main+0x2a4>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2215      	movs	r2, #21
 80045b4:	71da      	strb	r2, [r3, #7]
 80045b6:	e033      	b.n	8004620 <main+0x2c0>

				} else if( VALUE_COMP4() == 1 || CONF_MOD_ptr->saturation_math_COMP4 == 1 ){ 
 80045b8:	2104      	movs	r1, #4
 80045ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045be:	f7ff fe8d 	bl	80042dc <LL_GPIO_IsInputPinSet>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d004      	beq.n	80045d2 <main+0x272>
 80045c8:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <main+0x2a4>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	795b      	ldrb	r3, [r3, #5]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d124      	bne.n	800461c <main+0x2bc>
					ADC_data_transmit[0] =  0x06; //Error  COMP4
 80045d2:	2306      	movs	r3, #6
 80045d4:	713b      	strb	r3, [r7, #4]
					CONF_MOD_ptr->status_module = 0x15;
 80045d6:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <main+0x2a4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2215      	movs	r2, #21
 80045dc:	71da      	strb	r2, [r3, #7]
					CONF_MOD_ptr->saturation_math_COMP4 = 0;
 80045de:	4b09      	ldr	r3, [pc, #36]	; (8004604 <main+0x2a4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2200      	movs	r2, #0
 80045e4:	715a      	strb	r2, [r3, #5]
 80045e6:	e01b      	b.n	8004620 <main+0x2c0>
 80045e8:	080063fc 	.word	0x080063fc
 80045ec:	08006420 	.word	0x08006420
 80045f0:	08006448 	.word	0x08006448
 80045f4:	48000400 	.word	0x48000400
 80045f8:	48000800 	.word	0x48000800
 80045fc:	20000008 	.word	0x20000008
 8004600:	20000004 	.word	0x20000004
 8004604:	20000000 	.word	0x20000000
 8004608:	0800646c 	.word	0x0800646c
 800460c:	40003000 	.word	0x40003000
 8004610:	40005400 	.word	0x40005400
 8004614:	48000c00 	.word	0x48000c00
 8004618:	40003800 	.word	0x40003800

				} else {
					ADC_data_transmit[0] = 0x01; // No Error
 800461c:	2301      	movs	r3, #1
 800461e:	713b      	strb	r3, [r7, #4]
				} 
	
				if( ADC_PARAM_ptr->DRDY_GOOD_flag != 1 ){ // do not got sync signal
 8004620:	4b4a      	ldr	r3, [pc, #296]	; (800474c <main+0x3ec>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	785b      	ldrb	r3, [r3, #1]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d02b      	beq.n	8004682 <main+0x322>

					Error_Handler();
 800462a:	21b1      	movs	r1, #177	; 0xb1
 800462c:	4848      	ldr	r0, [pc, #288]	; (8004750 <main+0x3f0>)
 800462e:	f7ff f939 	bl	80038a4 <_Error_Handler>

					while(ADC_PARAM_ptr->PULSE_flag == SET);
 8004632:	bf00      	nop
 8004634:	4b45      	ldr	r3, [pc, #276]	; (800474c <main+0x3ec>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	789b      	ldrb	r3, [r3, #2]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d0fa      	beq.n	8004634 <main+0x2d4>

					ADC_PARAM_ptr->PULSE_flag = 0;
 800463e:	4b43      	ldr	r3, [pc, #268]	; (800474c <main+0x3ec>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2200      	movs	r2, #0
 8004644:	709a      	strb	r2, [r3, #2]
					CONF_MOD_ptr->status_module = 0x15;
 8004646:	4b43      	ldr	r3, [pc, #268]	; (8004754 <main+0x3f4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2215      	movs	r2, #21
 800464c:	71da      	strb	r2, [r3, #7]

					if(ADC_PARAM_ptr->Count_MCLK  == 8 ){ // counter in interrupt
 800464e:	4b3f      	ldr	r3, [pc, #252]	; (800474c <main+0x3ec>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	78db      	ldrb	r3, [r3, #3]
 8004654:	2b08      	cmp	r3, #8
 8004656:	d112      	bne.n	800467e <main+0x31e>
						Error_Handler();
 8004658:	21b9      	movs	r1, #185	; 0xb9
 800465a:	483d      	ldr	r0, [pc, #244]	; (8004750 <main+0x3f0>)
 800465c:	f7ff f922 	bl	80038a4 <_Error_Handler>
						LED_Yellow_HL1_ON();
 8004660:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004664:	483c      	ldr	r0, [pc, #240]	; (8004758 <main+0x3f8>)
 8004666:	f7ff fe5c 	bl	8004322 <LL_GPIO_ResetOutputPin>
						CONF_MOD_ptr->status_module = 0x1D;
 800466a:	4b3a      	ldr	r3, [pc, #232]	; (8004754 <main+0x3f4>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	221d      	movs	r2, #29
 8004670:	71da      	strb	r2, [r3, #7]
						ADC_PARAM_ptr->Count_MCLK = 0x00;
 8004672:	4b36      	ldr	r3, [pc, #216]	; (800474c <main+0x3ec>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2200      	movs	r2, #0
 8004678:	70da      	strb	r2, [r3, #3]
						RAW_DATA_16_ADC = 0;
 800467a:	2300      	movs	r3, #0
 800467c:	81fb      	strh	r3, [r7, #14]
					}

					ADC_data_transmit[0] = 0; //Set error flag in the parsel
 800467e:	2300      	movs	r3, #0
 8004680:	713b      	strb	r3, [r7, #4]
				}
			}

			ADC_data_transmit[0] =  ADC_data_transmit[0] | (CONF_MOD_ptr->addr_module << 3);
 8004682:	793b      	ldrb	r3, [r7, #4]
 8004684:	b25a      	sxtb	r2, r3
 8004686:	4b33      	ldr	r3, [pc, #204]	; (8004754 <main+0x3f4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	b25b      	sxtb	r3, r3
 8004690:	4313      	orrs	r3, r2
 8004692:	b25b      	sxtb	r3, r3
 8004694:	b2db      	uxtb	r3, r3
 8004696:	713b      	strb	r3, [r7, #4]

			if(CONF_MOD_ptr->format_data_ADC_16b_24b == 0){ //16b format data ADC
 8004698:	4b2e      	ldr	r3, [pc, #184]	; (8004754 <main+0x3f4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	7a5b      	ldrb	r3, [r3, #9]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10b      	bne.n	80046ba <main+0x35a>
				ADC_data_transmit[1] = 0x00;
 80046a2:	2300      	movs	r3, #0
 80046a4:	717b      	strb	r3, [r7, #5]
				ADC_data_transmit[2] = (uint8_t)(RAW_DATA_16_ADC>>8);
 80046a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80046aa:	121b      	asrs	r3, r3, #8
 80046ac:	b21b      	sxth	r3, r3
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	71bb      	strb	r3, [r7, #6]
				ADC_data_transmit[3] = (uint8_t)RAW_DATA_16_ADC;
 80046b2:	89fb      	ldrh	r3, [r7, #14]
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	71fb      	strb	r3, [r7, #7]
 80046b8:	e00a      	b.n	80046d0 <main+0x370>
			}else{
				ADC_data_transmit[1] = (uint8_t)(RAW_DATA_24_ADC>>16);//24b format data ADC
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	141b      	asrs	r3, r3, #16
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	717b      	strb	r3, [r7, #5]
				ADC_data_transmit[2] = (uint8_t)(RAW_DATA_24_ADC>>8);
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	121b      	asrs	r3, r3, #8
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	71bb      	strb	r3, [r7, #6]
				ADC_data_transmit[3] = (uint8_t)RAW_DATA_24_ADC;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	71fb      	strb	r3, [r7, #7]
			}

			CONF_MOD_ptr->counter_toggle_led_hl3++;
 80046d0:	4b20      	ldr	r3, [pc, #128]	; (8004754 <main+0x3f4>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	7a1a      	ldrb	r2, [r3, #8]
 80046d6:	3201      	adds	r2, #1
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	721a      	strb	r2, [r3, #8]

		//	PD2_Reset(); // For to measure processing time
		}

		if(UART1_BUF_ptr->received_command_flag == SET){ //Get Command
 80046dc:	4b1f      	ldr	r3, [pc, #124]	; (800475c <main+0x3fc>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	799b      	ldrb	r3, [r3, #6]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	f47f aee6 	bne.w	80044b4 <main+0x154>
			UART1_BUF_ptr->received_command_flag=RESET; //clear flag interrupt
 80046e8:	4b1c      	ldr	r3, [pc, #112]	; (800475c <main+0x3fc>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2200      	movs	r2, #0
 80046ee:	719a      	strb	r2, [r3, #6]
			UART1_BUF_ptr->UART_rec_buf_len=0;
 80046f0:	4b1a      	ldr	r3, [pc, #104]	; (800475c <main+0x3fc>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2200      	movs	r2, #0
 80046f6:	711a      	strb	r2, [r3, #4]

			LL_IWDG_ReloadCounter(IWDG);
 80046f8:	4819      	ldr	r0, [pc, #100]	; (8004760 <main+0x400>)
 80046fa:	f7ff fddf 	bl	80042bc <LL_IWDG_ReloadCounter>
			if(UART1_BUF_ptr->ADC_data_request_flag == SET){ //get request to sent data ADC
 80046fe:	4b17      	ldr	r3, [pc, #92]	; (800475c <main+0x3fc>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	79db      	ldrb	r3, [r3, #7]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d109      	bne.n	800471c <main+0x3bc>
				UART1_BUF_ptr->ADC_data_request_flag=0; //clear flag interrupt
 8004708:	4b14      	ldr	r3, [pc, #80]	; (800475c <main+0x3fc>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2200      	movs	r2, #0
 800470e:	71da      	strb	r2, [r3, #7]
				Data_transmite_UART_9B (ADC_data_transmit, USART1);
 8004710:	1d3b      	adds	r3, r7, #4
 8004712:	4914      	ldr	r1, [pc, #80]	; (8004764 <main+0x404>)
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fca5 	bl	8005064 <Data_transmite_UART_9B>
 800471a:	e6cb      	b.n	80044b4 <main+0x154>

 			} else { // parse command 
 				//LL_IWDG_ReloadCounter(IWDG);
 				Parser_command ( *UART1_BUF_ptr, CONF_MOD_ptr, ADC_PARAM_ptr, PWM_TIM2_CH2_PA1, USART1 );
 800471c:	4b0f      	ldr	r3, [pc, #60]	; (800475c <main+0x3fc>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a0c      	ldr	r2, [pc, #48]	; (8004754 <main+0x3f4>)
 8004722:	6811      	ldr	r1, [r2, #0]
 8004724:	4a09      	ldr	r2, [pc, #36]	; (800474c <main+0x3ec>)
 8004726:	6810      	ldr	r0, [r2, #0]
 8004728:	4a0e      	ldr	r2, [pc, #56]	; (8004764 <main+0x404>)
 800472a:	9201      	str	r2, [sp, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	9200      	str	r2, [sp, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	2500      	movs	r5, #0
 8004734:	4615      	mov	r5, r2
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2400      	movs	r4, #0
 800473a:	461c      	mov	r4, r3
 800473c:	4603      	mov	r3, r0
 800473e:	460a      	mov	r2, r1
 8004740:	4628      	mov	r0, r5
 8004742:	4621      	mov	r1, r4
 8004744:	f000 fd1c 	bl	8005180 <Parser_command>
		LL_IWDG_ReloadCounter(IWDG);
 8004748:	e6b4      	b.n	80044b4 <main+0x154>
 800474a:	bf00      	nop
 800474c:	20000008 	.word	0x20000008
 8004750:	0800648c 	.word	0x0800648c
 8004754:	20000000 	.word	0x20000000
 8004758:	48000800 	.word	0x48000800
 800475c:	20000004 	.word	0x20000004
 8004760:	40003000 	.word	0x40003000
 8004764:	40013800 	.word	0x40013800

08004768 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d101      	bne.n	80047a6 <LL_SPI_IsActiveFlag_TXE+0x18>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c4:	2b80      	cmp	r3, #128	; 0x80
 80047c6:	d101      	bne.n	80047cc <LL_SPI_IsActiveFlag_BSY+0x18>
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <LL_SPI_IsActiveFlag_BSY+0x1a>
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	b2db      	uxtb	r3, r3
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	330c      	adds	r3, #12
 8004804:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	78fa      	ldrb	r2, [r7, #3]
 800480a:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif
}
 800480c:	bf00      	nop
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <SPI_Get_RAW_data_ADC7767>:
/**
  * @brief  Get data ADC AD7767
  * @param  SPIx
  * @retval Data ADC 24 bits 
  */
int32_t SPI_Get_RAW_data_ADC7767 ( SPI_TypeDef *SPIx ){
 8004818:	b590      	push	{r4, r7, lr}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]

	uint32_t counter=0;
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]
	int32_t data_adc_raw=0;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]
	uint8_t adc_data_mas[3] = {0};
 8004828:	f107 0308 	add.w	r3, r7, #8
 800482c:	2100      	movs	r1, #0
 800482e:	460a      	mov	r2, r1
 8004830:	801a      	strh	r2, [r3, #0]
 8004832:	460a      	mov	r2, r1
 8004834:	709a      	strb	r2, [r3, #2]

	while(LL_SPI_IsActiveFlag_BSY(SPIx)==SET); //check that SPI not busy 
 8004836:	bf00      	nop
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7ff ffbb 	bl	80047b4 <LL_SPI_IsActiveFlag_BSY>
 800483e:	4603      	mov	r3, r0
 8004840:	2b01      	cmp	r3, #1
 8004842:	d0f9      	beq.n	8004838 <SPI_Get_RAW_data_ADC7767+0x20>

	for(uint8_t i=0; i<3; i++){
 8004844:	2300      	movs	r3, #0
 8004846:	74fb      	strb	r3, [r7, #19]
 8004848:	e050      	b.n	80048ec <SPI_Get_RAW_data_ADC7767+0xd4>

		counter=0;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]
		while(LL_SPI_IsActiveFlag_TXE(SPI2) == RESET){
 800484e:	e00b      	b.n	8004868 <SPI_Get_RAW_data_ADC7767+0x50>
			counter++;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	3301      	adds	r3, #1
 8004854:	617b      	str	r3, [r7, #20]
			if(counter==1000000){ //150ms
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	4a2e      	ldr	r2, [pc, #184]	; (8004914 <SPI_Get_RAW_data_ADC7767+0xfc>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d104      	bne.n	8004868 <SPI_Get_RAW_data_ADC7767+0x50>
				Error_Handler();
 800485e:	2123      	movs	r1, #35	; 0x23
 8004860:	482d      	ldr	r0, [pc, #180]	; (8004918 <SPI_Get_RAW_data_ADC7767+0x100>)
 8004862:	f7ff f81f 	bl	80038a4 <_Error_Handler>
				goto exit_error;
 8004866:	e04e      	b.n	8004906 <SPI_Get_RAW_data_ADC7767+0xee>
		while(LL_SPI_IsActiveFlag_TXE(SPI2) == RESET){
 8004868:	482c      	ldr	r0, [pc, #176]	; (800491c <SPI_Get_RAW_data_ADC7767+0x104>)
 800486a:	f7ff ff90 	bl	800478e <LL_SPI_IsActiveFlag_TXE>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0ed      	beq.n	8004850 <SPI_Get_RAW_data_ADC7767+0x38>
			}

		}

		LL_SPI_TransmitData8(SPIx, 0xAA);
 8004874:	21aa      	movs	r1, #170	; 0xaa
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff ffbc 	bl	80047f4 <LL_SPI_TransmitData8>

		counter=0;
 800487c:	2300      	movs	r3, #0
 800487e:	617b      	str	r3, [r7, #20]
		while(LL_SPI_IsActiveFlag_BSY(SPI2)==SET){
 8004880:	e00b      	b.n	800489a <SPI_Get_RAW_data_ADC7767+0x82>
			counter++;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	3301      	adds	r3, #1
 8004886:	617b      	str	r3, [r7, #20]
			if(counter==1000000){//150ms
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	4a22      	ldr	r2, [pc, #136]	; (8004914 <SPI_Get_RAW_data_ADC7767+0xfc>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d104      	bne.n	800489a <SPI_Get_RAW_data_ADC7767+0x82>
				Error_Handler();
 8004890:	212f      	movs	r1, #47	; 0x2f
 8004892:	4821      	ldr	r0, [pc, #132]	; (8004918 <SPI_Get_RAW_data_ADC7767+0x100>)
 8004894:	f7ff f806 	bl	80038a4 <_Error_Handler>
				goto exit_error;
 8004898:	e035      	b.n	8004906 <SPI_Get_RAW_data_ADC7767+0xee>
		while(LL_SPI_IsActiveFlag_BSY(SPI2)==SET){
 800489a:	4820      	ldr	r0, [pc, #128]	; (800491c <SPI_Get_RAW_data_ADC7767+0x104>)
 800489c:	f7ff ff8a 	bl	80047b4 <LL_SPI_IsActiveFlag_BSY>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d0ed      	beq.n	8004882 <SPI_Get_RAW_data_ADC7767+0x6a>
			}
		}

		counter=0;
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]
		while(LL_SPI_IsActiveFlag_RXNE(SPIx) == RESET){
 80048aa:	e00b      	b.n	80048c4 <SPI_Get_RAW_data_ADC7767+0xac>
			counter++;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	3301      	adds	r3, #1
 80048b0:	617b      	str	r3, [r7, #20]
			if(counter==1000000){ //150ms
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	4a17      	ldr	r2, [pc, #92]	; (8004914 <SPI_Get_RAW_data_ADC7767+0xfc>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d104      	bne.n	80048c4 <SPI_Get_RAW_data_ADC7767+0xac>
				Error_Handler();
 80048ba:	2138      	movs	r1, #56	; 0x38
 80048bc:	4816      	ldr	r0, [pc, #88]	; (8004918 <SPI_Get_RAW_data_ADC7767+0x100>)
 80048be:	f7fe fff1 	bl	80038a4 <_Error_Handler>
				goto exit_error;
 80048c2:	e020      	b.n	8004906 <SPI_Get_RAW_data_ADC7767+0xee>
		while(LL_SPI_IsActiveFlag_RXNE(SPIx) == RESET){
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff ff4f 	bl	8004768 <LL_SPI_IsActiveFlag_RXNE>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0ed      	beq.n	80048ac <SPI_Get_RAW_data_ADC7767+0x94>
			}

		}

		adc_data_mas[i] = LL_SPI_ReceiveData8(SPIx);
 80048d0:	7cfc      	ldrb	r4, [r7, #19]
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff ff81 	bl	80047da <LL_SPI_ReceiveData8>
 80048d8:	4603      	mov	r3, r0
 80048da:	461a      	mov	r2, r3
 80048dc:	f107 0318 	add.w	r3, r7, #24
 80048e0:	4423      	add	r3, r4
 80048e2:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(uint8_t i=0; i<3; i++){
 80048e6:	7cfb      	ldrb	r3, [r7, #19]
 80048e8:	3301      	adds	r3, #1
 80048ea:	74fb      	strb	r3, [r7, #19]
 80048ec:	7cfb      	ldrb	r3, [r7, #19]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d9ab      	bls.n	800484a <SPI_Get_RAW_data_ADC7767+0x32>
	}

	data_adc_raw = (adc_data_mas[0]<<16) | (adc_data_mas[1]<<8) | (adc_data_mas[2]);
 80048f2:	7a3b      	ldrb	r3, [r7, #8]
 80048f4:	041a      	lsls	r2, r3, #16
 80048f6:	7a7b      	ldrb	r3, [r7, #9]
 80048f8:	021b      	lsls	r3, r3, #8
 80048fa:	4313      	orrs	r3, r2
 80048fc:	7aba      	ldrb	r2, [r7, #10]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

	#ifdef DEBUGprintf
			printf("\r\nRAW_DATA_ADC7767_24b_HEX = 0x%.6lX\r\n",((unsigned long)data_adc_raw));
	#endif

	return data_adc_raw;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	e001      	b.n	800490a <SPI_Get_RAW_data_ADC7767+0xf2>
	exit_error:
	#ifdef DEBUGprintf
		printf("ERROR!Read ADC through SPI\r\n" );
	#endif

	return -1;
 8004906:	f04f 33ff 	mov.w	r3, #4294967295
}
 800490a:	4618      	mov	r0, r3
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	bd90      	pop	{r4, r7, pc}
 8004912:	bf00      	nop
 8004914:	000f4240 	.word	0x000f4240
 8004918:	0800649c 	.word	0x0800649c
 800491c:	40003800 	.word	0x40003800

08004920 <Math_convert_RAW_data_ADC_24b_to_16b>:
  * @brief  Convert raw data ADC 24 to 16 bits 
  * @param  24 bit data ADC
  * @retval 16 bit data ADC 
  */

int16_t Math_convert_RAW_data_ADC_24b_to_16b( int32_t raw_data_adc_24b, float Vref_adc, _SETTINGS_MODULE *config_module ){
 8004920:	b590      	push	{r4, r7, lr}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	ed87 0a02 	vstr	s0, [r7, #8]
 800492c:	6079      	str	r1, [r7, #4]


	//raw_data_adc_24b =  0x800001; //0x7FFFFF;//
	int16_t RAW_DATA_16_ADC = 0;
 800492e:	2300      	movs	r3, #0
 8004930:	827b      	strh	r3, [r7, #18]

	float DATA_24_ADC = 0;
 8004932:	f04f 0300 	mov.w	r3, #0
 8004936:	617b      	str	r3, [r7, #20]
	//float DATA_16_ADC = 0;

	if ( (raw_data_adc_24b & 0x800000) == 0x800000 ){
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d009      	beq.n	8004956 <Math_convert_RAW_data_ADC_24b_to_16b+0x36>
		raw_data_adc_24b = raw_data_adc_24b & 0x7FFFFF; 
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004948:	60fb      	str	r3, [r7, #12]
		raw_data_adc_24b = raw_data_adc_24b | 0xFF800000; 
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8004950:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8004954:	60fb      	str	r3, [r7, #12]

	if( RAW_DATA_16_ADC == 32767 ||  DATA_16_ADC == -32768 ){
		config_module->saturation_math_COMP4 = 1;
	}*/

	if( raw_data_adc_24b == 8388607 || raw_data_adc_24b == -8388608 ){
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4a37      	ldr	r2, [pc, #220]	; (8004a38 <Math_convert_RAW_data_ADC_24b_to_16b+0x118>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d003      	beq.n	8004966 <Math_convert_RAW_data_ADC_24b_to_16b+0x46>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8004964:	d102      	bne.n	800496c <Math_convert_RAW_data_ADC_24b_to_16b+0x4c>
				config_module->saturation_math_COMP4 = 1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	715a      	strb	r2, [r3, #5]
	}

	DATA_24_ADC =  ((float)raw_data_adc_24b)/0.896;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004976:	ee17 0a90 	vmov	r0, s15
 800497a:	f7fb fde5 	bl	8000548 <__aeabi_f2d>
 800497e:	a32a      	add	r3, pc, #168	; (adr r3, 8004a28 <Math_convert_RAW_data_ADC_24b_to_16b+0x108>)
 8004980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004984:	f7fb ff5e 	bl	8000844 <__aeabi_ddiv>
 8004988:	4603      	mov	r3, r0
 800498a:	460c      	mov	r4, r1
 800498c:	4618      	mov	r0, r3
 800498e:	4621      	mov	r1, r4
 8004990:	f7fc f840 	bl	8000a14 <__aeabi_d2f>
 8004994:	4603      	mov	r3, r0
 8004996:	617b      	str	r3, [r7, #20]

	if(  config_module->amp_factor_K2 == 9 || config_module->amp_factor_K2 == 10 ||  config_module->amp_factor_K2 == 11 ){ //K2=512, 1024, 2048
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	791b      	ldrb	r3, [r3, #4]
 800499c:	2b09      	cmp	r3, #9
 800499e:	d007      	beq.n	80049b0 <Math_convert_RAW_data_ADC_24b_to_16b+0x90>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	791b      	ldrb	r3, [r3, #4]
 80049a4:	2b0a      	cmp	r3, #10
 80049a6:	d003      	beq.n	80049b0 <Math_convert_RAW_data_ADC_24b_to_16b+0x90>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	791b      	ldrb	r3, [r3, #4]
 80049ac:	2b0b      	cmp	r3, #11
 80049ae:	d115      	bne.n	80049dc <Math_convert_RAW_data_ADC_24b_to_16b+0xbc>
		DATA_24_ADC =  ((float)raw_data_adc_24b)/1.209;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	ee07 3a90 	vmov	s15, r3
 80049b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049ba:	ee17 0a90 	vmov	r0, s15
 80049be:	f7fb fdc3 	bl	8000548 <__aeabi_f2d>
 80049c2:	a31b      	add	r3, pc, #108	; (adr r3, 8004a30 <Math_convert_RAW_data_ADC_24b_to_16b+0x110>)
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f7fb ff3c 	bl	8000844 <__aeabi_ddiv>
 80049cc:	4603      	mov	r3, r0
 80049ce:	460c      	mov	r4, r1
 80049d0:	4618      	mov	r0, r3
 80049d2:	4621      	mov	r1, r4
 80049d4:	f7fc f81e 	bl	8000a14 <__aeabi_d2f>
 80049d8:	4603      	mov	r3, r0
 80049da:	617b      	str	r3, [r7, #20]
	}

	DATA_24_ADC = DATA_24_ADC/256.0;
 80049dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80049e0:	eddf 6a16 	vldr	s13, [pc, #88]	; 8004a3c <Math_convert_RAW_data_ADC_24b_to_16b+0x11c>
 80049e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049e8:	edc7 7a05 	vstr	s15, [r7, #20]

	RAW_DATA_16_ADC = (int16_t)DATA_24_ADC;
 80049ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80049f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049f4:	edc7 7a00 	vstr	s15, [r7]
 80049f8:	883b      	ldrh	r3, [r7, #0]
 80049fa:	827b      	strh	r3, [r7, #18]


	if( RAW_DATA_16_ADC == 32767 ||  RAW_DATA_16_ADC == -32768 ){
 80049fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004a00:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d004      	beq.n	8004a12 <Math_convert_RAW_data_ADC_24b_to_16b+0xf2>
 8004a08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004a0c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8004a10:	d102      	bne.n	8004a18 <Math_convert_RAW_data_ADC_24b_to_16b+0xf8>
			config_module->saturation_math_COMP4 = 1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	715a      	strb	r2, [r3, #5]
			}else{
				printf("DATA_ADC_24b = %hu.%.6lu V\r\nRAW_DATA_ADC_16b_HEX = 0x%.4hX\r\n", (unsigned short)DATA_24_ADC_tens, (unsigned long)DATA_24_ADC_hundreds, (signed short)RAW_DATA_16_ADC );
			}
	#endif

	return RAW_DATA_16_ADC;
 8004a18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
} 
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	371c      	adds	r7, #28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd90      	pop	{r4, r7, pc}
 8004a24:	f3af 8000 	nop.w
 8004a28:	3126e979 	.word	0x3126e979
 8004a2c:	3fecac08 	.word	0x3fecac08
 8004a30:	624dd2f2 	.word	0x624dd2f2
 8004a34:	3ff35810 	.word	0x3ff35810
 8004a38:	007fffff 	.word	0x007fffff
 8004a3c:	43800000 	.word	0x43800000

08004a40 <LL_GPIO_SetOutputPin>:
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	619a      	str	r2, [r3, #24]
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <LL_GPIO_ResetOutputPin>:
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <LL_EXTI_EnableIT_0_31>:
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004a80:	4905      	ldr	r1, [pc, #20]	; (8004a98 <LL_EXTI_EnableIT_0_31+0x20>)
 8004a82:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <LL_EXTI_EnableIT_0_31+0x20>)
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	600b      	str	r3, [r1, #0]
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	40010400 	.word	0x40010400

08004a9c <LL_EXTI_DisableIT_0_31>:
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004aa4:	4906      	ldr	r1, [pc, #24]	; (8004ac0 <LL_EXTI_DisableIT_0_31+0x24>)
 8004aa6:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <LL_EXTI_DisableIT_0_31+0x24>)
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	43db      	mvns	r3, r3
 8004aae:	4013      	ands	r3, r2
 8004ab0:	600b      	str	r3, [r1, #0]
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40010400 	.word	0x40010400

08004ac4 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine));
 8004acc:	4b07      	ldr	r3, [pc, #28]	; (8004aec <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004ace:	695a      	ldr	r2, [r3, #20]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	401a      	ands	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	bf0c      	ite	eq
 8004ada:	2301      	moveq	r3, #1
 8004adc:	2300      	movne	r3, #0
 8004ade:	b2db      	uxtb	r3, r3
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	40010400 	.word	0x40010400

08004af0 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004af8:	4a04      	ldr	r2, [pc, #16]	; (8004b0c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6153      	str	r3, [r2, #20]
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40010400 	.word	0x40010400

08004b10 <LL_USART_IsActiveFlag_RXNE>:
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	bf0c      	ite	eq
 8004b24:	2301      	moveq	r3, #1
 8004b26:	2300      	movne	r3, #0
 8004b28:	b2db      	uxtb	r3, r3
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b48:	b29b      	uxth	r3, r3
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8004b56:	b480      	push	{r7}
 8004b58:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004b5a:	bf00      	nop
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b68:	e7fe      	b.n	8004b68 <HardFault_Handler+0x4>

08004b6a <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b6e:	e7fe      	b.n	8004b6e <MemManage_Handler+0x4>

08004b70 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b74:	e7fe      	b.n	8004b74 <BusFault_Handler+0x4>

08004b76 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004b76:	b480      	push	{r7}
 8004b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b7a:	e7fe      	b.n	8004b7a <UsageFault_Handler+0x4>

08004b7c <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b80:	bf00      	nop
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b8e:	bf00      	nop
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b9c:	bf00      	nop
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004baa:	bf00      	nop
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <USART1_IRQHandler>:
/******************************************************************************/

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void){
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0

    uint16_t input_data9b = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	80fb      	strh	r3, [r7, #6]
    uint8_t input_data8b = 0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	717b      	strb	r3, [r7, #5]

    if(LL_USART_IsActiveFlag_RXNE(USART1)){
 8004bc2:	4833      	ldr	r0, [pc, #204]	; (8004c90 <USART1_IRQHandler+0xdc>)
 8004bc4:	f7ff ffa4 	bl	8004b10 <LL_USART_IsActiveFlag_RXNE>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d05b      	beq.n	8004c86 <USART1_IRQHandler+0xd2>

        input_data9b = LL_USART_ReceiveData9(USART1);
 8004bce:	4830      	ldr	r0, [pc, #192]	; (8004c90 <USART1_IRQHandler+0xdc>)
 8004bd0:	f7ff ffb1 	bl	8004b36 <LL_USART_ReceiveData9>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	80fb      	strh	r3, [r7, #6]

        if( (input_data9b & 0x0100) != 0 ){ //check that we got byte with address 
 8004bd8:	88fb      	ldrh	r3, [r7, #6]
 8004bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d031      	beq.n	8004c46 <USART1_IRQHandler+0x92>

            input_data8b = (uint8_t)input_data9b;
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	717b      	strb	r3, [r7, #5]

            if( input_data8b == CONF_MOD_ptr->addr_module_req_data_adc ){ // check got request ADC data 
 8004be6:	4b2b      	ldr	r3, [pc, #172]	; (8004c94 <USART1_IRQHandler+0xe0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	785b      	ldrb	r3, [r3, #1]
 8004bec:	797a      	ldrb	r2, [r7, #5]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d108      	bne.n	8004c04 <USART1_IRQHandler+0x50>

                UART1_BUF_ptr->ADC_data_request_flag = 1;
 8004bf2:	4b29      	ldr	r3, [pc, #164]	; (8004c98 <USART1_IRQHandler+0xe4>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	71da      	strb	r2, [r3, #7]
                UART1_BUF_ptr->received_command_flag = 1;
 8004bfa:	4b27      	ldr	r3, [pc, #156]	; (8004c98 <USART1_IRQHandler+0xe4>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	719a      	strb	r2, [r3, #6]
  	 a read to the USART_RDR register. The RXNE
  	flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register.
  	An interrupt is generated if RXNEIE=1 in the USART_CR1 register.
  	0: data is not received
  	1: Received data is ready to be read.*/
}
 8004c02:	e040      	b.n	8004c86 <USART1_IRQHandler+0xd2>
            } else if( (input_data8b == 0x00) || ((input_data8b>>3) == CONF_MOD_ptr->addr_module) ){ // chaeck we got broadcast message or me address module
 8004c04:	797b      	ldrb	r3, [r7, #5]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d007      	beq.n	8004c1a <USART1_IRQHandler+0x66>
 8004c0a:	797b      	ldrb	r3, [r7, #5]
 8004c0c:	08db      	lsrs	r3, r3, #3
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	4b20      	ldr	r3, [pc, #128]	; (8004c94 <USART1_IRQHandler+0xe0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d135      	bne.n	8004c86 <USART1_IRQHandler+0xd2>
                  if( UART1_BUF_ptr->received_command_flag == 1){ //Protection if you do not have time to process previous massage.
 8004c1a:	4b1f      	ldr	r3, [pc, #124]	; (8004c98 <USART1_IRQHandler+0xe4>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	799b      	ldrb	r3, [r3, #6]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d103      	bne.n	8004c2c <USART1_IRQHandler+0x78>
                    UART1_BUF_ptr->received_command_flag = 0;//Clear previous message
 8004c24:	4b1c      	ldr	r3, [pc, #112]	; (8004c98 <USART1_IRQHandler+0xe4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	719a      	strb	r2, [r3, #6]
                  UART1_BUF_ptr->UART_Recive_Buf[0] = input_data8b;
 8004c2c:	4b1a      	ldr	r3, [pc, #104]	; (8004c98 <USART1_IRQHandler+0xe4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	797a      	ldrb	r2, [r7, #5]
 8004c32:	701a      	strb	r2, [r3, #0]
                  UART1_BUF_ptr->UART_rec_buf_len = 1;
 8004c34:	4b18      	ldr	r3, [pc, #96]	; (8004c98 <USART1_IRQHandler+0xe4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	711a      	strb	r2, [r3, #4]
                  UART1_BUF_ptr->recive_data_permit_flag = 1;
 8004c3c:	4b16      	ldr	r3, [pc, #88]	; (8004c98 <USART1_IRQHandler+0xe4>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2201      	movs	r2, #1
 8004c42:	715a      	strb	r2, [r3, #5]
}
 8004c44:	e01f      	b.n	8004c86 <USART1_IRQHandler+0xd2>
        } else if( UART1_BUF_ptr->recive_data_permit_flag == 1 ){ // getting data if we have permit to recive byte with data 
 8004c46:	4b14      	ldr	r3, [pc, #80]	; (8004c98 <USART1_IRQHandler+0xe4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	795b      	ldrb	r3, [r3, #5]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d11a      	bne.n	8004c86 <USART1_IRQHandler+0xd2>
            UART1_BUF_ptr->UART_Recive_Buf[ UART1_BUF_ptr->UART_rec_buf_len ] = (uint8_t)input_data9b;
 8004c50:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <USART1_IRQHandler+0xe4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a10      	ldr	r2, [pc, #64]	; (8004c98 <USART1_IRQHandler+0xe4>)
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	7912      	ldrb	r2, [r2, #4]
 8004c5a:	88f9      	ldrh	r1, [r7, #6]
 8004c5c:	b2c9      	uxtb	r1, r1
 8004c5e:	5499      	strb	r1, [r3, r2]
            UART1_BUF_ptr->UART_rec_buf_len++;
 8004c60:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <USART1_IRQHandler+0xe4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	791a      	ldrb	r2, [r3, #4]
 8004c66:	3201      	adds	r2, #1
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	711a      	strb	r2, [r3, #4]
            if( UART1_BUF_ptr->UART_rec_buf_len == 4 ){ // finish getting command
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <USART1_IRQHandler+0xe4>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	791b      	ldrb	r3, [r3, #4]
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d107      	bne.n	8004c86 <USART1_IRQHandler+0xd2>
                UART1_BUF_ptr->received_command_flag = 1;
 8004c76:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <USART1_IRQHandler+0xe4>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	719a      	strb	r2, [r3, #6]
                UART1_BUF_ptr->recive_data_permit_flag = 0;
 8004c7e:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <USART1_IRQHandler+0xe4>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2200      	movs	r2, #0
 8004c84:	715a      	strb	r2, [r3, #5]
}
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40013800 	.word	0x40013800
 8004c94:	20000000 	.word	0x20000000
 8004c98:	20000004 	.word	0x20000004

08004c9c <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void){
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0

	//interrupt PB15 ADC-DRDY  FALLING edge
	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET){
 8004ca0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004ca4:	f7ff ff0e 	bl	8004ac4 <LL_EXTI_IsActiveFlag_0_31>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d016      	beq.n	8004cdc <EXTI15_10_IRQHandler+0x40>
		LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8004cae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004cb2:	f7ff ff1d 	bl	8004af0 <LL_EXTI_ClearFlag_0_31>

    ADC_PARAM_ptr->ADC_DRDY_flag = 1;
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <EXTI15_10_IRQHandler+0x44>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	701a      	strb	r2, [r3, #0]
    ADC_PARAM_ptr->DRDY_GOOD_flag = 0;
 8004cbe:	4b08      	ldr	r3, [pc, #32]	; (8004ce0 <EXTI15_10_IRQHandler+0x44>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	705a      	strb	r2, [r3, #1]
    ADC_PARAM_ptr->PULSE_flag = 0;
 8004cc6:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <EXTI15_10_IRQHandler+0x44>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	709a      	strb	r2, [r3, #2]

    INTERRUPT_DRDY_GOOD_Enable();
 8004cce:	2020      	movs	r0, #32
 8004cd0:	f7ff fed2 	bl	8004a78 <LL_EXTI_EnableIT_0_31>
    INTERRUPT_PULSE_Enable();
 8004cd4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004cd8:	f7ff fece 	bl	8004a78 <LL_EXTI_EnableIT_0_31>
	}

}
 8004cdc:	bf00      	nop
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20000008 	.word	0x20000008

08004ce4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0

  //interrupt PC5 DRDY_GOOD  RISING edge
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET){
 8004ce8:	2020      	movs	r0, #32
 8004cea:	f7ff feeb 	bl	8004ac4 <LL_EXTI_IsActiveFlag_0_31>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d015      	beq.n	8004d20 <EXTI9_5_IRQHandler+0x3c>
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 8004cf4:	2020      	movs	r0, #32
 8004cf6:	f7ff fefb 	bl	8004af0 <LL_EXTI_ClearFlag_0_31>

    ADC_PARAM_ptr->DRDY_GOOD_flag = 1;
 8004cfa:	4b1f      	ldr	r3, [pc, #124]	; (8004d78 <EXTI9_5_IRQHandler+0x94>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	705a      	strb	r2, [r3, #1]

    INTERRUPT_DRDY_GOOD_Disable();
 8004d02:	2020      	movs	r0, #32
 8004d04:	f7ff feca 	bl	8004a9c <LL_EXTI_DisableIT_0_31>
    INTERRUPT_PULSE_Disable();
 8004d08:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004d0c:	f7ff fec6 	bl	8004a9c <LL_EXTI_DisableIT_0_31>
    ADC_PARAM_ptr->Count_MCLK = 0;
 8004d10:	4b19      	ldr	r3, [pc, #100]	; (8004d78 <EXTI9_5_IRQHandler+0x94>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2200      	movs	r2, #0
 8004d16:	70da      	strb	r2, [r3, #3]
    ADC_PARAM_ptr->PULSE_flag = 0;
 8004d18:	4b17      	ldr	r3, [pc, #92]	; (8004d78 <EXTI9_5_IRQHandler+0x94>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	709a      	strb	r2, [r3, #2]
  }

  //interrupt PB8 PULSE FALLING edge
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_8) != RESET){
 8004d20:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004d24:	f7ff fece 	bl	8004ac4 <LL_EXTI_IsActiveFlag_0_31>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d021      	beq.n	8004d72 <EXTI9_5_IRQHandler+0x8e>
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_8);
 8004d2e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004d32:	f7ff fedd 	bl	8004af0 <LL_EXTI_ClearFlag_0_31>

    ADC_PARAM_ptr->PULSE_flag = 1;
 8004d36:	4b10      	ldr	r3, [pc, #64]	; (8004d78 <EXTI9_5_IRQHandler+0x94>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	709a      	strb	r2, [r3, #2]
    INTERRUPT_PULSE_Disable();
 8004d3e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004d42:	f7ff feab 	bl	8004a9c <LL_EXTI_DisableIT_0_31>
    INTERRUPT_DRDY_GOOD_Disable();
 8004d46:	2020      	movs	r0, #32
 8004d48:	f7ff fea8 	bl	8004a9c <LL_EXTI_DisableIT_0_31>
    PC7_MCLK_Set();
 8004d4c:	2180      	movs	r1, #128	; 0x80
 8004d4e:	480b      	ldr	r0, [pc, #44]	; (8004d7c <EXTI9_5_IRQHandler+0x98>)
 8004d50:	f7ff fe76 	bl	8004a40 <LL_GPIO_SetOutputPin>
    ADC_PARAM_ptr->Count_MCLK = ADC_PARAM_ptr->Count_MCLK + 1;
 8004d54:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <EXTI9_5_IRQHandler+0x94>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a07      	ldr	r2, [pc, #28]	; (8004d78 <EXTI9_5_IRQHandler+0x94>)
 8004d5a:	6812      	ldr	r2, [r2, #0]
 8004d5c:	78d2      	ldrb	r2, [r2, #3]
 8004d5e:	3201      	adds	r2, #1
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	70da      	strb	r2, [r3, #3]
  __ASM volatile ("nop");
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop
 8004d68:	bf00      	nop
    __NOP();
    __NOP();
    __NOP();
    PC7_MCLK_Reset();
 8004d6a:	2180      	movs	r1, #128	; 0x80
 8004d6c:	4803      	ldr	r0, [pc, #12]	; (8004d7c <EXTI9_5_IRQHandler+0x98>)
 8004d6e:	f7ff fe75 	bl	8004a5c <LL_GPIO_ResetOutputPin>
  }

}
 8004d72:	bf00      	nop
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000008 	.word	0x20000008
 8004d7c:	48000800 	.word	0x48000800

08004d80 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004d88:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004d8c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d013      	beq.n	8004dc0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004d98:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004d9c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004da0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00b      	beq.n	8004dc0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004da8:	e000      	b.n	8004dac <ITM_SendChar+0x2c>
 8004daa:	bf00      	nop
 8004dac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0f9      	beq.n	8004daa <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004db6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004dc0:	687b      	ldr	r3, [r7, #4]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b086      	sub	sp, #24
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	60f8      	str	r0, [r7, #12]
 8004dd6:	60b9      	str	r1, [r7, #8]
 8004dd8:	607a      	str	r2, [r7, #4]
	/* return len; */
	
	//errno = ENOSYS;
	//return -1;

	int i=0;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++){
 8004dde:	2300      	movs	r3, #0
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	e009      	b.n	8004df8 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	60ba      	str	r2, [r7, #8]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff ffc7 	bl	8004d80 <ITM_SendChar>
	for(i=0;i<len;i++){
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	3301      	adds	r3, #1
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	dbf1      	blt.n	8004de4 <_write+0x16>
	}
	return len;
 8004e00:	687b      	ldr	r3, [r7, #4]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <_sbrk>:

void * _sbrk(int32_t incr)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8004e14:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <_sbrk+0x38>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d102      	bne.n	8004e22 <_sbrk+0x16>
		heap_end = & end;
 8004e1c:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <_sbrk+0x38>)
 8004e1e:	4a0a      	ldr	r2, [pc, #40]	; (8004e48 <_sbrk+0x3c>)
 8004e20:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8004e22:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <_sbrk+0x38>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8004e28:	4b06      	ldr	r3, [pc, #24]	; (8004e44 <_sbrk+0x38>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4413      	add	r3, r2
 8004e30:	4a04      	ldr	r2, [pc, #16]	; (8004e44 <_sbrk+0x38>)
 8004e32:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8004e34:	68fb      	ldr	r3, [r7, #12]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	20000090 	.word	0x20000090
 8004e48:	200000b8 	.word	0x200000b8

08004e4c <_close>:

int _close(int32_t file)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8004e54:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <_close+0x20>)
 8004e56:	2258      	movs	r2, #88	; 0x58
 8004e58:	601a      	str	r2, [r3, #0]
	return -1;
 8004e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	200000b4 	.word	0x200000b4

08004e70 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8004e7a:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <_fstat+0x20>)
 8004e7c:	2258      	movs	r2, #88	; 0x58
 8004e7e:	601a      	str	r2, [r3, #0]
	return -1;
 8004e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	200000b4 	.word	0x200000b4

08004e94 <_isatty>:

int _isatty(int32_t file)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8004e9c:	4b04      	ldr	r3, [pc, #16]	; (8004eb0 <_isatty+0x1c>)
 8004e9e:	2258      	movs	r2, #88	; 0x58
 8004ea0:	601a      	str	r2, [r3, #0]
	return 0;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	200000b4 	.word	0x200000b4

08004eb4 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8004ec0:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <_lseek+0x24>)
 8004ec2:	2258      	movs	r2, #88	; 0x58
 8004ec4:	601a      	str	r2, [r3, #0]
	return -1;
 8004ec6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	200000b4 	.word	0x200000b4

08004edc <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <_read+0x24>)
 8004eea:	2258      	movs	r2, #88	; 0x58
 8004eec:	601a      	str	r2, [r3, #0]
	return -1;
 8004eee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	200000b4 	.word	0x200000b4

08004f04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f08:	4a17      	ldr	r2, [pc, #92]	; (8004f68 <SystemInit+0x64>)
 8004f0a:	4b17      	ldr	r3, [pc, #92]	; (8004f68 <SystemInit+0x64>)
 8004f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004f18:	4a14      	ldr	r2, [pc, #80]	; (8004f6c <SystemInit+0x68>)
 8004f1a:	4b14      	ldr	r3, [pc, #80]	; (8004f6c <SystemInit+0x68>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f043 0301 	orr.w	r3, r3, #1
 8004f22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004f24:	4b11      	ldr	r3, [pc, #68]	; (8004f6c <SystemInit+0x68>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004f2a:	4a10      	ldr	r2, [pc, #64]	; (8004f6c <SystemInit+0x68>)
 8004f2c:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <SystemInit+0x68>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004f34:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004f38:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004f3a:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <SystemInit+0x68>)
 8004f3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f40:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004f42:	4a0a      	ldr	r2, [pc, #40]	; (8004f6c <SystemInit+0x68>)
 8004f44:	4b09      	ldr	r3, [pc, #36]	; (8004f6c <SystemInit+0x68>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f4c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004f4e:	4b07      	ldr	r3, [pc, #28]	; (8004f6c <SystemInit+0x68>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004f54:	4b04      	ldr	r3, [pc, #16]	; (8004f68 <SystemInit+0x64>)
 8004f56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f5a:	609a      	str	r2, [r3, #8]
#endif
}
 8004f5c:	bf00      	nop
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	e000ed00 	.word	0xe000ed00
 8004f6c:	40021000 	.word	0x40021000

08004f70 <LL_GPIO_SetOutputPin>:
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	619a      	str	r2, [r3, #24]
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <LL_GPIO_ResetOutputPin>:
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <LL_USART_IsActiveFlag_TC>:
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb8:	2b40      	cmp	r3, #64	; 0x40
 8004fba:	bf0c      	ite	eq
 8004fbc:	2301      	moveq	r3, #1
 8004fbe:	2300      	movne	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <LL_USART_IsActiveFlag_TXE>:
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fde:	2b80      	cmp	r3, #128	; 0x80
 8004fe0:	bf0c      	ite	eq
 8004fe2:	2301      	moveq	r3, #1
 8004fe4:	2300      	movne	r3, #0
 8004fe6:	b2db      	uxtb	r3, r3
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <LL_USART_TransmitData9>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0x1FF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData9(USART_TypeDef *USARTx, uint16_t Value)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	807b      	strh	r3, [r7, #2]
  USARTx->TDR = Value & 0x1FFU;
 8005000:	887b      	ldrh	r3, [r7, #2]
 8005002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005006:	b29a      	uxth	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <LL_EXTI_EnableIT_0_31>:
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005020:	4905      	ldr	r1, [pc, #20]	; (8005038 <LL_EXTI_EnableIT_0_31+0x20>)
 8005022:	4b05      	ldr	r3, [pc, #20]	; (8005038 <LL_EXTI_EnableIT_0_31+0x20>)
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4313      	orrs	r3, r2
 800502a:	600b      	str	r3, [r1, #0]
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	40010400 	.word	0x40010400

0800503c <LL_EXTI_DisableIT_0_31>:
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005044:	4906      	ldr	r1, [pc, #24]	; (8005060 <LL_EXTI_DisableIT_0_31+0x24>)
 8005046:	4b06      	ldr	r3, [pc, #24]	; (8005060 <LL_EXTI_DisableIT_0_31+0x24>)
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	43db      	mvns	r3, r3
 800504e:	4013      	ands	r3, r2
 8005050:	600b      	str	r3, [r1, #0]
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40010400 	.word	0x40010400

08005064 <Data_transmite_UART_9B>:
//#include "global_variables.h"

#include  <stdio.h>


ErrorStatus Data_transmite_UART_9B (uint8_t mass[], USART_TypeDef *USARTx){
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]

	uint32_t counter=0;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]

	//Enable_transmit_USART1();
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_12);
 8005072:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800507a:	f7ff ff79 	bl	8004f70 <LL_GPIO_SetOutputPin>
 800507e:	bf00      	nop
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	bf00      	nop
 8005086:	bf00      	nop
 8005088:	bf00      	nop
	__NOP();
	__NOP();
	__NOP();
	__NOP();

	counter=0;
 800508a:	2300      	movs	r3, #0
 800508c:	60fb      	str	r3, [r7, #12]
	while( LL_USART_IsActiveFlag_TXE(USARTx) == RESET ){
 800508e:	e00c      	b.n	80050aa <Data_transmite_UART_9B+0x46>
		counter++;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3301      	adds	r3, #1
 8005094:	60fb      	str	r3, [r7, #12]
		if(counter==40000){//150ms
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f649 4240 	movw	r2, #40000	; 0x9c40
 800509c:	4293      	cmp	r3, r2
 800509e:	d104      	bne.n	80050aa <Data_transmite_UART_9B+0x46>
			Error_Handler();
 80050a0:	212a      	movs	r1, #42	; 0x2a
 80050a2:	4836      	ldr	r0, [pc, #216]	; (800517c <Data_transmite_UART_9B+0x118>)
 80050a4:	f7fe fbfe 	bl	80038a4 <_Error_Handler>
			goto exit_error;
 80050a8:	e05c      	b.n	8005164 <Data_transmite_UART_9B+0x100>
	while( LL_USART_IsActiveFlag_TXE(USARTx) == RESET ){
 80050aa:	6838      	ldr	r0, [r7, #0]
 80050ac:	f7ff ff8f 	bl	8004fce <LL_USART_IsActiveFlag_TXE>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0ec      	beq.n	8005090 <Data_transmite_UART_9B+0x2c>
		}
	}

	for ( uint8_t i=0 ; i<4; i++ ){
 80050b6:	2300      	movs	r3, #0
 80050b8:	72fb      	strb	r3, [r7, #11]
 80050ba:	e031      	b.n	8005120 <Data_transmite_UART_9B+0xbc>

		counter=0;
 80050bc:	2300      	movs	r3, #0
 80050be:	60fb      	str	r3, [r7, #12]
		while( LL_USART_IsActiveFlag_TC( USARTx ) == RESET ){
 80050c0:	e00c      	b.n	80050dc <Data_transmite_UART_9B+0x78>
			counter++;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3301      	adds	r3, #1
 80050c6:	60fb      	str	r3, [r7, #12]
			if(counter==40000){//150ms
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f649 4240 	movw	r2, #40000	; 0x9c40
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d104      	bne.n	80050dc <Data_transmite_UART_9B+0x78>
				Error_Handler();
 80050d2:	2135      	movs	r1, #53	; 0x35
 80050d4:	4829      	ldr	r0, [pc, #164]	; (800517c <Data_transmite_UART_9B+0x118>)
 80050d6:	f7fe fbe5 	bl	80038a4 <_Error_Handler>
				goto exit_error;
 80050da:	e043      	b.n	8005164 <Data_transmite_UART_9B+0x100>
		while( LL_USART_IsActiveFlag_TC( USARTx ) == RESET ){
 80050dc:	6838      	ldr	r0, [r7, #0]
 80050de:	f7ff ff63 	bl	8004fa8 <LL_USART_IsActiveFlag_TC>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0ec      	beq.n	80050c2 <Data_transmite_UART_9B+0x5e>
			}
		}

		if (i==0){
 80050e8:	7afb      	ldrb	r3, [r7, #11]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10c      	bne.n	8005108 <Data_transmite_UART_9B+0xa4>
			LL_USART_TransmitData9( USARTx,( 0x0100 | ( (uint16_t) (mass[i]) )) );//set 9 bit for command (first) bite
 80050ee:	7afb      	ldrb	r3, [r7, #11]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	4413      	add	r3, r2
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	4619      	mov	r1, r3
 8005100:	6838      	ldr	r0, [r7, #0]
 8005102:	f7ff ff77 	bl	8004ff4 <LL_USART_TransmitData9>
 8005106:	e008      	b.n	800511a <Data_transmite_UART_9B+0xb6>

		}else{
			LL_USART_TransmitData9( USARTx, mass[i] );
 8005108:	7afb      	ldrb	r3, [r7, #11]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	4413      	add	r3, r2
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	b29b      	uxth	r3, r3
 8005112:	4619      	mov	r1, r3
 8005114:	6838      	ldr	r0, [r7, #0]
 8005116:	f7ff ff6d 	bl	8004ff4 <LL_USART_TransmitData9>
	for ( uint8_t i=0 ; i<4; i++ ){
 800511a:	7afb      	ldrb	r3, [r7, #11]
 800511c:	3301      	adds	r3, #1
 800511e:	72fb      	strb	r3, [r7, #11]
 8005120:	7afb      	ldrb	r3, [r7, #11]
 8005122:	2b03      	cmp	r3, #3
 8005124:	d9ca      	bls.n	80050bc <Data_transmite_UART_9B+0x58>

		}
	}

	counter=0;
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
	while( LL_USART_IsActiveFlag_TC( USARTx ) == RESET ){
 800512a:	e00c      	b.n	8005146 <Data_transmite_UART_9B+0xe2>
		counter++;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3301      	adds	r3, #1
 8005130:	60fb      	str	r3, [r7, #12]
		if(counter==40000){//150ms
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f649 4240 	movw	r2, #40000	; 0x9c40
 8005138:	4293      	cmp	r3, r2
 800513a:	d104      	bne.n	8005146 <Data_transmite_UART_9B+0xe2>
			Error_Handler();
 800513c:	2147      	movs	r1, #71	; 0x47
 800513e:	480f      	ldr	r0, [pc, #60]	; (800517c <Data_transmite_UART_9B+0x118>)
 8005140:	f7fe fbb0 	bl	80038a4 <_Error_Handler>
			goto exit_error;
 8005144:	e00e      	b.n	8005164 <Data_transmite_UART_9B+0x100>
	while( LL_USART_IsActiveFlag_TC( USARTx ) == RESET ){
 8005146:	6838      	ldr	r0, [r7, #0]
 8005148:	f7ff ff2e 	bl	8004fa8 <LL_USART_IsActiveFlag_TC>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0ec      	beq.n	800512c <Data_transmite_UART_9B+0xc8>
 8005152:	bf00      	nop
		}
	}

	//Disable_transmit_USART1();
	__NOP();
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 8005154:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800515c:	f7ff ff16 	bl	8004f8c <LL_GPIO_ResetOutputPin>


	return SUCCESS;
 8005160:	2301      	movs	r3, #1
 8005162:	e006      	b.n	8005172 <Data_transmite_UART_9B+0x10e>
	exit_error:
	#ifdef DEBUGprintf
			printf("ERROR transmitting data through UART1");
	#endif

	Disable_transmit_USART1();
 8005164:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800516c:	f7ff ff0e 	bl	8004f8c <LL_GPIO_ResetOutputPin>
	return ERROR;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	080064b0 	.word	0x080064b0

08005180 <Parser_command>:
  * @brief  Parser command from master module
  * @param  
  * @retval void
  */

void Parser_command ( _UART_BUF uart_receive_buffer, _SETTINGS_MODULE *module_settings, _ADC_PARAMETERS *adc_parametrs ,enum PWR_TIMx timer_numberr,  USART_TypeDef *USARTx){
 8005180:	b590      	push	{r4, r7, lr}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	f107 0408 	add.w	r4, r7, #8
 800518a:	e884 0003 	stmia.w	r4, {r0, r1}
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	603b      	str	r3, [r7, #0]

	uint8_t number_command = 0xFF;
 8005192:	23ff      	movs	r3, #255	; 0xff
 8005194:	75bb      	strb	r3, [r7, #22]
	uint8_t ack_transmite_buf[4];
	uint8_t transmite_data_flag=0; // =0 - NO ANSWER, =1 - answer at request  
 8005196:	2300      	movs	r3, #0
 8005198:	75fb      	strb	r3, [r7, #23]
	ErrorStatus retval;

	ack_transmite_buf[0] = uart_receive_buffer.UART_Recive_Buf[0];
 800519a:	7a3b      	ldrb	r3, [r7, #8]
 800519c:	743b      	strb	r3, [r7, #16]
	
	ack_transmite_buf[2] = 0x00;
 800519e:	2300      	movs	r3, #0
 80051a0:	74bb      	strb	r3, [r7, #18]
	ack_transmite_buf[3] = 0x00;
 80051a2:	2300      	movs	r3, #0
 80051a4:	74fb      	strb	r3, [r7, #19]

	number_command = 0x07 & uart_receive_buffer.UART_Recive_Buf[0];
 80051a6:	7a3b      	ldrb	r3, [r7, #8]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	75bb      	strb	r3, [r7, #22]

	if( number_command == 0x0 ){ // Get command Start or Stop
 80051ae:	7dbb      	ldrb	r3, [r7, #22]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d16e      	bne.n	8005292 <Parser_command+0x112>
		if( uart_receive_buffer.UART_Recive_Buf[1] == 0xFF ){ //Satart command
 80051b4:	7a7b      	ldrb	r3, [r7, #9]
 80051b6:	2bff      	cmp	r3, #255	; 0xff
 80051b8:	d112      	bne.n	80051e0 <Parser_command+0x60>
			module_settings->start_stop_ADC = 0x02; //Start ADC
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2202      	movs	r2, #2
 80051be:	709a      	strb	r2, [r3, #2]
			module_settings->counter_toggle_led_hl3 = 0;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	721a      	strb	r2, [r3, #8]
			LED_Green_HL3_ON();
 80051c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051ca:	4893      	ldr	r0, [pc, #588]	; (8005418 <Parser_command+0x298>)
 80051cc:	f7ff fede 	bl	8004f8c <LL_GPIO_ResetOutputPin>
			adc_parametrs->ADC_DRDY_flag=0; 
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2200      	movs	r2, #0
 80051d4:	701a      	strb	r2, [r3, #0]
			INTERRUPT_ADC_DRDY_Enable();
 80051d6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80051da:	f7ff ff1d 	bl	8005018 <LL_EXTI_EnableIT_0_31>
 80051de:	e055      	b.n	800528c <Parser_command+0x10c>

		} else if( uart_receive_buffer.UART_Recive_Buf[1] == 0x00 ){
 80051e0:	7a7b      	ldrb	r3, [r7, #9]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d11f      	bne.n	8005226 <Parser_command+0xa6>
			module_settings->start_stop_ADC = 0x00; ///stop without stop ADC
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	709a      	strb	r2, [r3, #2]
			INTERRUPT_ADC_DRDY_Disable();
 80051ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80051f0:	f7ff ff24 	bl	800503c <LL_EXTI_DisableIT_0_31>
			INTERRUPT_DRDY_GOOD_Disable();
 80051f4:	2020      	movs	r0, #32
 80051f6:	f7ff ff21 	bl	800503c <LL_EXTI_DisableIT_0_31>
			INTERRUPT_PULSE_Disable();
 80051fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80051fe:	f7ff ff1d 	bl	800503c <LL_EXTI_DisableIT_0_31>
			adc_parametrs->ADC_DRDY_flag=0;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2200      	movs	r2, #0
 8005206:	701a      	strb	r2, [r3, #0]
			adc_parametrs->DRDY_GOOD_flag=0;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2200      	movs	r2, #0
 800520c:	705a      	strb	r2, [r3, #1]
			adc_parametrs->PULSE_flag=0;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2200      	movs	r2, #0
 8005212:	709a      	strb	r2, [r3, #2]
			adc_parametrs->Count_MCLK=0;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2200      	movs	r2, #0
 8005218:	70da      	strb	r2, [r3, #3]
			LED_Green_HL3_ON();
 800521a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800521e:	487e      	ldr	r0, [pc, #504]	; (8005418 <Parser_command+0x298>)
 8005220:	f7ff feb4 	bl	8004f8c <LL_GPIO_ResetOutputPin>
 8005224:	e032      	b.n	800528c <Parser_command+0x10c>

		} else if( uart_receive_buffer.UART_Recive_Buf[1] == 0x01 ){
 8005226:	7a7b      	ldrb	r3, [r7, #9]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d12c      	bne.n	8005286 <Parser_command+0x106>
			module_settings->start_stop_ADC = 0x01; //stop with stop ADC 
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	709a      	strb	r2, [r3, #2]
			INTERRUPT_ADC_DRDY_Disable();
 8005232:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005236:	f7ff ff01 	bl	800503c <LL_EXTI_DisableIT_0_31>
			INTERRUPT_DRDY_GOOD_Disable();
 800523a:	2020      	movs	r0, #32
 800523c:	f7ff fefe 	bl	800503c <LL_EXTI_DisableIT_0_31>
			INTERRUPT_PULSE_Disable();
 8005240:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005244:	f7ff fefa 	bl	800503c <LL_EXTI_DisableIT_0_31>
			adc_parametrs->ADC_DRDY_flag=0;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2200      	movs	r2, #0
 800524c:	701a      	strb	r2, [r3, #0]
			adc_parametrs->DRDY_GOOD_flag=0;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2200      	movs	r2, #0
 8005252:	705a      	strb	r2, [r3, #1]
			adc_parametrs->PULSE_flag=0;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2200      	movs	r2, #0
 8005258:	709a      	strb	r2, [r3, #2]
			adc_parametrs->Count_MCLK=0;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2200      	movs	r2, #0
 800525e:	70da      	strb	r2, [r3, #3]
			LED_Green_HL3_ON();
 8005260:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005264:	486c      	ldr	r0, [pc, #432]	; (8005418 <Parser_command+0x298>)
 8005266:	f7ff fe91 	bl	8004f8c <LL_GPIO_ResetOutputPin>

			//Stop procedure ADC
			PB14_STOP_ADC_Reset();
 800526a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800526e:	486b      	ldr	r0, [pc, #428]	; (800541c <Parser_command+0x29c>)
 8005270:	f7ff fe8c 	bl	8004f8c <LL_GPIO_ResetOutputPin>
			LL_mDelay(1);
 8005274:	2001      	movs	r0, #1
 8005276:	f7fd f935 	bl	80024e4 <LL_mDelay>
			PB14_STOP_ADC_Set();   
 800527a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800527e:	4867      	ldr	r0, [pc, #412]	; (800541c <Parser_command+0x29c>)
 8005280:	f7ff fe76 	bl	8004f70 <LL_GPIO_SetOutputPin>
 8005284:	e002      	b.n	800528c <Parser_command+0x10c>

		} else{
			module_settings->status_module = 0x02; // not understand command
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2202      	movs	r2, #2
 800528a:	71da      	strb	r2, [r3, #7]
		}

		transmite_data_flag = 0;
 800528c:	2300      	movs	r3, #0
 800528e:	75fb      	strb	r3, [r7, #23]
 8005290:	e0b5      	b.n	80053fe <Parser_command+0x27e>

	} else if( number_command == 0x02 ){ // Get command amplifier factor K1
 8005292:	7dbb      	ldrb	r3, [r7, #22]
 8005294:	2b02      	cmp	r3, #2
 8005296:	d124      	bne.n	80052e2 <Parser_command+0x162>
		if( uart_receive_buffer.UART_Recive_Buf[1] == 0x80){ // request of value K1
 8005298:	7a7b      	ldrb	r3, [r7, #9]
 800529a:	2b80      	cmp	r3, #128	; 0x80
 800529c:	d105      	bne.n	80052aa <Parser_command+0x12a>
			ack_transmite_buf[1] = module_settings->amp_factor_K1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	78db      	ldrb	r3, [r3, #3]
 80052a2:	747b      	strb	r3, [r7, #17]
			transmite_data_flag = 1;
 80052a4:	2301      	movs	r3, #1
 80052a6:	75fb      	strb	r3, [r7, #23]
 80052a8:	e0a9      	b.n	80053fe <Parser_command+0x27e>
			if( VALUE_COMP1() == SET || VALUE_COMP2() == SET ){
				while( VALUE_COMP3() != RESET || i != 1000000 ){
					i++;
				}			
			}*/
			retval = Set_Amp_Factor_K1( uart_receive_buffer.UART_Recive_Buf[1] & 0X03 ); 
 80052aa:	7a7b      	ldrb	r3, [r7, #9]
 80052ac:	f003 0303 	and.w	r3, r3, #3
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fe fc3e 	bl	8003b34 <Set_Amp_Factor_K1>
 80052b8:	4603      	mov	r3, r0
 80052ba:	757b      	strb	r3, [r7, #21]

			if(retval == SUCCESS ){
 80052bc:	7d7b      	ldrb	r3, [r7, #21]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d108      	bne.n	80052d4 <Parser_command+0x154>
				module_settings->amp_factor_K1 = uart_receive_buffer.UART_Recive_Buf[1] & 0X03;
 80052c2:	7a7b      	ldrb	r3, [r7, #9]
 80052c4:	f003 0303 	and.w	r3, r3, #3
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	70da      	strb	r2, [r3, #3]
				ack_transmite_buf[1] = 0x01;
 80052ce:	2301      	movs	r3, #1
 80052d0:	747b      	strb	r3, [r7, #17]
 80052d2:	e003      	b.n	80052dc <Parser_command+0x15c>

			}else{
				ack_transmite_buf[1] = 0x00;
 80052d4:	2300      	movs	r3, #0
 80052d6:	747b      	strb	r3, [r7, #17]
				ack_transmite_buf[3] = 0xFF;
 80052d8:	23ff      	movs	r3, #255	; 0xff
 80052da:	74fb      	strb	r3, [r7, #19]
			}

			transmite_data_flag = 1;
 80052dc:	2301      	movs	r3, #1
 80052de:	75fb      	strb	r3, [r7, #23]
 80052e0:	e08d      	b.n	80053fe <Parser_command+0x27e>
		}

	} else if( number_command == 0x03){ // Get command amplifier factor K2
 80052e2:	7dbb      	ldrb	r3, [r7, #22]
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d124      	bne.n	8005332 <Parser_command+0x1b2>
		if( uart_receive_buffer.UART_Recive_Buf[1] == 0x80){ // request of value K1
 80052e8:	7a7b      	ldrb	r3, [r7, #9]
 80052ea:	2b80      	cmp	r3, #128	; 0x80
 80052ec:	d105      	bne.n	80052fa <Parser_command+0x17a>
			ack_transmite_buf[1] = module_settings->amp_factor_K2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	791b      	ldrb	r3, [r3, #4]
 80052f2:	747b      	strb	r3, [r7, #17]
			transmite_data_flag = 1;
 80052f4:	2301      	movs	r3, #1
 80052f6:	75fb      	strb	r3, [r7, #23]
 80052f8:	e081      	b.n	80053fe <Parser_command+0x27e>

		} else { 
			retval = Set_Amp_Factor_K2( uart_receive_buffer.UART_Recive_Buf[1] & 0X0F );
 80052fa:	7a7b      	ldrb	r3, [r7, #9]
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	b2db      	uxtb	r3, r3
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe fc82 	bl	8003c0c <Set_Amp_Factor_K2>
 8005308:	4603      	mov	r3, r0
 800530a:	757b      	strb	r3, [r7, #21]

			if(retval == SUCCESS ){
 800530c:	7d7b      	ldrb	r3, [r7, #21]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d108      	bne.n	8005324 <Parser_command+0x1a4>
				module_settings->amp_factor_K2 = uart_receive_buffer.UART_Recive_Buf[1] & 0X0F ;
 8005312:	7a7b      	ldrb	r3, [r7, #9]
 8005314:	f003 030f 	and.w	r3, r3, #15
 8005318:	b2da      	uxtb	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	711a      	strb	r2, [r3, #4]
				ack_transmite_buf[1] = 0x01;
 800531e:	2301      	movs	r3, #1
 8005320:	747b      	strb	r3, [r7, #17]
 8005322:	e003      	b.n	800532c <Parser_command+0x1ac>

			}else{
				ack_transmite_buf[1] = 0x00;
 8005324:	2300      	movs	r3, #0
 8005326:	747b      	strb	r3, [r7, #17]
				ack_transmite_buf[3] = 0xFF;
 8005328:	23ff      	movs	r3, #255	; 0xff
 800532a:	74fb      	strb	r3, [r7, #19]
			}

			transmite_data_flag = 1;
 800532c:	2301      	movs	r3, #1
 800532e:	75fb      	strb	r3, [r7, #23]
 8005330:	e065      	b.n	80053fe <Parser_command+0x27e>
		}

	} else if( number_command == 0x04 ){ // Get command cutof frequency 
 8005332:	7dbb      	ldrb	r3, [r7, #22]
 8005334:	2b04      	cmp	r3, #4
 8005336:	d127      	bne.n	8005388 <Parser_command+0x208>

		if( uart_receive_buffer.UART_Recive_Buf[1] == 0x80){ // request of value K1
 8005338:	7a7b      	ldrb	r3, [r7, #9]
 800533a:	2b80      	cmp	r3, #128	; 0x80
 800533c:	d105      	bne.n	800534a <Parser_command+0x1ca>
			ack_transmite_buf[1] = module_settings->Fcut_value;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	799b      	ldrb	r3, [r3, #6]
 8005342:	747b      	strb	r3, [r7, #17]
			transmite_data_flag = 1;
 8005344:	2301      	movs	r3, #1
 8005346:	75fb      	strb	r3, [r7, #23]
 8005348:	e059      	b.n	80053fe <Parser_command+0x27e>

		} else { 

			retval = Set_Ficlk_and_F_SAx( uart_receive_buffer.UART_Recive_Buf[1] & 0X7F , timer_numberr );
 800534a:	7a7b      	ldrb	r3, [r7, #9]
 800534c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005350:	b2db      	uxtb	r3, r3
 8005352:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005356:	4611      	mov	r1, r2
 8005358:	4618      	mov	r0, r3
 800535a:	f7fe fb27 	bl	80039ac <Set_Ficlk_and_F_SAx>
 800535e:	4603      	mov	r3, r0
 8005360:	757b      	strb	r3, [r7, #21]

			if(retval == SUCCESS ){
 8005362:	7d7b      	ldrb	r3, [r7, #21]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d108      	bne.n	800537a <Parser_command+0x1fa>
				module_settings->Fcut_value = uart_receive_buffer.UART_Recive_Buf[1] & 0X7F ;
 8005368:	7a7b      	ldrb	r3, [r7, #9]
 800536a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800536e:	b2da      	uxtb	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	719a      	strb	r2, [r3, #6]
				ack_transmite_buf[1] = 0x01;
 8005374:	2301      	movs	r3, #1
 8005376:	747b      	strb	r3, [r7, #17]
 8005378:	e003      	b.n	8005382 <Parser_command+0x202>

			}else{
				ack_transmite_buf[1] = 0x00;
 800537a:	2300      	movs	r3, #0
 800537c:	747b      	strb	r3, [r7, #17]
				ack_transmite_buf[3] = 0xFF;
 800537e:	23ff      	movs	r3, #255	; 0xff
 8005380:	74fb      	strb	r3, [r7, #19]
			}

			transmite_data_flag = 1;
 8005382:	2301      	movs	r3, #1
 8005384:	75fb      	strb	r3, [r7, #23]
 8005386:	e03a      	b.n	80053fe <Parser_command+0x27e>
		}

	} else if( number_command == 0x05 ){ // Get command status command
 8005388:	7dbb      	ldrb	r3, [r7, #22]
 800538a:	2b05      	cmp	r3, #5
 800538c:	d108      	bne.n	80053a0 <Parser_command+0x220>
		ack_transmite_buf[1] = module_settings->status_module;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	79db      	ldrb	r3, [r3, #7]
 8005392:	747b      	strb	r3, [r7, #17]
		module_settings->status_module = 0x01;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	71da      	strb	r2, [r3, #7]
		transmite_data_flag = 1;
 800539a:	2301      	movs	r3, #1
 800539c:	75fb      	strb	r3, [r7, #23]
 800539e:	e02e      	b.n	80053fe <Parser_command+0x27e>

	} else if(number_command == 0x07){
 80053a0:	7dbb      	ldrb	r3, [r7, #22]
 80053a2:	2b07      	cmp	r3, #7
 80053a4:	d125      	bne.n	80053f2 <Parser_command+0x272>

		switch(uart_receive_buffer.UART_Recive_Buf[1]){
 80053a6:	7a7b      	ldrb	r3, [r7, #9]
 80053a8:	2b43      	cmp	r3, #67	; 0x43
 80053aa:	d002      	beq.n	80053b2 <Parser_command+0x232>
 80053ac:	2b83      	cmp	r3, #131	; 0x83
 80053ae:	d00f      	beq.n	80053d0 <Parser_command+0x250>
 80053b0:	e025      	b.n	80053fe <Parser_command+0x27e>

			case 0x43: //Set ADC data format
				if( uart_receive_buffer.UART_Recive_Buf[3] == 0 ){
 80053b2:	7afb      	ldrb	r3, [r7, #11]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d103      	bne.n	80053c0 <Parser_command+0x240>
					module_settings->format_data_ADC_16b_24b = 0; //Set 16 bit format
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	725a      	strb	r2, [r3, #9]
 80053be:	e002      	b.n	80053c6 <Parser_command+0x246>
				}else{
					module_settings->format_data_ADC_16b_24b = 1; //Set 24 bit format
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	725a      	strb	r2, [r3, #9]
				}
				ack_transmite_buf[1] = 0x01;
 80053c6:	2301      	movs	r3, #1
 80053c8:	747b      	strb	r3, [r7, #17]
				transmite_data_flag = 1;
 80053ca:	2301      	movs	r3, #1
 80053cc:	75fb      	strb	r3, [r7, #23]
				break;
 80053ce:	e016      	b.n	80053fe <Parser_command+0x27e>

			case 0x83: //Read ADC data format

				ack_transmite_buf[1] = 0x01;
 80053d0:	2301      	movs	r3, #1
 80053d2:	747b      	strb	r3, [r7, #17]
				ack_transmite_buf[2] = 0x00;
 80053d4:	2300      	movs	r3, #0
 80053d6:	74bb      	strb	r3, [r7, #18]
				if( module_settings->format_data_ADC_16b_24b == 0 ){
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	7a5b      	ldrb	r3, [r3, #9]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d102      	bne.n	80053e6 <Parser_command+0x266>
					ack_transmite_buf[3] = 0x00;
 80053e0:	2300      	movs	r3, #0
 80053e2:	74fb      	strb	r3, [r7, #19]
 80053e4:	e001      	b.n	80053ea <Parser_command+0x26a>
				}else{
					ack_transmite_buf[3] = 0x18;
 80053e6:	2318      	movs	r3, #24
 80053e8:	74fb      	strb	r3, [r7, #19]
				}
				transmite_data_flag = 1;
 80053ea:	2301      	movs	r3, #1
 80053ec:	75fb      	strb	r3, [r7, #23]
				break;
 80053ee:	bf00      	nop
 80053f0:	e005      	b.n	80053fe <Parser_command+0x27e>
		}

	} else{ // Error in command 
		ack_transmite_buf[1] = 0x00;
 80053f2:	2300      	movs	r3, #0
 80053f4:	747b      	strb	r3, [r7, #17]
		ack_transmite_buf[3] = 0xFF;
 80053f6:	23ff      	movs	r3, #255	; 0xff
 80053f8:	74fb      	strb	r3, [r7, #19]
		transmite_data_flag = 1;
 80053fa:	2301      	movs	r3, #1
 80053fc:	75fb      	strb	r3, [r7, #23]
	}

	if( transmite_data_flag == 1 ){
 80053fe:	7dfb      	ldrb	r3, [r7, #23]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d105      	bne.n	8005410 <Parser_command+0x290>
		Data_transmite_UART_9B( ack_transmite_buf, USARTx );
 8005404:	f107 0310 	add.w	r3, r7, #16
 8005408:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff fe2a 	bl	8005064 <Data_transmite_UART_9B>
	}

}
 8005410:	bf00      	nop
 8005412:	371c      	adds	r7, #28
 8005414:	46bd      	mov	sp, r7
 8005416:	bd90      	pop	{r4, r7, pc}
 8005418:	48000800 	.word	0x48000800
 800541c:	48000400 	.word	0x48000400

08005420 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005458 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005424:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005426:	e003      	b.n	8005430 <LoopCopyDataInit>

08005428 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005428:	4b0c      	ldr	r3, [pc, #48]	; (800545c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800542a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800542c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800542e:	3104      	adds	r1, #4

08005430 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005430:	480b      	ldr	r0, [pc, #44]	; (8005460 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005432:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005434:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005436:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005438:	d3f6      	bcc.n	8005428 <CopyDataInit>
	ldr	r2, =_sbss
 800543a:	4a0b      	ldr	r2, [pc, #44]	; (8005468 <LoopForever+0x12>)
	b	LoopFillZerobss
 800543c:	e002      	b.n	8005444 <LoopFillZerobss>

0800543e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800543e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005440:	f842 3b04 	str.w	r3, [r2], #4

08005444 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005444:	4b09      	ldr	r3, [pc, #36]	; (800546c <LoopForever+0x16>)
	cmp	r2, r3
 8005446:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005448:	d3f9      	bcc.n	800543e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800544a:	f7ff fd5b 	bl	8004f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800544e:	f000 f811 	bl	8005474 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005452:	f7fe ff85 	bl	8004360 <main>

08005456 <LoopForever>:

LoopForever:
    b LoopForever
 8005456:	e7fe      	b.n	8005456 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005458:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 800545c:	080065c4 	.word	0x080065c4
	ldr	r0, =_sdata
 8005460:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005464:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8005468:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 800546c:	200000b8 	.word	0x200000b8

08005470 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005470:	e7fe      	b.n	8005470 <ADC1_IRQHandler>
	...

08005474 <__libc_init_array>:
 8005474:	b570      	push	{r4, r5, r6, lr}
 8005476:	4e0d      	ldr	r6, [pc, #52]	; (80054ac <__libc_init_array+0x38>)
 8005478:	4c0d      	ldr	r4, [pc, #52]	; (80054b0 <__libc_init_array+0x3c>)
 800547a:	1ba4      	subs	r4, r4, r6
 800547c:	10a4      	asrs	r4, r4, #2
 800547e:	2500      	movs	r5, #0
 8005480:	42a5      	cmp	r5, r4
 8005482:	d109      	bne.n	8005498 <__libc_init_array+0x24>
 8005484:	4e0b      	ldr	r6, [pc, #44]	; (80054b4 <__libc_init_array+0x40>)
 8005486:	4c0c      	ldr	r4, [pc, #48]	; (80054b8 <__libc_init_array+0x44>)
 8005488:	f000 ff7c 	bl	8006384 <_init>
 800548c:	1ba4      	subs	r4, r4, r6
 800548e:	10a4      	asrs	r4, r4, #2
 8005490:	2500      	movs	r5, #0
 8005492:	42a5      	cmp	r5, r4
 8005494:	d105      	bne.n	80054a2 <__libc_init_array+0x2e>
 8005496:	bd70      	pop	{r4, r5, r6, pc}
 8005498:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800549c:	4798      	blx	r3
 800549e:	3501      	adds	r5, #1
 80054a0:	e7ee      	b.n	8005480 <__libc_init_array+0xc>
 80054a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054a6:	4798      	blx	r3
 80054a8:	3501      	adds	r5, #1
 80054aa:	e7f2      	b.n	8005492 <__libc_init_array+0x1e>
 80054ac:	080065bc 	.word	0x080065bc
 80054b0:	080065bc 	.word	0x080065bc
 80054b4:	080065bc 	.word	0x080065bc
 80054b8:	080065c0 	.word	0x080065c0

080054bc <iprintf>:
 80054bc:	b40f      	push	{r0, r1, r2, r3}
 80054be:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <iprintf+0x2c>)
 80054c0:	b513      	push	{r0, r1, r4, lr}
 80054c2:	681c      	ldr	r4, [r3, #0]
 80054c4:	b124      	cbz	r4, 80054d0 <iprintf+0x14>
 80054c6:	69a3      	ldr	r3, [r4, #24]
 80054c8:	b913      	cbnz	r3, 80054d0 <iprintf+0x14>
 80054ca:	4620      	mov	r0, r4
 80054cc:	f000 fa24 	bl	8005918 <__sinit>
 80054d0:	ab05      	add	r3, sp, #20
 80054d2:	9a04      	ldr	r2, [sp, #16]
 80054d4:	68a1      	ldr	r1, [r4, #8]
 80054d6:	9301      	str	r3, [sp, #4]
 80054d8:	4620      	mov	r0, r4
 80054da:	f000 fbe9 	bl	8005cb0 <_vfiprintf_r>
 80054de:	b002      	add	sp, #8
 80054e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054e4:	b004      	add	sp, #16
 80054e6:	4770      	bx	lr
 80054e8:	20000010 	.word	0x20000010

080054ec <_puts_r>:
 80054ec:	b570      	push	{r4, r5, r6, lr}
 80054ee:	460e      	mov	r6, r1
 80054f0:	4605      	mov	r5, r0
 80054f2:	b118      	cbz	r0, 80054fc <_puts_r+0x10>
 80054f4:	6983      	ldr	r3, [r0, #24]
 80054f6:	b90b      	cbnz	r3, 80054fc <_puts_r+0x10>
 80054f8:	f000 fa0e 	bl	8005918 <__sinit>
 80054fc:	69ab      	ldr	r3, [r5, #24]
 80054fe:	68ac      	ldr	r4, [r5, #8]
 8005500:	b913      	cbnz	r3, 8005508 <_puts_r+0x1c>
 8005502:	4628      	mov	r0, r5
 8005504:	f000 fa08 	bl	8005918 <__sinit>
 8005508:	4b23      	ldr	r3, [pc, #140]	; (8005598 <_puts_r+0xac>)
 800550a:	429c      	cmp	r4, r3
 800550c:	d117      	bne.n	800553e <_puts_r+0x52>
 800550e:	686c      	ldr	r4, [r5, #4]
 8005510:	89a3      	ldrh	r3, [r4, #12]
 8005512:	071b      	lsls	r3, r3, #28
 8005514:	d51d      	bpl.n	8005552 <_puts_r+0x66>
 8005516:	6923      	ldr	r3, [r4, #16]
 8005518:	b1db      	cbz	r3, 8005552 <_puts_r+0x66>
 800551a:	3e01      	subs	r6, #1
 800551c:	68a3      	ldr	r3, [r4, #8]
 800551e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005522:	3b01      	subs	r3, #1
 8005524:	60a3      	str	r3, [r4, #8]
 8005526:	b9e9      	cbnz	r1, 8005564 <_puts_r+0x78>
 8005528:	2b00      	cmp	r3, #0
 800552a:	da2e      	bge.n	800558a <_puts_r+0x9e>
 800552c:	4622      	mov	r2, r4
 800552e:	210a      	movs	r1, #10
 8005530:	4628      	mov	r0, r5
 8005532:	f000 f83f 	bl	80055b4 <__swbuf_r>
 8005536:	3001      	adds	r0, #1
 8005538:	d011      	beq.n	800555e <_puts_r+0x72>
 800553a:	200a      	movs	r0, #10
 800553c:	bd70      	pop	{r4, r5, r6, pc}
 800553e:	4b17      	ldr	r3, [pc, #92]	; (800559c <_puts_r+0xb0>)
 8005540:	429c      	cmp	r4, r3
 8005542:	d101      	bne.n	8005548 <_puts_r+0x5c>
 8005544:	68ac      	ldr	r4, [r5, #8]
 8005546:	e7e3      	b.n	8005510 <_puts_r+0x24>
 8005548:	4b15      	ldr	r3, [pc, #84]	; (80055a0 <_puts_r+0xb4>)
 800554a:	429c      	cmp	r4, r3
 800554c:	bf08      	it	eq
 800554e:	68ec      	ldreq	r4, [r5, #12]
 8005550:	e7de      	b.n	8005510 <_puts_r+0x24>
 8005552:	4621      	mov	r1, r4
 8005554:	4628      	mov	r0, r5
 8005556:	f000 f87f 	bl	8005658 <__swsetup_r>
 800555a:	2800      	cmp	r0, #0
 800555c:	d0dd      	beq.n	800551a <_puts_r+0x2e>
 800555e:	f04f 30ff 	mov.w	r0, #4294967295
 8005562:	bd70      	pop	{r4, r5, r6, pc}
 8005564:	2b00      	cmp	r3, #0
 8005566:	da04      	bge.n	8005572 <_puts_r+0x86>
 8005568:	69a2      	ldr	r2, [r4, #24]
 800556a:	4293      	cmp	r3, r2
 800556c:	db06      	blt.n	800557c <_puts_r+0x90>
 800556e:	290a      	cmp	r1, #10
 8005570:	d004      	beq.n	800557c <_puts_r+0x90>
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	6022      	str	r2, [r4, #0]
 8005578:	7019      	strb	r1, [r3, #0]
 800557a:	e7cf      	b.n	800551c <_puts_r+0x30>
 800557c:	4622      	mov	r2, r4
 800557e:	4628      	mov	r0, r5
 8005580:	f000 f818 	bl	80055b4 <__swbuf_r>
 8005584:	3001      	adds	r0, #1
 8005586:	d1c9      	bne.n	800551c <_puts_r+0x30>
 8005588:	e7e9      	b.n	800555e <_puts_r+0x72>
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	200a      	movs	r0, #10
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	6022      	str	r2, [r4, #0]
 8005592:	7018      	strb	r0, [r3, #0]
 8005594:	bd70      	pop	{r4, r5, r6, pc}
 8005596:	bf00      	nop
 8005598:	08006544 	.word	0x08006544
 800559c:	08006564 	.word	0x08006564
 80055a0:	08006524 	.word	0x08006524

080055a4 <puts>:
 80055a4:	4b02      	ldr	r3, [pc, #8]	; (80055b0 <puts+0xc>)
 80055a6:	4601      	mov	r1, r0
 80055a8:	6818      	ldr	r0, [r3, #0]
 80055aa:	f7ff bf9f 	b.w	80054ec <_puts_r>
 80055ae:	bf00      	nop
 80055b0:	20000010 	.word	0x20000010

080055b4 <__swbuf_r>:
 80055b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b6:	460e      	mov	r6, r1
 80055b8:	4614      	mov	r4, r2
 80055ba:	4605      	mov	r5, r0
 80055bc:	b118      	cbz	r0, 80055c6 <__swbuf_r+0x12>
 80055be:	6983      	ldr	r3, [r0, #24]
 80055c0:	b90b      	cbnz	r3, 80055c6 <__swbuf_r+0x12>
 80055c2:	f000 f9a9 	bl	8005918 <__sinit>
 80055c6:	4b21      	ldr	r3, [pc, #132]	; (800564c <__swbuf_r+0x98>)
 80055c8:	429c      	cmp	r4, r3
 80055ca:	d12a      	bne.n	8005622 <__swbuf_r+0x6e>
 80055cc:	686c      	ldr	r4, [r5, #4]
 80055ce:	69a3      	ldr	r3, [r4, #24]
 80055d0:	60a3      	str	r3, [r4, #8]
 80055d2:	89a3      	ldrh	r3, [r4, #12]
 80055d4:	071a      	lsls	r2, r3, #28
 80055d6:	d52e      	bpl.n	8005636 <__swbuf_r+0x82>
 80055d8:	6923      	ldr	r3, [r4, #16]
 80055da:	b363      	cbz	r3, 8005636 <__swbuf_r+0x82>
 80055dc:	6923      	ldr	r3, [r4, #16]
 80055de:	6820      	ldr	r0, [r4, #0]
 80055e0:	1ac0      	subs	r0, r0, r3
 80055e2:	6963      	ldr	r3, [r4, #20]
 80055e4:	b2f6      	uxtb	r6, r6
 80055e6:	4298      	cmp	r0, r3
 80055e8:	4637      	mov	r7, r6
 80055ea:	db04      	blt.n	80055f6 <__swbuf_r+0x42>
 80055ec:	4621      	mov	r1, r4
 80055ee:	4628      	mov	r0, r5
 80055f0:	f000 f928 	bl	8005844 <_fflush_r>
 80055f4:	bb28      	cbnz	r0, 8005642 <__swbuf_r+0x8e>
 80055f6:	68a3      	ldr	r3, [r4, #8]
 80055f8:	3b01      	subs	r3, #1
 80055fa:	60a3      	str	r3, [r4, #8]
 80055fc:	6823      	ldr	r3, [r4, #0]
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	6022      	str	r2, [r4, #0]
 8005602:	701e      	strb	r6, [r3, #0]
 8005604:	6963      	ldr	r3, [r4, #20]
 8005606:	3001      	adds	r0, #1
 8005608:	4298      	cmp	r0, r3
 800560a:	d004      	beq.n	8005616 <__swbuf_r+0x62>
 800560c:	89a3      	ldrh	r3, [r4, #12]
 800560e:	07db      	lsls	r3, r3, #31
 8005610:	d519      	bpl.n	8005646 <__swbuf_r+0x92>
 8005612:	2e0a      	cmp	r6, #10
 8005614:	d117      	bne.n	8005646 <__swbuf_r+0x92>
 8005616:	4621      	mov	r1, r4
 8005618:	4628      	mov	r0, r5
 800561a:	f000 f913 	bl	8005844 <_fflush_r>
 800561e:	b190      	cbz	r0, 8005646 <__swbuf_r+0x92>
 8005620:	e00f      	b.n	8005642 <__swbuf_r+0x8e>
 8005622:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <__swbuf_r+0x9c>)
 8005624:	429c      	cmp	r4, r3
 8005626:	d101      	bne.n	800562c <__swbuf_r+0x78>
 8005628:	68ac      	ldr	r4, [r5, #8]
 800562a:	e7d0      	b.n	80055ce <__swbuf_r+0x1a>
 800562c:	4b09      	ldr	r3, [pc, #36]	; (8005654 <__swbuf_r+0xa0>)
 800562e:	429c      	cmp	r4, r3
 8005630:	bf08      	it	eq
 8005632:	68ec      	ldreq	r4, [r5, #12]
 8005634:	e7cb      	b.n	80055ce <__swbuf_r+0x1a>
 8005636:	4621      	mov	r1, r4
 8005638:	4628      	mov	r0, r5
 800563a:	f000 f80d 	bl	8005658 <__swsetup_r>
 800563e:	2800      	cmp	r0, #0
 8005640:	d0cc      	beq.n	80055dc <__swbuf_r+0x28>
 8005642:	f04f 37ff 	mov.w	r7, #4294967295
 8005646:	4638      	mov	r0, r7
 8005648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800564a:	bf00      	nop
 800564c:	08006544 	.word	0x08006544
 8005650:	08006564 	.word	0x08006564
 8005654:	08006524 	.word	0x08006524

08005658 <__swsetup_r>:
 8005658:	4b32      	ldr	r3, [pc, #200]	; (8005724 <__swsetup_r+0xcc>)
 800565a:	b570      	push	{r4, r5, r6, lr}
 800565c:	681d      	ldr	r5, [r3, #0]
 800565e:	4606      	mov	r6, r0
 8005660:	460c      	mov	r4, r1
 8005662:	b125      	cbz	r5, 800566e <__swsetup_r+0x16>
 8005664:	69ab      	ldr	r3, [r5, #24]
 8005666:	b913      	cbnz	r3, 800566e <__swsetup_r+0x16>
 8005668:	4628      	mov	r0, r5
 800566a:	f000 f955 	bl	8005918 <__sinit>
 800566e:	4b2e      	ldr	r3, [pc, #184]	; (8005728 <__swsetup_r+0xd0>)
 8005670:	429c      	cmp	r4, r3
 8005672:	d10f      	bne.n	8005694 <__swsetup_r+0x3c>
 8005674:	686c      	ldr	r4, [r5, #4]
 8005676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800567a:	b29a      	uxth	r2, r3
 800567c:	0715      	lsls	r5, r2, #28
 800567e:	d42c      	bmi.n	80056da <__swsetup_r+0x82>
 8005680:	06d0      	lsls	r0, r2, #27
 8005682:	d411      	bmi.n	80056a8 <__swsetup_r+0x50>
 8005684:	2209      	movs	r2, #9
 8005686:	6032      	str	r2, [r6, #0]
 8005688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800568c:	81a3      	strh	r3, [r4, #12]
 800568e:	f04f 30ff 	mov.w	r0, #4294967295
 8005692:	bd70      	pop	{r4, r5, r6, pc}
 8005694:	4b25      	ldr	r3, [pc, #148]	; (800572c <__swsetup_r+0xd4>)
 8005696:	429c      	cmp	r4, r3
 8005698:	d101      	bne.n	800569e <__swsetup_r+0x46>
 800569a:	68ac      	ldr	r4, [r5, #8]
 800569c:	e7eb      	b.n	8005676 <__swsetup_r+0x1e>
 800569e:	4b24      	ldr	r3, [pc, #144]	; (8005730 <__swsetup_r+0xd8>)
 80056a0:	429c      	cmp	r4, r3
 80056a2:	bf08      	it	eq
 80056a4:	68ec      	ldreq	r4, [r5, #12]
 80056a6:	e7e6      	b.n	8005676 <__swsetup_r+0x1e>
 80056a8:	0751      	lsls	r1, r2, #29
 80056aa:	d512      	bpl.n	80056d2 <__swsetup_r+0x7a>
 80056ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056ae:	b141      	cbz	r1, 80056c2 <__swsetup_r+0x6a>
 80056b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056b4:	4299      	cmp	r1, r3
 80056b6:	d002      	beq.n	80056be <__swsetup_r+0x66>
 80056b8:	4630      	mov	r0, r6
 80056ba:	f000 fa23 	bl	8005b04 <_free_r>
 80056be:	2300      	movs	r3, #0
 80056c0:	6363      	str	r3, [r4, #52]	; 0x34
 80056c2:	89a3      	ldrh	r3, [r4, #12]
 80056c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056c8:	81a3      	strh	r3, [r4, #12]
 80056ca:	2300      	movs	r3, #0
 80056cc:	6063      	str	r3, [r4, #4]
 80056ce:	6923      	ldr	r3, [r4, #16]
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	89a3      	ldrh	r3, [r4, #12]
 80056d4:	f043 0308 	orr.w	r3, r3, #8
 80056d8:	81a3      	strh	r3, [r4, #12]
 80056da:	6923      	ldr	r3, [r4, #16]
 80056dc:	b94b      	cbnz	r3, 80056f2 <__swsetup_r+0x9a>
 80056de:	89a3      	ldrh	r3, [r4, #12]
 80056e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056e8:	d003      	beq.n	80056f2 <__swsetup_r+0x9a>
 80056ea:	4621      	mov	r1, r4
 80056ec:	4630      	mov	r0, r6
 80056ee:	f000 f9c1 	bl	8005a74 <__smakebuf_r>
 80056f2:	89a2      	ldrh	r2, [r4, #12]
 80056f4:	f012 0301 	ands.w	r3, r2, #1
 80056f8:	d00c      	beq.n	8005714 <__swsetup_r+0xbc>
 80056fa:	2300      	movs	r3, #0
 80056fc:	60a3      	str	r3, [r4, #8]
 80056fe:	6963      	ldr	r3, [r4, #20]
 8005700:	425b      	negs	r3, r3
 8005702:	61a3      	str	r3, [r4, #24]
 8005704:	6923      	ldr	r3, [r4, #16]
 8005706:	b953      	cbnz	r3, 800571e <__swsetup_r+0xc6>
 8005708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800570c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005710:	d1ba      	bne.n	8005688 <__swsetup_r+0x30>
 8005712:	bd70      	pop	{r4, r5, r6, pc}
 8005714:	0792      	lsls	r2, r2, #30
 8005716:	bf58      	it	pl
 8005718:	6963      	ldrpl	r3, [r4, #20]
 800571a:	60a3      	str	r3, [r4, #8]
 800571c:	e7f2      	b.n	8005704 <__swsetup_r+0xac>
 800571e:	2000      	movs	r0, #0
 8005720:	e7f7      	b.n	8005712 <__swsetup_r+0xba>
 8005722:	bf00      	nop
 8005724:	20000010 	.word	0x20000010
 8005728:	08006544 	.word	0x08006544
 800572c:	08006564 	.word	0x08006564
 8005730:	08006524 	.word	0x08006524

08005734 <__sflush_r>:
 8005734:	898a      	ldrh	r2, [r1, #12]
 8005736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800573a:	4605      	mov	r5, r0
 800573c:	0710      	lsls	r0, r2, #28
 800573e:	460c      	mov	r4, r1
 8005740:	d45a      	bmi.n	80057f8 <__sflush_r+0xc4>
 8005742:	684b      	ldr	r3, [r1, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	dc05      	bgt.n	8005754 <__sflush_r+0x20>
 8005748:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	dc02      	bgt.n	8005754 <__sflush_r+0x20>
 800574e:	2000      	movs	r0, #0
 8005750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005756:	2e00      	cmp	r6, #0
 8005758:	d0f9      	beq.n	800574e <__sflush_r+0x1a>
 800575a:	2300      	movs	r3, #0
 800575c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005760:	682f      	ldr	r7, [r5, #0]
 8005762:	602b      	str	r3, [r5, #0]
 8005764:	d033      	beq.n	80057ce <__sflush_r+0x9a>
 8005766:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005768:	89a3      	ldrh	r3, [r4, #12]
 800576a:	075a      	lsls	r2, r3, #29
 800576c:	d505      	bpl.n	800577a <__sflush_r+0x46>
 800576e:	6863      	ldr	r3, [r4, #4]
 8005770:	1ac0      	subs	r0, r0, r3
 8005772:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005774:	b10b      	cbz	r3, 800577a <__sflush_r+0x46>
 8005776:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005778:	1ac0      	subs	r0, r0, r3
 800577a:	2300      	movs	r3, #0
 800577c:	4602      	mov	r2, r0
 800577e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005780:	6a21      	ldr	r1, [r4, #32]
 8005782:	4628      	mov	r0, r5
 8005784:	47b0      	blx	r6
 8005786:	1c43      	adds	r3, r0, #1
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	d106      	bne.n	800579a <__sflush_r+0x66>
 800578c:	6829      	ldr	r1, [r5, #0]
 800578e:	291d      	cmp	r1, #29
 8005790:	d84b      	bhi.n	800582a <__sflush_r+0xf6>
 8005792:	4a2b      	ldr	r2, [pc, #172]	; (8005840 <__sflush_r+0x10c>)
 8005794:	40ca      	lsrs	r2, r1
 8005796:	07d6      	lsls	r6, r2, #31
 8005798:	d547      	bpl.n	800582a <__sflush_r+0xf6>
 800579a:	2200      	movs	r2, #0
 800579c:	6062      	str	r2, [r4, #4]
 800579e:	04d9      	lsls	r1, r3, #19
 80057a0:	6922      	ldr	r2, [r4, #16]
 80057a2:	6022      	str	r2, [r4, #0]
 80057a4:	d504      	bpl.n	80057b0 <__sflush_r+0x7c>
 80057a6:	1c42      	adds	r2, r0, #1
 80057a8:	d101      	bne.n	80057ae <__sflush_r+0x7a>
 80057aa:	682b      	ldr	r3, [r5, #0]
 80057ac:	b903      	cbnz	r3, 80057b0 <__sflush_r+0x7c>
 80057ae:	6560      	str	r0, [r4, #84]	; 0x54
 80057b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057b2:	602f      	str	r7, [r5, #0]
 80057b4:	2900      	cmp	r1, #0
 80057b6:	d0ca      	beq.n	800574e <__sflush_r+0x1a>
 80057b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057bc:	4299      	cmp	r1, r3
 80057be:	d002      	beq.n	80057c6 <__sflush_r+0x92>
 80057c0:	4628      	mov	r0, r5
 80057c2:	f000 f99f 	bl	8005b04 <_free_r>
 80057c6:	2000      	movs	r0, #0
 80057c8:	6360      	str	r0, [r4, #52]	; 0x34
 80057ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057ce:	6a21      	ldr	r1, [r4, #32]
 80057d0:	2301      	movs	r3, #1
 80057d2:	4628      	mov	r0, r5
 80057d4:	47b0      	blx	r6
 80057d6:	1c41      	adds	r1, r0, #1
 80057d8:	d1c6      	bne.n	8005768 <__sflush_r+0x34>
 80057da:	682b      	ldr	r3, [r5, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0c3      	beq.n	8005768 <__sflush_r+0x34>
 80057e0:	2b1d      	cmp	r3, #29
 80057e2:	d001      	beq.n	80057e8 <__sflush_r+0xb4>
 80057e4:	2b16      	cmp	r3, #22
 80057e6:	d101      	bne.n	80057ec <__sflush_r+0xb8>
 80057e8:	602f      	str	r7, [r5, #0]
 80057ea:	e7b0      	b.n	800574e <__sflush_r+0x1a>
 80057ec:	89a3      	ldrh	r3, [r4, #12]
 80057ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f2:	81a3      	strh	r3, [r4, #12]
 80057f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f8:	690f      	ldr	r7, [r1, #16]
 80057fa:	2f00      	cmp	r7, #0
 80057fc:	d0a7      	beq.n	800574e <__sflush_r+0x1a>
 80057fe:	0793      	lsls	r3, r2, #30
 8005800:	680e      	ldr	r6, [r1, #0]
 8005802:	bf08      	it	eq
 8005804:	694b      	ldreq	r3, [r1, #20]
 8005806:	600f      	str	r7, [r1, #0]
 8005808:	bf18      	it	ne
 800580a:	2300      	movne	r3, #0
 800580c:	eba6 0807 	sub.w	r8, r6, r7
 8005810:	608b      	str	r3, [r1, #8]
 8005812:	f1b8 0f00 	cmp.w	r8, #0
 8005816:	dd9a      	ble.n	800574e <__sflush_r+0x1a>
 8005818:	4643      	mov	r3, r8
 800581a:	463a      	mov	r2, r7
 800581c:	6a21      	ldr	r1, [r4, #32]
 800581e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005820:	4628      	mov	r0, r5
 8005822:	47b0      	blx	r6
 8005824:	2800      	cmp	r0, #0
 8005826:	dc07      	bgt.n	8005838 <__sflush_r+0x104>
 8005828:	89a3      	ldrh	r3, [r4, #12]
 800582a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800582e:	81a3      	strh	r3, [r4, #12]
 8005830:	f04f 30ff 	mov.w	r0, #4294967295
 8005834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005838:	4407      	add	r7, r0
 800583a:	eba8 0800 	sub.w	r8, r8, r0
 800583e:	e7e8      	b.n	8005812 <__sflush_r+0xde>
 8005840:	20400001 	.word	0x20400001

08005844 <_fflush_r>:
 8005844:	b538      	push	{r3, r4, r5, lr}
 8005846:	690b      	ldr	r3, [r1, #16]
 8005848:	4605      	mov	r5, r0
 800584a:	460c      	mov	r4, r1
 800584c:	b1db      	cbz	r3, 8005886 <_fflush_r+0x42>
 800584e:	b118      	cbz	r0, 8005858 <_fflush_r+0x14>
 8005850:	6983      	ldr	r3, [r0, #24]
 8005852:	b90b      	cbnz	r3, 8005858 <_fflush_r+0x14>
 8005854:	f000 f860 	bl	8005918 <__sinit>
 8005858:	4b0c      	ldr	r3, [pc, #48]	; (800588c <_fflush_r+0x48>)
 800585a:	429c      	cmp	r4, r3
 800585c:	d109      	bne.n	8005872 <_fflush_r+0x2e>
 800585e:	686c      	ldr	r4, [r5, #4]
 8005860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005864:	b17b      	cbz	r3, 8005886 <_fflush_r+0x42>
 8005866:	4621      	mov	r1, r4
 8005868:	4628      	mov	r0, r5
 800586a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800586e:	f7ff bf61 	b.w	8005734 <__sflush_r>
 8005872:	4b07      	ldr	r3, [pc, #28]	; (8005890 <_fflush_r+0x4c>)
 8005874:	429c      	cmp	r4, r3
 8005876:	d101      	bne.n	800587c <_fflush_r+0x38>
 8005878:	68ac      	ldr	r4, [r5, #8]
 800587a:	e7f1      	b.n	8005860 <_fflush_r+0x1c>
 800587c:	4b05      	ldr	r3, [pc, #20]	; (8005894 <_fflush_r+0x50>)
 800587e:	429c      	cmp	r4, r3
 8005880:	bf08      	it	eq
 8005882:	68ec      	ldreq	r4, [r5, #12]
 8005884:	e7ec      	b.n	8005860 <_fflush_r+0x1c>
 8005886:	2000      	movs	r0, #0
 8005888:	bd38      	pop	{r3, r4, r5, pc}
 800588a:	bf00      	nop
 800588c:	08006544 	.word	0x08006544
 8005890:	08006564 	.word	0x08006564
 8005894:	08006524 	.word	0x08006524

08005898 <_cleanup_r>:
 8005898:	4901      	ldr	r1, [pc, #4]	; (80058a0 <_cleanup_r+0x8>)
 800589a:	f000 b8a9 	b.w	80059f0 <_fwalk_reent>
 800589e:	bf00      	nop
 80058a0:	08005845 	.word	0x08005845

080058a4 <std.isra.0>:
 80058a4:	2300      	movs	r3, #0
 80058a6:	b510      	push	{r4, lr}
 80058a8:	4604      	mov	r4, r0
 80058aa:	6003      	str	r3, [r0, #0]
 80058ac:	6043      	str	r3, [r0, #4]
 80058ae:	6083      	str	r3, [r0, #8]
 80058b0:	8181      	strh	r1, [r0, #12]
 80058b2:	6643      	str	r3, [r0, #100]	; 0x64
 80058b4:	81c2      	strh	r2, [r0, #14]
 80058b6:	6103      	str	r3, [r0, #16]
 80058b8:	6143      	str	r3, [r0, #20]
 80058ba:	6183      	str	r3, [r0, #24]
 80058bc:	4619      	mov	r1, r3
 80058be:	2208      	movs	r2, #8
 80058c0:	305c      	adds	r0, #92	; 0x5c
 80058c2:	f000 f917 	bl	8005af4 <memset>
 80058c6:	4b05      	ldr	r3, [pc, #20]	; (80058dc <std.isra.0+0x38>)
 80058c8:	6263      	str	r3, [r4, #36]	; 0x24
 80058ca:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <std.isra.0+0x3c>)
 80058cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80058ce:	4b05      	ldr	r3, [pc, #20]	; (80058e4 <std.isra.0+0x40>)
 80058d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058d2:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <std.isra.0+0x44>)
 80058d4:	6224      	str	r4, [r4, #32]
 80058d6:	6323      	str	r3, [r4, #48]	; 0x30
 80058d8:	bd10      	pop	{r4, pc}
 80058da:	bf00      	nop
 80058dc:	08006229 	.word	0x08006229
 80058e0:	0800624b 	.word	0x0800624b
 80058e4:	08006283 	.word	0x08006283
 80058e8:	080062a7 	.word	0x080062a7

080058ec <__sfmoreglue>:
 80058ec:	b570      	push	{r4, r5, r6, lr}
 80058ee:	1e4a      	subs	r2, r1, #1
 80058f0:	2568      	movs	r5, #104	; 0x68
 80058f2:	4355      	muls	r5, r2
 80058f4:	460e      	mov	r6, r1
 80058f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80058fa:	f000 f951 	bl	8005ba0 <_malloc_r>
 80058fe:	4604      	mov	r4, r0
 8005900:	b140      	cbz	r0, 8005914 <__sfmoreglue+0x28>
 8005902:	2100      	movs	r1, #0
 8005904:	e880 0042 	stmia.w	r0, {r1, r6}
 8005908:	300c      	adds	r0, #12
 800590a:	60a0      	str	r0, [r4, #8]
 800590c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005910:	f000 f8f0 	bl	8005af4 <memset>
 8005914:	4620      	mov	r0, r4
 8005916:	bd70      	pop	{r4, r5, r6, pc}

08005918 <__sinit>:
 8005918:	6983      	ldr	r3, [r0, #24]
 800591a:	b510      	push	{r4, lr}
 800591c:	4604      	mov	r4, r0
 800591e:	bb33      	cbnz	r3, 800596e <__sinit+0x56>
 8005920:	6483      	str	r3, [r0, #72]	; 0x48
 8005922:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005924:	6503      	str	r3, [r0, #80]	; 0x50
 8005926:	4b12      	ldr	r3, [pc, #72]	; (8005970 <__sinit+0x58>)
 8005928:	4a12      	ldr	r2, [pc, #72]	; (8005974 <__sinit+0x5c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6282      	str	r2, [r0, #40]	; 0x28
 800592e:	4298      	cmp	r0, r3
 8005930:	bf04      	itt	eq
 8005932:	2301      	moveq	r3, #1
 8005934:	6183      	streq	r3, [r0, #24]
 8005936:	f000 f81f 	bl	8005978 <__sfp>
 800593a:	6060      	str	r0, [r4, #4]
 800593c:	4620      	mov	r0, r4
 800593e:	f000 f81b 	bl	8005978 <__sfp>
 8005942:	60a0      	str	r0, [r4, #8]
 8005944:	4620      	mov	r0, r4
 8005946:	f000 f817 	bl	8005978 <__sfp>
 800594a:	2200      	movs	r2, #0
 800594c:	60e0      	str	r0, [r4, #12]
 800594e:	2104      	movs	r1, #4
 8005950:	6860      	ldr	r0, [r4, #4]
 8005952:	f7ff ffa7 	bl	80058a4 <std.isra.0>
 8005956:	2201      	movs	r2, #1
 8005958:	2109      	movs	r1, #9
 800595a:	68a0      	ldr	r0, [r4, #8]
 800595c:	f7ff ffa2 	bl	80058a4 <std.isra.0>
 8005960:	2202      	movs	r2, #2
 8005962:	2112      	movs	r1, #18
 8005964:	68e0      	ldr	r0, [r4, #12]
 8005966:	f7ff ff9d 	bl	80058a4 <std.isra.0>
 800596a:	2301      	movs	r3, #1
 800596c:	61a3      	str	r3, [r4, #24]
 800596e:	bd10      	pop	{r4, pc}
 8005970:	08006584 	.word	0x08006584
 8005974:	08005899 	.word	0x08005899

08005978 <__sfp>:
 8005978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597a:	4b1c      	ldr	r3, [pc, #112]	; (80059ec <__sfp+0x74>)
 800597c:	681e      	ldr	r6, [r3, #0]
 800597e:	69b3      	ldr	r3, [r6, #24]
 8005980:	4607      	mov	r7, r0
 8005982:	b913      	cbnz	r3, 800598a <__sfp+0x12>
 8005984:	4630      	mov	r0, r6
 8005986:	f7ff ffc7 	bl	8005918 <__sinit>
 800598a:	3648      	adds	r6, #72	; 0x48
 800598c:	68b4      	ldr	r4, [r6, #8]
 800598e:	6873      	ldr	r3, [r6, #4]
 8005990:	3b01      	subs	r3, #1
 8005992:	d503      	bpl.n	800599c <__sfp+0x24>
 8005994:	6833      	ldr	r3, [r6, #0]
 8005996:	b133      	cbz	r3, 80059a6 <__sfp+0x2e>
 8005998:	6836      	ldr	r6, [r6, #0]
 800599a:	e7f7      	b.n	800598c <__sfp+0x14>
 800599c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80059a0:	b16d      	cbz	r5, 80059be <__sfp+0x46>
 80059a2:	3468      	adds	r4, #104	; 0x68
 80059a4:	e7f4      	b.n	8005990 <__sfp+0x18>
 80059a6:	2104      	movs	r1, #4
 80059a8:	4638      	mov	r0, r7
 80059aa:	f7ff ff9f 	bl	80058ec <__sfmoreglue>
 80059ae:	6030      	str	r0, [r6, #0]
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d1f1      	bne.n	8005998 <__sfp+0x20>
 80059b4:	230c      	movs	r3, #12
 80059b6:	603b      	str	r3, [r7, #0]
 80059b8:	4604      	mov	r4, r0
 80059ba:	4620      	mov	r0, r4
 80059bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059c2:	81e3      	strh	r3, [r4, #14]
 80059c4:	2301      	movs	r3, #1
 80059c6:	81a3      	strh	r3, [r4, #12]
 80059c8:	6665      	str	r5, [r4, #100]	; 0x64
 80059ca:	6025      	str	r5, [r4, #0]
 80059cc:	60a5      	str	r5, [r4, #8]
 80059ce:	6065      	str	r5, [r4, #4]
 80059d0:	6125      	str	r5, [r4, #16]
 80059d2:	6165      	str	r5, [r4, #20]
 80059d4:	61a5      	str	r5, [r4, #24]
 80059d6:	2208      	movs	r2, #8
 80059d8:	4629      	mov	r1, r5
 80059da:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059de:	f000 f889 	bl	8005af4 <memset>
 80059e2:	6365      	str	r5, [r4, #52]	; 0x34
 80059e4:	63a5      	str	r5, [r4, #56]	; 0x38
 80059e6:	64a5      	str	r5, [r4, #72]	; 0x48
 80059e8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80059ea:	e7e6      	b.n	80059ba <__sfp+0x42>
 80059ec:	08006584 	.word	0x08006584

080059f0 <_fwalk_reent>:
 80059f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059f4:	4680      	mov	r8, r0
 80059f6:	4689      	mov	r9, r1
 80059f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80059fc:	2600      	movs	r6, #0
 80059fe:	b914      	cbnz	r4, 8005a06 <_fwalk_reent+0x16>
 8005a00:	4630      	mov	r0, r6
 8005a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a06:	68a5      	ldr	r5, [r4, #8]
 8005a08:	6867      	ldr	r7, [r4, #4]
 8005a0a:	3f01      	subs	r7, #1
 8005a0c:	d501      	bpl.n	8005a12 <_fwalk_reent+0x22>
 8005a0e:	6824      	ldr	r4, [r4, #0]
 8005a10:	e7f5      	b.n	80059fe <_fwalk_reent+0xe>
 8005a12:	89ab      	ldrh	r3, [r5, #12]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d907      	bls.n	8005a28 <_fwalk_reent+0x38>
 8005a18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	d003      	beq.n	8005a28 <_fwalk_reent+0x38>
 8005a20:	4629      	mov	r1, r5
 8005a22:	4640      	mov	r0, r8
 8005a24:	47c8      	blx	r9
 8005a26:	4306      	orrs	r6, r0
 8005a28:	3568      	adds	r5, #104	; 0x68
 8005a2a:	e7ee      	b.n	8005a0a <_fwalk_reent+0x1a>

08005a2c <__swhatbuf_r>:
 8005a2c:	b570      	push	{r4, r5, r6, lr}
 8005a2e:	460e      	mov	r6, r1
 8005a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a34:	2900      	cmp	r1, #0
 8005a36:	b090      	sub	sp, #64	; 0x40
 8005a38:	4614      	mov	r4, r2
 8005a3a:	461d      	mov	r5, r3
 8005a3c:	da07      	bge.n	8005a4e <__swhatbuf_r+0x22>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	602b      	str	r3, [r5, #0]
 8005a42:	89b3      	ldrh	r3, [r6, #12]
 8005a44:	061a      	lsls	r2, r3, #24
 8005a46:	d410      	bmi.n	8005a6a <__swhatbuf_r+0x3e>
 8005a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a4c:	e00e      	b.n	8005a6c <__swhatbuf_r+0x40>
 8005a4e:	aa01      	add	r2, sp, #4
 8005a50:	f000 fc50 	bl	80062f4 <_fstat_r>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	dbf2      	blt.n	8005a3e <__swhatbuf_r+0x12>
 8005a58:	9a02      	ldr	r2, [sp, #8]
 8005a5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a62:	425a      	negs	r2, r3
 8005a64:	415a      	adcs	r2, r3
 8005a66:	602a      	str	r2, [r5, #0]
 8005a68:	e7ee      	b.n	8005a48 <__swhatbuf_r+0x1c>
 8005a6a:	2340      	movs	r3, #64	; 0x40
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	6023      	str	r3, [r4, #0]
 8005a70:	b010      	add	sp, #64	; 0x40
 8005a72:	bd70      	pop	{r4, r5, r6, pc}

08005a74 <__smakebuf_r>:
 8005a74:	898b      	ldrh	r3, [r1, #12]
 8005a76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a78:	079d      	lsls	r5, r3, #30
 8005a7a:	4606      	mov	r6, r0
 8005a7c:	460c      	mov	r4, r1
 8005a7e:	d507      	bpl.n	8005a90 <__smakebuf_r+0x1c>
 8005a80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a84:	6023      	str	r3, [r4, #0]
 8005a86:	6123      	str	r3, [r4, #16]
 8005a88:	2301      	movs	r3, #1
 8005a8a:	6163      	str	r3, [r4, #20]
 8005a8c:	b002      	add	sp, #8
 8005a8e:	bd70      	pop	{r4, r5, r6, pc}
 8005a90:	ab01      	add	r3, sp, #4
 8005a92:	466a      	mov	r2, sp
 8005a94:	f7ff ffca 	bl	8005a2c <__swhatbuf_r>
 8005a98:	9900      	ldr	r1, [sp, #0]
 8005a9a:	4605      	mov	r5, r0
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	f000 f87f 	bl	8005ba0 <_malloc_r>
 8005aa2:	b948      	cbnz	r0, 8005ab8 <__smakebuf_r+0x44>
 8005aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aa8:	059a      	lsls	r2, r3, #22
 8005aaa:	d4ef      	bmi.n	8005a8c <__smakebuf_r+0x18>
 8005aac:	f023 0303 	bic.w	r3, r3, #3
 8005ab0:	f043 0302 	orr.w	r3, r3, #2
 8005ab4:	81a3      	strh	r3, [r4, #12]
 8005ab6:	e7e3      	b.n	8005a80 <__smakebuf_r+0xc>
 8005ab8:	4b0d      	ldr	r3, [pc, #52]	; (8005af0 <__smakebuf_r+0x7c>)
 8005aba:	62b3      	str	r3, [r6, #40]	; 0x28
 8005abc:	89a3      	ldrh	r3, [r4, #12]
 8005abe:	6020      	str	r0, [r4, #0]
 8005ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac4:	81a3      	strh	r3, [r4, #12]
 8005ac6:	9b00      	ldr	r3, [sp, #0]
 8005ac8:	6163      	str	r3, [r4, #20]
 8005aca:	9b01      	ldr	r3, [sp, #4]
 8005acc:	6120      	str	r0, [r4, #16]
 8005ace:	b15b      	cbz	r3, 8005ae8 <__smakebuf_r+0x74>
 8005ad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	f000 fc1f 	bl	8006318 <_isatty_r>
 8005ada:	b128      	cbz	r0, 8005ae8 <__smakebuf_r+0x74>
 8005adc:	89a3      	ldrh	r3, [r4, #12]
 8005ade:	f023 0303 	bic.w	r3, r3, #3
 8005ae2:	f043 0301 	orr.w	r3, r3, #1
 8005ae6:	81a3      	strh	r3, [r4, #12]
 8005ae8:	89a3      	ldrh	r3, [r4, #12]
 8005aea:	431d      	orrs	r5, r3
 8005aec:	81a5      	strh	r5, [r4, #12]
 8005aee:	e7cd      	b.n	8005a8c <__smakebuf_r+0x18>
 8005af0:	08005899 	.word	0x08005899

08005af4 <memset>:
 8005af4:	4402      	add	r2, r0
 8005af6:	4603      	mov	r3, r0
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d100      	bne.n	8005afe <memset+0xa>
 8005afc:	4770      	bx	lr
 8005afe:	f803 1b01 	strb.w	r1, [r3], #1
 8005b02:	e7f9      	b.n	8005af8 <memset+0x4>

08005b04 <_free_r>:
 8005b04:	b538      	push	{r3, r4, r5, lr}
 8005b06:	4605      	mov	r5, r0
 8005b08:	2900      	cmp	r1, #0
 8005b0a:	d045      	beq.n	8005b98 <_free_r+0x94>
 8005b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b10:	1f0c      	subs	r4, r1, #4
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	bfb8      	it	lt
 8005b16:	18e4      	addlt	r4, r4, r3
 8005b18:	f000 fc20 	bl	800635c <__malloc_lock>
 8005b1c:	4a1f      	ldr	r2, [pc, #124]	; (8005b9c <_free_r+0x98>)
 8005b1e:	6813      	ldr	r3, [r2, #0]
 8005b20:	4610      	mov	r0, r2
 8005b22:	b933      	cbnz	r3, 8005b32 <_free_r+0x2e>
 8005b24:	6063      	str	r3, [r4, #4]
 8005b26:	6014      	str	r4, [r2, #0]
 8005b28:	4628      	mov	r0, r5
 8005b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b2e:	f000 bc16 	b.w	800635e <__malloc_unlock>
 8005b32:	42a3      	cmp	r3, r4
 8005b34:	d90c      	bls.n	8005b50 <_free_r+0x4c>
 8005b36:	6821      	ldr	r1, [r4, #0]
 8005b38:	1862      	adds	r2, r4, r1
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	bf04      	itt	eq
 8005b3e:	681a      	ldreq	r2, [r3, #0]
 8005b40:	685b      	ldreq	r3, [r3, #4]
 8005b42:	6063      	str	r3, [r4, #4]
 8005b44:	bf04      	itt	eq
 8005b46:	1852      	addeq	r2, r2, r1
 8005b48:	6022      	streq	r2, [r4, #0]
 8005b4a:	6004      	str	r4, [r0, #0]
 8005b4c:	e7ec      	b.n	8005b28 <_free_r+0x24>
 8005b4e:	4613      	mov	r3, r2
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	b10a      	cbz	r2, 8005b58 <_free_r+0x54>
 8005b54:	42a2      	cmp	r2, r4
 8005b56:	d9fa      	bls.n	8005b4e <_free_r+0x4a>
 8005b58:	6819      	ldr	r1, [r3, #0]
 8005b5a:	1858      	adds	r0, r3, r1
 8005b5c:	42a0      	cmp	r0, r4
 8005b5e:	d10b      	bne.n	8005b78 <_free_r+0x74>
 8005b60:	6820      	ldr	r0, [r4, #0]
 8005b62:	4401      	add	r1, r0
 8005b64:	1858      	adds	r0, r3, r1
 8005b66:	4282      	cmp	r2, r0
 8005b68:	6019      	str	r1, [r3, #0]
 8005b6a:	d1dd      	bne.n	8005b28 <_free_r+0x24>
 8005b6c:	6810      	ldr	r0, [r2, #0]
 8005b6e:	6852      	ldr	r2, [r2, #4]
 8005b70:	605a      	str	r2, [r3, #4]
 8005b72:	4401      	add	r1, r0
 8005b74:	6019      	str	r1, [r3, #0]
 8005b76:	e7d7      	b.n	8005b28 <_free_r+0x24>
 8005b78:	d902      	bls.n	8005b80 <_free_r+0x7c>
 8005b7a:	230c      	movs	r3, #12
 8005b7c:	602b      	str	r3, [r5, #0]
 8005b7e:	e7d3      	b.n	8005b28 <_free_r+0x24>
 8005b80:	6820      	ldr	r0, [r4, #0]
 8005b82:	1821      	adds	r1, r4, r0
 8005b84:	428a      	cmp	r2, r1
 8005b86:	bf04      	itt	eq
 8005b88:	6811      	ldreq	r1, [r2, #0]
 8005b8a:	6852      	ldreq	r2, [r2, #4]
 8005b8c:	6062      	str	r2, [r4, #4]
 8005b8e:	bf04      	itt	eq
 8005b90:	1809      	addeq	r1, r1, r0
 8005b92:	6021      	streq	r1, [r4, #0]
 8005b94:	605c      	str	r4, [r3, #4]
 8005b96:	e7c7      	b.n	8005b28 <_free_r+0x24>
 8005b98:	bd38      	pop	{r3, r4, r5, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000094 	.word	0x20000094

08005ba0 <_malloc_r>:
 8005ba0:	b570      	push	{r4, r5, r6, lr}
 8005ba2:	1ccd      	adds	r5, r1, #3
 8005ba4:	f025 0503 	bic.w	r5, r5, #3
 8005ba8:	3508      	adds	r5, #8
 8005baa:	2d0c      	cmp	r5, #12
 8005bac:	bf38      	it	cc
 8005bae:	250c      	movcc	r5, #12
 8005bb0:	2d00      	cmp	r5, #0
 8005bb2:	4606      	mov	r6, r0
 8005bb4:	db01      	blt.n	8005bba <_malloc_r+0x1a>
 8005bb6:	42a9      	cmp	r1, r5
 8005bb8:	d903      	bls.n	8005bc2 <_malloc_r+0x22>
 8005bba:	230c      	movs	r3, #12
 8005bbc:	6033      	str	r3, [r6, #0]
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	bd70      	pop	{r4, r5, r6, pc}
 8005bc2:	f000 fbcb 	bl	800635c <__malloc_lock>
 8005bc6:	4a23      	ldr	r2, [pc, #140]	; (8005c54 <_malloc_r+0xb4>)
 8005bc8:	6814      	ldr	r4, [r2, #0]
 8005bca:	4621      	mov	r1, r4
 8005bcc:	b991      	cbnz	r1, 8005bf4 <_malloc_r+0x54>
 8005bce:	4c22      	ldr	r4, [pc, #136]	; (8005c58 <_malloc_r+0xb8>)
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	b91b      	cbnz	r3, 8005bdc <_malloc_r+0x3c>
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	f000 fb17 	bl	8006208 <_sbrk_r>
 8005bda:	6020      	str	r0, [r4, #0]
 8005bdc:	4629      	mov	r1, r5
 8005bde:	4630      	mov	r0, r6
 8005be0:	f000 fb12 	bl	8006208 <_sbrk_r>
 8005be4:	1c43      	adds	r3, r0, #1
 8005be6:	d126      	bne.n	8005c36 <_malloc_r+0x96>
 8005be8:	230c      	movs	r3, #12
 8005bea:	6033      	str	r3, [r6, #0]
 8005bec:	4630      	mov	r0, r6
 8005bee:	f000 fbb6 	bl	800635e <__malloc_unlock>
 8005bf2:	e7e4      	b.n	8005bbe <_malloc_r+0x1e>
 8005bf4:	680b      	ldr	r3, [r1, #0]
 8005bf6:	1b5b      	subs	r3, r3, r5
 8005bf8:	d41a      	bmi.n	8005c30 <_malloc_r+0x90>
 8005bfa:	2b0b      	cmp	r3, #11
 8005bfc:	d90f      	bls.n	8005c1e <_malloc_r+0x7e>
 8005bfe:	600b      	str	r3, [r1, #0]
 8005c00:	50cd      	str	r5, [r1, r3]
 8005c02:	18cc      	adds	r4, r1, r3
 8005c04:	4630      	mov	r0, r6
 8005c06:	f000 fbaa 	bl	800635e <__malloc_unlock>
 8005c0a:	f104 000b 	add.w	r0, r4, #11
 8005c0e:	1d23      	adds	r3, r4, #4
 8005c10:	f020 0007 	bic.w	r0, r0, #7
 8005c14:	1ac3      	subs	r3, r0, r3
 8005c16:	d01b      	beq.n	8005c50 <_malloc_r+0xb0>
 8005c18:	425a      	negs	r2, r3
 8005c1a:	50e2      	str	r2, [r4, r3]
 8005c1c:	bd70      	pop	{r4, r5, r6, pc}
 8005c1e:	428c      	cmp	r4, r1
 8005c20:	bf0d      	iteet	eq
 8005c22:	6863      	ldreq	r3, [r4, #4]
 8005c24:	684b      	ldrne	r3, [r1, #4]
 8005c26:	6063      	strne	r3, [r4, #4]
 8005c28:	6013      	streq	r3, [r2, #0]
 8005c2a:	bf18      	it	ne
 8005c2c:	460c      	movne	r4, r1
 8005c2e:	e7e9      	b.n	8005c04 <_malloc_r+0x64>
 8005c30:	460c      	mov	r4, r1
 8005c32:	6849      	ldr	r1, [r1, #4]
 8005c34:	e7ca      	b.n	8005bcc <_malloc_r+0x2c>
 8005c36:	1cc4      	adds	r4, r0, #3
 8005c38:	f024 0403 	bic.w	r4, r4, #3
 8005c3c:	42a0      	cmp	r0, r4
 8005c3e:	d005      	beq.n	8005c4c <_malloc_r+0xac>
 8005c40:	1a21      	subs	r1, r4, r0
 8005c42:	4630      	mov	r0, r6
 8005c44:	f000 fae0 	bl	8006208 <_sbrk_r>
 8005c48:	3001      	adds	r0, #1
 8005c4a:	d0cd      	beq.n	8005be8 <_malloc_r+0x48>
 8005c4c:	6025      	str	r5, [r4, #0]
 8005c4e:	e7d9      	b.n	8005c04 <_malloc_r+0x64>
 8005c50:	bd70      	pop	{r4, r5, r6, pc}
 8005c52:	bf00      	nop
 8005c54:	20000094 	.word	0x20000094
 8005c58:	20000098 	.word	0x20000098

08005c5c <__sfputc_r>:
 8005c5c:	6893      	ldr	r3, [r2, #8]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	b410      	push	{r4}
 8005c64:	6093      	str	r3, [r2, #8]
 8005c66:	da09      	bge.n	8005c7c <__sfputc_r+0x20>
 8005c68:	6994      	ldr	r4, [r2, #24]
 8005c6a:	42a3      	cmp	r3, r4
 8005c6c:	db02      	blt.n	8005c74 <__sfputc_r+0x18>
 8005c6e:	b2cb      	uxtb	r3, r1
 8005c70:	2b0a      	cmp	r3, #10
 8005c72:	d103      	bne.n	8005c7c <__sfputc_r+0x20>
 8005c74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c78:	f7ff bc9c 	b.w	80055b4 <__swbuf_r>
 8005c7c:	6813      	ldr	r3, [r2, #0]
 8005c7e:	1c58      	adds	r0, r3, #1
 8005c80:	6010      	str	r0, [r2, #0]
 8005c82:	7019      	strb	r1, [r3, #0]
 8005c84:	b2c8      	uxtb	r0, r1
 8005c86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <__sfputs_r>:
 8005c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8e:	4606      	mov	r6, r0
 8005c90:	460f      	mov	r7, r1
 8005c92:	4614      	mov	r4, r2
 8005c94:	18d5      	adds	r5, r2, r3
 8005c96:	42ac      	cmp	r4, r5
 8005c98:	d101      	bne.n	8005c9e <__sfputs_r+0x12>
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	e007      	b.n	8005cae <__sfputs_r+0x22>
 8005c9e:	463a      	mov	r2, r7
 8005ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	f7ff ffd9 	bl	8005c5c <__sfputc_r>
 8005caa:	1c43      	adds	r3, r0, #1
 8005cac:	d1f3      	bne.n	8005c96 <__sfputs_r+0xa>
 8005cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005cb0 <_vfiprintf_r>:
 8005cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb4:	b09d      	sub	sp, #116	; 0x74
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	4617      	mov	r7, r2
 8005cba:	9303      	str	r3, [sp, #12]
 8005cbc:	4606      	mov	r6, r0
 8005cbe:	b118      	cbz	r0, 8005cc8 <_vfiprintf_r+0x18>
 8005cc0:	6983      	ldr	r3, [r0, #24]
 8005cc2:	b90b      	cbnz	r3, 8005cc8 <_vfiprintf_r+0x18>
 8005cc4:	f7ff fe28 	bl	8005918 <__sinit>
 8005cc8:	4b7c      	ldr	r3, [pc, #496]	; (8005ebc <_vfiprintf_r+0x20c>)
 8005cca:	429c      	cmp	r4, r3
 8005ccc:	d157      	bne.n	8005d7e <_vfiprintf_r+0xce>
 8005cce:	6874      	ldr	r4, [r6, #4]
 8005cd0:	89a3      	ldrh	r3, [r4, #12]
 8005cd2:	0718      	lsls	r0, r3, #28
 8005cd4:	d55d      	bpl.n	8005d92 <_vfiprintf_r+0xe2>
 8005cd6:	6923      	ldr	r3, [r4, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d05a      	beq.n	8005d92 <_vfiprintf_r+0xe2>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce0:	2320      	movs	r3, #32
 8005ce2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ce6:	2330      	movs	r3, #48	; 0x30
 8005ce8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cec:	f04f 0b01 	mov.w	fp, #1
 8005cf0:	46b8      	mov	r8, r7
 8005cf2:	4645      	mov	r5, r8
 8005cf4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d155      	bne.n	8005da8 <_vfiprintf_r+0xf8>
 8005cfc:	ebb8 0a07 	subs.w	sl, r8, r7
 8005d00:	d00b      	beq.n	8005d1a <_vfiprintf_r+0x6a>
 8005d02:	4653      	mov	r3, sl
 8005d04:	463a      	mov	r2, r7
 8005d06:	4621      	mov	r1, r4
 8005d08:	4630      	mov	r0, r6
 8005d0a:	f7ff ffbf 	bl	8005c8c <__sfputs_r>
 8005d0e:	3001      	adds	r0, #1
 8005d10:	f000 80c4 	beq.w	8005e9c <_vfiprintf_r+0x1ec>
 8005d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d16:	4453      	add	r3, sl
 8005d18:	9309      	str	r3, [sp, #36]	; 0x24
 8005d1a:	f898 3000 	ldrb.w	r3, [r8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 80bc 	beq.w	8005e9c <_vfiprintf_r+0x1ec>
 8005d24:	2300      	movs	r3, #0
 8005d26:	f04f 32ff 	mov.w	r2, #4294967295
 8005d2a:	9304      	str	r3, [sp, #16]
 8005d2c:	9307      	str	r3, [sp, #28]
 8005d2e:	9205      	str	r2, [sp, #20]
 8005d30:	9306      	str	r3, [sp, #24]
 8005d32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d36:	931a      	str	r3, [sp, #104]	; 0x68
 8005d38:	2205      	movs	r2, #5
 8005d3a:	7829      	ldrb	r1, [r5, #0]
 8005d3c:	4860      	ldr	r0, [pc, #384]	; (8005ec0 <_vfiprintf_r+0x210>)
 8005d3e:	f7fa fa4f 	bl	80001e0 <memchr>
 8005d42:	f105 0801 	add.w	r8, r5, #1
 8005d46:	9b04      	ldr	r3, [sp, #16]
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	d131      	bne.n	8005db0 <_vfiprintf_r+0x100>
 8005d4c:	06d9      	lsls	r1, r3, #27
 8005d4e:	bf44      	itt	mi
 8005d50:	2220      	movmi	r2, #32
 8005d52:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d56:	071a      	lsls	r2, r3, #28
 8005d58:	bf44      	itt	mi
 8005d5a:	222b      	movmi	r2, #43	; 0x2b
 8005d5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d60:	782a      	ldrb	r2, [r5, #0]
 8005d62:	2a2a      	cmp	r2, #42	; 0x2a
 8005d64:	d02c      	beq.n	8005dc0 <_vfiprintf_r+0x110>
 8005d66:	9a07      	ldr	r2, [sp, #28]
 8005d68:	2100      	movs	r1, #0
 8005d6a:	200a      	movs	r0, #10
 8005d6c:	46a8      	mov	r8, r5
 8005d6e:	3501      	adds	r5, #1
 8005d70:	f898 3000 	ldrb.w	r3, [r8]
 8005d74:	3b30      	subs	r3, #48	; 0x30
 8005d76:	2b09      	cmp	r3, #9
 8005d78:	d96d      	bls.n	8005e56 <_vfiprintf_r+0x1a6>
 8005d7a:	b371      	cbz	r1, 8005dda <_vfiprintf_r+0x12a>
 8005d7c:	e026      	b.n	8005dcc <_vfiprintf_r+0x11c>
 8005d7e:	4b51      	ldr	r3, [pc, #324]	; (8005ec4 <_vfiprintf_r+0x214>)
 8005d80:	429c      	cmp	r4, r3
 8005d82:	d101      	bne.n	8005d88 <_vfiprintf_r+0xd8>
 8005d84:	68b4      	ldr	r4, [r6, #8]
 8005d86:	e7a3      	b.n	8005cd0 <_vfiprintf_r+0x20>
 8005d88:	4b4f      	ldr	r3, [pc, #316]	; (8005ec8 <_vfiprintf_r+0x218>)
 8005d8a:	429c      	cmp	r4, r3
 8005d8c:	bf08      	it	eq
 8005d8e:	68f4      	ldreq	r4, [r6, #12]
 8005d90:	e79e      	b.n	8005cd0 <_vfiprintf_r+0x20>
 8005d92:	4621      	mov	r1, r4
 8005d94:	4630      	mov	r0, r6
 8005d96:	f7ff fc5f 	bl	8005658 <__swsetup_r>
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	d09e      	beq.n	8005cdc <_vfiprintf_r+0x2c>
 8005d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005da2:	b01d      	add	sp, #116	; 0x74
 8005da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da8:	2b25      	cmp	r3, #37	; 0x25
 8005daa:	d0a7      	beq.n	8005cfc <_vfiprintf_r+0x4c>
 8005dac:	46a8      	mov	r8, r5
 8005dae:	e7a0      	b.n	8005cf2 <_vfiprintf_r+0x42>
 8005db0:	4a43      	ldr	r2, [pc, #268]	; (8005ec0 <_vfiprintf_r+0x210>)
 8005db2:	1a80      	subs	r0, r0, r2
 8005db4:	fa0b f000 	lsl.w	r0, fp, r0
 8005db8:	4318      	orrs	r0, r3
 8005dba:	9004      	str	r0, [sp, #16]
 8005dbc:	4645      	mov	r5, r8
 8005dbe:	e7bb      	b.n	8005d38 <_vfiprintf_r+0x88>
 8005dc0:	9a03      	ldr	r2, [sp, #12]
 8005dc2:	1d11      	adds	r1, r2, #4
 8005dc4:	6812      	ldr	r2, [r2, #0]
 8005dc6:	9103      	str	r1, [sp, #12]
 8005dc8:	2a00      	cmp	r2, #0
 8005dca:	db01      	blt.n	8005dd0 <_vfiprintf_r+0x120>
 8005dcc:	9207      	str	r2, [sp, #28]
 8005dce:	e004      	b.n	8005dda <_vfiprintf_r+0x12a>
 8005dd0:	4252      	negs	r2, r2
 8005dd2:	f043 0302 	orr.w	r3, r3, #2
 8005dd6:	9207      	str	r2, [sp, #28]
 8005dd8:	9304      	str	r3, [sp, #16]
 8005dda:	f898 3000 	ldrb.w	r3, [r8]
 8005dde:	2b2e      	cmp	r3, #46	; 0x2e
 8005de0:	d110      	bne.n	8005e04 <_vfiprintf_r+0x154>
 8005de2:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005de6:	2b2a      	cmp	r3, #42	; 0x2a
 8005de8:	f108 0101 	add.w	r1, r8, #1
 8005dec:	d137      	bne.n	8005e5e <_vfiprintf_r+0x1ae>
 8005dee:	9b03      	ldr	r3, [sp, #12]
 8005df0:	1d1a      	adds	r2, r3, #4
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	9203      	str	r2, [sp, #12]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	bfb8      	it	lt
 8005dfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8005dfe:	f108 0802 	add.w	r8, r8, #2
 8005e02:	9305      	str	r3, [sp, #20]
 8005e04:	4d31      	ldr	r5, [pc, #196]	; (8005ecc <_vfiprintf_r+0x21c>)
 8005e06:	f898 1000 	ldrb.w	r1, [r8]
 8005e0a:	2203      	movs	r2, #3
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	f7fa f9e7 	bl	80001e0 <memchr>
 8005e12:	b140      	cbz	r0, 8005e26 <_vfiprintf_r+0x176>
 8005e14:	2340      	movs	r3, #64	; 0x40
 8005e16:	1b40      	subs	r0, r0, r5
 8005e18:	fa03 f000 	lsl.w	r0, r3, r0
 8005e1c:	9b04      	ldr	r3, [sp, #16]
 8005e1e:	4303      	orrs	r3, r0
 8005e20:	9304      	str	r3, [sp, #16]
 8005e22:	f108 0801 	add.w	r8, r8, #1
 8005e26:	f898 1000 	ldrb.w	r1, [r8]
 8005e2a:	4829      	ldr	r0, [pc, #164]	; (8005ed0 <_vfiprintf_r+0x220>)
 8005e2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e30:	2206      	movs	r2, #6
 8005e32:	f108 0701 	add.w	r7, r8, #1
 8005e36:	f7fa f9d3 	bl	80001e0 <memchr>
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	d034      	beq.n	8005ea8 <_vfiprintf_r+0x1f8>
 8005e3e:	4b25      	ldr	r3, [pc, #148]	; (8005ed4 <_vfiprintf_r+0x224>)
 8005e40:	bb03      	cbnz	r3, 8005e84 <_vfiprintf_r+0x1d4>
 8005e42:	9b03      	ldr	r3, [sp, #12]
 8005e44:	3307      	adds	r3, #7
 8005e46:	f023 0307 	bic.w	r3, r3, #7
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	9303      	str	r3, [sp, #12]
 8005e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e50:	444b      	add	r3, r9
 8005e52:	9309      	str	r3, [sp, #36]	; 0x24
 8005e54:	e74c      	b.n	8005cf0 <_vfiprintf_r+0x40>
 8005e56:	fb00 3202 	mla	r2, r0, r2, r3
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	e786      	b.n	8005d6c <_vfiprintf_r+0xbc>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	9305      	str	r3, [sp, #20]
 8005e62:	4618      	mov	r0, r3
 8005e64:	250a      	movs	r5, #10
 8005e66:	4688      	mov	r8, r1
 8005e68:	3101      	adds	r1, #1
 8005e6a:	f898 2000 	ldrb.w	r2, [r8]
 8005e6e:	3a30      	subs	r2, #48	; 0x30
 8005e70:	2a09      	cmp	r2, #9
 8005e72:	d903      	bls.n	8005e7c <_vfiprintf_r+0x1cc>
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0c5      	beq.n	8005e04 <_vfiprintf_r+0x154>
 8005e78:	9005      	str	r0, [sp, #20]
 8005e7a:	e7c3      	b.n	8005e04 <_vfiprintf_r+0x154>
 8005e7c:	fb05 2000 	mla	r0, r5, r0, r2
 8005e80:	2301      	movs	r3, #1
 8005e82:	e7f0      	b.n	8005e66 <_vfiprintf_r+0x1b6>
 8005e84:	ab03      	add	r3, sp, #12
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	4622      	mov	r2, r4
 8005e8a:	4b13      	ldr	r3, [pc, #76]	; (8005ed8 <_vfiprintf_r+0x228>)
 8005e8c:	a904      	add	r1, sp, #16
 8005e8e:	4630      	mov	r0, r6
 8005e90:	f3af 8000 	nop.w
 8005e94:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005e98:	4681      	mov	r9, r0
 8005e9a:	d1d8      	bne.n	8005e4e <_vfiprintf_r+0x19e>
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	065b      	lsls	r3, r3, #25
 8005ea0:	f53f af7d 	bmi.w	8005d9e <_vfiprintf_r+0xee>
 8005ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ea6:	e77c      	b.n	8005da2 <_vfiprintf_r+0xf2>
 8005ea8:	ab03      	add	r3, sp, #12
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	4622      	mov	r2, r4
 8005eae:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <_vfiprintf_r+0x228>)
 8005eb0:	a904      	add	r1, sp, #16
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	f000 f888 	bl	8005fc8 <_printf_i>
 8005eb8:	e7ec      	b.n	8005e94 <_vfiprintf_r+0x1e4>
 8005eba:	bf00      	nop
 8005ebc:	08006544 	.word	0x08006544
 8005ec0:	08006588 	.word	0x08006588
 8005ec4:	08006564 	.word	0x08006564
 8005ec8:	08006524 	.word	0x08006524
 8005ecc:	0800658e 	.word	0x0800658e
 8005ed0:	08006592 	.word	0x08006592
 8005ed4:	00000000 	.word	0x00000000
 8005ed8:	08005c8d 	.word	0x08005c8d

08005edc <_printf_common>:
 8005edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee0:	4691      	mov	r9, r2
 8005ee2:	461f      	mov	r7, r3
 8005ee4:	688a      	ldr	r2, [r1, #8]
 8005ee6:	690b      	ldr	r3, [r1, #16]
 8005ee8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005eec:	4293      	cmp	r3, r2
 8005eee:	bfb8      	it	lt
 8005ef0:	4613      	movlt	r3, r2
 8005ef2:	f8c9 3000 	str.w	r3, [r9]
 8005ef6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005efa:	4606      	mov	r6, r0
 8005efc:	460c      	mov	r4, r1
 8005efe:	b112      	cbz	r2, 8005f06 <_printf_common+0x2a>
 8005f00:	3301      	adds	r3, #1
 8005f02:	f8c9 3000 	str.w	r3, [r9]
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	0699      	lsls	r1, r3, #26
 8005f0a:	bf42      	ittt	mi
 8005f0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f10:	3302      	addmi	r3, #2
 8005f12:	f8c9 3000 	strmi.w	r3, [r9]
 8005f16:	6825      	ldr	r5, [r4, #0]
 8005f18:	f015 0506 	ands.w	r5, r5, #6
 8005f1c:	d107      	bne.n	8005f2e <_printf_common+0x52>
 8005f1e:	f104 0a19 	add.w	sl, r4, #25
 8005f22:	68e3      	ldr	r3, [r4, #12]
 8005f24:	f8d9 2000 	ldr.w	r2, [r9]
 8005f28:	1a9b      	subs	r3, r3, r2
 8005f2a:	429d      	cmp	r5, r3
 8005f2c:	db29      	blt.n	8005f82 <_printf_common+0xa6>
 8005f2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f32:	6822      	ldr	r2, [r4, #0]
 8005f34:	3300      	adds	r3, #0
 8005f36:	bf18      	it	ne
 8005f38:	2301      	movne	r3, #1
 8005f3a:	0692      	lsls	r2, r2, #26
 8005f3c:	d42e      	bmi.n	8005f9c <_printf_common+0xc0>
 8005f3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f42:	4639      	mov	r1, r7
 8005f44:	4630      	mov	r0, r6
 8005f46:	47c0      	blx	r8
 8005f48:	3001      	adds	r0, #1
 8005f4a:	d021      	beq.n	8005f90 <_printf_common+0xb4>
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	68e5      	ldr	r5, [r4, #12]
 8005f50:	f8d9 2000 	ldr.w	r2, [r9]
 8005f54:	f003 0306 	and.w	r3, r3, #6
 8005f58:	2b04      	cmp	r3, #4
 8005f5a:	bf08      	it	eq
 8005f5c:	1aad      	subeq	r5, r5, r2
 8005f5e:	68a3      	ldr	r3, [r4, #8]
 8005f60:	6922      	ldr	r2, [r4, #16]
 8005f62:	bf0c      	ite	eq
 8005f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f68:	2500      	movne	r5, #0
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	bfc4      	itt	gt
 8005f6e:	1a9b      	subgt	r3, r3, r2
 8005f70:	18ed      	addgt	r5, r5, r3
 8005f72:	f04f 0900 	mov.w	r9, #0
 8005f76:	341a      	adds	r4, #26
 8005f78:	454d      	cmp	r5, r9
 8005f7a:	d11b      	bne.n	8005fb4 <_printf_common+0xd8>
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f82:	2301      	movs	r3, #1
 8005f84:	4652      	mov	r2, sl
 8005f86:	4639      	mov	r1, r7
 8005f88:	4630      	mov	r0, r6
 8005f8a:	47c0      	blx	r8
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d103      	bne.n	8005f98 <_printf_common+0xbc>
 8005f90:	f04f 30ff 	mov.w	r0, #4294967295
 8005f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f98:	3501      	adds	r5, #1
 8005f9a:	e7c2      	b.n	8005f22 <_printf_common+0x46>
 8005f9c:	18e1      	adds	r1, r4, r3
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	2030      	movs	r0, #48	; 0x30
 8005fa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fa6:	4422      	add	r2, r4
 8005fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fb0:	3302      	adds	r3, #2
 8005fb2:	e7c4      	b.n	8005f3e <_printf_common+0x62>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	4622      	mov	r2, r4
 8005fb8:	4639      	mov	r1, r7
 8005fba:	4630      	mov	r0, r6
 8005fbc:	47c0      	blx	r8
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	d0e6      	beq.n	8005f90 <_printf_common+0xb4>
 8005fc2:	f109 0901 	add.w	r9, r9, #1
 8005fc6:	e7d7      	b.n	8005f78 <_printf_common+0x9c>

08005fc8 <_printf_i>:
 8005fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fcc:	4617      	mov	r7, r2
 8005fce:	7e0a      	ldrb	r2, [r1, #24]
 8005fd0:	b085      	sub	sp, #20
 8005fd2:	2a6e      	cmp	r2, #110	; 0x6e
 8005fd4:	4698      	mov	r8, r3
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	460c      	mov	r4, r1
 8005fda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fdc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005fe0:	f000 80bc 	beq.w	800615c <_printf_i+0x194>
 8005fe4:	d81a      	bhi.n	800601c <_printf_i+0x54>
 8005fe6:	2a63      	cmp	r2, #99	; 0x63
 8005fe8:	d02e      	beq.n	8006048 <_printf_i+0x80>
 8005fea:	d80a      	bhi.n	8006002 <_printf_i+0x3a>
 8005fec:	2a00      	cmp	r2, #0
 8005fee:	f000 80c8 	beq.w	8006182 <_printf_i+0x1ba>
 8005ff2:	2a58      	cmp	r2, #88	; 0x58
 8005ff4:	f000 808a 	beq.w	800610c <_printf_i+0x144>
 8005ff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ffc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006000:	e02a      	b.n	8006058 <_printf_i+0x90>
 8006002:	2a64      	cmp	r2, #100	; 0x64
 8006004:	d001      	beq.n	800600a <_printf_i+0x42>
 8006006:	2a69      	cmp	r2, #105	; 0x69
 8006008:	d1f6      	bne.n	8005ff8 <_printf_i+0x30>
 800600a:	6821      	ldr	r1, [r4, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006012:	d023      	beq.n	800605c <_printf_i+0x94>
 8006014:	1d11      	adds	r1, r2, #4
 8006016:	6019      	str	r1, [r3, #0]
 8006018:	6813      	ldr	r3, [r2, #0]
 800601a:	e027      	b.n	800606c <_printf_i+0xa4>
 800601c:	2a73      	cmp	r2, #115	; 0x73
 800601e:	f000 80b4 	beq.w	800618a <_printf_i+0x1c2>
 8006022:	d808      	bhi.n	8006036 <_printf_i+0x6e>
 8006024:	2a6f      	cmp	r2, #111	; 0x6f
 8006026:	d02a      	beq.n	800607e <_printf_i+0xb6>
 8006028:	2a70      	cmp	r2, #112	; 0x70
 800602a:	d1e5      	bne.n	8005ff8 <_printf_i+0x30>
 800602c:	680a      	ldr	r2, [r1, #0]
 800602e:	f042 0220 	orr.w	r2, r2, #32
 8006032:	600a      	str	r2, [r1, #0]
 8006034:	e003      	b.n	800603e <_printf_i+0x76>
 8006036:	2a75      	cmp	r2, #117	; 0x75
 8006038:	d021      	beq.n	800607e <_printf_i+0xb6>
 800603a:	2a78      	cmp	r2, #120	; 0x78
 800603c:	d1dc      	bne.n	8005ff8 <_printf_i+0x30>
 800603e:	2278      	movs	r2, #120	; 0x78
 8006040:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006044:	496e      	ldr	r1, [pc, #440]	; (8006200 <_printf_i+0x238>)
 8006046:	e064      	b.n	8006112 <_printf_i+0x14a>
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800604e:	1d11      	adds	r1, r2, #4
 8006050:	6019      	str	r1, [r3, #0]
 8006052:	6813      	ldr	r3, [r2, #0]
 8006054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006058:	2301      	movs	r3, #1
 800605a:	e0a3      	b.n	80061a4 <_printf_i+0x1dc>
 800605c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006060:	f102 0104 	add.w	r1, r2, #4
 8006064:	6019      	str	r1, [r3, #0]
 8006066:	d0d7      	beq.n	8006018 <_printf_i+0x50>
 8006068:	f9b2 3000 	ldrsh.w	r3, [r2]
 800606c:	2b00      	cmp	r3, #0
 800606e:	da03      	bge.n	8006078 <_printf_i+0xb0>
 8006070:	222d      	movs	r2, #45	; 0x2d
 8006072:	425b      	negs	r3, r3
 8006074:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006078:	4962      	ldr	r1, [pc, #392]	; (8006204 <_printf_i+0x23c>)
 800607a:	220a      	movs	r2, #10
 800607c:	e017      	b.n	80060ae <_printf_i+0xe6>
 800607e:	6820      	ldr	r0, [r4, #0]
 8006080:	6819      	ldr	r1, [r3, #0]
 8006082:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006086:	d003      	beq.n	8006090 <_printf_i+0xc8>
 8006088:	1d08      	adds	r0, r1, #4
 800608a:	6018      	str	r0, [r3, #0]
 800608c:	680b      	ldr	r3, [r1, #0]
 800608e:	e006      	b.n	800609e <_printf_i+0xd6>
 8006090:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006094:	f101 0004 	add.w	r0, r1, #4
 8006098:	6018      	str	r0, [r3, #0]
 800609a:	d0f7      	beq.n	800608c <_printf_i+0xc4>
 800609c:	880b      	ldrh	r3, [r1, #0]
 800609e:	4959      	ldr	r1, [pc, #356]	; (8006204 <_printf_i+0x23c>)
 80060a0:	2a6f      	cmp	r2, #111	; 0x6f
 80060a2:	bf14      	ite	ne
 80060a4:	220a      	movne	r2, #10
 80060a6:	2208      	moveq	r2, #8
 80060a8:	2000      	movs	r0, #0
 80060aa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80060ae:	6865      	ldr	r5, [r4, #4]
 80060b0:	60a5      	str	r5, [r4, #8]
 80060b2:	2d00      	cmp	r5, #0
 80060b4:	f2c0 809c 	blt.w	80061f0 <_printf_i+0x228>
 80060b8:	6820      	ldr	r0, [r4, #0]
 80060ba:	f020 0004 	bic.w	r0, r0, #4
 80060be:	6020      	str	r0, [r4, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d13f      	bne.n	8006144 <_printf_i+0x17c>
 80060c4:	2d00      	cmp	r5, #0
 80060c6:	f040 8095 	bne.w	80061f4 <_printf_i+0x22c>
 80060ca:	4675      	mov	r5, lr
 80060cc:	2a08      	cmp	r2, #8
 80060ce:	d10b      	bne.n	80060e8 <_printf_i+0x120>
 80060d0:	6823      	ldr	r3, [r4, #0]
 80060d2:	07da      	lsls	r2, r3, #31
 80060d4:	d508      	bpl.n	80060e8 <_printf_i+0x120>
 80060d6:	6923      	ldr	r3, [r4, #16]
 80060d8:	6862      	ldr	r2, [r4, #4]
 80060da:	429a      	cmp	r2, r3
 80060dc:	bfde      	ittt	le
 80060de:	2330      	movle	r3, #48	; 0x30
 80060e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060e8:	ebae 0305 	sub.w	r3, lr, r5
 80060ec:	6123      	str	r3, [r4, #16]
 80060ee:	f8cd 8000 	str.w	r8, [sp]
 80060f2:	463b      	mov	r3, r7
 80060f4:	aa03      	add	r2, sp, #12
 80060f6:	4621      	mov	r1, r4
 80060f8:	4630      	mov	r0, r6
 80060fa:	f7ff feef 	bl	8005edc <_printf_common>
 80060fe:	3001      	adds	r0, #1
 8006100:	d155      	bne.n	80061ae <_printf_i+0x1e6>
 8006102:	f04f 30ff 	mov.w	r0, #4294967295
 8006106:	b005      	add	sp, #20
 8006108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800610c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006110:	493c      	ldr	r1, [pc, #240]	; (8006204 <_printf_i+0x23c>)
 8006112:	6822      	ldr	r2, [r4, #0]
 8006114:	6818      	ldr	r0, [r3, #0]
 8006116:	f012 0f80 	tst.w	r2, #128	; 0x80
 800611a:	f100 0504 	add.w	r5, r0, #4
 800611e:	601d      	str	r5, [r3, #0]
 8006120:	d001      	beq.n	8006126 <_printf_i+0x15e>
 8006122:	6803      	ldr	r3, [r0, #0]
 8006124:	e002      	b.n	800612c <_printf_i+0x164>
 8006126:	0655      	lsls	r5, r2, #25
 8006128:	d5fb      	bpl.n	8006122 <_printf_i+0x15a>
 800612a:	8803      	ldrh	r3, [r0, #0]
 800612c:	07d0      	lsls	r0, r2, #31
 800612e:	bf44      	itt	mi
 8006130:	f042 0220 	orrmi.w	r2, r2, #32
 8006134:	6022      	strmi	r2, [r4, #0]
 8006136:	b91b      	cbnz	r3, 8006140 <_printf_i+0x178>
 8006138:	6822      	ldr	r2, [r4, #0]
 800613a:	f022 0220 	bic.w	r2, r2, #32
 800613e:	6022      	str	r2, [r4, #0]
 8006140:	2210      	movs	r2, #16
 8006142:	e7b1      	b.n	80060a8 <_printf_i+0xe0>
 8006144:	4675      	mov	r5, lr
 8006146:	fbb3 f0f2 	udiv	r0, r3, r2
 800614a:	fb02 3310 	mls	r3, r2, r0, r3
 800614e:	5ccb      	ldrb	r3, [r1, r3]
 8006150:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006154:	4603      	mov	r3, r0
 8006156:	2800      	cmp	r0, #0
 8006158:	d1f5      	bne.n	8006146 <_printf_i+0x17e>
 800615a:	e7b7      	b.n	80060cc <_printf_i+0x104>
 800615c:	6808      	ldr	r0, [r1, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	6949      	ldr	r1, [r1, #20]
 8006162:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006166:	d004      	beq.n	8006172 <_printf_i+0x1aa>
 8006168:	1d10      	adds	r0, r2, #4
 800616a:	6018      	str	r0, [r3, #0]
 800616c:	6813      	ldr	r3, [r2, #0]
 800616e:	6019      	str	r1, [r3, #0]
 8006170:	e007      	b.n	8006182 <_printf_i+0x1ba>
 8006172:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006176:	f102 0004 	add.w	r0, r2, #4
 800617a:	6018      	str	r0, [r3, #0]
 800617c:	6813      	ldr	r3, [r2, #0]
 800617e:	d0f6      	beq.n	800616e <_printf_i+0x1a6>
 8006180:	8019      	strh	r1, [r3, #0]
 8006182:	2300      	movs	r3, #0
 8006184:	6123      	str	r3, [r4, #16]
 8006186:	4675      	mov	r5, lr
 8006188:	e7b1      	b.n	80060ee <_printf_i+0x126>
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	1d11      	adds	r1, r2, #4
 800618e:	6019      	str	r1, [r3, #0]
 8006190:	6815      	ldr	r5, [r2, #0]
 8006192:	6862      	ldr	r2, [r4, #4]
 8006194:	2100      	movs	r1, #0
 8006196:	4628      	mov	r0, r5
 8006198:	f7fa f822 	bl	80001e0 <memchr>
 800619c:	b108      	cbz	r0, 80061a2 <_printf_i+0x1da>
 800619e:	1b40      	subs	r0, r0, r5
 80061a0:	6060      	str	r0, [r4, #4]
 80061a2:	6863      	ldr	r3, [r4, #4]
 80061a4:	6123      	str	r3, [r4, #16]
 80061a6:	2300      	movs	r3, #0
 80061a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ac:	e79f      	b.n	80060ee <_printf_i+0x126>
 80061ae:	6923      	ldr	r3, [r4, #16]
 80061b0:	462a      	mov	r2, r5
 80061b2:	4639      	mov	r1, r7
 80061b4:	4630      	mov	r0, r6
 80061b6:	47c0      	blx	r8
 80061b8:	3001      	adds	r0, #1
 80061ba:	d0a2      	beq.n	8006102 <_printf_i+0x13a>
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	079b      	lsls	r3, r3, #30
 80061c0:	d507      	bpl.n	80061d2 <_printf_i+0x20a>
 80061c2:	2500      	movs	r5, #0
 80061c4:	f104 0919 	add.w	r9, r4, #25
 80061c8:	68e3      	ldr	r3, [r4, #12]
 80061ca:	9a03      	ldr	r2, [sp, #12]
 80061cc:	1a9b      	subs	r3, r3, r2
 80061ce:	429d      	cmp	r5, r3
 80061d0:	db05      	blt.n	80061de <_printf_i+0x216>
 80061d2:	68e0      	ldr	r0, [r4, #12]
 80061d4:	9b03      	ldr	r3, [sp, #12]
 80061d6:	4298      	cmp	r0, r3
 80061d8:	bfb8      	it	lt
 80061da:	4618      	movlt	r0, r3
 80061dc:	e793      	b.n	8006106 <_printf_i+0x13e>
 80061de:	2301      	movs	r3, #1
 80061e0:	464a      	mov	r2, r9
 80061e2:	4639      	mov	r1, r7
 80061e4:	4630      	mov	r0, r6
 80061e6:	47c0      	blx	r8
 80061e8:	3001      	adds	r0, #1
 80061ea:	d08a      	beq.n	8006102 <_printf_i+0x13a>
 80061ec:	3501      	adds	r5, #1
 80061ee:	e7eb      	b.n	80061c8 <_printf_i+0x200>
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1a7      	bne.n	8006144 <_printf_i+0x17c>
 80061f4:	780b      	ldrb	r3, [r1, #0]
 80061f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061fe:	e765      	b.n	80060cc <_printf_i+0x104>
 8006200:	080065aa 	.word	0x080065aa
 8006204:	08006599 	.word	0x08006599

08006208 <_sbrk_r>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	4c06      	ldr	r4, [pc, #24]	; (8006224 <_sbrk_r+0x1c>)
 800620c:	2300      	movs	r3, #0
 800620e:	4605      	mov	r5, r0
 8006210:	4608      	mov	r0, r1
 8006212:	6023      	str	r3, [r4, #0]
 8006214:	f7fe fdfa 	bl	8004e0c <_sbrk>
 8006218:	1c43      	adds	r3, r0, #1
 800621a:	d102      	bne.n	8006222 <_sbrk_r+0x1a>
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	b103      	cbz	r3, 8006222 <_sbrk_r+0x1a>
 8006220:	602b      	str	r3, [r5, #0]
 8006222:	bd38      	pop	{r3, r4, r5, pc}
 8006224:	200000b4 	.word	0x200000b4

08006228 <__sread>:
 8006228:	b510      	push	{r4, lr}
 800622a:	460c      	mov	r4, r1
 800622c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006230:	f000 f896 	bl	8006360 <_read_r>
 8006234:	2800      	cmp	r0, #0
 8006236:	bfab      	itete	ge
 8006238:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800623a:	89a3      	ldrhlt	r3, [r4, #12]
 800623c:	181b      	addge	r3, r3, r0
 800623e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006242:	bfac      	ite	ge
 8006244:	6563      	strge	r3, [r4, #84]	; 0x54
 8006246:	81a3      	strhlt	r3, [r4, #12]
 8006248:	bd10      	pop	{r4, pc}

0800624a <__swrite>:
 800624a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800624e:	461f      	mov	r7, r3
 8006250:	898b      	ldrh	r3, [r1, #12]
 8006252:	05db      	lsls	r3, r3, #23
 8006254:	4605      	mov	r5, r0
 8006256:	460c      	mov	r4, r1
 8006258:	4616      	mov	r6, r2
 800625a:	d505      	bpl.n	8006268 <__swrite+0x1e>
 800625c:	2302      	movs	r3, #2
 800625e:	2200      	movs	r2, #0
 8006260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006264:	f000 f868 	bl	8006338 <_lseek_r>
 8006268:	89a3      	ldrh	r3, [r4, #12]
 800626a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800626e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006272:	81a3      	strh	r3, [r4, #12]
 8006274:	4632      	mov	r2, r6
 8006276:	463b      	mov	r3, r7
 8006278:	4628      	mov	r0, r5
 800627a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800627e:	f000 b817 	b.w	80062b0 <_write_r>

08006282 <__sseek>:
 8006282:	b510      	push	{r4, lr}
 8006284:	460c      	mov	r4, r1
 8006286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800628a:	f000 f855 	bl	8006338 <_lseek_r>
 800628e:	1c43      	adds	r3, r0, #1
 8006290:	89a3      	ldrh	r3, [r4, #12]
 8006292:	bf15      	itete	ne
 8006294:	6560      	strne	r0, [r4, #84]	; 0x54
 8006296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800629a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800629e:	81a3      	strheq	r3, [r4, #12]
 80062a0:	bf18      	it	ne
 80062a2:	81a3      	strhne	r3, [r4, #12]
 80062a4:	bd10      	pop	{r4, pc}

080062a6 <__sclose>:
 80062a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062aa:	f000 b813 	b.w	80062d4 <_close_r>
	...

080062b0 <_write_r>:
 80062b0:	b538      	push	{r3, r4, r5, lr}
 80062b2:	4c07      	ldr	r4, [pc, #28]	; (80062d0 <_write_r+0x20>)
 80062b4:	4605      	mov	r5, r0
 80062b6:	4608      	mov	r0, r1
 80062b8:	4611      	mov	r1, r2
 80062ba:	2200      	movs	r2, #0
 80062bc:	6022      	str	r2, [r4, #0]
 80062be:	461a      	mov	r2, r3
 80062c0:	f7fe fd85 	bl	8004dce <_write>
 80062c4:	1c43      	adds	r3, r0, #1
 80062c6:	d102      	bne.n	80062ce <_write_r+0x1e>
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	b103      	cbz	r3, 80062ce <_write_r+0x1e>
 80062cc:	602b      	str	r3, [r5, #0]
 80062ce:	bd38      	pop	{r3, r4, r5, pc}
 80062d0:	200000b4 	.word	0x200000b4

080062d4 <_close_r>:
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	4c06      	ldr	r4, [pc, #24]	; (80062f0 <_close_r+0x1c>)
 80062d8:	2300      	movs	r3, #0
 80062da:	4605      	mov	r5, r0
 80062dc:	4608      	mov	r0, r1
 80062de:	6023      	str	r3, [r4, #0]
 80062e0:	f7fe fdb4 	bl	8004e4c <_close>
 80062e4:	1c43      	adds	r3, r0, #1
 80062e6:	d102      	bne.n	80062ee <_close_r+0x1a>
 80062e8:	6823      	ldr	r3, [r4, #0]
 80062ea:	b103      	cbz	r3, 80062ee <_close_r+0x1a>
 80062ec:	602b      	str	r3, [r5, #0]
 80062ee:	bd38      	pop	{r3, r4, r5, pc}
 80062f0:	200000b4 	.word	0x200000b4

080062f4 <_fstat_r>:
 80062f4:	b538      	push	{r3, r4, r5, lr}
 80062f6:	4c07      	ldr	r4, [pc, #28]	; (8006314 <_fstat_r+0x20>)
 80062f8:	2300      	movs	r3, #0
 80062fa:	4605      	mov	r5, r0
 80062fc:	4608      	mov	r0, r1
 80062fe:	4611      	mov	r1, r2
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	f7fe fdb5 	bl	8004e70 <_fstat>
 8006306:	1c43      	adds	r3, r0, #1
 8006308:	d102      	bne.n	8006310 <_fstat_r+0x1c>
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	b103      	cbz	r3, 8006310 <_fstat_r+0x1c>
 800630e:	602b      	str	r3, [r5, #0]
 8006310:	bd38      	pop	{r3, r4, r5, pc}
 8006312:	bf00      	nop
 8006314:	200000b4 	.word	0x200000b4

08006318 <_isatty_r>:
 8006318:	b538      	push	{r3, r4, r5, lr}
 800631a:	4c06      	ldr	r4, [pc, #24]	; (8006334 <_isatty_r+0x1c>)
 800631c:	2300      	movs	r3, #0
 800631e:	4605      	mov	r5, r0
 8006320:	4608      	mov	r0, r1
 8006322:	6023      	str	r3, [r4, #0]
 8006324:	f7fe fdb6 	bl	8004e94 <_isatty>
 8006328:	1c43      	adds	r3, r0, #1
 800632a:	d102      	bne.n	8006332 <_isatty_r+0x1a>
 800632c:	6823      	ldr	r3, [r4, #0]
 800632e:	b103      	cbz	r3, 8006332 <_isatty_r+0x1a>
 8006330:	602b      	str	r3, [r5, #0]
 8006332:	bd38      	pop	{r3, r4, r5, pc}
 8006334:	200000b4 	.word	0x200000b4

08006338 <_lseek_r>:
 8006338:	b538      	push	{r3, r4, r5, lr}
 800633a:	4c07      	ldr	r4, [pc, #28]	; (8006358 <_lseek_r+0x20>)
 800633c:	4605      	mov	r5, r0
 800633e:	4608      	mov	r0, r1
 8006340:	4611      	mov	r1, r2
 8006342:	2200      	movs	r2, #0
 8006344:	6022      	str	r2, [r4, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	f7fe fdb4 	bl	8004eb4 <_lseek>
 800634c:	1c43      	adds	r3, r0, #1
 800634e:	d102      	bne.n	8006356 <_lseek_r+0x1e>
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	b103      	cbz	r3, 8006356 <_lseek_r+0x1e>
 8006354:	602b      	str	r3, [r5, #0]
 8006356:	bd38      	pop	{r3, r4, r5, pc}
 8006358:	200000b4 	.word	0x200000b4

0800635c <__malloc_lock>:
 800635c:	4770      	bx	lr

0800635e <__malloc_unlock>:
 800635e:	4770      	bx	lr

08006360 <_read_r>:
 8006360:	b538      	push	{r3, r4, r5, lr}
 8006362:	4c07      	ldr	r4, [pc, #28]	; (8006380 <_read_r+0x20>)
 8006364:	4605      	mov	r5, r0
 8006366:	4608      	mov	r0, r1
 8006368:	4611      	mov	r1, r2
 800636a:	2200      	movs	r2, #0
 800636c:	6022      	str	r2, [r4, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	f7fe fdb4 	bl	8004edc <_read>
 8006374:	1c43      	adds	r3, r0, #1
 8006376:	d102      	bne.n	800637e <_read_r+0x1e>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	b103      	cbz	r3, 800637e <_read_r+0x1e>
 800637c:	602b      	str	r3, [r5, #0]
 800637e:	bd38      	pop	{r3, r4, r5, pc}
 8006380:	200000b4 	.word	0x200000b4

08006384 <_init>:
 8006384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006386:	bf00      	nop
 8006388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800638a:	bc08      	pop	{r3}
 800638c:	469e      	mov	lr, r3
 800638e:	4770      	bx	lr

08006390 <_fini>:
 8006390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006392:	bf00      	nop
 8006394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006396:	bc08      	pop	{r3}
 8006398:	469e      	mov	lr, r3
 800639a:	4770      	bx	lr
