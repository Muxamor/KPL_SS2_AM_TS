
KPL_SS2_AM_TS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a28  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08003bc8  08003bc8  00013bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003d80  08003d80  00013d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08003d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000002c  20000068  08003dec  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000094  08003dec  00020094  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000a380  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001916  00000000  00000000  0002a418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000aa0  00000000  00000000  0002bd30  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009c8  00000000  00000000  0002c7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003ed4  00000000  00000000  0002d198  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002ebf  00000000  00000000  0003106c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00033f2b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003308  00000000  00000000  00033fa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003bb0 	.word	0x08003bb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003bb0 	.word	0x08003bb0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000280:	b480      	push	{r7}
 8000282:	b089      	sub	sp, #36	; 0x24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	681a      	ldr	r2, [r3, #0]
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	fa93 f3a3 	rbit	r3, r3
 800029a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800029c:	693b      	ldr	r3, [r7, #16]
 800029e:	fab3 f383 	clz	r3, r3
 80002a2:	005b      	lsls	r3, r3, #1
 80002a4:	2103      	movs	r1, #3
 80002a6:	fa01 f303 	lsl.w	r3, r1, r3
 80002aa:	43db      	mvns	r3, r3
 80002ac:	401a      	ands	r2, r3
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	fa93 f3a3 	rbit	r3, r3
 80002b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80002ba:	69bb      	ldr	r3, [r7, #24]
 80002bc:	fab3 f383 	clz	r3, r3
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	6879      	ldr	r1, [r7, #4]
 80002c4:	fa01 f303 	lsl.w	r3, r1, r3
 80002c8:	431a      	orrs	r2, r3
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	601a      	str	r2, [r3, #0]
}
 80002ce:	bf00      	nop
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr

080002da <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80002da:	b480      	push	{r7}
 80002dc:	b085      	sub	sp, #20
 80002de:	af00      	add	r7, sp, #0
 80002e0:	60f8      	str	r0, [r7, #12]
 80002e2:	60b9      	str	r1, [r7, #8]
 80002e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	685a      	ldr	r2, [r3, #4]
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	43db      	mvns	r3, r3
 80002ee:	401a      	ands	r2, r3
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	6879      	ldr	r1, [r7, #4]
 80002f4:	fb01 f303 	mul.w	r3, r1, r3
 80002f8:	431a      	orrs	r2, r3
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	605a      	str	r2, [r3, #4]
}
 80002fe:	bf00      	nop
 8000300:	3714      	adds	r7, #20
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr

0800030a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800030a:	b480      	push	{r7}
 800030c:	b089      	sub	sp, #36	; 0x24
 800030e:	af00      	add	r7, sp, #0
 8000310:	60f8      	str	r0, [r7, #12]
 8000312:	60b9      	str	r1, [r7, #8]
 8000314:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	689a      	ldr	r2, [r3, #8]
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	fa93 f3a3 	rbit	r3, r3
 8000324:	613b      	str	r3, [r7, #16]
  return(result);
 8000326:	693b      	ldr	r3, [r7, #16]
 8000328:	fab3 f383 	clz	r3, r3
 800032c:	005b      	lsls	r3, r3, #1
 800032e:	2103      	movs	r1, #3
 8000330:	fa01 f303 	lsl.w	r3, r1, r3
 8000334:	43db      	mvns	r3, r3
 8000336:	401a      	ands	r2, r3
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800033c:	69fb      	ldr	r3, [r7, #28]
 800033e:	fa93 f3a3 	rbit	r3, r3
 8000342:	61bb      	str	r3, [r7, #24]
  return(result);
 8000344:	69bb      	ldr	r3, [r7, #24]
 8000346:	fab3 f383 	clz	r3, r3
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	6879      	ldr	r1, [r7, #4]
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	431a      	orrs	r2, r3
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000358:	bf00      	nop
 800035a:	3724      	adds	r7, #36	; 0x24
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr

08000364 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000364:	b480      	push	{r7}
 8000366:	b089      	sub	sp, #36	; 0x24
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	68da      	ldr	r2, [r3, #12]
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	fa93 f3a3 	rbit	r3, r3
 800037e:	613b      	str	r3, [r7, #16]
  return(result);
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	fab3 f383 	clz	r3, r3
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	2103      	movs	r1, #3
 800038a:	fa01 f303 	lsl.w	r3, r1, r3
 800038e:	43db      	mvns	r3, r3
 8000390:	401a      	ands	r2, r3
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000396:	69fb      	ldr	r3, [r7, #28]
 8000398:	fa93 f3a3 	rbit	r3, r3
 800039c:	61bb      	str	r3, [r7, #24]
  return(result);
 800039e:	69bb      	ldr	r3, [r7, #24]
 80003a0:	fab3 f383 	clz	r3, r3
 80003a4:	005b      	lsls	r3, r3, #1
 80003a6:	6879      	ldr	r1, [r7, #4]
 80003a8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ac:	431a      	orrs	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	60da      	str	r2, [r3, #12]
}
 80003b2:	bf00      	nop
 80003b4:	3724      	adds	r7, #36	; 0x24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80003be:	b480      	push	{r7}
 80003c0:	b089      	sub	sp, #36	; 0x24
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	60f8      	str	r0, [r7, #12]
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	6a1a      	ldr	r2, [r3, #32]
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	fa93 f3a3 	rbit	r3, r3
 80003d8:	613b      	str	r3, [r7, #16]
  return(result);
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	fab3 f383 	clz	r3, r3
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	210f      	movs	r1, #15
 80003e4:	fa01 f303 	lsl.w	r3, r1, r3
 80003e8:	43db      	mvns	r3, r3
 80003ea:	401a      	ands	r2, r3
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003f0:	69fb      	ldr	r3, [r7, #28]
 80003f2:	fa93 f3a3 	rbit	r3, r3
 80003f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80003f8:	69bb      	ldr	r3, [r7, #24]
 80003fa:	fab3 f383 	clz	r3, r3
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	6879      	ldr	r1, [r7, #4]
 8000402:	fa01 f303 	lsl.w	r3, r1, r3
 8000406:	431a      	orrs	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800040c:	bf00      	nop
 800040e:	3724      	adds	r7, #36	; 0x24
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000418:	b480      	push	{r7}
 800041a:	b089      	sub	sp, #36	; 0x24
 800041c:	af00      	add	r7, sp, #0
 800041e:	60f8      	str	r0, [r7, #12]
 8000420:	60b9      	str	r1, [r7, #8]
 8000422:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	0a1b      	lsrs	r3, r3, #8
 800042c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	fa93 f3a3 	rbit	r3, r3
 8000434:	613b      	str	r3, [r7, #16]
  return(result);
 8000436:	693b      	ldr	r3, [r7, #16]
 8000438:	fab3 f383 	clz	r3, r3
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	210f      	movs	r1, #15
 8000440:	fa01 f303 	lsl.w	r3, r1, r3
 8000444:	43db      	mvns	r3, r3
 8000446:	401a      	ands	r2, r3
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	0a1b      	lsrs	r3, r3, #8
 800044c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800044e:	69fb      	ldr	r3, [r7, #28]
 8000450:	fa93 f3a3 	rbit	r3, r3
 8000454:	61bb      	str	r3, [r7, #24]
  return(result);
 8000456:	69bb      	ldr	r3, [r7, #24]
 8000458:	fab3 f383 	clz	r3, r3
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	6879      	ldr	r1, [r7, #4]
 8000460:	fa01 f303 	lsl.w	r3, r1, r3
 8000464:	431a      	orrs	r2, r3
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800046a:	bf00      	nop
 800046c:	3724      	adds	r7, #36	; 0x24
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr

08000476 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000476:	b580      	push	{r7, lr}
 8000478:	b088      	sub	sp, #32
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
 800047e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000480:	2300      	movs	r3, #0
 8000482:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000484:	2300      	movs	r3, #0
 8000486:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	fa93 f3a3 	rbit	r3, r3
 8000494:	613b      	str	r3, [r7, #16]
  return(result);
 8000496:	693b      	ldr	r3, [r7, #16]
 8000498:	fab3 f383 	clz	r3, r3
 800049c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800049e:	e048      	b.n	8000532 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	2101      	movs	r1, #1
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ac:	4013      	ands	r3, r2
 80004ae:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80004b0:	69bb      	ldr	r3, [r7, #24]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d03a      	beq.n	800052c <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	461a      	mov	r2, r3
 80004bc:	69b9      	ldr	r1, [r7, #24]
 80004be:	6878      	ldr	r0, [r7, #4]
 80004c0:	f7ff fede 	bl	8000280 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d003      	beq.n	80004d4 <LL_GPIO_Init+0x5e>
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d106      	bne.n	80004e2 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	461a      	mov	r2, r3
 80004da:	69b9      	ldr	r1, [r7, #24]
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f7ff ff14 	bl	800030a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	691b      	ldr	r3, [r3, #16]
 80004e6:	461a      	mov	r2, r3
 80004e8:	69b9      	ldr	r1, [r7, #24]
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f7ff ff3a 	bl	8000364 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	2b02      	cmp	r3, #2
 80004f6:	d119      	bne.n	800052c <LL_GPIO_Init+0xb6>
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	fa93 f3a3 	rbit	r3, r3
 8000502:	60bb      	str	r3, [r7, #8]
  return(result);
 8000504:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000506:	fab3 f383 	clz	r3, r3
 800050a:	2b07      	cmp	r3, #7
 800050c:	d807      	bhi.n	800051e <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	461a      	mov	r2, r3
 8000514:	69b9      	ldr	r1, [r7, #24]
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f7ff ff51 	bl	80003be <LL_GPIO_SetAFPin_0_7>
 800051c:	e006      	b.n	800052c <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	461a      	mov	r2, r3
 8000524:	69b9      	ldr	r1, [r7, #24]
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f7ff ff76 	bl	8000418 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	3301      	adds	r3, #1
 8000530:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	69fb      	ldr	r3, [r7, #28]
 8000538:	fa22 f303 	lsr.w	r3, r2, r3
 800053c:	2b00      	cmp	r3, #0
 800053e:	d1af      	bne.n	80004a0 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d003      	beq.n	8000550 <LL_GPIO_Init+0xda>
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	2b02      	cmp	r3, #2
 800054e:	d107      	bne.n	8000560 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	6819      	ldr	r1, [r3, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	461a      	mov	r2, r3
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f7ff febd 	bl	80002da <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000560:	2301      	movs	r3, #1
}
 8000562:	4618      	mov	r0, r3
 8000564:	3720      	adds	r7, #32
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800056a:	b480      	push	{r7}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f043 0201 	orr.w	r2, r3, #1
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	601a      	str	r2, [r3, #0]
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr

0800058a <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 800058a:	b480      	push	{r7}
 800058c:	b083      	sub	sp, #12
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f023 0201 	bic.w	r2, r3, #1
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	601a      	str	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b085      	sub	sp, #20
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	60f8      	str	r0, [r7, #12]
 80005b2:	60b9      	str	r1, [r7, #8]
 80005b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	0219      	lsls	r1, r3, #8
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	430b      	orrs	r3, r1
 80005c6:	431a      	orrs	r2, r3
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	601a      	str	r2, [r3, #0]
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80005ec:	f023 0307 	bic.w	r3, r3, #7
 80005f0:	68b9      	ldr	r1, [r7, #8]
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	430a      	orrs	r2, r1
 80005f6:	431a      	orrs	r2, r3
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	609a      	str	r2, [r3, #8]
}
 80005fc:	bf00      	nop
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	609a      	str	r2, [r3, #8]
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	609a      	str	r2, [r3, #8]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	611a      	str	r2, [r3, #16]
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	431a      	orrs	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	601a      	str	r2, [r3, #0]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	431a      	orrs	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	605a      	str	r2, [r3, #4]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f7ff ff65 	bl	800058a <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	6899      	ldr	r1, [r3, #8]
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	461a      	mov	r2, r3
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ff6d 	bl	80005aa <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	4619      	mov	r1, r3
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff ffb6 	bl	8000648 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f7ff ff44 	bl	800056a <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff ffa0 	bl	8000628 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	6919      	ldr	r1, [r3, #16]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	461a      	mov	r2, r3
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff ff70 	bl	80005d8 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	691b      	ldr	r3, [r3, #16]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d002      	beq.n	8000706 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f7ff ff81 	bl	8000608 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4619      	mov	r1, r3
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff ffa9 	bl	8000664 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4619      	mov	r1, r3
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ffb6 	bl	800068a <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800071e:	2301      	movs	r3, #1
}
 8000720:	4618      	mov	r0, r3
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <LL_RCC_HSI_IsReady+0x24>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000738:	bf0c      	ite	eq
 800073a:	2301      	moveq	r3, #1
 800073c:	2300      	movne	r3, #0
 800073e:	b2db      	uxtb	r3, r3
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000

08000750 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <LL_RCC_LSE_IsReady+0x24>)
 8000756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	2b02      	cmp	r3, #2
 8000760:	bf0c      	ite	eq
 8000762:	2301      	moveq	r3, #1
 8000764:	2300      	movne	r3, #0
 8000766:	b2db      	uxtb	r3, r3
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000

08000778 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL));
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f003 0308 	and.w	r3, r3, #8
 8000784:	2b08      	cmp	r3, #8
 8000786:	bf0c      	ite	eq
 8000788:	2301      	moveq	r3, #1
 800078a:	2300      	movne	r3, #0
 800078c:	b2db      	uxtb	r3, r3
}
 800078e:	4618      	mov	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	40021000 	.word	0x40021000

0800079c <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <LL_RCC_MSI_GetRange+0x18>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000

080007b8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80007be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007c2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	40021000 	.word	0x40021000

080007d4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <LL_RCC_GetSysClkSource+0x18>)
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	f003 030c 	and.w	r3, r3, #12
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000

080007f0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <LL_RCC_GetAHBPrescaler+0x18>)
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <LL_RCC_GetAPB1Prescaler+0x18>)
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000818:	4618      	mov	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40021000 	.word	0x40021000

08000828 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <LL_RCC_GetAPB2Prescaler+0x18>)
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8000834:	4618      	mov	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000

08000844 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <LL_RCC_GetUSARTClockSource+0x24>)
 800084e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	401a      	ands	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	041b      	lsls	r3, r3, #16
 800085a:	4313      	orrs	r3, r2
}
 800085c:	4618      	mov	r0, r3
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	40021000 	.word	0x40021000

0800086c <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <LL_RCC_GetUARTClockSource+0x24>)
 8000876:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	401a      	ands	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	041b      	lsls	r3, r3, #16
 8000882:	4313      	orrs	r3, r2
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	40021000 	.word	0x40021000

08000894 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <LL_RCC_PLL_GetMainSource+0x18>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	f003 0303 	and.w	r3, r3, #3
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000

080008b0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <LL_RCC_PLL_GetN+0x18>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80008be:	4618      	mov	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	40021000 	.word	0x40021000

080008cc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <LL_RCC_PLL_GetR+0x18>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80008d8:	4618      	mov	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000

080008e8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <LL_RCC_PLL_GetDivider+0x18>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000

08000904 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b03      	cmp	r3, #3
 8000914:	d12e      	bne.n	8000974 <LL_RCC_GetUSARTClockFreq+0x70>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff ff94 	bl	8000844 <LL_RCC_GetUSARTClockSource>
 800091c:	4603      	mov	r3, r0
 800091e:	4a4f      	ldr	r2, [pc, #316]	; (8000a5c <LL_RCC_GetUSARTClockFreq+0x158>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d009      	beq.n	8000938 <LL_RCC_GetUSARTClockFreq+0x34>
 8000924:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8000928:	d00e      	beq.n	8000948 <LL_RCC_GetUSARTClockFreq+0x44>
 800092a:	4a4d      	ldr	r2, [pc, #308]	; (8000a60 <LL_RCC_GetUSARTClockFreq+0x15c>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d114      	bne.n	800095a <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8000930:	f000 f8e8 	bl	8000b04 <RCC_GetSystemClockFreq>
 8000934:	60f8      	str	r0, [r7, #12]
        break;
 8000936:	e08b      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8000938:	f7ff fef6 	bl	8000728 <LL_RCC_HSI_IsReady>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d07b      	beq.n	8000a3a <LL_RCC_GetUSARTClockFreq+0x136>
        {
          usart_frequency = HSI_VALUE;
 8000942:	4b48      	ldr	r3, [pc, #288]	; (8000a64 <LL_RCC_GetUSARTClockFreq+0x160>)
 8000944:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000946:	e078      	b.n	8000a3a <LL_RCC_GetUSARTClockFreq+0x136>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8000948:	f7ff ff02 	bl	8000750 <LL_RCC_LSE_IsReady>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d075      	beq.n	8000a3e <LL_RCC_GetUSARTClockFreq+0x13a>
        {
          usart_frequency = LSE_VALUE;
 8000952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000956:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000958:	e071      	b.n	8000a3e <LL_RCC_GetUSARTClockFreq+0x13a>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800095a:	f000 f8d3 	bl	8000b04 <RCC_GetSystemClockFreq>
 800095e:	4603      	mov	r3, r0
 8000960:	4618      	mov	r0, r3
 8000962:	f000 f95f 	bl	8000c24 <RCC_GetHCLKClockFreq>
 8000966:	4603      	mov	r3, r0
 8000968:	4618      	mov	r0, r3
 800096a:	f000 f985 	bl	8000c78 <RCC_GetPCLK2ClockFreq>
 800096e:	60f8      	str	r0, [r7, #12]
        break;
 8000970:	bf00      	nop
 8000972:	e06d      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b0c      	cmp	r3, #12
 8000978:	d12e      	bne.n	80009d8 <LL_RCC_GetUSARTClockFreq+0xd4>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ff62 	bl	8000844 <LL_RCC_GetUSARTClockSource>
 8000980:	4603      	mov	r3, r0
 8000982:	4a39      	ldr	r2, [pc, #228]	; (8000a68 <LL_RCC_GetUSARTClockFreq+0x164>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d009      	beq.n	800099c <LL_RCC_GetUSARTClockFreq+0x98>
 8000988:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 800098c:	d00e      	beq.n	80009ac <LL_RCC_GetUSARTClockFreq+0xa8>
 800098e:	4a37      	ldr	r2, [pc, #220]	; (8000a6c <LL_RCC_GetUSARTClockFreq+0x168>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d114      	bne.n	80009be <LL_RCC_GetUSARTClockFreq+0xba>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8000994:	f000 f8b6 	bl	8000b04 <RCC_GetSystemClockFreq>
 8000998:	60f8      	str	r0, [r7, #12]
        break;
 800099a:	e059      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800099c:	f7ff fec4 	bl	8000728 <LL_RCC_HSI_IsReady>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d04d      	beq.n	8000a42 <LL_RCC_GetUSARTClockFreq+0x13e>
        {
          usart_frequency = HSI_VALUE;
 80009a6:	4b2f      	ldr	r3, [pc, #188]	; (8000a64 <LL_RCC_GetUSARTClockFreq+0x160>)
 80009a8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80009aa:	e04a      	b.n	8000a42 <LL_RCC_GetUSARTClockFreq+0x13e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80009ac:	f7ff fed0 	bl	8000750 <LL_RCC_LSE_IsReady>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d047      	beq.n	8000a46 <LL_RCC_GetUSARTClockFreq+0x142>
        {
          usart_frequency = LSE_VALUE;
 80009b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ba:	60fb      	str	r3, [r7, #12]
        }
        break;
 80009bc:	e043      	b.n	8000a46 <LL_RCC_GetUSARTClockFreq+0x142>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80009be:	f000 f8a1 	bl	8000b04 <RCC_GetSystemClockFreq>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 f92d 	bl	8000c24 <RCC_GetHCLKClockFreq>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 f93f 	bl	8000c50 <RCC_GetPCLK1ClockFreq>
 80009d2:	60f8      	str	r0, [r7, #12]
        break;
 80009d4:	bf00      	nop
 80009d6:	e03b      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b30      	cmp	r3, #48	; 0x30
 80009dc:	d138      	bne.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff ff30 	bl	8000844 <LL_RCC_GetUSARTClockSource>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4a22      	ldr	r2, [pc, #136]	; (8000a70 <LL_RCC_GetUSARTClockFreq+0x16c>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d009      	beq.n	8000a00 <LL_RCC_GetUSARTClockFreq+0xfc>
 80009ec:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80009f0:	d00e      	beq.n	8000a10 <LL_RCC_GetUSARTClockFreq+0x10c>
 80009f2:	4a20      	ldr	r2, [pc, #128]	; (8000a74 <LL_RCC_GetUSARTClockFreq+0x170>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d114      	bne.n	8000a22 <LL_RCC_GetUSARTClockFreq+0x11e>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80009f8:	f000 f884 	bl	8000b04 <RCC_GetSystemClockFreq>
 80009fc:	60f8      	str	r0, [r7, #12]
          break;
 80009fe:	e027      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 8000a00:	f7ff fe92 	bl	8000728 <LL_RCC_HSI_IsReady>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d01f      	beq.n	8000a4a <LL_RCC_GetUSARTClockFreq+0x146>
          {
            usart_frequency = HSI_VALUE;
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <LL_RCC_GetUSARTClockFreq+0x160>)
 8000a0c:	60fb      	str	r3, [r7, #12]
          }
          break;
 8000a0e:	e01c      	b.n	8000a4a <LL_RCC_GetUSARTClockFreq+0x146>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 8000a10:	f7ff fe9e 	bl	8000750 <LL_RCC_LSE_IsReady>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d019      	beq.n	8000a4e <LL_RCC_GetUSARTClockFreq+0x14a>
          {
            usart_frequency = LSE_VALUE;
 8000a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a1e:	60fb      	str	r3, [r7, #12]
          }
          break;
 8000a20:	e015      	b.n	8000a4e <LL_RCC_GetUSARTClockFreq+0x14a>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000a22:	f000 f86f 	bl	8000b04 <RCC_GetSystemClockFreq>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f8fb 	bl	8000c24 <RCC_GetHCLKClockFreq>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 f90d 	bl	8000c50 <RCC_GetPCLK1ClockFreq>
 8000a36:	60f8      	str	r0, [r7, #12]
          break;
 8000a38:	e00a      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 8000a3a:	bf00      	nop
 8000a3c:	e008      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 8000a3e:	bf00      	nop
 8000a40:	e006      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 8000a42:	bf00      	nop
 8000a44:	e004      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 8000a46:	bf00      	nop
 8000a48:	e002      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
          break;
 8000a4a:	bf00      	nop
 8000a4c:	e000      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
          break;
 8000a4e:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8000a50:	68fb      	ldr	r3, [r7, #12]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	00030002 	.word	0x00030002
 8000a60:	00030001 	.word	0x00030001
 8000a64:	00f42400 	.word	0x00f42400
 8000a68:	000c0008 	.word	0x000c0008
 8000a6c:	000c0004 	.word	0x000c0004
 8000a70:	00300020 	.word	0x00300020
 8000a74:	00300010 	.word	0x00300010

08000a78 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2bc0      	cmp	r3, #192	; 0xc0
 8000a88:	d130      	bne.n	8000aec <LL_RCC_GetUARTClockFreq+0x74>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff feee 	bl	800086c <LL_RCC_GetUARTClockSource>
 8000a90:	4603      	mov	r3, r0
 8000a92:	4a19      	ldr	r2, [pc, #100]	; (8000af8 <LL_RCC_GetUARTClockFreq+0x80>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d009      	beq.n	8000aac <LL_RCC_GetUARTClockFreq+0x34>
 8000a98:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8000a9c:	d00e      	beq.n	8000abc <LL_RCC_GetUARTClockFreq+0x44>
 8000a9e:	4a17      	ldr	r2, [pc, #92]	; (8000afc <LL_RCC_GetUARTClockFreq+0x84>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d114      	bne.n	8000ace <LL_RCC_GetUARTClockFreq+0x56>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8000aa4:	f000 f82e 	bl	8000b04 <RCC_GetSystemClockFreq>
 8000aa8:	60f8      	str	r0, [r7, #12]
        break;
 8000aaa:	e01f      	b.n	8000aec <LL_RCC_GetUARTClockFreq+0x74>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8000aac:	f7ff fe3c 	bl	8000728 <LL_RCC_HSI_IsReady>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d017      	beq.n	8000ae6 <LL_RCC_GetUARTClockFreq+0x6e>
        {
          uart_frequency = HSI_VALUE;
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <LL_RCC_GetUARTClockFreq+0x88>)
 8000ab8:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000aba:	e014      	b.n	8000ae6 <LL_RCC_GetUARTClockFreq+0x6e>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8000abc:	f7ff fe48 	bl	8000750 <LL_RCC_LSE_IsReady>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d011      	beq.n	8000aea <LL_RCC_GetUARTClockFreq+0x72>
        {
          uart_frequency = LSE_VALUE;
 8000ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aca:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000acc:	e00d      	b.n	8000aea <LL_RCC_GetUARTClockFreq+0x72>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000ace:	f000 f819 	bl	8000b04 <RCC_GetSystemClockFreq>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 f8a5 	bl	8000c24 <RCC_GetHCLKClockFreq>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f8b7 	bl	8000c50 <RCC_GetPCLK1ClockFreq>
 8000ae2:	60f8      	str	r0, [r7, #12]
        break;
 8000ae4:	e002      	b.n	8000aec <LL_RCC_GetUARTClockFreq+0x74>
        break;
 8000ae6:	bf00      	nop
 8000ae8:	e000      	b.n	8000aec <LL_RCC_GetUARTClockFreq+0x74>
        break;
 8000aea:	bf00      	nop
        break;
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8000aec:	68fb      	ldr	r3, [r7, #12]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	00c00080 	.word	0x00c00080
 8000afc:	00c00040 	.word	0x00c00040
 8000b00:	00f42400 	.word	0x00f42400

08000b04 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000b0e:	f7ff fe61 	bl	80007d4 <LL_RCC_GetSysClkSource>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b0c      	cmp	r3, #12
 8000b16:	d851      	bhi.n	8000bbc <RCC_GetSystemClockFreq+0xb8>
 8000b18:	a201      	add	r2, pc, #4	; (adr r2, 8000b20 <RCC_GetSystemClockFreq+0x1c>)
 8000b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b1e:	bf00      	nop
 8000b20:	08000b55 	.word	0x08000b55
 8000b24:	08000bbd 	.word	0x08000bbd
 8000b28:	08000bbd 	.word	0x08000bbd
 8000b2c:	08000bbd 	.word	0x08000bbd
 8000b30:	08000ba9 	.word	0x08000ba9
 8000b34:	08000bbd 	.word	0x08000bbd
 8000b38:	08000bbd 	.word	0x08000bbd
 8000b3c:	08000bbd 	.word	0x08000bbd
 8000b40:	08000baf 	.word	0x08000baf
 8000b44:	08000bbd 	.word	0x08000bbd
 8000b48:	08000bbd 	.word	0x08000bbd
 8000b4c:	08000bbd 	.word	0x08000bbd
 8000b50:	08000bb5 	.word	0x08000bb5
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8000b54:	f7ff fe10 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d111      	bne.n	8000b82 <RCC_GetSystemClockFreq+0x7e>
 8000b5e:	f7ff fe0b 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d004      	beq.n	8000b72 <RCC_GetSystemClockFreq+0x6e>
 8000b68:	f7ff fe18 	bl	800079c <LL_RCC_MSI_GetRange>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	0a1b      	lsrs	r3, r3, #8
 8000b70:	e003      	b.n	8000b7a <RCC_GetSystemClockFreq+0x76>
 8000b72:	f7ff fe21 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000b76:	4603      	mov	r3, r0
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	4a28      	ldr	r2, [pc, #160]	; (8000c1c <RCC_GetSystemClockFreq+0x118>)
 8000b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b80:	e010      	b.n	8000ba4 <RCC_GetSystemClockFreq+0xa0>
 8000b82:	f7ff fdf9 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d004      	beq.n	8000b96 <RCC_GetSystemClockFreq+0x92>
 8000b8c:	f7ff fe06 	bl	800079c <LL_RCC_MSI_GetRange>
 8000b90:	4603      	mov	r3, r0
 8000b92:	091b      	lsrs	r3, r3, #4
 8000b94:	e003      	b.n	8000b9e <RCC_GetSystemClockFreq+0x9a>
 8000b96:	f7ff fe0f 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	091b      	lsrs	r3, r3, #4
 8000b9e:	4a1f      	ldr	r2, [pc, #124]	; (8000c1c <RCC_GetSystemClockFreq+0x118>)
 8000ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba4:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8000ba6:	e033      	b.n	8000c10 <RCC_GetSystemClockFreq+0x10c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <RCC_GetSystemClockFreq+0x11c>)
 8000baa:	607b      	str	r3, [r7, #4]
      break;
 8000bac:	e030      	b.n	8000c10 <RCC_GetSystemClockFreq+0x10c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <RCC_GetSystemClockFreq+0x11c>)
 8000bb0:	607b      	str	r3, [r7, #4]
      break;
 8000bb2:	e02d      	b.n	8000c10 <RCC_GetSystemClockFreq+0x10c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000bb4:	f000 f874 	bl	8000ca0 <RCC_PLL_GetFreqDomain_SYS>
 8000bb8:	6078      	str	r0, [r7, #4]
      break;
 8000bba:	e029      	b.n	8000c10 <RCC_GetSystemClockFreq+0x10c>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8000bbc:	f7ff fddc 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d111      	bne.n	8000bea <RCC_GetSystemClockFreq+0xe6>
 8000bc6:	f7ff fdd7 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d004      	beq.n	8000bda <RCC_GetSystemClockFreq+0xd6>
 8000bd0:	f7ff fde4 	bl	800079c <LL_RCC_MSI_GetRange>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	e003      	b.n	8000be2 <RCC_GetSystemClockFreq+0xde>
 8000bda:	f7ff fded 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000bde:	4603      	mov	r3, r0
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <RCC_GetSystemClockFreq+0x118>)
 8000be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be8:	e010      	b.n	8000c0c <RCC_GetSystemClockFreq+0x108>
 8000bea:	f7ff fdc5 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d004      	beq.n	8000bfe <RCC_GetSystemClockFreq+0xfa>
 8000bf4:	f7ff fdd2 	bl	800079c <LL_RCC_MSI_GetRange>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	091b      	lsrs	r3, r3, #4
 8000bfc:	e003      	b.n	8000c06 <RCC_GetSystemClockFreq+0x102>
 8000bfe:	f7ff fddb 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000c02:	4603      	mov	r3, r0
 8000c04:	091b      	lsrs	r3, r3, #4
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <RCC_GetSystemClockFreq+0x118>)
 8000c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0c:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8000c0e:	bf00      	nop
  }

  return frequency;
 8000c10:	687b      	ldr	r3, [r7, #4]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	08003cb4 	.word	0x08003cb4
 8000c20:	00f42400 	.word	0x00f42400

08000c24 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000c2c:	f7ff fde0 	bl	80007f0 <LL_RCC_GetAHBPrescaler>
 8000c30:	4603      	mov	r3, r0
 8000c32:	091b      	lsrs	r3, r3, #4
 8000c34:	f003 030f 	and.w	r3, r3, #15
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <RCC_GetHCLKClockFreq+0x28>)
 8000c3a:	5cd3      	ldrb	r3, [r2, r3]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	40d3      	lsrs	r3, r2
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	08003c9c 	.word	0x08003c9c

08000c50 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000c58:	f7ff fdd8 	bl	800080c <LL_RCC_GetAPB1Prescaler>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	0a1b      	lsrs	r3, r3, #8
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <RCC_GetPCLK1ClockFreq+0x24>)
 8000c62:	5cd3      	ldrb	r3, [r2, r3]
 8000c64:	461a      	mov	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	40d3      	lsrs	r3, r2
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	08003cac 	.word	0x08003cac

08000c78 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000c80:	f7ff fdd2 	bl	8000828 <LL_RCC_GetAPB2Prescaler>
 8000c84:	4603      	mov	r3, r0
 8000c86:	0adb      	lsrs	r3, r3, #11
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <RCC_GetPCLK2ClockFreq+0x24>)
 8000c8a:	5cd3      	ldrb	r3, [r2, r3]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	40d3      	lsrs	r3, r2
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	08003cac 	.word	0x08003cac

08000ca0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000cae:	f7ff fdf1 	bl	8000894 <LL_RCC_PLL_GetMainSource>
 8000cb2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d02d      	beq.n	8000d16 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8000cba:	2b03      	cmp	r3, #3
 8000cbc:	d02e      	beq.n	8000d1c <RCC_PLL_GetFreqDomain_SYS+0x7c>
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d12f      	bne.n	8000d22 <RCC_PLL_GetFreqDomain_SYS+0x82>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8000cc2:	f7ff fd59 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d111      	bne.n	8000cf0 <RCC_PLL_GetFreqDomain_SYS+0x50>
 8000ccc:	f7ff fd54 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d004      	beq.n	8000ce0 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8000cd6:	f7ff fd61 	bl	800079c <LL_RCC_MSI_GetRange>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	e003      	b.n	8000ce8 <RCC_PLL_GetFreqDomain_SYS+0x48>
 8000ce0:	f7ff fd6a 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	0a1b      	lsrs	r3, r3, #8
 8000ce8:	4a2f      	ldr	r2, [pc, #188]	; (8000da8 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8000cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cee:	e010      	b.n	8000d12 <RCC_PLL_GetFreqDomain_SYS+0x72>
 8000cf0:	f7ff fd42 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d004      	beq.n	8000d04 <RCC_PLL_GetFreqDomain_SYS+0x64>
 8000cfa:	f7ff fd4f 	bl	800079c <LL_RCC_MSI_GetRange>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	091b      	lsrs	r3, r3, #4
 8000d02:	e003      	b.n	8000d0c <RCC_PLL_GetFreqDomain_SYS+0x6c>
 8000d04:	f7ff fd58 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	091b      	lsrs	r3, r3, #4
 8000d0c:	4a26      	ldr	r2, [pc, #152]	; (8000da8 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8000d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d12:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8000d14:	e02f      	b.n	8000d76 <RCC_PLL_GetFreqDomain_SYS+0xd6>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8000d16:	4b25      	ldr	r3, [pc, #148]	; (8000dac <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8000d18:	607b      	str	r3, [r7, #4]
      break;
 8000d1a:	e02c      	b.n	8000d76 <RCC_PLL_GetFreqDomain_SYS+0xd6>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8000d1e:	607b      	str	r3, [r7, #4]
      break;
 8000d20:	e029      	b.n	8000d76 <RCC_PLL_GetFreqDomain_SYS+0xd6>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8000d22:	f7ff fd29 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d111      	bne.n	8000d50 <RCC_PLL_GetFreqDomain_SYS+0xb0>
 8000d2c:	f7ff fd24 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d004      	beq.n	8000d40 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 8000d36:	f7ff fd31 	bl	800079c <LL_RCC_MSI_GetRange>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	e003      	b.n	8000d48 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 8000d40:	f7ff fd3a 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000d44:	4603      	mov	r3, r0
 8000d46:	0a1b      	lsrs	r3, r3, #8
 8000d48:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8000d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4e:	e010      	b.n	8000d72 <RCC_PLL_GetFreqDomain_SYS+0xd2>
 8000d50:	f7ff fd12 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d004      	beq.n	8000d64 <RCC_PLL_GetFreqDomain_SYS+0xc4>
 8000d5a:	f7ff fd1f 	bl	800079c <LL_RCC_MSI_GetRange>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	091b      	lsrs	r3, r3, #4
 8000d62:	e003      	b.n	8000d6c <RCC_PLL_GetFreqDomain_SYS+0xcc>
 8000d64:	f7ff fd28 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	091b      	lsrs	r3, r3, #4
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8000d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d72:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8000d74:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8000d76:	f7ff fdb7 	bl	80008e8 <LL_RCC_PLL_GetDivider>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	091b      	lsrs	r3, r3, #4
 8000d7e:	3301      	adds	r3, #1
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	fbb2 f4f3 	udiv	r4, r2, r3
 8000d86:	f7ff fd93 	bl	80008b0 <LL_RCC_PLL_GetN>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	fb03 f404 	mul.w	r4, r3, r4
 8000d90:	f7ff fd9c 	bl	80008cc <LL_RCC_PLL_GetR>
 8000d94:	4603      	mov	r3, r0
 8000d96:	0e5b      	lsrs	r3, r3, #25
 8000d98:	3301      	adds	r3, #1
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd90      	pop	{r4, r7, pc}
 8000da8:	08003cb4 	.word	0x08003cb4
 8000dac:	00f42400 	.word	0x00f42400

08000db0 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc0:	2b40      	cmp	r3, #64	; 0x40
 8000dc2:	d101      	bne.n	8000dc8 <LL_SPI_IsEnabled+0x18>
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e000      	b.n	8000dca <LL_SPI_IsEnabled+0x1a>
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	461a      	mov	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	611a      	str	r2, [r3, #16]
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b084      	sub	sp, #16
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ffd3 	bl	8000db0 <LL_SPI_IsEnabled>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d13b      	bne.n	8000e88 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000e18:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	6811      	ldr	r1, [r2, #0]
 8000e20:	683a      	ldr	r2, [r7, #0]
 8000e22:	6852      	ldr	r2, [r2, #4]
 8000e24:	4311      	orrs	r1, r2
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	68d2      	ldr	r2, [r2, #12]
 8000e2a:	4311      	orrs	r1, r2
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	6912      	ldr	r2, [r2, #16]
 8000e30:	4311      	orrs	r1, r2
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	6952      	ldr	r2, [r2, #20]
 8000e36:	4311      	orrs	r1, r2
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	6992      	ldr	r2, [r2, #24]
 8000e3c:	4311      	orrs	r1, r2
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	69d2      	ldr	r2, [r2, #28]
 8000e42:	4311      	orrs	r1, r2
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	6a12      	ldr	r2, [r2, #32]
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e58:	f023 0304 	bic.w	r3, r3, #4
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	6891      	ldr	r1, [r2, #8]
 8000e60:	683a      	ldr	r2, [r7, #0]
 8000e62:	6952      	ldr	r2, [r2, #20]
 8000e64:	0c12      	lsrs	r2, r2, #16
 8000e66:	430a      	orrs	r2, r1
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	6a1b      	ldr	r3, [r3, #32]
 8000e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e76:	d105      	bne.n	8000e84 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ffa9 	bl	8000dd6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	683a      	ldr	r2, [r7, #0]
 8000f2c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <LL_TIM_OC_SetCompareCH5>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	683a      	ldr	r2, [r7, #0]
 8000f64:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <LL_TIM_OC_SetCompareCH6>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	f043 0201 	orr.w	r2, r3, #1
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	615a      	str	r2, [r3, #20]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <LL_TIM_StructInit>:
  *         to their default values.
  * @param  TIM_InitStruct pointer to a @ref LL_TIM_InitTypeDef structure (time base unit configuration data structure)
  * @retval None
  */
void LL_TIM_StructInit(LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fc8:	609a      	str	r2, [r3, #8]
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
  TIM_InitStruct->RepetitionCounter = (uint8_t)0x00;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	741a      	strb	r2, [r3, #16]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a2b      	ldr	r2, [pc, #172]	; (80010a4 <LL_TIM_Init+0xc0>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d007      	beq.n	800100c <LL_TIM_Init+0x28>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001002:	d003      	beq.n	800100c <LL_TIM_Init+0x28>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <LL_TIM_Init+0xc4>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d106      	bne.n	800101a <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	4313      	orrs	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a21      	ldr	r2, [pc, #132]	; (80010a4 <LL_TIM_Init+0xc0>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d00f      	beq.n	8001042 <LL_TIM_Init+0x5e>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001028:	d00b      	beq.n	8001042 <LL_TIM_Init+0x5e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a1e      	ldr	r2, [pc, #120]	; (80010a8 <LL_TIM_Init+0xc4>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d007      	beq.n	8001042 <LL_TIM_Init+0x5e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a1d      	ldr	r2, [pc, #116]	; (80010ac <LL_TIM_Init+0xc8>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d003      	beq.n	8001042 <LL_TIM_Init+0x5e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a1c      	ldr	r2, [pc, #112]	; (80010b0 <LL_TIM_Init+0xcc>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d106      	bne.n	8001050 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	4619      	mov	r1, r3
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff26 	bl	8000eae <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	4619      	mov	r1, r3
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff12 	bl	8000e92 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a0c      	ldr	r2, [pc, #48]	; (80010a4 <LL_TIM_Init+0xc0>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d007      	beq.n	8001086 <LL_TIM_Init+0xa2>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <LL_TIM_Init+0xc8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d003      	beq.n	8001086 <LL_TIM_Init+0xa2>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <LL_TIM_Init+0xcc>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d105      	bne.n	8001092 <LL_TIM_Init+0xae>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	7c1b      	ldrb	r3, [r3, #16]
 800108a:	4619      	mov	r1, r3
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff1c 	bl	8000eca <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ff7b 	bl	8000f8e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001098:	2301      	movs	r3, #1
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40012c00 	.word	0x40012c00
 80010a8:	40000400 	.word	0x40000400
 80010ac:	40014000 	.word	0x40014000
 80010b0:	40014400 	.word	0x40014400

080010b4 <LL_TIM_OC_StructInit>:
  *         structure to their default values.
  * @param  TIM_OC_InitStruct pointer to a @ref LL_TIM_OC_InitTypeDef structure (the output channel configuration data structure)
  * @retval None
  */
void LL_TIM_OC_StructInit(LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct->OCNState     = LL_TIM_OCSTATE_DISABLE;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitStruct->OCPolarity   = LL_TIM_OCPOLARITY_HIGH;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	615a      	str	r2, [r3, #20]
  TIM_OC_InitStruct->OCIdleState  = LL_TIM_OCIDLESTATE_LOW;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	619a      	str	r2, [r3, #24]
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	61da      	str	r2, [r3, #28]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001104:	2300      	movs	r3, #0
 8001106:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800110e:	d01f      	beq.n	8001150 <LL_TIM_OC_Init+0x58>
 8001110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001114:	d804      	bhi.n	8001120 <LL_TIM_OC_Init+0x28>
 8001116:	2b01      	cmp	r3, #1
 8001118:	d00c      	beq.n	8001134 <LL_TIM_OC_Init+0x3c>
 800111a:	2b10      	cmp	r3, #16
 800111c:	d011      	beq.n	8001142 <LL_TIM_OC_Init+0x4a>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800111e:	e033      	b.n	8001188 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8001120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001124:	d022      	beq.n	800116c <LL_TIM_OC_Init+0x74>
 8001126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800112a:	d026      	beq.n	800117a <LL_TIM_OC_Init+0x82>
 800112c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001130:	d015      	beq.n	800115e <LL_TIM_OC_Init+0x66>
      break;
 8001132:	e029      	b.n	8001188 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f000 f82c 	bl	8001194 <OC1Config>
 800113c:	4603      	mov	r3, r0
 800113e:	75fb      	strb	r3, [r7, #23]
      break;
 8001140:	e022      	b.n	8001188 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f000 f899 	bl	800127c <OC2Config>
 800114a:	4603      	mov	r3, r0
 800114c:	75fb      	strb	r3, [r7, #23]
      break;
 800114e:	e01b      	b.n	8001188 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f000 f90a 	bl	800136c <OC3Config>
 8001158:	4603      	mov	r3, r0
 800115a:	75fb      	strb	r3, [r7, #23]
      break;
 800115c:	e014      	b.n	8001188 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f000 f97b 	bl	800145c <OC4Config>
 8001166:	4603      	mov	r3, r0
 8001168:	75fb      	strb	r3, [r7, #23]
      break;
 800116a:	e00d      	b.n	8001188 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f000 f9d4 	bl	800151c <OC5Config>
 8001174:	4603      	mov	r3, r0
 8001176:	75fb      	strb	r3, [r7, #23]
      break;
 8001178:	e006      	b.n	8001188 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	f000 fa25 	bl	80015cc <OC6Config>
 8001182:	4603      	mov	r3, r0
 8001184:	75fb      	strb	r3, [r7, #23]
      break;
 8001186:	bf00      	nop
  }

  return result;
 8001188:	7dfb      	ldrb	r3, [r7, #23]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	f023 0201 	bic.w	r2, r3, #1
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a1b      	ldr	r3, [r3, #32]
 80011ae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f023 0303 	bic.w	r3, r3, #3
 80011c2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	6812      	ldr	r2, [r2, #0]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	f023 0202 	bic.w	r2, r3, #2
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	f023 0201 	bic.w	r2, r3, #1
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a1e      	ldr	r2, [pc, #120]	; (8001270 <OC1Config+0xdc>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d007      	beq.n	800120a <OC1Config+0x76>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a1d      	ldr	r2, [pc, #116]	; (8001274 <OC1Config+0xe0>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d003      	beq.n	800120a <OC1Config+0x76>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <OC1Config+0xe4>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d11e      	bne.n	8001248 <OC1Config+0xb4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f023 0208 	bic.w	r2, r3, #8
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4313      	orrs	r3, r2
 8001218:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f023 0204 	bic.w	r2, r3, #4
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4313      	orrs	r3, r2
 8001228:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	4619      	mov	r1, r3
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff fe43 	bl	8000ee6 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001266:	2301      	movs	r3, #1
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40012c00 	.word	0x40012c00
 8001274:	40014000 	.word	0x40014000
 8001278:	40014400 	.word	0x40014400

0800127c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	f023 0210 	bic.w	r2, r3, #16
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	6812      	ldr	r2, [r2, #0]
 80012ba:	0212      	lsls	r2, r2, #8
 80012bc:	4313      	orrs	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	f023 0220 	bic.w	r2, r3, #32
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	4313      	orrs	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f023 0210 	bic.w	r2, r3, #16
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	4313      	orrs	r3, r2
 80012de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <OC2Config+0xe4>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d007      	beq.n	80012f8 <OC2Config+0x7c>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a1e      	ldr	r2, [pc, #120]	; (8001364 <OC2Config+0xe8>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d003      	beq.n	80012f8 <OC2Config+0x7c>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a1d      	ldr	r2, [pc, #116]	; (8001368 <OC2Config+0xec>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d11f      	bne.n	8001338 <OC2Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	019b      	lsls	r3, r3, #6
 8001304:	4313      	orrs	r3, r2
 8001306:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	019b      	lsls	r3, r3, #6
 8001314:	4313      	orrs	r3, r2
 8001316:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	4619      	mov	r1, r3
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff fdd9 	bl	8000f02 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40012c00 	.word	0x40012c00
 8001364:	40014000 	.word	0x40014000
 8001368:	40014400 	.word	0x40014400

0800136c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a1b      	ldr	r3, [r3, #32]
 8001386:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f023 0303 	bic.w	r3, r3, #3
 800139a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	4313      	orrs	r3, r2
 80013bc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	021b      	lsls	r3, r3, #8
 80013ca:	4313      	orrs	r3, r2
 80013cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a1f      	ldr	r2, [pc, #124]	; (8001450 <OC3Config+0xe4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d007      	beq.n	80013e6 <OC3Config+0x7a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a1e      	ldr	r2, [pc, #120]	; (8001454 <OC3Config+0xe8>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d003      	beq.n	80013e6 <OC3Config+0x7a>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a1d      	ldr	r2, [pc, #116]	; (8001458 <OC3Config+0xec>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d11f      	bne.n	8001426 <OC3Config+0xba>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	029b      	lsls	r3, r3, #10
 80013f2:	4313      	orrs	r3, r2
 80013f4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	029b      	lsls	r3, r3, #10
 8001402:	4313      	orrs	r3, r2
 8001404:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	011b      	lsls	r3, r3, #4
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	015b      	lsls	r3, r3, #5
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	4619      	mov	r1, r3
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff fd70 	bl	8000f1e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001444:	2301      	movs	r3, #1
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40012c00 	.word	0x40012c00
 8001454:	40014000 	.word	0x40014000
 8001458:	40014400 	.word	0x40014400

0800145c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800148a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	0212      	lsls	r2, r2, #8
 800149c:	4313      	orrs	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	031b      	lsls	r3, r3, #12
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	031b      	lsls	r3, r3, #12
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a13      	ldr	r2, [pc, #76]	; (8001510 <OC4Config+0xb4>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d007      	beq.n	80014d8 <OC4Config+0x7c>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <OC4Config+0xb8>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d003      	beq.n	80014d8 <OC4Config+0x7c>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a11      	ldr	r2, [pc, #68]	; (8001518 <OC4Config+0xbc>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d107      	bne.n	80014e8 <OC4Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	019b      	lsls	r3, r3, #6
 80014e4:	4313      	orrs	r3, r2
 80014e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	4619      	mov	r1, r3
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff fd1d 	bl	8000f3a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40012c00 	.word	0x40012c00
 8001514:	40014000 	.word	0x40014000
 8001518:	40014400 	.word	0x40014400

0800151c <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	4313      	orrs	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	041b      	lsls	r3, r3, #16
 800155c:	4313      	orrs	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	041b      	lsls	r3, r3, #16
 800156c:	4313      	orrs	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a13      	ldr	r2, [pc, #76]	; (80015c0 <OC5Config+0xa4>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d007      	beq.n	8001588 <OC5Config+0x6c>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <OC5Config+0xa8>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d003      	beq.n	8001588 <OC5Config+0x6c>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a11      	ldr	r2, [pc, #68]	; (80015c8 <OC5Config+0xac>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d109      	bne.n	800159c <OC5Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	4619      	mov	r1, r3
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff fcd4 	bl	8000f56 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80015b4:	2301      	movs	r3, #1
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40012c00 	.word	0x40012c00
 80015c4:	40014000 	.word	0x40014000
 80015c8:	40014400 	.word	0x40014400

080015cc <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ec:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	0212      	lsls	r2, r2, #8
 80015fe:	4313      	orrs	r3, r2
 8001600:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	051b      	lsls	r3, r3, #20
 800160e:	4313      	orrs	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	051b      	lsls	r3, r3, #20
 800161e:	4313      	orrs	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a12      	ldr	r2, [pc, #72]	; (8001670 <OC6Config+0xa4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d007      	beq.n	800163a <OC6Config+0x6e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a11      	ldr	r2, [pc, #68]	; (8001674 <OC6Config+0xa8>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d003      	beq.n	800163a <OC6Config+0x6e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a10      	ldr	r2, [pc, #64]	; (8001678 <OC6Config+0xac>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d109      	bne.n	800164e <OC6Config+0x82>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	029b      	lsls	r3, r3, #10
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	4619      	mov	r1, r3
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff fc89 	bl	8000f72 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001666:	2301      	movs	r3, #1
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40012c00 	.word	0x40012c00
 8001674:	40014000 	.word	0x40014000
 8001678:	40014400 	.word	0x40014400

0800167c <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b01      	cmp	r3, #1
 800168e:	bf0c      	ite	eq
 8001690:	2301      	moveq	r3, #1
 8001692:	2300      	movne	r3, #0
 8001694:	b2db      	uxtb	r3, r3
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	605a      	str	r2, [r3, #4]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	609a      	str	r2, [r3, #8]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif
{
 80016ee:	b4b0      	push	{r4, r5, r7}
 80016f0:	b085      	sub	sp, #20
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 80016fc:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 80016fe:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001706:	d114      	bne.n	8001732 <LL_USART_SetBaudRate+0x44>
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	005a      	lsls	r2, r3, #1
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	085b      	lsrs	r3, r3, #1
 8001710:	441a      	add	r2, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	fbb2 f3f3 	udiv	r3, r2, r3
 8001718:	b29b      	uxth	r3, r3
 800171a:	461d      	mov	r5, r3
#endif
    brrtemp = usartdiv & 0xFFF0U;
 800171c:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8001720:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001722:	086b      	lsrs	r3, r5, #1
 8001724:	b29b      	uxth	r3, r3
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	60dc      	str	r4, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif
  }
}
 8001730:	e00a      	b.n	8001748 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	085a      	lsrs	r2, r3, #1
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	441a      	add	r2, r3
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001740:	b29b      	uxth	r3, r3
 8001742:	461a      	mov	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	60da      	str	r2, [r3, #12]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	bcb0      	pop	{r4, r5, r7}
 8001750:	4770      	bx	lr
	...

08001754 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800175e:	2300      	movs	r3, #0
 8001760:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ff88 	bl	800167c <LL_USART_IsEnabled>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d151      	bne.n	8001816 <LL_USART_Init+0xc2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <LL_USART_Init+0xcc>)
 8001778:	4013      	ands	r3, r2
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	6851      	ldr	r1, [r2, #4]
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	68d2      	ldr	r2, [r2, #12]
 8001782:	4311      	orrs	r1, r2
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	6912      	ldr	r2, [r2, #16]
 8001788:	4311      	orrs	r1, r2
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	6992      	ldr	r2, [r2, #24]
 800178e:	430a      	orrs	r2, r1
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	4619      	mov	r1, r3
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff80 	bl	80016a2 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	4619      	mov	r1, r3
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff8d 	bl	80016c8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <LL_USART_Init+0xd0>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d104      	bne.n	80017c0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80017b6:	2003      	movs	r0, #3
 80017b8:	f7ff f8a4 	bl	8000904 <LL_RCC_GetUSARTClockFreq>
 80017bc:	60b8      	str	r0, [r7, #8]
 80017be:	e019      	b.n	80017f4 <LL_USART_Init+0xa0>
    }
    else if (USARTx == USART2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a19      	ldr	r2, [pc, #100]	; (8001828 <LL_USART_Init+0xd4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d104      	bne.n	80017d2 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80017c8:	200c      	movs	r0, #12
 80017ca:	f7ff f89b 	bl	8000904 <LL_RCC_GetUSARTClockFreq>
 80017ce:	60b8      	str	r0, [r7, #8]
 80017d0:	e010      	b.n	80017f4 <LL_USART_Init+0xa0>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a15      	ldr	r2, [pc, #84]	; (800182c <LL_USART_Init+0xd8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d104      	bne.n	80017e4 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80017da:	2030      	movs	r0, #48	; 0x30
 80017dc:	f7ff f892 	bl	8000904 <LL_RCC_GetUSARTClockFreq>
 80017e0:	60b8      	str	r0, [r7, #8]
 80017e2:	e007      	b.n	80017f4 <LL_USART_Init+0xa0>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <LL_USART_Init+0xdc>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d103      	bne.n	80017f4 <LL_USART_Init+0xa0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80017ec:	20c0      	movs	r0, #192	; 0xc0
 80017ee:	f7ff f943 	bl	8000a78 <LL_RCC_GetUARTClockFreq>
 80017f2:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00d      	beq.n	8001816 <LL_USART_Init+0xc2>
        && (USART_InitStruct->BaudRate != 0U))
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d009      	beq.n	8001816 <LL_USART_Init+0xc2>
    {
      status = SUCCESS;
 8001802:	2301      	movs	r3, #1
 8001804:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	699a      	ldr	r2, [r3, #24]
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68b9      	ldr	r1, [r7, #8]
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff6c 	bl	80016ee <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001816:	7bfb      	ldrb	r3, [r7, #15]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	efff69f3 	.word	0xefff69f3
 8001824:	40013800 	.word	0x40013800
 8001828:	40004400 	.word	0x40004400
 800182c:	40004800 	.word	0x40004800
 8001830:	40004c00 	.word	0x40004c00

08001834 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800183e:	4909      	ldr	r1, [pc, #36]	; (8001864 <LL_InitTick+0x30>)
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	fbb2 f3f3 	udiv	r3, r2, r3
 8001848:	3b01      	subs	r3, #1
 800184a:	604b      	str	r3, [r1, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <LL_InitTick+0x30>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <LL_InitTick+0x30>)
 8001854:	2205      	movs	r2, #5
 8001856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000e010 	.word	0xe000e010

08001868 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001870:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ffdd 	bl	8001834 <LL_InitTick>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <LL_SetSystemCoreClock+0x1c>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6013      	str	r3, [r2, #0]
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000000 	.word	0x20000000

080018a4 <LL_TIM_EnableCounter>:
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f043 0201 	orr.w	r2, r3, #1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	601a      	str	r2, [r3, #0]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_TIM_DisableCounter>:
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f023 0201 	bic.w	r2, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	601a      	str	r2, [r3, #0]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_TIM_SetCounter>:
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <LL_TIM_SetAutoReload>:
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_TIM_OC_SetCompareCH1>:
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_TIM_OC_SetCompareCH2>:
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <Set_Ficlk>:
#include "stm32l4xx_ll_tim.h"

#include  <stdio.h>


ErrorStatus Set_Ficlk(uint8_t par_value, enum PWR_TIMx timer_number){
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	460a      	mov	r2, r1
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	4613      	mov	r3, r2
 8001962:	71bb      	strb	r3, [r7, #6]
	uint32_t Counter_TIM_Value, Fcut, Ficlk;
	//Fcut -  cutoff frequency of low-pass filter (Hz)
	//Ficlkt -  real value of the frequency fed to the low-pass filter (Hz)


	Fcut=par_value*10;// cutoff frequency of low-pass filter (Hz)
 8001964:	79fa      	ldrb	r2, [r7, #7]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	617b      	str	r3, [r7, #20]

	if(Fcut==10){
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	2b0a      	cmp	r3, #10
 8001974:	d103      	bne.n	800197e <Set_Ficlk+0x2a>
		Ficlk=1300;//Hz
 8001976:	f240 5314 	movw	r3, #1300	; 0x514
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	e02b      	b.n	80019d6 <Set_Ficlk+0x82>
	}else if(Fcut>=1270){
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f240 42f5 	movw	r2, #1269	; 0x4f5
 8001984:	4293      	cmp	r3, r2
 8001986:	d902      	bls.n	800198e <Set_Ficlk+0x3a>
		Ficlk=130000;//Hz
 8001988:	4b3a      	ldr	r3, [pc, #232]	; (8001a74 <Set_Ficlk+0x120>)
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	e023      	b.n	80019d6 <Set_Ficlk+0x82>
	}else{
		Ficlk = ( ((Fcut%50)==0) ? ((Fcut<1000) ? (Fcut=Fcut+5) : (Fcut=Fcut+50)) : Fcut )*100;
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4b39      	ldr	r3, [pc, #228]	; (8001a78 <Set_Ficlk+0x124>)
 8001992:	fba3 1302 	umull	r1, r3, r3, r2
 8001996:	091b      	lsrs	r3, r3, #4
 8001998:	2132      	movs	r1, #50	; 0x32
 800199a:	fb01 f303 	mul.w	r3, r1, r3
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d113      	bne.n	80019cc <Set_Ficlk+0x78>
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019aa:	d207      	bcs.n	80019bc <Set_Ficlk+0x68>
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	3305      	adds	r3, #5
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2264      	movs	r2, #100	; 0x64
 80019b6:	fb02 f303 	mul.w	r3, r2, r3
 80019ba:	e00b      	b.n	80019d4 <Set_Ficlk+0x80>
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3332      	adds	r3, #50	; 0x32
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2264      	movs	r2, #100	; 0x64
 80019c6:	fb02 f303 	mul.w	r3, r2, r3
 80019ca:	e003      	b.n	80019d4 <Set_Ficlk+0x80>
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	2264      	movs	r2, #100	; 0x64
 80019d0:	fb02 f303 	mul.w	r3, r2, r3
 80019d4:	613b      	str	r3, [r7, #16]
	}

	Counter_TIM_Value = SystemCoreClock/Ficlk;
 80019d6:	4b29      	ldr	r3, [pc, #164]	; (8001a7c <Set_Ficlk+0x128>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e0:	60fb      	str	r3, [r7, #12]

	if(timer_number == PWM_TIM2_CH2_PA1){
 80019e2:	79bb      	ldrb	r3, [r7, #6]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d11c      	bne.n	8001a22 <Set_Ficlk+0xce>
		LL_TIM_DisableCounter(TIM2); // Disable timer for resetup
 80019e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80019ec:	f7ff ff6a 	bl	80018c4 <LL_TIM_DisableCounter>
		LL_TIM_SetCounter(TIM2, 0);
 80019f0:	2100      	movs	r1, #0
 80019f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80019f6:	f7ff ff75 	bl	80018e4 <LL_TIM_SetCounter>
		LL_TIM_SetAutoReload(TIM2, Counter_TIM_Value-1);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	4619      	mov	r1, r3
 8001a00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a04:	f7ff ff7c 	bl	8001900 <LL_TIM_SetAutoReload>
		LL_TIM_OC_SetCompareCH2(TIM2, ((Counter_TIM_Value/2)-1));
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	085b      	lsrs	r3, r3, #1
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a14:	f7ff ff90 	bl	8001938 <LL_TIM_OC_SetCompareCH2>
		//LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
		LL_TIM_EnableCounter(TIM2);
 8001a18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001a1c:	f7ff ff42 	bl	80018a4 <LL_TIM_EnableCounter>
 8001a20:	e01c      	b.n	8001a5c <Set_Ficlk+0x108>
	}else if(timer_number == PWM_TIM3_CH1_PA6){
 8001a22:	79bb      	ldrb	r3, [r7, #6]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d117      	bne.n	8001a58 <Set_Ficlk+0x104>
		LL_TIM_DisableCounter(TIM3); // Disable timer for resetup
 8001a28:	4815      	ldr	r0, [pc, #84]	; (8001a80 <Set_Ficlk+0x12c>)
 8001a2a:	f7ff ff4b 	bl	80018c4 <LL_TIM_DisableCounter>
		LL_TIM_SetCounter(TIM3, 0);
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4813      	ldr	r0, [pc, #76]	; (8001a80 <Set_Ficlk+0x12c>)
 8001a32:	f7ff ff57 	bl	80018e4 <LL_TIM_SetCounter>
		LL_TIM_SetAutoReload(TIM3, Counter_TIM_Value-1);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4810      	ldr	r0, [pc, #64]	; (8001a80 <Set_Ficlk+0x12c>)
 8001a3e:	f7ff ff5f 	bl	8001900 <LL_TIM_SetAutoReload>
		LL_TIM_OC_SetCompareCH1(TIM3, ((Counter_TIM_Value/2)-1));
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	085b      	lsrs	r3, r3, #1
 8001a46:	3b01      	subs	r3, #1
 8001a48:	4619      	mov	r1, r3
 8001a4a:	480d      	ldr	r0, [pc, #52]	; (8001a80 <Set_Ficlk+0x12c>)
 8001a4c:	f7ff ff66 	bl	800191c <LL_TIM_OC_SetCompareCH1>
		//LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
		LL_TIM_EnableCounter(TIM3);
 8001a50:	480b      	ldr	r0, [pc, #44]	; (8001a80 <Set_Ficlk+0x12c>)
 8001a52:	f7ff ff27 	bl	80018a4 <LL_TIM_EnableCounter>
 8001a56:	e001      	b.n	8001a5c <Set_Ficlk+0x108>
	}else{
		return ERROR;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e006      	b.n	8001a6a <Set_Ficlk+0x116>
		Error_Handler();
	}

#ifdef DEBUGprintf
	printf("Param_value=%d Fcut=%lu Ficlk=%lu \r\n",par_value, (unsigned long)Fcut, (unsigned long)Ficlk );
 8001a5c:	79f9      	ldrb	r1, [r7, #7]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	4808      	ldr	r0, [pc, #32]	; (8001a84 <Set_Ficlk+0x130>)
 8001a64:	f001 f940 	bl	8002ce8 <iprintf>
#endif

	return SUCCESS;
 8001a68:	2301      	movs	r3, #1
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	0001fbd0 	.word	0x0001fbd0
 8001a78:	51eb851f 	.word	0x51eb851f
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	40000400 	.word	0x40000400
 8001a84:	08003bc8 	.word	0x08003bc8

08001a88 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <NVIC_SetPriorityGrouping+0x44>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aba:	4a04      	ldr	r2, [pc, #16]	; (8001acc <NVIC_SetPriorityGrouping+0x44>)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	60d3      	str	r3, [r2, #12]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad4:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <NVIC_GetPriorityGrouping+0x18>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	f003 0307 	and.w	r3, r3, #7
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	da0b      	bge.n	8001b18 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	490d      	ldr	r1, [pc, #52]	; (8001b38 <NVIC_SetPriority+0x4c>)
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	3b04      	subs	r3, #4
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b16:	e009      	b.n	8001b2c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	4908      	ldr	r1, [pc, #32]	; (8001b3c <NVIC_SetPriority+0x50>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00
 8001b3c:	e000e100 	.word	0xe000e100

08001b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f1c3 0307 	rsb	r3, r3, #7
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	bf28      	it	cs
 8001b5e:	2304      	movcs	r3, #4
 8001b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3304      	adds	r3, #4
 8001b66:	2b06      	cmp	r3, #6
 8001b68:	d902      	bls.n	8001b70 <NVIC_EncodePriority+0x30>
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3b03      	subs	r3, #3
 8001b6e:	e000      	b.n	8001b72 <NVIC_EncodePriority+0x32>
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	2201      	movs	r2, #1
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	1e5a      	subs	r2, r3, #1
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	401a      	ands	r2, r3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b86:	2101      	movs	r1, #1
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	1e59      	subs	r1, r3, #1
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	4313      	orrs	r3, r2
         );
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3724      	adds	r7, #36	; 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001bac:	4906      	ldr	r1, [pc, #24]	; (8001bc8 <LL_FLASH_SetLatency+0x24>)
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <LL_FLASH_SetLatency+0x24>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 0207 	bic.w	r2, r3, #7
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	600b      	str	r3, [r1, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	40022000 	.word	0x40022000

08001bcc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <LL_FLASH_GetLatency+0x18>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40022000 	.word	0x40022000

08001be8 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d106      	bne.n	8001c04 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001bf6:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <LL_SYSTICK_SetClkSource+0x34>)
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <LL_SYSTICK_SetClkSource+0x34>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f043 0304 	orr.w	r3, r3, #4
 8001c00:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001c02:	e005      	b.n	8001c10 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001c04:	4a05      	ldr	r2, [pc, #20]	; (8001c1c <LL_SYSTICK_SetClkSource+0x34>)
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <LL_SYSTICK_SetClkSource+0x34>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 0304 	bic.w	r3, r3, #4
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e010 	.word	0xe000e010

08001c20 <LL_RCC_HSI_Enable>:
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c24:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <LL_RCC_HSI_Enable+0x1c>)
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <LL_RCC_HSI_Enable+0x1c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000

08001c40 <LL_RCC_HSI_IsReady>:
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <LL_RCC_HSI_IsReady+0x24>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c50:	bf0c      	ite	eq
 8001c52:	2301      	moveq	r3, #1
 8001c54:	2300      	movne	r3, #0
 8001c56:	b2db      	uxtb	r3, r3
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000

08001c68 <LL_RCC_LSI_Enable>:
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <LL_RCC_LSI_Enable+0x20>)
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <LL_RCC_LSI_Enable+0x20>)
 8001c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40021000 	.word	0x40021000

08001c8c <LL_RCC_LSI_IsReady>:
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 8001c90:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <LL_RCC_LSI_IsReady+0x24>)
 8001c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	bf0c      	ite	eq
 8001c9e:	2301      	moveq	r3, #1
 8001ca0:	2300      	movne	r3, #0
 8001ca2:	b2db      	uxtb	r3, r3
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <LL_RCC_SetSysClkSource>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001cbc:	4906      	ldr	r1, [pc, #24]	; (8001cd8 <LL_RCC_SetSysClkSource+0x24>)
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <LL_RCC_SetSysClkSource+0x24>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f023 0203 	bic.w	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	608b      	str	r3, [r1, #8]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	40021000 	.word	0x40021000

08001cdc <LL_RCC_GetSysClkSource>:
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <LL_RCC_GetSysClkSource+0x18>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <LL_RCC_SetAHBPrescaler>:
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001d00:	4906      	ldr	r1, [pc, #24]	; (8001d1c <LL_RCC_SetAHBPrescaler+0x24>)
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <LL_RCC_SetAHBPrescaler+0x24>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	608b      	str	r3, [r1, #8]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	40021000 	.word	0x40021000

08001d20 <LL_RCC_SetAPB1Prescaler>:
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001d28:	4906      	ldr	r1, [pc, #24]	; (8001d44 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	608b      	str	r3, [r1, #8]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	40021000 	.word	0x40021000

08001d48 <LL_RCC_SetAPB2Prescaler>:
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001d50:	4906      	ldr	r1, [pc, #24]	; (8001d6c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	608b      	str	r3, [r1, #8]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	40021000 	.word	0x40021000

08001d70 <LL_RCC_SetUSARTClockSource>:
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFF));
 8001d78:	4909      	ldr	r1, [pc, #36]	; (8001da0 <LL_RCC_SetUSARTClockSource+0x30>)
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <LL_RCC_SetUSARTClockSource+0x30>)
 8001d7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	0c1b      	lsrs	r3, r3, #16
 8001d84:	43db      	mvns	r3, r3
 8001d86:	401a      	ands	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000

08001da4 <LL_RCC_SetI2CClockSource>:
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	0e1a      	lsrs	r2, r3, #24
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <LL_RCC_SetI2CClockSource+0x48>)
 8001db2:	4413      	add	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3U << ((I2CxSource & 0x00FF0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x00FF0000U) >> 16U)));
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	0c1b      	lsrs	r3, r3, #16
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2103      	movs	r1, #3
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	401a      	ands	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	b2d9      	uxtb	r1, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	0c1b      	lsrs	r3, r3, #16
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	601a      	str	r2, [r3, #0]
}
 8001dde:	bf00      	nop
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40021088 	.word	0x40021088

08001df0 <LL_RCC_PLL_Enable>:
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001df4:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <LL_RCC_PLL_Enable+0x1c>)
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <LL_RCC_PLL_Enable+0x1c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dfe:	6013      	str	r3, [r2, #0]
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000

08001e10 <LL_RCC_PLL_IsReady>:
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <LL_RCC_PLL_IsReady+0x24>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e20:	bf0c      	ite	eq
 8001e22:	2301      	moveq	r3, #1
 8001e24:	2300      	movne	r3, #0
 8001e26:	b2db      	uxtb	r3, r3
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000

08001e38 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8001e46:	480a      	ldr	r0, [pc, #40]	; (8001e70 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	68f9      	ldr	r1, [r7, #12]
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	4311      	orrs	r1, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	0212      	lsls	r2, r2, #8
 8001e5a:	4311      	orrs	r1, r2
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	4313      	orrs	r3, r2
 8001e62:	60c3      	str	r3, [r0, #12]
}
 8001e64:	bf00      	nop
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	40021000 	.word	0x40021000
 8001e74:	f9ff808c 	.word	0xf9ff808c

08001e78 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001e7c:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e86:	60d3      	str	r3, [r2, #12]
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000

08001e98 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001ea0:	4906      	ldr	r1, [pc, #24]	; (8001ebc <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	40007000 	.word	0x40007000

08001ec0 <LL_I2C_EnableClockStretching>:
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	601a      	str	r2, [r3, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <LL_I2C_DisableGeneralCall>:
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	601a      	str	r2, [r3, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_I2C_SetOwnAddress2>:
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f14:	f023 0306 	bic.w	r3, r3, #6
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	60da      	str	r2, [r3, #12]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_I2C_DisableOwnAddress2>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	60da      	str	r2, [r3, #12]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_I2C_EnableAutoEndMode>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	605a      	str	r2, [r3, #4]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f78:	4908      	ldr	r1, [pc, #32]	; (8001f9c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001f7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001f86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	40021000 	.word	0x40021000

08001fa0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001fa8:	4908      	ldr	r1, [pc, #32]	; (8001fcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fb6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001fd8:	4908      	ldr	r1, [pc, #32]	; (8001ffc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001fdc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001fe6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4013      	ands	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fee:	68fb      	ldr	r3, [r7, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	40021000 	.word	0x40021000

08002000 <LL_SPI_Enable>:
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	601a      	str	r2, [r3, #0]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_SPI_Disable>:
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	601a      	str	r2, [r3, #0]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_SPI_SetStandard>:
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f023 0210 	bic.w	r2, r3, #16
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	605a      	str	r2, [r3, #4]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f043 0208 	orr.w	r2, r3, #8
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	605a      	str	r2, [r3, #4]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <LL_TIM_EnableCounter>:
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f043 0201 	orr.w	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	601a      	str	r2, [r3, #0]
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <LL_TIM_OC_EnablePreload>:
{
 80020a8:	b4b0      	push	{r4, r5, r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d028      	beq.n	800210a <LL_TIM_OC_EnablePreload+0x62>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d023      	beq.n	8002106 <LL_TIM_OC_EnablePreload+0x5e>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b10      	cmp	r3, #16
 80020c2:	d01e      	beq.n	8002102 <LL_TIM_OC_EnablePreload+0x5a>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	2b40      	cmp	r3, #64	; 0x40
 80020c8:	d019      	beq.n	80020fe <LL_TIM_OC_EnablePreload+0x56>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020d0:	d013      	beq.n	80020fa <LL_TIM_OC_EnablePreload+0x52>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d8:	d00d      	beq.n	80020f6 <LL_TIM_OC_EnablePreload+0x4e>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020e0:	d007      	beq.n	80020f2 <LL_TIM_OC_EnablePreload+0x4a>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e8:	d101      	bne.n	80020ee <LL_TIM_OC_EnablePreload+0x46>
 80020ea:	2307      	movs	r3, #7
 80020ec:	e00e      	b.n	800210c <LL_TIM_OC_EnablePreload+0x64>
 80020ee:	2308      	movs	r3, #8
 80020f0:	e00c      	b.n	800210c <LL_TIM_OC_EnablePreload+0x64>
 80020f2:	2306      	movs	r3, #6
 80020f4:	e00a      	b.n	800210c <LL_TIM_OC_EnablePreload+0x64>
 80020f6:	2305      	movs	r3, #5
 80020f8:	e008      	b.n	800210c <LL_TIM_OC_EnablePreload+0x64>
 80020fa:	2304      	movs	r3, #4
 80020fc:	e006      	b.n	800210c <LL_TIM_OC_EnablePreload+0x64>
 80020fe:	2303      	movs	r3, #3
 8002100:	e004      	b.n	800210c <LL_TIM_OC_EnablePreload+0x64>
 8002102:	2302      	movs	r3, #2
 8002104:	e002      	b.n	800210c <LL_TIM_OC_EnablePreload+0x64>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <LL_TIM_OC_EnablePreload+0x64>
 800210a:	2300      	movs	r3, #0
 800210c:	461d      	mov	r5, r3
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3318      	adds	r3, #24
 8002112:	461a      	mov	r2, r3
 8002114:	4629      	mov	r1, r5
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <LL_TIM_OC_EnablePreload+0x94>)
 8002118:	5c5b      	ldrb	r3, [r3, r1]
 800211a:	4413      	add	r3, r2
 800211c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800211e:	6822      	ldr	r2, [r4, #0]
 8002120:	4629      	mov	r1, r5
 8002122:	4b07      	ldr	r3, [pc, #28]	; (8002140 <LL_TIM_OC_EnablePreload+0x98>)
 8002124:	5c5b      	ldrb	r3, [r3, r1]
 8002126:	4619      	mov	r1, r3
 8002128:	2308      	movs	r3, #8
 800212a:	408b      	lsls	r3, r1
 800212c:	4313      	orrs	r3, r2
 800212e:	6023      	str	r3, [r4, #0]
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	bcb0      	pop	{r4, r5, r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	08003c84 	.word	0x08003c84
 8002140:	08003c90 	.word	0x08003c90

08002144 <LL_TIM_SetClockSource>:
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002156:	f023 0307 	bic.w	r3, r3, #7
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	609a      	str	r2, [r3, #8]
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <LL_USART_Enable>:
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f043 0201 	orr.w	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	601a      	str	r2, [r3, #0]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <LL_USART_SetTXRXSwap>:
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	605a      	str	r2, [r3, #4]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	609a      	str	r2, [r3, #8]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	619a      	str	r2, [r3, #24]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_Init>:

//#include "stm32l4xx_ll_dma.h"



void LL_Init(void){
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800221c:	2001      	movs	r0, #1
 800221e:	f7ff fed7 	bl	8001fd0 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002222:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002226:	f7ff febb 	bl	8001fa0 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800222a:	2003      	movs	r0, #3
 800222c:	f7ff fc2c 	bl	8001a88 <NVIC_SetPriorityGrouping>

	/* System interrupt init*/
	/* MemoryManagement_IRQn interrupt configuration */
	NVIC_SetPriority(MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002230:	f7ff fc4e 	bl	8001ad0 <NVIC_GetPriorityGrouping>
 8002234:	4603      	mov	r3, r0
 8002236:	2200      	movs	r2, #0
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fc80 	bl	8001b40 <NVIC_EncodePriority>
 8002240:	4603      	mov	r3, r0
 8002242:	4619      	mov	r1, r3
 8002244:	f06f 000b 	mvn.w	r0, #11
 8002248:	f7ff fc50 	bl	8001aec <NVIC_SetPriority>
	/* BusFault_IRQn interrupt configuration */
	NVIC_SetPriority(BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800224c:	f7ff fc40 	bl	8001ad0 <NVIC_GetPriorityGrouping>
 8002250:	4603      	mov	r3, r0
 8002252:	2200      	movs	r2, #0
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff fc72 	bl	8001b40 <NVIC_EncodePriority>
 800225c:	4603      	mov	r3, r0
 800225e:	4619      	mov	r1, r3
 8002260:	f06f 000a 	mvn.w	r0, #10
 8002264:	f7ff fc42 	bl	8001aec <NVIC_SetPriority>
	/* UsageFault_IRQn interrupt configuration */
	NVIC_SetPriority(UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002268:	f7ff fc32 	bl	8001ad0 <NVIC_GetPriorityGrouping>
 800226c:	4603      	mov	r3, r0
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fc64 	bl	8001b40 <NVIC_EncodePriority>
 8002278:	4603      	mov	r3, r0
 800227a:	4619      	mov	r1, r3
 800227c:	f06f 0009 	mvn.w	r0, #9
 8002280:	f7ff fc34 	bl	8001aec <NVIC_SetPriority>
	/* SVCall_IRQn interrupt configuration */
	NVIC_SetPriority(SVCall_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002284:	f7ff fc24 	bl	8001ad0 <NVIC_GetPriorityGrouping>
 8002288:	4603      	mov	r3, r0
 800228a:	2200      	movs	r2, #0
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fc56 	bl	8001b40 <NVIC_EncodePriority>
 8002294:	4603      	mov	r3, r0
 8002296:	4619      	mov	r1, r3
 8002298:	f06f 0004 	mvn.w	r0, #4
 800229c:	f7ff fc26 	bl	8001aec <NVIC_SetPriority>
	/* DebugMonitor_IRQn interrupt configuration */
	NVIC_SetPriority(DebugMonitor_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80022a0:	f7ff fc16 	bl	8001ad0 <NVIC_GetPriorityGrouping>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fc48 	bl	8001b40 <NVIC_EncodePriority>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4619      	mov	r1, r3
 80022b4:	f06f 0003 	mvn.w	r0, #3
 80022b8:	f7ff fc18 	bl	8001aec <NVIC_SetPriority>
	/* PendSV_IRQn interrupt configuration */
	NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80022bc:	f7ff fc08 	bl	8001ad0 <NVIC_GetPriorityGrouping>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2200      	movs	r2, #0
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fc3a 	bl	8001b40 <NVIC_EncodePriority>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4619      	mov	r1, r3
 80022d0:	f06f 0001 	mvn.w	r0, #1
 80022d4:	f7ff fc0a 	bl	8001aec <NVIC_SetPriority>
	/* SysTick_IRQn interrupt configuration */
	//NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}

080022dc <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void){
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0

	LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 80022e0:	2004      	movs	r0, #4
 80022e2:	f7ff fc5f 	bl	8001ba4 <LL_FLASH_SetLatency>

	if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4){
 80022e6:	f7ff fc71 	bl	8001bcc <LL_FLASH_GetLatency>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d003      	beq.n	80022f8 <SystemClock_Config+0x1c>
		Error_Handler();
 80022f0:	2145      	movs	r1, #69	; 0x45
 80022f2:	482c      	ldr	r0, [pc, #176]	; (80023a4 <SystemClock_Config+0xc8>)
 80022f4:	f000 fade 	bl	80028b4 <_Error_Handler>
	}

	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80022f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022fc:	f7ff fdcc 	bl	8001e98 <LL_PWR_SetRegulVoltageScaling>
  	  LL_RCC_HSE_Enable();
   	   // Wait till HSE is ready
  	  while(LL_RCC_HSE_IsReady() != 1);*/

	//Enable HSI
	LL_RCC_HSI_Enable();
 8002300:	f7ff fc8e 	bl	8001c20 <LL_RCC_HSI_Enable>
	//Wait till HSI is ready
	while(LL_RCC_HSI_IsReady() != 1);
 8002304:	bf00      	nop
 8002306:	f7ff fc9b 	bl	8001c40 <LL_RCC_HSI_IsReady>
 800230a:	4603      	mov	r3, r0
 800230c:	2b01      	cmp	r3, #1
 800230e:	d1fa      	bne.n	8002306 <SystemClock_Config+0x2a>
	//LL_RCC_HSI_SetCalibTrimming(16);//not need to do this

	// Enable LSI
	LL_RCC_LSI_Enable();
 8002310:	f7ff fcaa 	bl	8001c68 <LL_RCC_LSI_Enable>

	/* Wait till LSI is ready */
	while(LL_RCC_LSI_IsReady() != 1);
 8002314:	bf00      	nop
 8002316:	f7ff fcb9 	bl	8001c8c <LL_RCC_LSI_IsReady>
 800231a:	4603      	mov	r3, r0
 800231c:	2b01      	cmp	r3, #1
 800231e:	d1fa      	bne.n	8002316 <SystemClock_Config+0x3a>

	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 10, LL_RCC_PLLR_DIV_2);
 8002320:	2300      	movs	r3, #0
 8002322:	220a      	movs	r2, #10
 8002324:	2100      	movs	r1, #0
 8002326:	2002      	movs	r0, #2
 8002328:	f7ff fd86 	bl	8001e38 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 800232c:	f7ff fd60 	bl	8001df0 <LL_RCC_PLL_Enable>
	LL_RCC_PLL_EnableDomain_SYS();
 8002330:	f7ff fda2 	bl	8001e78 <LL_RCC_PLL_EnableDomain_SYS>

	/* Wait till PLL is ready */
	while(LL_RCC_PLL_IsReady() != 1);
 8002334:	bf00      	nop
 8002336:	f7ff fd6b 	bl	8001e10 <LL_RCC_PLL_IsReady>
 800233a:	4603      	mov	r3, r0
 800233c:	2b01      	cmp	r3, #1
 800233e:	d1fa      	bne.n	8002336 <SystemClock_Config+0x5a>

	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8002340:	2003      	movs	r0, #3
 8002342:	f7ff fcb7 	bl	8001cb4 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002346:	bf00      	nop
 8002348:	f7ff fcc8 	bl	8001cdc <LL_RCC_GetSysClkSource>
 800234c:	4603      	mov	r3, r0
 800234e:	2b0c      	cmp	r3, #12
 8002350:	d1fa      	bne.n	8002348 <SystemClock_Config+0x6c>

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002352:	2000      	movs	r0, #0
 8002354:	f7ff fcd0 	bl	8001cf8 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8002358:	2000      	movs	r0, #0
 800235a:	f7ff fce1 	bl	8001d20 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800235e:	2000      	movs	r0, #0
 8002360:	f7ff fcf2 	bl	8001d48 <LL_RCC_SetAPB2Prescaler>
	LL_Init1msTick(80000000);
 8002364:	4810      	ldr	r0, [pc, #64]	; (80023a8 <SystemClock_Config+0xcc>)
 8002366:	f7ff fa7f 	bl	8001868 <LL_Init1msTick>
	LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 800236a:	2004      	movs	r0, #4
 800236c:	f7ff fc3c 	bl	8001be8 <LL_SYSTICK_SetClkSource>
	LL_SetSystemCoreClock(80000000);
 8002370:	480d      	ldr	r0, [pc, #52]	; (80023a8 <SystemClock_Config+0xcc>)
 8002372:	f7ff fa87 	bl	8001884 <LL_SetSystemCoreClock>

  /* Setup clock source for USART1 and I2C */
	LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_SYSCLK);
 8002376:	480d      	ldr	r0, [pc, #52]	; (80023ac <SystemClock_Config+0xd0>)
 8002378:	f7ff fcfa 	bl	8001d70 <LL_RCC_SetUSARTClockSource>
	LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_SYSCLK);
 800237c:	480c      	ldr	r0, [pc, #48]	; (80023b0 <SystemClock_Config+0xd4>)
 800237e:	f7ff fd11 	bl	8001da4 <LL_RCC_SetI2CClockSource>

	/* SysTick_IRQn interrupt configuration */
	NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8002382:	f7ff fba5 	bl	8001ad0 <NVIC_GetPriorityGrouping>
 8002386:	4603      	mov	r3, r0
 8002388:	2200      	movs	r2, #0
 800238a:	210f      	movs	r1, #15
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fbd7 	bl	8001b40 <NVIC_EncodePriority>
 8002392:	4603      	mov	r3, r0
 8002394:	4619      	mov	r1, r3
 8002396:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800239a:	f7ff fba7 	bl	8001aec <NVIC_SetPriority>
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	08003bf0 	.word	0x08003bf0
 80023a8:	04c4b400 	.word	0x04c4b400
 80023ac:	00030001 	.word	0x00030001
 80023b0:	000c0001 	.word	0x000c0001

080023b4 <SetupLED>:

/**
  * @brief  This function setup  Led on the KTIVT_SS_board.
  * @retval None
*/
void SetupLED(void){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80023ba:	2004      	movs	r0, #4
 80023bc:	f7ff fdd8 	bl	8001f70 <LL_AHB2_GRP1_EnableClock>

	 /*Configure LED_Yellow_HL1 (PC10), LED_Green_HL2 (PC11), LED_Green_HL3 (PC12) as output Push-Pull      */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 80023c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80023c4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80023c6:	2301      	movs	r3, #1
 80023c8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL; // try set - LL_GPIO_OUTPUT_OPENDRAIN on real board
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80023d2:	2301      	movs	r3, #1
 80023d4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d6:	463b      	mov	r3, r7
 80023d8:	4619      	mov	r1, r3
 80023da:	4806      	ldr	r0, [pc, #24]	; (80023f4 <SetupLED+0x40>)
 80023dc:	f7fe f84b 	bl	8000476 <LL_GPIO_Init>

	/* Diode is off */
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12);
 80023e0:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80023e4:	4803      	ldr	r0, [pc, #12]	; (80023f4 <SetupLED+0x40>)
 80023e6:	f7ff fefb 	bl	80021e0 <LL_GPIO_SetOutputPin>
	/*For ON/OFF LED need to use function:                            */
	  /*LED_Yellow_HL1_ON()       LED_Yellow_HL1_OFF()                */
	  /*LED_Green_HL2_ON()        LED_Green_HL2_OFF()                 */
	  /*LED_Green_HL3_ON()        LED_Green_HL3_OFF()                 */
	  /*Define in SetupPeriph.h                                       */
}
 80023ea:	bf00      	nop
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	48000800 	.word	0x48000800

080023f8 <SetupGPIO>:

/**
  * @brief  This function setup GPIO to control IC on the KTIVT_SS_board.
  * @retval None
*/
void SetupGPIO(void){
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80023fe:	2001      	movs	r0, #1
 8002400:	f7ff fdb6 	bl	8001f70 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8002404:	2004      	movs	r0, #4
 8002406:	f7ff fdb3 	bl	8001f70 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800240a:	2002      	movs	r0, #2
 800240c:	f7ff fdb0 	bl	8001f70 <LL_AHB2_GRP1_EnableClock>


	/* Configure pins out for control preamplifier K1. PA3=10 PA4=100 PA5=1000 for AG1411 ON=0 OFF=1    */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8002410:	2338      	movs	r3, #56	; 0x38
 8002412:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002414:	2301      	movs	r3, #1
 8002416:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002420:	2301      	movs	r3, #1
 8002422:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002424:	463b      	mov	r3, r7
 8002426:	4619      	mov	r1, r3
 8002428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800242c:	f7fe f823 	bl	8000476 <LL_GPIO_Init>
	/*off K1 */
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 8002430:	2138      	movs	r1, #56	; 0x38
 8002432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002436:	f7ff fed3 	bl	80021e0 <LL_GPIO_SetOutputPin>


	/* Configure pins in for control COMPorators COMP1=PC0, COMP2=PC1, COMP3=PA0*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 800243a:	2303      	movs	r3, #3
 800243c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800243e:	2300      	movs	r3, #0
 8002440:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002446:	463b      	mov	r3, r7
 8002448:	4619      	mov	r1, r3
 800244a:	4836      	ldr	r0, [pc, #216]	; (8002524 <SetupGPIO+0x12c>)
 800244c:	f7fe f813 	bl	8000476 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8002450:	2301      	movs	r3, #1
 8002452:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002454:	2300      	movs	r3, #0
 8002456:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002458:	2300      	movs	r3, #0
 800245a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245c:	463b      	mov	r3, r7
 800245e:	4619      	mov	r1, r3
 8002460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002464:	f7fe f807 	bl	8000476 <LL_GPIO_Init>


	/* Configure pins ???? PC8=F_SA0 PC9=F_SA1 PA8=F_SA2 for AG1411 ON=0 OFF=1 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8002468:	f44f 7340 	mov.w	r3, #768	; 0x300
 800246c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800246e:	2301      	movs	r3, #1
 8002470:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002472:	2300      	movs	r3, #0
 8002474:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800247a:	2301      	movs	r3, #1
 800247c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800247e:	463b      	mov	r3, r7
 8002480:	4619      	mov	r1, r3
 8002482:	4828      	ldr	r0, [pc, #160]	; (8002524 <SetupGPIO+0x12c>)
 8002484:	f7fd fff7 	bl	8000476 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8002488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800248c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800248e:	2301      	movs	r3, #1
 8002490:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800249a:	2301      	movs	r3, #1
 800249c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249e:	463b      	mov	r3, r7
 80024a0:	4619      	mov	r1, r3
 80024a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024a6:	f7fd ffe6 	bl	8000476 <LL_GPIO_Init>
	/*off F_SA*/
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_8|LL_GPIO_PIN_9);
 80024aa:	f44f 7140 	mov.w	r1, #768	; 0x300
 80024ae:	481d      	ldr	r0, [pc, #116]	; (8002524 <SetupGPIO+0x12c>)
 80024b0:	f7ff fe96 	bl	80021e0 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 80024b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024bc:	f7ff fe90 	bl	80021e0 <LL_GPIO_SetOutputPin>


	/* Configure pins for control main amplifier K2. out: PB0=G0 PB1=G1 PB2=G2 PB10=G3 PB11=G4  in: COMP4=PA2   */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 80024c0:	f640 4307 	movw	r3, #3079	; 0xc07
 80024c4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80024c6:	2301      	movs	r3, #1
 80024c8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d6:	463b      	mov	r3, r7
 80024d8:	4619      	mov	r1, r3
 80024da:	4813      	ldr	r0, [pc, #76]	; (8002528 <SetupGPIO+0x130>)
 80024dc:	f7fd ffcb 	bl	8000476 <LL_GPIO_Init>

	/*off K2=1 */
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11);
 80024e0:	f640 4107 	movw	r1, #3079	; 0xc07
 80024e4:	4810      	ldr	r0, [pc, #64]	; (8002528 <SetupGPIO+0x130>)
 80024e6:	f7ff fe89 	bl	80021fc <LL_GPIO_ResetOutputPin>
	/* Config COMP4*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80024ea:	2304      	movs	r3, #4
 80024ec:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80024ee:	2300      	movs	r3, #0
 80024f0:	607b      	str	r3, [r7, #4]
	//GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
	//GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f6:	463b      	mov	r3, r7
 80024f8:	4619      	mov	r1, r3
 80024fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024fe:	f7fd ffba 	bl	8000476 <LL_GPIO_Init>


	////////удалить только для отладки на NUcleo board

	GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8002502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002506:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002508:	2300      	movs	r3, #0
 800250a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800250c:	2300      	movs	r3, #0
 800250e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002510:	463b      	mov	r3, r7
 8002512:	4619      	mov	r1, r3
 8002514:	4803      	ldr	r0, [pc, #12]	; (8002524 <SetupGPIO+0x12c>)
 8002516:	f7fd ffae 	bl	8000476 <LL_GPIO_Init>


}
 800251a:	bf00      	nop
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	48000800 	.word	0x48000800
 8002528:	48000400 	.word	0x48000400

0800252c <USART1_Init>:

void USART1_Init(void){
 800252c:	b580      	push	{r7, lr}
 800252e:	b08e      	sub	sp, #56	; 0x38
 8002530:	af00      	add	r7, sp, #0

  	LL_USART_InitTypeDef USART_InitStruct;
  	LL_GPIO_InitTypeDef GPIO_InitStruct;

  	/* Peripheral clock enable */
  	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002532:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002536:	f7ff fd4b 	bl	8001fd0 <LL_APB2_GRP1_EnableClock>
  	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800253a:	2001      	movs	r0, #1
 800253c:	f7ff fd18 	bl	8001f70 <LL_AHB2_GRP1_EnableClock>
  
  	/**USART1 GPIO Configuration  
  	PA9   ------> USART1_TX
  	PA10   ------> USART1_RX 
  	*/
  	GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8002540:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002544:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002546:	2302      	movs	r3, #2
 8002548:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800254a:	2303      	movs	r3, #3
 800254c:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
  	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
  	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002556:	2307      	movs	r3, #7
 8002558:	61bb      	str	r3, [r7, #24]
  	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	4619      	mov	r1, r3
 800255e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002562:	f7fd ff88 	bl	8000476 <LL_GPIO_Init>
            - One Stop Bit
            - No parity
            - Hardware flow control disabled (RTS and CTS signals)
            - Receive and transmit enabled
      */
  	USART_InitStruct.BaudRate = 5000000;
 8002566:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <USART1_Init+0xbc>)
 8002568:	61fb      	str	r3, [r7, #28]
  	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 800256a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800256e:	623b      	str	r3, [r7, #32]
  	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
  	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002574:	2300      	movs	r3, #0
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28
  	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002578:	230c      	movs	r3, #12
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
  	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800257c:	2300      	movs	r3, #0
 800257e:	633b      	str	r3, [r7, #48]	; 0x30
  	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002580:	2300      	movs	r3, #0
 8002582:	637b      	str	r3, [r7, #52]	; 0x34
  	LL_USART_Init(USART1, &USART_InitStruct);
 8002584:	f107 031c 	add.w	r3, r7, #28
 8002588:	4619      	mov	r1, r3
 800258a:	4818      	ldr	r0, [pc, #96]	; (80025ec <USART1_Init+0xc0>)
 800258c:	f7ff f8e2 	bl	8001754 <LL_USART_Init>

  	LL_USART_SetTXRXSwap(USART1, LL_USART_TXRX_SWAPPED);
 8002590:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002594:	4815      	ldr	r0, [pc, #84]	; (80025ec <USART1_Init+0xc0>)
 8002596:	f7ff fdfa 	bl	800218e <LL_USART_SetTXRXSwap>

  	LL_USART_ConfigAsyncMode(USART1); 
 800259a:	4814      	ldr	r0, [pc, #80]	; (80025ec <USART1_Init+0xc0>)
 800259c:	f7ff fe0a 	bl	80021b4 <LL_USART_ConfigAsyncMode>
  	LL_USART_Enable(USART1);
 80025a0:	4812      	ldr	r0, [pc, #72]	; (80025ec <USART1_Init+0xc0>)
 80025a2:	f7ff fde4 	bl	800216e <LL_USART_Enable>

    /* Configure pins RE and TE to control transfer data throughISO3086DW, PA11=RE PA12=DE */
    GPIO_InitStruct.Pin = LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 80025a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80025aa:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80025ac:	2301      	movs	r3, #1
 80025ae:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80025b8:	2301      	movs	r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	4619      	mov	r1, r3
 80025c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025c4:	f7fd ff57 	bl	8000476 <LL_GPIO_Init>
    /**/
    //RE -Enable when low
    //TE - Enbale when high
    LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11); //Enable receive data
 80025c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025d0:	f7ff fe14 	bl	80021fc <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_12); //Enable transmit data
 80025d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025dc:	f7ff fe00 	bl	80021e0 <LL_GPIO_SetOutputPin>

}
 80025e0:	bf00      	nop
 80025e2:	3738      	adds	r7, #56	; 0x38
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	004c4b40 	.word	0x004c4b40
 80025ec:	40013800 	.word	0x40013800

080025f0 <SPI2_Init>:
/**
  * @brief  Setup I2C.
  * @param  None
  * @retval None
*/
void SPI2_Init(void){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b090      	sub	sp, #64	; 0x40
 80025f4:	af00      	add	r7, sp, #0

	LL_SPI_Disable(SPI2); ///Возможно убрать после теста
 80025f6:	482d      	ldr	r0, [pc, #180]	; (80026ac <SPI2_Init+0xbc>)
 80025f8:	f7ff fd12 	bl	8002020 <LL_SPI_Disable>

  	LL_SPI_InitTypeDef SPI_InitStruct;

  	LL_GPIO_InitTypeDef GPIO_InitStruct;
  	/* Peripheral clock enable */
  	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80025fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002600:	f7ff fcce 	bl	8001fa0 <LL_APB1_GRP1_EnableClock>
  	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8002604:	2004      	movs	r0, #4
 8002606:	f7ff fcb3 	bl	8001f70 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800260a:	2002      	movs	r0, #2
 800260c:	f7ff fcb0 	bl	8001f70 <LL_AHB2_GRP1_EnableClock>
  	PC2   ------> SPI2_MISO
  	PC3   ------> SPI2_MOSI
  	PB12   ------> SPI2_NSS
  	PB13   ------> SPI2_SCK 
  	*/
  	GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8002610:	230c      	movs	r3, #12
 8002612:	603b      	str	r3, [r7, #0]
  	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002614:	2302      	movs	r3, #2
 8002616:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002618:	2303      	movs	r3, #3
 800261a:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002620:	2300      	movs	r3, #0
 8002622:	613b      	str	r3, [r7, #16]
  	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002624:	2305      	movs	r3, #5
 8002626:	617b      	str	r3, [r7, #20]
  	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002628:	463b      	mov	r3, r7
 800262a:	4619      	mov	r1, r3
 800262c:	4820      	ldr	r0, [pc, #128]	; (80026b0 <SPI2_Init+0xc0>)
 800262e:	f7fd ff22 	bl	8000476 <LL_GPIO_Init>

  	GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13;
 8002632:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002636:	603b      	str	r3, [r7, #0]
  	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002638:	2302      	movs	r3, #2
 800263a:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800263c:	2303      	movs	r3, #3
 800263e:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002644:	2300      	movs	r3, #0
 8002646:	613b      	str	r3, [r7, #16]
  	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002648:	2305      	movs	r3, #5
 800264a:	617b      	str	r3, [r7, #20]
  	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800264c:	463b      	mov	r3, r7
 800264e:	4619      	mov	r1, r3
 8002650:	4818      	ldr	r0, [pc, #96]	; (80026b4 <SPI2_Init+0xc4>)
 8002652:	f7fd ff10 	bl	8000476 <LL_GPIO_Init>

  	/*Setup SPI2 */
  	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
  	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800265a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800265e:	61fb      	str	r3, [r7, #28]
  	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002660:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002664:	623b      	str	r3, [r7, #32]
  	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8002666:	2300      	movs	r3, #0
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
  	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800266a:	2300      	movs	r3, #0
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28
  	SPI_InitStruct.NSS = LL_SPI_NSS_HARD_OUTPUT;
 800266e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002672:	62fb      	str	r3, [r7, #44]	; 0x2c
  	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV128; /// Скорость обмена нужно уточнить у Саши
 8002674:	2330      	movs	r3, #48	; 0x30
 8002676:	633b      	str	r3, [r7, #48]	; 0x30
  	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002678:	2300      	movs	r3, #0
 800267a:	637b      	str	r3, [r7, #52]	; 0x34
  	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800267c:	2300      	movs	r3, #0
 800267e:	63bb      	str	r3, [r7, #56]	; 0x38
  	SPI_InitStruct.CRCPoly = 0;//7;
 8002680:	2300      	movs	r3, #0
 8002682:	63fb      	str	r3, [r7, #60]	; 0x3c
  	LL_SPI_Init(SPI2, &SPI_InitStruct);
 8002684:	f107 0318 	add.w	r3, r7, #24
 8002688:	4619      	mov	r1, r3
 800268a:	4808      	ldr	r0, [pc, #32]	; (80026ac <SPI2_Init+0xbc>)
 800268c:	f7fe fbb3 	bl	8000df6 <LL_SPI_Init>

  	LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8002690:	2100      	movs	r1, #0
 8002692:	4806      	ldr	r0, [pc, #24]	; (80026ac <SPI2_Init+0xbc>)
 8002694:	f7ff fcd4 	bl	8002040 <LL_SPI_SetStandard>

  	LL_SPI_EnableNSSPulseMgt(SPI2);
 8002698:	4804      	ldr	r0, [pc, #16]	; (80026ac <SPI2_Init+0xbc>)
 800269a:	f7ff fce4 	bl	8002066 <LL_SPI_EnableNSSPulseMgt>

  	LL_SPI_Enable(SPI2);// Добавлял сам проверить почему не сгенерилось автоматом
 800269e:	4803      	ldr	r0, [pc, #12]	; (80026ac <SPI2_Init+0xbc>)
 80026a0:	f7ff fcae 	bl	8002000 <LL_SPI_Enable>

}
 80026a4:	bf00      	nop
 80026a6:	3740      	adds	r7, #64	; 0x40
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40003800 	.word	0x40003800
 80026b0:	48000800 	.word	0x48000800
 80026b4:	48000400 	.word	0x48000400

080026b8 <I2C1_Init>:
/**
  * @brief  Setup I2C.
  * @param  None
  * @retval None
*/
void I2C1_Init(void){
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08e      	sub	sp, #56	; 0x38
 80026bc:	af00      	add	r7, sp, #0
	LL_I2C_InitTypeDef I2C_InitStruct;

  	LL_GPIO_InitTypeDef GPIO_InitStruct;

  	/* Peripheral clock enable */
  	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80026be:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80026c2:	f7ff fc6d 	bl	8001fa0 <LL_APB1_GRP1_EnableClock>
  	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80026c6:	2002      	movs	r0, #2
 80026c8:	f7ff fc52 	bl	8001f70 <LL_AHB2_GRP1_EnableClock>
  
  	/**I2C1 GPIO Configuration  
  	PB6   ------> I2C1_SCL
  	PB7   ------> I2C1_SDA 
  	*/
  	GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80026cc:	23c0      	movs	r3, #192	; 0xc0
 80026ce:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026d0:	2302      	movs	r3, #2
 80026d2:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80026d4:	2303      	movs	r3, #3
 80026d6:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80026d8:	2301      	movs	r3, #1
 80026da:	613b      	str	r3, [r7, #16]
  	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80026dc:	2301      	movs	r3, #1
 80026de:	617b      	str	r3, [r7, #20]
  	GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80026e0:	2304      	movs	r3, #4
 80026e2:	61bb      	str	r3, [r7, #24]
  	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	4619      	mov	r1, r3
 80026e8:	4815      	ldr	r0, [pc, #84]	; (8002740 <I2C1_Init+0x88>)
 80026ea:	f7fd fec4 	bl	8000476 <LL_GPIO_Init>

    /**I2C Initialization 
    */
  	LL_I2C_EnableAutoEndMode(I2C1);
 80026ee:	4815      	ldr	r0, [pc, #84]	; (8002744 <I2C1_Init+0x8c>)
 80026f0:	f7ff fc2e 	bl	8001f50 <LL_I2C_EnableAutoEndMode>
	LL_I2C_DisableOwnAddress2(I2C1);
 80026f4:	4813      	ldr	r0, [pc, #76]	; (8002744 <I2C1_Init+0x8c>)
 80026f6:	f7ff fc1b 	bl	8001f30 <LL_I2C_DisableOwnAddress2>
  	LL_I2C_DisableGeneralCall(I2C1);
 80026fa:	4812      	ldr	r0, [pc, #72]	; (8002744 <I2C1_Init+0x8c>)
 80026fc:	f7ff fbf0 	bl	8001ee0 <LL_I2C_DisableGeneralCall>
  	LL_I2C_EnableClockStretching(I2C1);
 8002700:	4810      	ldr	r0, [pc, #64]	; (8002744 <I2C1_Init+0x8c>)
 8002702:	f7ff fbdd 	bl	8001ec0 <LL_I2C_EnableClockStretching>

  	I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
  	I2C_InitStruct.Timing = 0x00702991;
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <I2C1_Init+0x90>)
 800270c:	623b      	str	r3, [r7, #32]
  	I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800270e:	2300      	movs	r3, #0
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
  	I2C_InitStruct.DigitalFilter = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	62bb      	str	r3, [r7, #40]	; 0x28
  	I2C_InitStruct.OwnAddress1 = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	62fb      	str	r3, [r7, #44]	; 0x2c
  	I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800271a:	2300      	movs	r3, #0
 800271c:	633b      	str	r3, [r7, #48]	; 0x30
  	I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800271e:	2300      	movs	r3, #0
 8002720:	637b      	str	r3, [r7, #52]	; 0x34
  	LL_I2C_Init(I2C1, &I2C_InitStruct);
 8002722:	f107 031c 	add.w	r3, r7, #28
 8002726:	4619      	mov	r1, r3
 8002728:	4806      	ldr	r0, [pc, #24]	; (8002744 <I2C1_Init+0x8c>)
 800272a:	f7fd ffc1 	bl	80006b0 <LL_I2C_Init>

  	LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 800272e:	2200      	movs	r2, #0
 8002730:	2100      	movs	r1, #0
 8002732:	4804      	ldr	r0, [pc, #16]	; (8002744 <I2C1_Init+0x8c>)
 8002734:	f7ff fbe4 	bl	8001f00 <LL_I2C_SetOwnAddress2>
}
 8002738:	bf00      	nop
 800273a:	3738      	adds	r7, #56	; 0x38
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	48000400 	.word	0x48000400
 8002744:	40005400 	.word	0x40005400
 8002748:	00702991 	.word	0x00702991

0800274c <PWM_Init>:
/**
  * @brief  Setup PWM Timer2 or Timer 3.
  * @param  None
  * @retval None
*/
void PWM_Init(enum PWR_TIMx timer_number){
 800274c:	b580      	push	{r7, lr}
 800274e:	b096      	sub	sp, #88	; 0x58
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
    LL_TIM_InitTypeDef TIM_InitStruct;
    LL_TIM_OC_InitTypeDef TIM_OC_InitStruct;
    LL_GPIO_InitTypeDef GPIO_InitStruct;

    /* Peripheral clock enable */
    LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002756:	2001      	movs	r0, #1
 8002758:	f7ff fc0a 	bl	8001f70 <LL_AHB2_GRP1_EnableClock>

    if (timer_number == PWM_TIM2_CH2_PA1){
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d152      	bne.n	8002808 <PWM_Init+0xbc>

    	//Setup GPIO TIM2_CH2 ------> PA1
    	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8002762:	2302      	movs	r3, #2
 8002764:	60fb      	str	r3, [r7, #12]
    	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002766:	2302      	movs	r3, #2
 8002768:	613b      	str	r3, [r7, #16]
    	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
    	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	61bb      	str	r3, [r7, #24]
    	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002776:	2301      	movs	r3, #1
 8002778:	623b      	str	r3, [r7, #32]
    	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277a:	f107 030c 	add.w	r3, r7, #12
 800277e:	4619      	mov	r1, r3
 8002780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002784:	f7fd fe77 	bl	8000476 <LL_GPIO_Init>

    	/* TIM2 clock enable */
    	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002788:	2001      	movs	r0, #1
 800278a:	f7ff fc09 	bl	8001fa0 <LL_APB1_GRP1_EnableClock>

    	LL_TIM_StructInit(&TIM_InitStruct);
 800278e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fc0b 	bl	8000fae <LL_TIM_StructInit>
    	TIM_InitStruct.Prescaler = 0;//(SystemCoreClock/1000000)-1;
 8002798:	2300      	movs	r3, #0
 800279a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800279e:	2300      	movs	r3, #0
 80027a0:	64bb      	str	r3, [r7, #72]	; 0x48
    	TIM_InitStruct.Autoreload = 61538-1;
 80027a2:	f24f 0361 	movw	r3, #61537	; 0xf061
 80027a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80027a8:	2300      	movs	r3, #0
 80027aa:	653b      	str	r3, [r7, #80]	; 0x50
    	LL_TIM_Init(TIM2, &TIM_InitStruct);
 80027ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027b0:	4619      	mov	r1, r3
 80027b2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80027b6:	f7fe fc15 	bl	8000fe4 <LL_TIM_Init>

    	LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80027ba:	2100      	movs	r1, #0
 80027bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80027c0:	f7ff fcc0 	bl	8002144 <LL_TIM_SetClockSource>
    	LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 80027c4:	2110      	movs	r1, #16
 80027c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80027ca:	f7ff fc6d 	bl	80020a8 <LL_TIM_OC_EnablePreload>

    	LL_TIM_OC_StructInit(&TIM_OC_InitStruct);
 80027ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fc6e 	bl	80010b4 <LL_TIM_OC_StructInit>
    	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80027d8:	2360      	movs	r3, #96	; 0x60
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
    	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 80027dc:	2301      	movs	r3, #1
 80027de:	62bb      	str	r3, [r7, #40]	; 0x28
    	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    	TIM_OC_InitStruct.CompareValue = 30769-1;
 80027e4:	f647 0330 	movw	r3, #30768	; 0x7830
 80027e8:	633b      	str	r3, [r7, #48]	; 0x30
    	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80027ea:	2300      	movs	r3, #0
 80027ec:	637b      	str	r3, [r7, #52]	; 0x34
    	LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80027ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f2:	461a      	mov	r2, r3
 80027f4:	2110      	movs	r1, #16
 80027f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80027fa:	f7fe fc7d 	bl	80010f8 <LL_TIM_OC_Init>

    	LL_TIM_EnableCounter(TIM2);
 80027fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002802:	f7ff fc40 	bl	8002086 <LL_TIM_EnableCounter>
        LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);

        LL_TIM_EnableCounter(TIM3);
    }

}
 8002806:	e04f      	b.n	80028a8 <PWM_Init+0x15c>
    } else if (timer_number == PWM_TIM3_CH1_PA6){
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d14c      	bne.n	80028a8 <PWM_Init+0x15c>
    	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800280e:	2340      	movs	r3, #64	; 0x40
 8002810:	60fb      	str	r3, [r7, #12]
    	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002812:	2302      	movs	r3, #2
 8002814:	613b      	str	r3, [r7, #16]
    	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
    	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]
    	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002822:	2302      	movs	r3, #2
 8002824:	623b      	str	r3, [r7, #32]
    	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002826:	f107 030c 	add.w	r3, r7, #12
 800282a:	4619      	mov	r1, r3
 800282c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002830:	f7fd fe21 	bl	8000476 <LL_GPIO_Init>
    	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002834:	2002      	movs	r0, #2
 8002836:	f7ff fbb3 	bl	8001fa0 <LL_APB1_GRP1_EnableClock>
    	LL_TIM_StructInit(&TIM_InitStruct);
 800283a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fbb5 	bl	8000fae <LL_TIM_StructInit>
    	TIM_InitStruct.Prescaler = 0;//(SystemCoreClock/1000000)-1;;
 8002844:	2300      	movs	r3, #0
 8002846:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800284a:	2300      	movs	r3, #0
 800284c:	64bb      	str	r3, [r7, #72]	; 0x48
    	TIM_InitStruct.Autoreload = 61538-1;
 800284e:	f24f 0361 	movw	r3, #61537	; 0xf061
 8002852:	64fb      	str	r3, [r7, #76]	; 0x4c
    	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002854:	2300      	movs	r3, #0
 8002856:	653b      	str	r3, [r7, #80]	; 0x50
    	LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002858:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800285c:	4619      	mov	r1, r3
 800285e:	4814      	ldr	r0, [pc, #80]	; (80028b0 <PWM_Init+0x164>)
 8002860:	f7fe fbc0 	bl	8000fe4 <LL_TIM_Init>
        LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002864:	2100      	movs	r1, #0
 8002866:	4812      	ldr	r0, [pc, #72]	; (80028b0 <PWM_Init+0x164>)
 8002868:	f7ff fc6c 	bl	8002144 <LL_TIM_SetClockSource>
        LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 800286c:	2101      	movs	r1, #1
 800286e:	4810      	ldr	r0, [pc, #64]	; (80028b0 <PWM_Init+0x164>)
 8002870:	f7ff fc1a 	bl	80020a8 <LL_TIM_OC_EnablePreload>
        LL_TIM_OC_StructInit(&TIM_OC_InitStruct);
 8002874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe fc1b 	bl	80010b4 <LL_TIM_OC_StructInit>
        TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800287e:	2360      	movs	r3, #96	; 0x60
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
        TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 8002882:	2301      	movs	r3, #1
 8002884:	62bb      	str	r3, [r7, #40]	; 0x28
        TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002886:	2300      	movs	r3, #0
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
        TIM_OC_InitStruct.CompareValue = 30769-1;
 800288a:	f647 0330 	movw	r3, #30768	; 0x7830
 800288e:	633b      	str	r3, [r7, #48]	; 0x30
        TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002890:	2300      	movs	r3, #0
 8002892:	637b      	str	r3, [r7, #52]	; 0x34
        LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002898:	461a      	mov	r2, r3
 800289a:	2101      	movs	r1, #1
 800289c:	4804      	ldr	r0, [pc, #16]	; (80028b0 <PWM_Init+0x164>)
 800289e:	f7fe fc2b 	bl	80010f8 <LL_TIM_OC_Init>
        LL_TIM_EnableCounter(TIM3);
 80028a2:	4803      	ldr	r0, [pc, #12]	; (80028b0 <PWM_Init+0x164>)
 80028a4:	f7ff fbef 	bl	8002086 <LL_TIM_EnableCounter>
}
 80028a8:	bf00      	nop
 80028aa:	3758      	adds	r7, #88	; 0x58
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40000400 	.word	0x40000400

080028b4 <_Error_Handler>:
  *
  *
  *
  */
void _Error_Handler(char *file, int line)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]

	printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4803      	ldr	r0, [pc, #12]	; (80028d0 <_Error_Handler+0x1c>)
 80028c4:	f000 fa10 	bl	8002ce8 <iprintf>
  /* User can add his own implementation to report the HAL error return state */
 //while(1)
  //{
 // }
  /* USER CODE END Error_Handler_Debug */
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	08003c08 	.word	0x08003c08

080028d4 <LL_GPIO_IsInputPinSet>:
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691a      	ldr	r2, [r3, #16]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	401a      	ands	r2, r3
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <main>:

**********************************************************/
//LL_mDelay(1);
//LL_RCC_ClocksTypeDef check_RCC_Clocks,  *CHECK_RCC_CLOCKS=&check_RCC_Clocks; // Only for check setup clock. Not need use in release

int main(void){
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0

	uint8_t i=0, pin=1;
 8002906:	2300      	movs	r3, #0
 8002908:	71fb      	strb	r3, [r7, #7]
 800290a:	2301      	movs	r3, #1
 800290c:	71bb      	strb	r3, [r7, #6]

	LL_Init();
 800290e:	f7ff fc83 	bl	8002218 <LL_Init>
	SystemClock_Config(); //Setup sysytem clock at 80 MHz
 8002912:	f7ff fce3 	bl	80022dc <SystemClock_Config>
	//LL_RCC_GetSystemClocksFreq(CHECK_RCC_CLOCKS); // Only for check setup clock Not need use in release
	printf("Hello human. I am Analog module.\r\n");
 8002916:	481a      	ldr	r0, [pc, #104]	; (8002980 <main+0x80>)
 8002918:	f000 fa5a 	bl	8002dd0 <puts>
	printf("Start setup periphery STM32L452.....\r\n");
 800291c:	4819      	ldr	r0, [pc, #100]	; (8002984 <main+0x84>)
 800291e:	f000 fa57 	bl	8002dd0 <puts>
	SetupLED(); //протестить с LL_GPIO_OUTPUT_OPENDRAIN
 8002922:	f7ff fd47 	bl	80023b4 <SetupLED>
	SetupGPIO();
 8002926:	f7ff fd67 	bl	80023f8 <SetupGPIO>
	USART1_Init();
 800292a:	f7ff fdff 	bl	800252c <USART1_Init>
	SPI2_Init();
 800292e:	f7ff fe5f 	bl	80025f0 <SPI2_Init>
	I2C1_Init();
 8002932:	f7ff fec1 	bl	80026b8 <I2C1_Init>
	PWM_Init(PWM_TIM2_CH2_PA1);
 8002936:	2000      	movs	r0, #0
 8002938:	f7ff ff08 	bl	800274c <PWM_Init>
	//Set_Ficlk(100, PWM_TIM2_CH2_PA1);
//	Set_Ficlk(50, PWM_TIM2_CH2_PA1);
//	Set_Ficlk(51, PWM_TIM2_CH2_PA1);
	while(1){

		pin=LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_13);
 800293c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002940:	4811      	ldr	r0, [pc, #68]	; (8002988 <main+0x88>)
 8002942:	f7ff ffc7 	bl	80028d4 <LL_GPIO_IsInputPinSet>
 8002946:	4603      	mov	r3, r0
 8002948:	71bb      	strb	r3, [r7, #6]

		if(pin==0){
 800294a:	79bb      	ldrb	r3, [r7, #6]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f5      	bne.n	800293c <main+0x3c>
			while(!LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_13)){
 8002950:	bf00      	nop
 8002952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002956:	480c      	ldr	r0, [pc, #48]	; (8002988 <main+0x88>)
 8002958:	f7ff ffbc 	bl	80028d4 <LL_GPIO_IsInputPinSet>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f7      	beq.n	8002952 <main+0x52>

			};

			i++;
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	3301      	adds	r3, #1
 8002966:	71fb      	strb	r3, [r7, #7]
			Set_Ficlk(i, PWM_TIM2_CH2_PA1);
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe fff1 	bl	8001954 <Set_Ficlk>
			if(i==130){
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	2b82      	cmp	r3, #130	; 0x82
 8002976:	d1e1      	bne.n	800293c <main+0x3c>
				i=0;
 8002978:	2300      	movs	r3, #0
 800297a:	71fb      	strb	r3, [r7, #7]
		pin=LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_13);
 800297c:	e7de      	b.n	800293c <main+0x3c>
 800297e:	bf00      	nop
 8002980:	08003c38 	.word	0x08003c38
 8002984:	08003c5c 	.word	0x08003c5c
 8002988:	48000800 	.word	0x48000800

0800298c <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b20      	cmp	r3, #32
 800299e:	bf0c      	ite	eq
 80029a0:	2301      	moveq	r3, #1
 80029a2:	2300      	movne	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80029be:	b29b      	uxth	r3, r3
 80029c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c4:	b29b      	uxth	r3, r3
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029e4:	e7fe      	b.n	80029e4 <HardFault_Handler+0x4>

080029e6 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80029e6:	b480      	push	{r7}
 80029e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029ea:	e7fe      	b.n	80029ea <MemManage_Handler+0x4>

080029ec <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029f0:	e7fe      	b.n	80029f0 <BusFault_Handler+0x4>

080029f2 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029f6:	e7fe      	b.n	80029f6 <UsageFault_Handler+0x4>

080029f8 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <USART1_IRQHandler>:
/******************************************************************************/

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void){
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0

    uint16_t input_data9b=0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	80fb      	strh	r3, [r7, #6]

    // делаем проверку на то что принимаем байты в заисимости от режима 
    if(LL_USART_IsActiveFlag_RXNE(USART1)){
 8002a3a:	4807      	ldr	r0, [pc, #28]	; (8002a58 <USART1_IRQHandler+0x28>)
 8002a3c:	f7ff ffa6 	bl	800298c <LL_USART_IsActiveFlag_RXNE>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d004      	beq.n	8002a50 <USART1_IRQHandler+0x20>

        input_data9b = LL_USART_ReceiveData9(USART1);
 8002a46:	4804      	ldr	r0, [pc, #16]	; (8002a58 <USART1_IRQHandler+0x28>)
 8002a48:	f7ff ffb3 	bl	80029b2 <LL_USART_ReceiveData9>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	80fb      	strh	r3, [r7, #6]

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40013800 	.word	0x40013800

08002a5c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002a64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002a68:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d013      	beq.n	8002a9c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002a74:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002a78:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002a7c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00b      	beq.n	8002a9c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002a84:	e000      	b.n	8002a88 <ITM_SendChar+0x2c>
  __ASM volatile ("nop");
 8002a86:	bf00      	nop
 8002a88:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f9      	beq.n	8002a86 <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002a92:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002a9c:	687b      	ldr	r3, [r7, #4]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b086      	sub	sp, #24
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
	/* return len; */
	
	//errno = ENOSYS;
	//return -1;

	int i=0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++){
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	e009      	b.n	8002ad4 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	60ba      	str	r2, [r7, #8]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ffc7 	bl	8002a5c <ITM_SendChar>
	for(i=0;i<len;i++){
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	dbf1      	blt.n	8002ac0 <_write+0x16>
	}
	return len;
 8002adc:	687b      	ldr	r3, [r7, #4]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <_sbrk>:

void * _sbrk(int32_t incr)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <_sbrk+0x38>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d102      	bne.n	8002afe <_sbrk+0x16>
		heap_end = & end;
 8002af8:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <_sbrk+0x38>)
 8002afa:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <_sbrk+0x3c>)
 8002afc:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8002afe:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <_sbrk+0x38>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8002b04:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <_sbrk+0x38>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <_sbrk+0x38>)
 8002b0e:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8002b10:	68fb      	ldr	r3, [r7, #12]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20000084 	.word	0x20000084
 8002b24:	20000094 	.word	0x20000094

08002b28 <_close>:

int _close(int32_t file)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <_close+0x20>)
 8002b32:	2258      	movs	r2, #88	; 0x58
 8002b34:	601a      	str	r2, [r3, #0]
	return -1;
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	20000090 	.word	0x20000090

08002b4c <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8002b56:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <_fstat+0x20>)
 8002b58:	2258      	movs	r2, #88	; 0x58
 8002b5a:	601a      	str	r2, [r3, #0]
	return -1;
 8002b5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	20000090 	.word	0x20000090

08002b70 <_isatty>:

int _isatty(int32_t file)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <_isatty+0x1c>)
 8002b7a:	2258      	movs	r2, #88	; 0x58
 8002b7c:	601a      	str	r2, [r3, #0]
	return 0;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	20000090 	.word	0x20000090

08002b90 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <_lseek+0x24>)
 8002b9e:	2258      	movs	r2, #88	; 0x58
 8002ba0:	601a      	str	r2, [r3, #0]
	return -1;
 8002ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000090 	.word	0x20000090

08002bb8 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <_read+0x24>)
 8002bc6:	2258      	movs	r2, #88	; 0x58
 8002bc8:	601a      	str	r2, [r3, #0]
	return -1;
 8002bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	20000090 	.word	0x20000090

08002be0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002be4:	4a17      	ldr	r2, [pc, #92]	; (8002c44 <SystemInit+0x64>)
 8002be6:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <SystemInit+0x64>)
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002bf4:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <SystemInit+0x68>)
 8002bf6:	4b14      	ldr	r3, [pc, #80]	; (8002c48 <SystemInit+0x68>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002c00:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <SystemInit+0x68>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002c06:	4a10      	ldr	r2, [pc, #64]	; (8002c48 <SystemInit+0x68>)
 8002c08:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <SystemInit+0x68>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002c10:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002c14:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002c16:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <SystemInit+0x68>)
 8002c18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c1c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <SystemInit+0x68>)
 8002c20:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <SystemInit+0x68>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c28:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002c2a:	4b07      	ldr	r3, [pc, #28]	; (8002c48 <SystemInit+0x68>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c30:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <SystemInit+0x64>)
 8002c32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c36:	609a      	str	r2, [r3, #8]
#endif
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	e000ed00 	.word	0xe000ed00
 8002c48:	40021000 	.word	0x40021000

08002c4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c84 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002c50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002c52:	e003      	b.n	8002c5c <LoopCopyDataInit>

08002c54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002c56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002c58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002c5a:	3104      	adds	r1, #4

08002c5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002c5c:	480b      	ldr	r0, [pc, #44]	; (8002c8c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002c5e:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002c60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002c62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002c64:	d3f6      	bcc.n	8002c54 <CopyDataInit>
	ldr	r2, =_sbss
 8002c66:	4a0b      	ldr	r2, [pc, #44]	; (8002c94 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002c68:	e002      	b.n	8002c70 <LoopFillZerobss>

08002c6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002c6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002c6c:	f842 3b04 	str.w	r3, [r2], #4

08002c70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002c70:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <LoopForever+0x16>)
	cmp	r2, r3
 8002c72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002c74:	d3f9      	bcc.n	8002c6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c76:	f7ff ffb3 	bl	8002be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c7a:	f000 f811 	bl	8002ca0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c7e:	f7ff fe3f 	bl	8002900 <main>

08002c82 <LoopForever>:

LoopForever:
    b LoopForever
 8002c82:	e7fe      	b.n	8002c82 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002c84:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8002c88:	08003d84 	.word	0x08003d84
	ldr	r0, =_sdata
 8002c8c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002c90:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8002c94:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8002c98:	20000094 	.word	0x20000094

08002c9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c9c:	e7fe      	b.n	8002c9c <ADC1_IRQHandler>
	...

08002ca0 <__libc_init_array>:
 8002ca0:	b570      	push	{r4, r5, r6, lr}
 8002ca2:	4e0d      	ldr	r6, [pc, #52]	; (8002cd8 <__libc_init_array+0x38>)
 8002ca4:	4c0d      	ldr	r4, [pc, #52]	; (8002cdc <__libc_init_array+0x3c>)
 8002ca6:	1ba4      	subs	r4, r4, r6
 8002ca8:	10a4      	asrs	r4, r4, #2
 8002caa:	2500      	movs	r5, #0
 8002cac:	42a5      	cmp	r5, r4
 8002cae:	d109      	bne.n	8002cc4 <__libc_init_array+0x24>
 8002cb0:	4e0b      	ldr	r6, [pc, #44]	; (8002ce0 <__libc_init_array+0x40>)
 8002cb2:	4c0c      	ldr	r4, [pc, #48]	; (8002ce4 <__libc_init_array+0x44>)
 8002cb4:	f000 ff7c 	bl	8003bb0 <_init>
 8002cb8:	1ba4      	subs	r4, r4, r6
 8002cba:	10a4      	asrs	r4, r4, #2
 8002cbc:	2500      	movs	r5, #0
 8002cbe:	42a5      	cmp	r5, r4
 8002cc0:	d105      	bne.n	8002cce <__libc_init_array+0x2e>
 8002cc2:	bd70      	pop	{r4, r5, r6, pc}
 8002cc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cc8:	4798      	blx	r3
 8002cca:	3501      	adds	r5, #1
 8002ccc:	e7ee      	b.n	8002cac <__libc_init_array+0xc>
 8002cce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cd2:	4798      	blx	r3
 8002cd4:	3501      	adds	r5, #1
 8002cd6:	e7f2      	b.n	8002cbe <__libc_init_array+0x1e>
 8002cd8:	08003d7c 	.word	0x08003d7c
 8002cdc:	08003d7c 	.word	0x08003d7c
 8002ce0:	08003d7c 	.word	0x08003d7c
 8002ce4:	08003d80 	.word	0x08003d80

08002ce8 <iprintf>:
 8002ce8:	b40f      	push	{r0, r1, r2, r3}
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <iprintf+0x2c>)
 8002cec:	b513      	push	{r0, r1, r4, lr}
 8002cee:	681c      	ldr	r4, [r3, #0]
 8002cf0:	b124      	cbz	r4, 8002cfc <iprintf+0x14>
 8002cf2:	69a3      	ldr	r3, [r4, #24]
 8002cf4:	b913      	cbnz	r3, 8002cfc <iprintf+0x14>
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	f000 fa24 	bl	8003144 <__sinit>
 8002cfc:	ab05      	add	r3, sp, #20
 8002cfe:	9a04      	ldr	r2, [sp, #16]
 8002d00:	68a1      	ldr	r1, [r4, #8]
 8002d02:	9301      	str	r3, [sp, #4]
 8002d04:	4620      	mov	r0, r4
 8002d06:	f000 fbe9 	bl	80034dc <_vfiprintf_r>
 8002d0a:	b002      	add	sp, #8
 8002d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d10:	b004      	add	sp, #16
 8002d12:	4770      	bx	lr
 8002d14:	20000004 	.word	0x20000004

08002d18 <_puts_r>:
 8002d18:	b570      	push	{r4, r5, r6, lr}
 8002d1a:	460e      	mov	r6, r1
 8002d1c:	4605      	mov	r5, r0
 8002d1e:	b118      	cbz	r0, 8002d28 <_puts_r+0x10>
 8002d20:	6983      	ldr	r3, [r0, #24]
 8002d22:	b90b      	cbnz	r3, 8002d28 <_puts_r+0x10>
 8002d24:	f000 fa0e 	bl	8003144 <__sinit>
 8002d28:	69ab      	ldr	r3, [r5, #24]
 8002d2a:	68ac      	ldr	r4, [r5, #8]
 8002d2c:	b913      	cbnz	r3, 8002d34 <_puts_r+0x1c>
 8002d2e:	4628      	mov	r0, r5
 8002d30:	f000 fa08 	bl	8003144 <__sinit>
 8002d34:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <_puts_r+0xac>)
 8002d36:	429c      	cmp	r4, r3
 8002d38:	d117      	bne.n	8002d6a <_puts_r+0x52>
 8002d3a:	686c      	ldr	r4, [r5, #4]
 8002d3c:	89a3      	ldrh	r3, [r4, #12]
 8002d3e:	071b      	lsls	r3, r3, #28
 8002d40:	d51d      	bpl.n	8002d7e <_puts_r+0x66>
 8002d42:	6923      	ldr	r3, [r4, #16]
 8002d44:	b1db      	cbz	r3, 8002d7e <_puts_r+0x66>
 8002d46:	3e01      	subs	r6, #1
 8002d48:	68a3      	ldr	r3, [r4, #8]
 8002d4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	60a3      	str	r3, [r4, #8]
 8002d52:	b9e9      	cbnz	r1, 8002d90 <_puts_r+0x78>
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	da2e      	bge.n	8002db6 <_puts_r+0x9e>
 8002d58:	4622      	mov	r2, r4
 8002d5a:	210a      	movs	r1, #10
 8002d5c:	4628      	mov	r0, r5
 8002d5e:	f000 f83f 	bl	8002de0 <__swbuf_r>
 8002d62:	3001      	adds	r0, #1
 8002d64:	d011      	beq.n	8002d8a <_puts_r+0x72>
 8002d66:	200a      	movs	r0, #10
 8002d68:	bd70      	pop	{r4, r5, r6, pc}
 8002d6a:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <_puts_r+0xb0>)
 8002d6c:	429c      	cmp	r4, r3
 8002d6e:	d101      	bne.n	8002d74 <_puts_r+0x5c>
 8002d70:	68ac      	ldr	r4, [r5, #8]
 8002d72:	e7e3      	b.n	8002d3c <_puts_r+0x24>
 8002d74:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <_puts_r+0xb4>)
 8002d76:	429c      	cmp	r4, r3
 8002d78:	bf08      	it	eq
 8002d7a:	68ec      	ldreq	r4, [r5, #12]
 8002d7c:	e7de      	b.n	8002d3c <_puts_r+0x24>
 8002d7e:	4621      	mov	r1, r4
 8002d80:	4628      	mov	r0, r5
 8002d82:	f000 f87f 	bl	8002e84 <__swsetup_r>
 8002d86:	2800      	cmp	r0, #0
 8002d88:	d0dd      	beq.n	8002d46 <_puts_r+0x2e>
 8002d8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d8e:	bd70      	pop	{r4, r5, r6, pc}
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	da04      	bge.n	8002d9e <_puts_r+0x86>
 8002d94:	69a2      	ldr	r2, [r4, #24]
 8002d96:	4293      	cmp	r3, r2
 8002d98:	db06      	blt.n	8002da8 <_puts_r+0x90>
 8002d9a:	290a      	cmp	r1, #10
 8002d9c:	d004      	beq.n	8002da8 <_puts_r+0x90>
 8002d9e:	6823      	ldr	r3, [r4, #0]
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	6022      	str	r2, [r4, #0]
 8002da4:	7019      	strb	r1, [r3, #0]
 8002da6:	e7cf      	b.n	8002d48 <_puts_r+0x30>
 8002da8:	4622      	mov	r2, r4
 8002daa:	4628      	mov	r0, r5
 8002dac:	f000 f818 	bl	8002de0 <__swbuf_r>
 8002db0:	3001      	adds	r0, #1
 8002db2:	d1c9      	bne.n	8002d48 <_puts_r+0x30>
 8002db4:	e7e9      	b.n	8002d8a <_puts_r+0x72>
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	200a      	movs	r0, #10
 8002dba:	1c5a      	adds	r2, r3, #1
 8002dbc:	6022      	str	r2, [r4, #0]
 8002dbe:	7018      	strb	r0, [r3, #0]
 8002dc0:	bd70      	pop	{r4, r5, r6, pc}
 8002dc2:	bf00      	nop
 8002dc4:	08003d04 	.word	0x08003d04
 8002dc8:	08003d24 	.word	0x08003d24
 8002dcc:	08003ce4 	.word	0x08003ce4

08002dd0 <puts>:
 8002dd0:	4b02      	ldr	r3, [pc, #8]	; (8002ddc <puts+0xc>)
 8002dd2:	4601      	mov	r1, r0
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	f7ff bf9f 	b.w	8002d18 <_puts_r>
 8002dda:	bf00      	nop
 8002ddc:	20000004 	.word	0x20000004

08002de0 <__swbuf_r>:
 8002de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de2:	460e      	mov	r6, r1
 8002de4:	4614      	mov	r4, r2
 8002de6:	4605      	mov	r5, r0
 8002de8:	b118      	cbz	r0, 8002df2 <__swbuf_r+0x12>
 8002dea:	6983      	ldr	r3, [r0, #24]
 8002dec:	b90b      	cbnz	r3, 8002df2 <__swbuf_r+0x12>
 8002dee:	f000 f9a9 	bl	8003144 <__sinit>
 8002df2:	4b21      	ldr	r3, [pc, #132]	; (8002e78 <__swbuf_r+0x98>)
 8002df4:	429c      	cmp	r4, r3
 8002df6:	d12a      	bne.n	8002e4e <__swbuf_r+0x6e>
 8002df8:	686c      	ldr	r4, [r5, #4]
 8002dfa:	69a3      	ldr	r3, [r4, #24]
 8002dfc:	60a3      	str	r3, [r4, #8]
 8002dfe:	89a3      	ldrh	r3, [r4, #12]
 8002e00:	071a      	lsls	r2, r3, #28
 8002e02:	d52e      	bpl.n	8002e62 <__swbuf_r+0x82>
 8002e04:	6923      	ldr	r3, [r4, #16]
 8002e06:	b363      	cbz	r3, 8002e62 <__swbuf_r+0x82>
 8002e08:	6923      	ldr	r3, [r4, #16]
 8002e0a:	6820      	ldr	r0, [r4, #0]
 8002e0c:	1ac0      	subs	r0, r0, r3
 8002e0e:	6963      	ldr	r3, [r4, #20]
 8002e10:	b2f6      	uxtb	r6, r6
 8002e12:	4298      	cmp	r0, r3
 8002e14:	4637      	mov	r7, r6
 8002e16:	db04      	blt.n	8002e22 <__swbuf_r+0x42>
 8002e18:	4621      	mov	r1, r4
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	f000 f928 	bl	8003070 <_fflush_r>
 8002e20:	bb28      	cbnz	r0, 8002e6e <__swbuf_r+0x8e>
 8002e22:	68a3      	ldr	r3, [r4, #8]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	60a3      	str	r3, [r4, #8]
 8002e28:	6823      	ldr	r3, [r4, #0]
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	6022      	str	r2, [r4, #0]
 8002e2e:	701e      	strb	r6, [r3, #0]
 8002e30:	6963      	ldr	r3, [r4, #20]
 8002e32:	3001      	adds	r0, #1
 8002e34:	4298      	cmp	r0, r3
 8002e36:	d004      	beq.n	8002e42 <__swbuf_r+0x62>
 8002e38:	89a3      	ldrh	r3, [r4, #12]
 8002e3a:	07db      	lsls	r3, r3, #31
 8002e3c:	d519      	bpl.n	8002e72 <__swbuf_r+0x92>
 8002e3e:	2e0a      	cmp	r6, #10
 8002e40:	d117      	bne.n	8002e72 <__swbuf_r+0x92>
 8002e42:	4621      	mov	r1, r4
 8002e44:	4628      	mov	r0, r5
 8002e46:	f000 f913 	bl	8003070 <_fflush_r>
 8002e4a:	b190      	cbz	r0, 8002e72 <__swbuf_r+0x92>
 8002e4c:	e00f      	b.n	8002e6e <__swbuf_r+0x8e>
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <__swbuf_r+0x9c>)
 8002e50:	429c      	cmp	r4, r3
 8002e52:	d101      	bne.n	8002e58 <__swbuf_r+0x78>
 8002e54:	68ac      	ldr	r4, [r5, #8]
 8002e56:	e7d0      	b.n	8002dfa <__swbuf_r+0x1a>
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <__swbuf_r+0xa0>)
 8002e5a:	429c      	cmp	r4, r3
 8002e5c:	bf08      	it	eq
 8002e5e:	68ec      	ldreq	r4, [r5, #12]
 8002e60:	e7cb      	b.n	8002dfa <__swbuf_r+0x1a>
 8002e62:	4621      	mov	r1, r4
 8002e64:	4628      	mov	r0, r5
 8002e66:	f000 f80d 	bl	8002e84 <__swsetup_r>
 8002e6a:	2800      	cmp	r0, #0
 8002e6c:	d0cc      	beq.n	8002e08 <__swbuf_r+0x28>
 8002e6e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002e72:	4638      	mov	r0, r7
 8002e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e76:	bf00      	nop
 8002e78:	08003d04 	.word	0x08003d04
 8002e7c:	08003d24 	.word	0x08003d24
 8002e80:	08003ce4 	.word	0x08003ce4

08002e84 <__swsetup_r>:
 8002e84:	4b32      	ldr	r3, [pc, #200]	; (8002f50 <__swsetup_r+0xcc>)
 8002e86:	b570      	push	{r4, r5, r6, lr}
 8002e88:	681d      	ldr	r5, [r3, #0]
 8002e8a:	4606      	mov	r6, r0
 8002e8c:	460c      	mov	r4, r1
 8002e8e:	b125      	cbz	r5, 8002e9a <__swsetup_r+0x16>
 8002e90:	69ab      	ldr	r3, [r5, #24]
 8002e92:	b913      	cbnz	r3, 8002e9a <__swsetup_r+0x16>
 8002e94:	4628      	mov	r0, r5
 8002e96:	f000 f955 	bl	8003144 <__sinit>
 8002e9a:	4b2e      	ldr	r3, [pc, #184]	; (8002f54 <__swsetup_r+0xd0>)
 8002e9c:	429c      	cmp	r4, r3
 8002e9e:	d10f      	bne.n	8002ec0 <__swsetup_r+0x3c>
 8002ea0:	686c      	ldr	r4, [r5, #4]
 8002ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	0715      	lsls	r5, r2, #28
 8002eaa:	d42c      	bmi.n	8002f06 <__swsetup_r+0x82>
 8002eac:	06d0      	lsls	r0, r2, #27
 8002eae:	d411      	bmi.n	8002ed4 <__swsetup_r+0x50>
 8002eb0:	2209      	movs	r2, #9
 8002eb2:	6032      	str	r2, [r6, #0]
 8002eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eb8:	81a3      	strh	r3, [r4, #12]
 8002eba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ebe:	bd70      	pop	{r4, r5, r6, pc}
 8002ec0:	4b25      	ldr	r3, [pc, #148]	; (8002f58 <__swsetup_r+0xd4>)
 8002ec2:	429c      	cmp	r4, r3
 8002ec4:	d101      	bne.n	8002eca <__swsetup_r+0x46>
 8002ec6:	68ac      	ldr	r4, [r5, #8]
 8002ec8:	e7eb      	b.n	8002ea2 <__swsetup_r+0x1e>
 8002eca:	4b24      	ldr	r3, [pc, #144]	; (8002f5c <__swsetup_r+0xd8>)
 8002ecc:	429c      	cmp	r4, r3
 8002ece:	bf08      	it	eq
 8002ed0:	68ec      	ldreq	r4, [r5, #12]
 8002ed2:	e7e6      	b.n	8002ea2 <__swsetup_r+0x1e>
 8002ed4:	0751      	lsls	r1, r2, #29
 8002ed6:	d512      	bpl.n	8002efe <__swsetup_r+0x7a>
 8002ed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002eda:	b141      	cbz	r1, 8002eee <__swsetup_r+0x6a>
 8002edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ee0:	4299      	cmp	r1, r3
 8002ee2:	d002      	beq.n	8002eea <__swsetup_r+0x66>
 8002ee4:	4630      	mov	r0, r6
 8002ee6:	f000 fa23 	bl	8003330 <_free_r>
 8002eea:	2300      	movs	r3, #0
 8002eec:	6363      	str	r3, [r4, #52]	; 0x34
 8002eee:	89a3      	ldrh	r3, [r4, #12]
 8002ef0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ef4:	81a3      	strh	r3, [r4, #12]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	6063      	str	r3, [r4, #4]
 8002efa:	6923      	ldr	r3, [r4, #16]
 8002efc:	6023      	str	r3, [r4, #0]
 8002efe:	89a3      	ldrh	r3, [r4, #12]
 8002f00:	f043 0308 	orr.w	r3, r3, #8
 8002f04:	81a3      	strh	r3, [r4, #12]
 8002f06:	6923      	ldr	r3, [r4, #16]
 8002f08:	b94b      	cbnz	r3, 8002f1e <__swsetup_r+0x9a>
 8002f0a:	89a3      	ldrh	r3, [r4, #12]
 8002f0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f14:	d003      	beq.n	8002f1e <__swsetup_r+0x9a>
 8002f16:	4621      	mov	r1, r4
 8002f18:	4630      	mov	r0, r6
 8002f1a:	f000 f9c1 	bl	80032a0 <__smakebuf_r>
 8002f1e:	89a2      	ldrh	r2, [r4, #12]
 8002f20:	f012 0301 	ands.w	r3, r2, #1
 8002f24:	d00c      	beq.n	8002f40 <__swsetup_r+0xbc>
 8002f26:	2300      	movs	r3, #0
 8002f28:	60a3      	str	r3, [r4, #8]
 8002f2a:	6963      	ldr	r3, [r4, #20]
 8002f2c:	425b      	negs	r3, r3
 8002f2e:	61a3      	str	r3, [r4, #24]
 8002f30:	6923      	ldr	r3, [r4, #16]
 8002f32:	b953      	cbnz	r3, 8002f4a <__swsetup_r+0xc6>
 8002f34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f38:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002f3c:	d1ba      	bne.n	8002eb4 <__swsetup_r+0x30>
 8002f3e:	bd70      	pop	{r4, r5, r6, pc}
 8002f40:	0792      	lsls	r2, r2, #30
 8002f42:	bf58      	it	pl
 8002f44:	6963      	ldrpl	r3, [r4, #20]
 8002f46:	60a3      	str	r3, [r4, #8]
 8002f48:	e7f2      	b.n	8002f30 <__swsetup_r+0xac>
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	e7f7      	b.n	8002f3e <__swsetup_r+0xba>
 8002f4e:	bf00      	nop
 8002f50:	20000004 	.word	0x20000004
 8002f54:	08003d04 	.word	0x08003d04
 8002f58:	08003d24 	.word	0x08003d24
 8002f5c:	08003ce4 	.word	0x08003ce4

08002f60 <__sflush_r>:
 8002f60:	898a      	ldrh	r2, [r1, #12]
 8002f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f66:	4605      	mov	r5, r0
 8002f68:	0710      	lsls	r0, r2, #28
 8002f6a:	460c      	mov	r4, r1
 8002f6c:	d45a      	bmi.n	8003024 <__sflush_r+0xc4>
 8002f6e:	684b      	ldr	r3, [r1, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	dc05      	bgt.n	8002f80 <__sflush_r+0x20>
 8002f74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	dc02      	bgt.n	8002f80 <__sflush_r+0x20>
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f82:	2e00      	cmp	r6, #0
 8002f84:	d0f9      	beq.n	8002f7a <__sflush_r+0x1a>
 8002f86:	2300      	movs	r3, #0
 8002f88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f8c:	682f      	ldr	r7, [r5, #0]
 8002f8e:	602b      	str	r3, [r5, #0]
 8002f90:	d033      	beq.n	8002ffa <__sflush_r+0x9a>
 8002f92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f94:	89a3      	ldrh	r3, [r4, #12]
 8002f96:	075a      	lsls	r2, r3, #29
 8002f98:	d505      	bpl.n	8002fa6 <__sflush_r+0x46>
 8002f9a:	6863      	ldr	r3, [r4, #4]
 8002f9c:	1ac0      	subs	r0, r0, r3
 8002f9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fa0:	b10b      	cbz	r3, 8002fa6 <__sflush_r+0x46>
 8002fa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fa4:	1ac0      	subs	r0, r0, r3
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	4602      	mov	r2, r0
 8002faa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fac:	6a21      	ldr	r1, [r4, #32]
 8002fae:	4628      	mov	r0, r5
 8002fb0:	47b0      	blx	r6
 8002fb2:	1c43      	adds	r3, r0, #1
 8002fb4:	89a3      	ldrh	r3, [r4, #12]
 8002fb6:	d106      	bne.n	8002fc6 <__sflush_r+0x66>
 8002fb8:	6829      	ldr	r1, [r5, #0]
 8002fba:	291d      	cmp	r1, #29
 8002fbc:	d84b      	bhi.n	8003056 <__sflush_r+0xf6>
 8002fbe:	4a2b      	ldr	r2, [pc, #172]	; (800306c <__sflush_r+0x10c>)
 8002fc0:	40ca      	lsrs	r2, r1
 8002fc2:	07d6      	lsls	r6, r2, #31
 8002fc4:	d547      	bpl.n	8003056 <__sflush_r+0xf6>
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	6062      	str	r2, [r4, #4]
 8002fca:	04d9      	lsls	r1, r3, #19
 8002fcc:	6922      	ldr	r2, [r4, #16]
 8002fce:	6022      	str	r2, [r4, #0]
 8002fd0:	d504      	bpl.n	8002fdc <__sflush_r+0x7c>
 8002fd2:	1c42      	adds	r2, r0, #1
 8002fd4:	d101      	bne.n	8002fda <__sflush_r+0x7a>
 8002fd6:	682b      	ldr	r3, [r5, #0]
 8002fd8:	b903      	cbnz	r3, 8002fdc <__sflush_r+0x7c>
 8002fda:	6560      	str	r0, [r4, #84]	; 0x54
 8002fdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fde:	602f      	str	r7, [r5, #0]
 8002fe0:	2900      	cmp	r1, #0
 8002fe2:	d0ca      	beq.n	8002f7a <__sflush_r+0x1a>
 8002fe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fe8:	4299      	cmp	r1, r3
 8002fea:	d002      	beq.n	8002ff2 <__sflush_r+0x92>
 8002fec:	4628      	mov	r0, r5
 8002fee:	f000 f99f 	bl	8003330 <_free_r>
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	6360      	str	r0, [r4, #52]	; 0x34
 8002ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ffa:	6a21      	ldr	r1, [r4, #32]
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	4628      	mov	r0, r5
 8003000:	47b0      	blx	r6
 8003002:	1c41      	adds	r1, r0, #1
 8003004:	d1c6      	bne.n	8002f94 <__sflush_r+0x34>
 8003006:	682b      	ldr	r3, [r5, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0c3      	beq.n	8002f94 <__sflush_r+0x34>
 800300c:	2b1d      	cmp	r3, #29
 800300e:	d001      	beq.n	8003014 <__sflush_r+0xb4>
 8003010:	2b16      	cmp	r3, #22
 8003012:	d101      	bne.n	8003018 <__sflush_r+0xb8>
 8003014:	602f      	str	r7, [r5, #0]
 8003016:	e7b0      	b.n	8002f7a <__sflush_r+0x1a>
 8003018:	89a3      	ldrh	r3, [r4, #12]
 800301a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800301e:	81a3      	strh	r3, [r4, #12]
 8003020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003024:	690f      	ldr	r7, [r1, #16]
 8003026:	2f00      	cmp	r7, #0
 8003028:	d0a7      	beq.n	8002f7a <__sflush_r+0x1a>
 800302a:	0793      	lsls	r3, r2, #30
 800302c:	680e      	ldr	r6, [r1, #0]
 800302e:	bf08      	it	eq
 8003030:	694b      	ldreq	r3, [r1, #20]
 8003032:	600f      	str	r7, [r1, #0]
 8003034:	bf18      	it	ne
 8003036:	2300      	movne	r3, #0
 8003038:	eba6 0807 	sub.w	r8, r6, r7
 800303c:	608b      	str	r3, [r1, #8]
 800303e:	f1b8 0f00 	cmp.w	r8, #0
 8003042:	dd9a      	ble.n	8002f7a <__sflush_r+0x1a>
 8003044:	4643      	mov	r3, r8
 8003046:	463a      	mov	r2, r7
 8003048:	6a21      	ldr	r1, [r4, #32]
 800304a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800304c:	4628      	mov	r0, r5
 800304e:	47b0      	blx	r6
 8003050:	2800      	cmp	r0, #0
 8003052:	dc07      	bgt.n	8003064 <__sflush_r+0x104>
 8003054:	89a3      	ldrh	r3, [r4, #12]
 8003056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800305a:	81a3      	strh	r3, [r4, #12]
 800305c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003064:	4407      	add	r7, r0
 8003066:	eba8 0800 	sub.w	r8, r8, r0
 800306a:	e7e8      	b.n	800303e <__sflush_r+0xde>
 800306c:	20400001 	.word	0x20400001

08003070 <_fflush_r>:
 8003070:	b538      	push	{r3, r4, r5, lr}
 8003072:	690b      	ldr	r3, [r1, #16]
 8003074:	4605      	mov	r5, r0
 8003076:	460c      	mov	r4, r1
 8003078:	b1db      	cbz	r3, 80030b2 <_fflush_r+0x42>
 800307a:	b118      	cbz	r0, 8003084 <_fflush_r+0x14>
 800307c:	6983      	ldr	r3, [r0, #24]
 800307e:	b90b      	cbnz	r3, 8003084 <_fflush_r+0x14>
 8003080:	f000 f860 	bl	8003144 <__sinit>
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <_fflush_r+0x48>)
 8003086:	429c      	cmp	r4, r3
 8003088:	d109      	bne.n	800309e <_fflush_r+0x2e>
 800308a:	686c      	ldr	r4, [r5, #4]
 800308c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003090:	b17b      	cbz	r3, 80030b2 <_fflush_r+0x42>
 8003092:	4621      	mov	r1, r4
 8003094:	4628      	mov	r0, r5
 8003096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800309a:	f7ff bf61 	b.w	8002f60 <__sflush_r>
 800309e:	4b07      	ldr	r3, [pc, #28]	; (80030bc <_fflush_r+0x4c>)
 80030a0:	429c      	cmp	r4, r3
 80030a2:	d101      	bne.n	80030a8 <_fflush_r+0x38>
 80030a4:	68ac      	ldr	r4, [r5, #8]
 80030a6:	e7f1      	b.n	800308c <_fflush_r+0x1c>
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <_fflush_r+0x50>)
 80030aa:	429c      	cmp	r4, r3
 80030ac:	bf08      	it	eq
 80030ae:	68ec      	ldreq	r4, [r5, #12]
 80030b0:	e7ec      	b.n	800308c <_fflush_r+0x1c>
 80030b2:	2000      	movs	r0, #0
 80030b4:	bd38      	pop	{r3, r4, r5, pc}
 80030b6:	bf00      	nop
 80030b8:	08003d04 	.word	0x08003d04
 80030bc:	08003d24 	.word	0x08003d24
 80030c0:	08003ce4 	.word	0x08003ce4

080030c4 <_cleanup_r>:
 80030c4:	4901      	ldr	r1, [pc, #4]	; (80030cc <_cleanup_r+0x8>)
 80030c6:	f000 b8a9 	b.w	800321c <_fwalk_reent>
 80030ca:	bf00      	nop
 80030cc:	08003071 	.word	0x08003071

080030d0 <std.isra.0>:
 80030d0:	2300      	movs	r3, #0
 80030d2:	b510      	push	{r4, lr}
 80030d4:	4604      	mov	r4, r0
 80030d6:	6003      	str	r3, [r0, #0]
 80030d8:	6043      	str	r3, [r0, #4]
 80030da:	6083      	str	r3, [r0, #8]
 80030dc:	8181      	strh	r1, [r0, #12]
 80030de:	6643      	str	r3, [r0, #100]	; 0x64
 80030e0:	81c2      	strh	r2, [r0, #14]
 80030e2:	6103      	str	r3, [r0, #16]
 80030e4:	6143      	str	r3, [r0, #20]
 80030e6:	6183      	str	r3, [r0, #24]
 80030e8:	4619      	mov	r1, r3
 80030ea:	2208      	movs	r2, #8
 80030ec:	305c      	adds	r0, #92	; 0x5c
 80030ee:	f000 f917 	bl	8003320 <memset>
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <std.isra.0+0x38>)
 80030f4:	6263      	str	r3, [r4, #36]	; 0x24
 80030f6:	4b05      	ldr	r3, [pc, #20]	; (800310c <std.isra.0+0x3c>)
 80030f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80030fa:	4b05      	ldr	r3, [pc, #20]	; (8003110 <std.isra.0+0x40>)
 80030fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030fe:	4b05      	ldr	r3, [pc, #20]	; (8003114 <std.isra.0+0x44>)
 8003100:	6224      	str	r4, [r4, #32]
 8003102:	6323      	str	r3, [r4, #48]	; 0x30
 8003104:	bd10      	pop	{r4, pc}
 8003106:	bf00      	nop
 8003108:	08003a55 	.word	0x08003a55
 800310c:	08003a77 	.word	0x08003a77
 8003110:	08003aaf 	.word	0x08003aaf
 8003114:	08003ad3 	.word	0x08003ad3

08003118 <__sfmoreglue>:
 8003118:	b570      	push	{r4, r5, r6, lr}
 800311a:	1e4a      	subs	r2, r1, #1
 800311c:	2568      	movs	r5, #104	; 0x68
 800311e:	4355      	muls	r5, r2
 8003120:	460e      	mov	r6, r1
 8003122:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003126:	f000 f951 	bl	80033cc <_malloc_r>
 800312a:	4604      	mov	r4, r0
 800312c:	b140      	cbz	r0, 8003140 <__sfmoreglue+0x28>
 800312e:	2100      	movs	r1, #0
 8003130:	e880 0042 	stmia.w	r0, {r1, r6}
 8003134:	300c      	adds	r0, #12
 8003136:	60a0      	str	r0, [r4, #8]
 8003138:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800313c:	f000 f8f0 	bl	8003320 <memset>
 8003140:	4620      	mov	r0, r4
 8003142:	bd70      	pop	{r4, r5, r6, pc}

08003144 <__sinit>:
 8003144:	6983      	ldr	r3, [r0, #24]
 8003146:	b510      	push	{r4, lr}
 8003148:	4604      	mov	r4, r0
 800314a:	bb33      	cbnz	r3, 800319a <__sinit+0x56>
 800314c:	6483      	str	r3, [r0, #72]	; 0x48
 800314e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003150:	6503      	str	r3, [r0, #80]	; 0x50
 8003152:	4b12      	ldr	r3, [pc, #72]	; (800319c <__sinit+0x58>)
 8003154:	4a12      	ldr	r2, [pc, #72]	; (80031a0 <__sinit+0x5c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6282      	str	r2, [r0, #40]	; 0x28
 800315a:	4298      	cmp	r0, r3
 800315c:	bf04      	itt	eq
 800315e:	2301      	moveq	r3, #1
 8003160:	6183      	streq	r3, [r0, #24]
 8003162:	f000 f81f 	bl	80031a4 <__sfp>
 8003166:	6060      	str	r0, [r4, #4]
 8003168:	4620      	mov	r0, r4
 800316a:	f000 f81b 	bl	80031a4 <__sfp>
 800316e:	60a0      	str	r0, [r4, #8]
 8003170:	4620      	mov	r0, r4
 8003172:	f000 f817 	bl	80031a4 <__sfp>
 8003176:	2200      	movs	r2, #0
 8003178:	60e0      	str	r0, [r4, #12]
 800317a:	2104      	movs	r1, #4
 800317c:	6860      	ldr	r0, [r4, #4]
 800317e:	f7ff ffa7 	bl	80030d0 <std.isra.0>
 8003182:	2201      	movs	r2, #1
 8003184:	2109      	movs	r1, #9
 8003186:	68a0      	ldr	r0, [r4, #8]
 8003188:	f7ff ffa2 	bl	80030d0 <std.isra.0>
 800318c:	2202      	movs	r2, #2
 800318e:	2112      	movs	r1, #18
 8003190:	68e0      	ldr	r0, [r4, #12]
 8003192:	f7ff ff9d 	bl	80030d0 <std.isra.0>
 8003196:	2301      	movs	r3, #1
 8003198:	61a3      	str	r3, [r4, #24]
 800319a:	bd10      	pop	{r4, pc}
 800319c:	08003d44 	.word	0x08003d44
 80031a0:	080030c5 	.word	0x080030c5

080031a4 <__sfp>:
 80031a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a6:	4b1c      	ldr	r3, [pc, #112]	; (8003218 <__sfp+0x74>)
 80031a8:	681e      	ldr	r6, [r3, #0]
 80031aa:	69b3      	ldr	r3, [r6, #24]
 80031ac:	4607      	mov	r7, r0
 80031ae:	b913      	cbnz	r3, 80031b6 <__sfp+0x12>
 80031b0:	4630      	mov	r0, r6
 80031b2:	f7ff ffc7 	bl	8003144 <__sinit>
 80031b6:	3648      	adds	r6, #72	; 0x48
 80031b8:	68b4      	ldr	r4, [r6, #8]
 80031ba:	6873      	ldr	r3, [r6, #4]
 80031bc:	3b01      	subs	r3, #1
 80031be:	d503      	bpl.n	80031c8 <__sfp+0x24>
 80031c0:	6833      	ldr	r3, [r6, #0]
 80031c2:	b133      	cbz	r3, 80031d2 <__sfp+0x2e>
 80031c4:	6836      	ldr	r6, [r6, #0]
 80031c6:	e7f7      	b.n	80031b8 <__sfp+0x14>
 80031c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80031cc:	b16d      	cbz	r5, 80031ea <__sfp+0x46>
 80031ce:	3468      	adds	r4, #104	; 0x68
 80031d0:	e7f4      	b.n	80031bc <__sfp+0x18>
 80031d2:	2104      	movs	r1, #4
 80031d4:	4638      	mov	r0, r7
 80031d6:	f7ff ff9f 	bl	8003118 <__sfmoreglue>
 80031da:	6030      	str	r0, [r6, #0]
 80031dc:	2800      	cmp	r0, #0
 80031de:	d1f1      	bne.n	80031c4 <__sfp+0x20>
 80031e0:	230c      	movs	r3, #12
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	4604      	mov	r4, r0
 80031e6:	4620      	mov	r0, r4
 80031e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031ee:	81e3      	strh	r3, [r4, #14]
 80031f0:	2301      	movs	r3, #1
 80031f2:	81a3      	strh	r3, [r4, #12]
 80031f4:	6665      	str	r5, [r4, #100]	; 0x64
 80031f6:	6025      	str	r5, [r4, #0]
 80031f8:	60a5      	str	r5, [r4, #8]
 80031fa:	6065      	str	r5, [r4, #4]
 80031fc:	6125      	str	r5, [r4, #16]
 80031fe:	6165      	str	r5, [r4, #20]
 8003200:	61a5      	str	r5, [r4, #24]
 8003202:	2208      	movs	r2, #8
 8003204:	4629      	mov	r1, r5
 8003206:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800320a:	f000 f889 	bl	8003320 <memset>
 800320e:	6365      	str	r5, [r4, #52]	; 0x34
 8003210:	63a5      	str	r5, [r4, #56]	; 0x38
 8003212:	64a5      	str	r5, [r4, #72]	; 0x48
 8003214:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003216:	e7e6      	b.n	80031e6 <__sfp+0x42>
 8003218:	08003d44 	.word	0x08003d44

0800321c <_fwalk_reent>:
 800321c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003220:	4680      	mov	r8, r0
 8003222:	4689      	mov	r9, r1
 8003224:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003228:	2600      	movs	r6, #0
 800322a:	b914      	cbnz	r4, 8003232 <_fwalk_reent+0x16>
 800322c:	4630      	mov	r0, r6
 800322e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003232:	68a5      	ldr	r5, [r4, #8]
 8003234:	6867      	ldr	r7, [r4, #4]
 8003236:	3f01      	subs	r7, #1
 8003238:	d501      	bpl.n	800323e <_fwalk_reent+0x22>
 800323a:	6824      	ldr	r4, [r4, #0]
 800323c:	e7f5      	b.n	800322a <_fwalk_reent+0xe>
 800323e:	89ab      	ldrh	r3, [r5, #12]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d907      	bls.n	8003254 <_fwalk_reent+0x38>
 8003244:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003248:	3301      	adds	r3, #1
 800324a:	d003      	beq.n	8003254 <_fwalk_reent+0x38>
 800324c:	4629      	mov	r1, r5
 800324e:	4640      	mov	r0, r8
 8003250:	47c8      	blx	r9
 8003252:	4306      	orrs	r6, r0
 8003254:	3568      	adds	r5, #104	; 0x68
 8003256:	e7ee      	b.n	8003236 <_fwalk_reent+0x1a>

08003258 <__swhatbuf_r>:
 8003258:	b570      	push	{r4, r5, r6, lr}
 800325a:	460e      	mov	r6, r1
 800325c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003260:	2900      	cmp	r1, #0
 8003262:	b090      	sub	sp, #64	; 0x40
 8003264:	4614      	mov	r4, r2
 8003266:	461d      	mov	r5, r3
 8003268:	da07      	bge.n	800327a <__swhatbuf_r+0x22>
 800326a:	2300      	movs	r3, #0
 800326c:	602b      	str	r3, [r5, #0]
 800326e:	89b3      	ldrh	r3, [r6, #12]
 8003270:	061a      	lsls	r2, r3, #24
 8003272:	d410      	bmi.n	8003296 <__swhatbuf_r+0x3e>
 8003274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003278:	e00e      	b.n	8003298 <__swhatbuf_r+0x40>
 800327a:	aa01      	add	r2, sp, #4
 800327c:	f000 fc50 	bl	8003b20 <_fstat_r>
 8003280:	2800      	cmp	r0, #0
 8003282:	dbf2      	blt.n	800326a <__swhatbuf_r+0x12>
 8003284:	9a02      	ldr	r2, [sp, #8]
 8003286:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800328a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800328e:	425a      	negs	r2, r3
 8003290:	415a      	adcs	r2, r3
 8003292:	602a      	str	r2, [r5, #0]
 8003294:	e7ee      	b.n	8003274 <__swhatbuf_r+0x1c>
 8003296:	2340      	movs	r3, #64	; 0x40
 8003298:	2000      	movs	r0, #0
 800329a:	6023      	str	r3, [r4, #0]
 800329c:	b010      	add	sp, #64	; 0x40
 800329e:	bd70      	pop	{r4, r5, r6, pc}

080032a0 <__smakebuf_r>:
 80032a0:	898b      	ldrh	r3, [r1, #12]
 80032a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032a4:	079d      	lsls	r5, r3, #30
 80032a6:	4606      	mov	r6, r0
 80032a8:	460c      	mov	r4, r1
 80032aa:	d507      	bpl.n	80032bc <__smakebuf_r+0x1c>
 80032ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032b0:	6023      	str	r3, [r4, #0]
 80032b2:	6123      	str	r3, [r4, #16]
 80032b4:	2301      	movs	r3, #1
 80032b6:	6163      	str	r3, [r4, #20]
 80032b8:	b002      	add	sp, #8
 80032ba:	bd70      	pop	{r4, r5, r6, pc}
 80032bc:	ab01      	add	r3, sp, #4
 80032be:	466a      	mov	r2, sp
 80032c0:	f7ff ffca 	bl	8003258 <__swhatbuf_r>
 80032c4:	9900      	ldr	r1, [sp, #0]
 80032c6:	4605      	mov	r5, r0
 80032c8:	4630      	mov	r0, r6
 80032ca:	f000 f87f 	bl	80033cc <_malloc_r>
 80032ce:	b948      	cbnz	r0, 80032e4 <__smakebuf_r+0x44>
 80032d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032d4:	059a      	lsls	r2, r3, #22
 80032d6:	d4ef      	bmi.n	80032b8 <__smakebuf_r+0x18>
 80032d8:	f023 0303 	bic.w	r3, r3, #3
 80032dc:	f043 0302 	orr.w	r3, r3, #2
 80032e0:	81a3      	strh	r3, [r4, #12]
 80032e2:	e7e3      	b.n	80032ac <__smakebuf_r+0xc>
 80032e4:	4b0d      	ldr	r3, [pc, #52]	; (800331c <__smakebuf_r+0x7c>)
 80032e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80032e8:	89a3      	ldrh	r3, [r4, #12]
 80032ea:	6020      	str	r0, [r4, #0]
 80032ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f0:	81a3      	strh	r3, [r4, #12]
 80032f2:	9b00      	ldr	r3, [sp, #0]
 80032f4:	6163      	str	r3, [r4, #20]
 80032f6:	9b01      	ldr	r3, [sp, #4]
 80032f8:	6120      	str	r0, [r4, #16]
 80032fa:	b15b      	cbz	r3, 8003314 <__smakebuf_r+0x74>
 80032fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003300:	4630      	mov	r0, r6
 8003302:	f000 fc1f 	bl	8003b44 <_isatty_r>
 8003306:	b128      	cbz	r0, 8003314 <__smakebuf_r+0x74>
 8003308:	89a3      	ldrh	r3, [r4, #12]
 800330a:	f023 0303 	bic.w	r3, r3, #3
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	81a3      	strh	r3, [r4, #12]
 8003314:	89a3      	ldrh	r3, [r4, #12]
 8003316:	431d      	orrs	r5, r3
 8003318:	81a5      	strh	r5, [r4, #12]
 800331a:	e7cd      	b.n	80032b8 <__smakebuf_r+0x18>
 800331c:	080030c5 	.word	0x080030c5

08003320 <memset>:
 8003320:	4402      	add	r2, r0
 8003322:	4603      	mov	r3, r0
 8003324:	4293      	cmp	r3, r2
 8003326:	d100      	bne.n	800332a <memset+0xa>
 8003328:	4770      	bx	lr
 800332a:	f803 1b01 	strb.w	r1, [r3], #1
 800332e:	e7f9      	b.n	8003324 <memset+0x4>

08003330 <_free_r>:
 8003330:	b538      	push	{r3, r4, r5, lr}
 8003332:	4605      	mov	r5, r0
 8003334:	2900      	cmp	r1, #0
 8003336:	d045      	beq.n	80033c4 <_free_r+0x94>
 8003338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800333c:	1f0c      	subs	r4, r1, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	bfb8      	it	lt
 8003342:	18e4      	addlt	r4, r4, r3
 8003344:	f000 fc20 	bl	8003b88 <__malloc_lock>
 8003348:	4a1f      	ldr	r2, [pc, #124]	; (80033c8 <_free_r+0x98>)
 800334a:	6813      	ldr	r3, [r2, #0]
 800334c:	4610      	mov	r0, r2
 800334e:	b933      	cbnz	r3, 800335e <_free_r+0x2e>
 8003350:	6063      	str	r3, [r4, #4]
 8003352:	6014      	str	r4, [r2, #0]
 8003354:	4628      	mov	r0, r5
 8003356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800335a:	f000 bc16 	b.w	8003b8a <__malloc_unlock>
 800335e:	42a3      	cmp	r3, r4
 8003360:	d90c      	bls.n	800337c <_free_r+0x4c>
 8003362:	6821      	ldr	r1, [r4, #0]
 8003364:	1862      	adds	r2, r4, r1
 8003366:	4293      	cmp	r3, r2
 8003368:	bf04      	itt	eq
 800336a:	681a      	ldreq	r2, [r3, #0]
 800336c:	685b      	ldreq	r3, [r3, #4]
 800336e:	6063      	str	r3, [r4, #4]
 8003370:	bf04      	itt	eq
 8003372:	1852      	addeq	r2, r2, r1
 8003374:	6022      	streq	r2, [r4, #0]
 8003376:	6004      	str	r4, [r0, #0]
 8003378:	e7ec      	b.n	8003354 <_free_r+0x24>
 800337a:	4613      	mov	r3, r2
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	b10a      	cbz	r2, 8003384 <_free_r+0x54>
 8003380:	42a2      	cmp	r2, r4
 8003382:	d9fa      	bls.n	800337a <_free_r+0x4a>
 8003384:	6819      	ldr	r1, [r3, #0]
 8003386:	1858      	adds	r0, r3, r1
 8003388:	42a0      	cmp	r0, r4
 800338a:	d10b      	bne.n	80033a4 <_free_r+0x74>
 800338c:	6820      	ldr	r0, [r4, #0]
 800338e:	4401      	add	r1, r0
 8003390:	1858      	adds	r0, r3, r1
 8003392:	4282      	cmp	r2, r0
 8003394:	6019      	str	r1, [r3, #0]
 8003396:	d1dd      	bne.n	8003354 <_free_r+0x24>
 8003398:	6810      	ldr	r0, [r2, #0]
 800339a:	6852      	ldr	r2, [r2, #4]
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	4401      	add	r1, r0
 80033a0:	6019      	str	r1, [r3, #0]
 80033a2:	e7d7      	b.n	8003354 <_free_r+0x24>
 80033a4:	d902      	bls.n	80033ac <_free_r+0x7c>
 80033a6:	230c      	movs	r3, #12
 80033a8:	602b      	str	r3, [r5, #0]
 80033aa:	e7d3      	b.n	8003354 <_free_r+0x24>
 80033ac:	6820      	ldr	r0, [r4, #0]
 80033ae:	1821      	adds	r1, r4, r0
 80033b0:	428a      	cmp	r2, r1
 80033b2:	bf04      	itt	eq
 80033b4:	6811      	ldreq	r1, [r2, #0]
 80033b6:	6852      	ldreq	r2, [r2, #4]
 80033b8:	6062      	str	r2, [r4, #4]
 80033ba:	bf04      	itt	eq
 80033bc:	1809      	addeq	r1, r1, r0
 80033be:	6021      	streq	r1, [r4, #0]
 80033c0:	605c      	str	r4, [r3, #4]
 80033c2:	e7c7      	b.n	8003354 <_free_r+0x24>
 80033c4:	bd38      	pop	{r3, r4, r5, pc}
 80033c6:	bf00      	nop
 80033c8:	20000088 	.word	0x20000088

080033cc <_malloc_r>:
 80033cc:	b570      	push	{r4, r5, r6, lr}
 80033ce:	1ccd      	adds	r5, r1, #3
 80033d0:	f025 0503 	bic.w	r5, r5, #3
 80033d4:	3508      	adds	r5, #8
 80033d6:	2d0c      	cmp	r5, #12
 80033d8:	bf38      	it	cc
 80033da:	250c      	movcc	r5, #12
 80033dc:	2d00      	cmp	r5, #0
 80033de:	4606      	mov	r6, r0
 80033e0:	db01      	blt.n	80033e6 <_malloc_r+0x1a>
 80033e2:	42a9      	cmp	r1, r5
 80033e4:	d903      	bls.n	80033ee <_malloc_r+0x22>
 80033e6:	230c      	movs	r3, #12
 80033e8:	6033      	str	r3, [r6, #0]
 80033ea:	2000      	movs	r0, #0
 80033ec:	bd70      	pop	{r4, r5, r6, pc}
 80033ee:	f000 fbcb 	bl	8003b88 <__malloc_lock>
 80033f2:	4a23      	ldr	r2, [pc, #140]	; (8003480 <_malloc_r+0xb4>)
 80033f4:	6814      	ldr	r4, [r2, #0]
 80033f6:	4621      	mov	r1, r4
 80033f8:	b991      	cbnz	r1, 8003420 <_malloc_r+0x54>
 80033fa:	4c22      	ldr	r4, [pc, #136]	; (8003484 <_malloc_r+0xb8>)
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	b91b      	cbnz	r3, 8003408 <_malloc_r+0x3c>
 8003400:	4630      	mov	r0, r6
 8003402:	f000 fb17 	bl	8003a34 <_sbrk_r>
 8003406:	6020      	str	r0, [r4, #0]
 8003408:	4629      	mov	r1, r5
 800340a:	4630      	mov	r0, r6
 800340c:	f000 fb12 	bl	8003a34 <_sbrk_r>
 8003410:	1c43      	adds	r3, r0, #1
 8003412:	d126      	bne.n	8003462 <_malloc_r+0x96>
 8003414:	230c      	movs	r3, #12
 8003416:	6033      	str	r3, [r6, #0]
 8003418:	4630      	mov	r0, r6
 800341a:	f000 fbb6 	bl	8003b8a <__malloc_unlock>
 800341e:	e7e4      	b.n	80033ea <_malloc_r+0x1e>
 8003420:	680b      	ldr	r3, [r1, #0]
 8003422:	1b5b      	subs	r3, r3, r5
 8003424:	d41a      	bmi.n	800345c <_malloc_r+0x90>
 8003426:	2b0b      	cmp	r3, #11
 8003428:	d90f      	bls.n	800344a <_malloc_r+0x7e>
 800342a:	600b      	str	r3, [r1, #0]
 800342c:	50cd      	str	r5, [r1, r3]
 800342e:	18cc      	adds	r4, r1, r3
 8003430:	4630      	mov	r0, r6
 8003432:	f000 fbaa 	bl	8003b8a <__malloc_unlock>
 8003436:	f104 000b 	add.w	r0, r4, #11
 800343a:	1d23      	adds	r3, r4, #4
 800343c:	f020 0007 	bic.w	r0, r0, #7
 8003440:	1ac3      	subs	r3, r0, r3
 8003442:	d01b      	beq.n	800347c <_malloc_r+0xb0>
 8003444:	425a      	negs	r2, r3
 8003446:	50e2      	str	r2, [r4, r3]
 8003448:	bd70      	pop	{r4, r5, r6, pc}
 800344a:	428c      	cmp	r4, r1
 800344c:	bf0d      	iteet	eq
 800344e:	6863      	ldreq	r3, [r4, #4]
 8003450:	684b      	ldrne	r3, [r1, #4]
 8003452:	6063      	strne	r3, [r4, #4]
 8003454:	6013      	streq	r3, [r2, #0]
 8003456:	bf18      	it	ne
 8003458:	460c      	movne	r4, r1
 800345a:	e7e9      	b.n	8003430 <_malloc_r+0x64>
 800345c:	460c      	mov	r4, r1
 800345e:	6849      	ldr	r1, [r1, #4]
 8003460:	e7ca      	b.n	80033f8 <_malloc_r+0x2c>
 8003462:	1cc4      	adds	r4, r0, #3
 8003464:	f024 0403 	bic.w	r4, r4, #3
 8003468:	42a0      	cmp	r0, r4
 800346a:	d005      	beq.n	8003478 <_malloc_r+0xac>
 800346c:	1a21      	subs	r1, r4, r0
 800346e:	4630      	mov	r0, r6
 8003470:	f000 fae0 	bl	8003a34 <_sbrk_r>
 8003474:	3001      	adds	r0, #1
 8003476:	d0cd      	beq.n	8003414 <_malloc_r+0x48>
 8003478:	6025      	str	r5, [r4, #0]
 800347a:	e7d9      	b.n	8003430 <_malloc_r+0x64>
 800347c:	bd70      	pop	{r4, r5, r6, pc}
 800347e:	bf00      	nop
 8003480:	20000088 	.word	0x20000088
 8003484:	2000008c 	.word	0x2000008c

08003488 <__sfputc_r>:
 8003488:	6893      	ldr	r3, [r2, #8]
 800348a:	3b01      	subs	r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	b410      	push	{r4}
 8003490:	6093      	str	r3, [r2, #8]
 8003492:	da09      	bge.n	80034a8 <__sfputc_r+0x20>
 8003494:	6994      	ldr	r4, [r2, #24]
 8003496:	42a3      	cmp	r3, r4
 8003498:	db02      	blt.n	80034a0 <__sfputc_r+0x18>
 800349a:	b2cb      	uxtb	r3, r1
 800349c:	2b0a      	cmp	r3, #10
 800349e:	d103      	bne.n	80034a8 <__sfputc_r+0x20>
 80034a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034a4:	f7ff bc9c 	b.w	8002de0 <__swbuf_r>
 80034a8:	6813      	ldr	r3, [r2, #0]
 80034aa:	1c58      	adds	r0, r3, #1
 80034ac:	6010      	str	r0, [r2, #0]
 80034ae:	7019      	strb	r1, [r3, #0]
 80034b0:	b2c8      	uxtb	r0, r1
 80034b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <__sfputs_r>:
 80034b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ba:	4606      	mov	r6, r0
 80034bc:	460f      	mov	r7, r1
 80034be:	4614      	mov	r4, r2
 80034c0:	18d5      	adds	r5, r2, r3
 80034c2:	42ac      	cmp	r4, r5
 80034c4:	d101      	bne.n	80034ca <__sfputs_r+0x12>
 80034c6:	2000      	movs	r0, #0
 80034c8:	e007      	b.n	80034da <__sfputs_r+0x22>
 80034ca:	463a      	mov	r2, r7
 80034cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034d0:	4630      	mov	r0, r6
 80034d2:	f7ff ffd9 	bl	8003488 <__sfputc_r>
 80034d6:	1c43      	adds	r3, r0, #1
 80034d8:	d1f3      	bne.n	80034c2 <__sfputs_r+0xa>
 80034da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080034dc <_vfiprintf_r>:
 80034dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034e0:	b09d      	sub	sp, #116	; 0x74
 80034e2:	460c      	mov	r4, r1
 80034e4:	4617      	mov	r7, r2
 80034e6:	9303      	str	r3, [sp, #12]
 80034e8:	4606      	mov	r6, r0
 80034ea:	b118      	cbz	r0, 80034f4 <_vfiprintf_r+0x18>
 80034ec:	6983      	ldr	r3, [r0, #24]
 80034ee:	b90b      	cbnz	r3, 80034f4 <_vfiprintf_r+0x18>
 80034f0:	f7ff fe28 	bl	8003144 <__sinit>
 80034f4:	4b7c      	ldr	r3, [pc, #496]	; (80036e8 <_vfiprintf_r+0x20c>)
 80034f6:	429c      	cmp	r4, r3
 80034f8:	d157      	bne.n	80035aa <_vfiprintf_r+0xce>
 80034fa:	6874      	ldr	r4, [r6, #4]
 80034fc:	89a3      	ldrh	r3, [r4, #12]
 80034fe:	0718      	lsls	r0, r3, #28
 8003500:	d55d      	bpl.n	80035be <_vfiprintf_r+0xe2>
 8003502:	6923      	ldr	r3, [r4, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d05a      	beq.n	80035be <_vfiprintf_r+0xe2>
 8003508:	2300      	movs	r3, #0
 800350a:	9309      	str	r3, [sp, #36]	; 0x24
 800350c:	2320      	movs	r3, #32
 800350e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003512:	2330      	movs	r3, #48	; 0x30
 8003514:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003518:	f04f 0b01 	mov.w	fp, #1
 800351c:	46b8      	mov	r8, r7
 800351e:	4645      	mov	r5, r8
 8003520:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d155      	bne.n	80035d4 <_vfiprintf_r+0xf8>
 8003528:	ebb8 0a07 	subs.w	sl, r8, r7
 800352c:	d00b      	beq.n	8003546 <_vfiprintf_r+0x6a>
 800352e:	4653      	mov	r3, sl
 8003530:	463a      	mov	r2, r7
 8003532:	4621      	mov	r1, r4
 8003534:	4630      	mov	r0, r6
 8003536:	f7ff ffbf 	bl	80034b8 <__sfputs_r>
 800353a:	3001      	adds	r0, #1
 800353c:	f000 80c4 	beq.w	80036c8 <_vfiprintf_r+0x1ec>
 8003540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003542:	4453      	add	r3, sl
 8003544:	9309      	str	r3, [sp, #36]	; 0x24
 8003546:	f898 3000 	ldrb.w	r3, [r8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 80bc 	beq.w	80036c8 <_vfiprintf_r+0x1ec>
 8003550:	2300      	movs	r3, #0
 8003552:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003556:	9304      	str	r3, [sp, #16]
 8003558:	9307      	str	r3, [sp, #28]
 800355a:	9205      	str	r2, [sp, #20]
 800355c:	9306      	str	r3, [sp, #24]
 800355e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003562:	931a      	str	r3, [sp, #104]	; 0x68
 8003564:	2205      	movs	r2, #5
 8003566:	7829      	ldrb	r1, [r5, #0]
 8003568:	4860      	ldr	r0, [pc, #384]	; (80036ec <_vfiprintf_r+0x210>)
 800356a:	f7fc fe39 	bl	80001e0 <memchr>
 800356e:	f105 0801 	add.w	r8, r5, #1
 8003572:	9b04      	ldr	r3, [sp, #16]
 8003574:	2800      	cmp	r0, #0
 8003576:	d131      	bne.n	80035dc <_vfiprintf_r+0x100>
 8003578:	06d9      	lsls	r1, r3, #27
 800357a:	bf44      	itt	mi
 800357c:	2220      	movmi	r2, #32
 800357e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003582:	071a      	lsls	r2, r3, #28
 8003584:	bf44      	itt	mi
 8003586:	222b      	movmi	r2, #43	; 0x2b
 8003588:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800358c:	782a      	ldrb	r2, [r5, #0]
 800358e:	2a2a      	cmp	r2, #42	; 0x2a
 8003590:	d02c      	beq.n	80035ec <_vfiprintf_r+0x110>
 8003592:	9a07      	ldr	r2, [sp, #28]
 8003594:	2100      	movs	r1, #0
 8003596:	200a      	movs	r0, #10
 8003598:	46a8      	mov	r8, r5
 800359a:	3501      	adds	r5, #1
 800359c:	f898 3000 	ldrb.w	r3, [r8]
 80035a0:	3b30      	subs	r3, #48	; 0x30
 80035a2:	2b09      	cmp	r3, #9
 80035a4:	d96d      	bls.n	8003682 <_vfiprintf_r+0x1a6>
 80035a6:	b371      	cbz	r1, 8003606 <_vfiprintf_r+0x12a>
 80035a8:	e026      	b.n	80035f8 <_vfiprintf_r+0x11c>
 80035aa:	4b51      	ldr	r3, [pc, #324]	; (80036f0 <_vfiprintf_r+0x214>)
 80035ac:	429c      	cmp	r4, r3
 80035ae:	d101      	bne.n	80035b4 <_vfiprintf_r+0xd8>
 80035b0:	68b4      	ldr	r4, [r6, #8]
 80035b2:	e7a3      	b.n	80034fc <_vfiprintf_r+0x20>
 80035b4:	4b4f      	ldr	r3, [pc, #316]	; (80036f4 <_vfiprintf_r+0x218>)
 80035b6:	429c      	cmp	r4, r3
 80035b8:	bf08      	it	eq
 80035ba:	68f4      	ldreq	r4, [r6, #12]
 80035bc:	e79e      	b.n	80034fc <_vfiprintf_r+0x20>
 80035be:	4621      	mov	r1, r4
 80035c0:	4630      	mov	r0, r6
 80035c2:	f7ff fc5f 	bl	8002e84 <__swsetup_r>
 80035c6:	2800      	cmp	r0, #0
 80035c8:	d09e      	beq.n	8003508 <_vfiprintf_r+0x2c>
 80035ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035ce:	b01d      	add	sp, #116	; 0x74
 80035d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035d4:	2b25      	cmp	r3, #37	; 0x25
 80035d6:	d0a7      	beq.n	8003528 <_vfiprintf_r+0x4c>
 80035d8:	46a8      	mov	r8, r5
 80035da:	e7a0      	b.n	800351e <_vfiprintf_r+0x42>
 80035dc:	4a43      	ldr	r2, [pc, #268]	; (80036ec <_vfiprintf_r+0x210>)
 80035de:	1a80      	subs	r0, r0, r2
 80035e0:	fa0b f000 	lsl.w	r0, fp, r0
 80035e4:	4318      	orrs	r0, r3
 80035e6:	9004      	str	r0, [sp, #16]
 80035e8:	4645      	mov	r5, r8
 80035ea:	e7bb      	b.n	8003564 <_vfiprintf_r+0x88>
 80035ec:	9a03      	ldr	r2, [sp, #12]
 80035ee:	1d11      	adds	r1, r2, #4
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	9103      	str	r1, [sp, #12]
 80035f4:	2a00      	cmp	r2, #0
 80035f6:	db01      	blt.n	80035fc <_vfiprintf_r+0x120>
 80035f8:	9207      	str	r2, [sp, #28]
 80035fa:	e004      	b.n	8003606 <_vfiprintf_r+0x12a>
 80035fc:	4252      	negs	r2, r2
 80035fe:	f043 0302 	orr.w	r3, r3, #2
 8003602:	9207      	str	r2, [sp, #28]
 8003604:	9304      	str	r3, [sp, #16]
 8003606:	f898 3000 	ldrb.w	r3, [r8]
 800360a:	2b2e      	cmp	r3, #46	; 0x2e
 800360c:	d110      	bne.n	8003630 <_vfiprintf_r+0x154>
 800360e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003612:	2b2a      	cmp	r3, #42	; 0x2a
 8003614:	f108 0101 	add.w	r1, r8, #1
 8003618:	d137      	bne.n	800368a <_vfiprintf_r+0x1ae>
 800361a:	9b03      	ldr	r3, [sp, #12]
 800361c:	1d1a      	adds	r2, r3, #4
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	9203      	str	r2, [sp, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	bfb8      	it	lt
 8003626:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800362a:	f108 0802 	add.w	r8, r8, #2
 800362e:	9305      	str	r3, [sp, #20]
 8003630:	4d31      	ldr	r5, [pc, #196]	; (80036f8 <_vfiprintf_r+0x21c>)
 8003632:	f898 1000 	ldrb.w	r1, [r8]
 8003636:	2203      	movs	r2, #3
 8003638:	4628      	mov	r0, r5
 800363a:	f7fc fdd1 	bl	80001e0 <memchr>
 800363e:	b140      	cbz	r0, 8003652 <_vfiprintf_r+0x176>
 8003640:	2340      	movs	r3, #64	; 0x40
 8003642:	1b40      	subs	r0, r0, r5
 8003644:	fa03 f000 	lsl.w	r0, r3, r0
 8003648:	9b04      	ldr	r3, [sp, #16]
 800364a:	4303      	orrs	r3, r0
 800364c:	9304      	str	r3, [sp, #16]
 800364e:	f108 0801 	add.w	r8, r8, #1
 8003652:	f898 1000 	ldrb.w	r1, [r8]
 8003656:	4829      	ldr	r0, [pc, #164]	; (80036fc <_vfiprintf_r+0x220>)
 8003658:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800365c:	2206      	movs	r2, #6
 800365e:	f108 0701 	add.w	r7, r8, #1
 8003662:	f7fc fdbd 	bl	80001e0 <memchr>
 8003666:	2800      	cmp	r0, #0
 8003668:	d034      	beq.n	80036d4 <_vfiprintf_r+0x1f8>
 800366a:	4b25      	ldr	r3, [pc, #148]	; (8003700 <_vfiprintf_r+0x224>)
 800366c:	bb03      	cbnz	r3, 80036b0 <_vfiprintf_r+0x1d4>
 800366e:	9b03      	ldr	r3, [sp, #12]
 8003670:	3307      	adds	r3, #7
 8003672:	f023 0307 	bic.w	r3, r3, #7
 8003676:	3308      	adds	r3, #8
 8003678:	9303      	str	r3, [sp, #12]
 800367a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800367c:	444b      	add	r3, r9
 800367e:	9309      	str	r3, [sp, #36]	; 0x24
 8003680:	e74c      	b.n	800351c <_vfiprintf_r+0x40>
 8003682:	fb00 3202 	mla	r2, r0, r2, r3
 8003686:	2101      	movs	r1, #1
 8003688:	e786      	b.n	8003598 <_vfiprintf_r+0xbc>
 800368a:	2300      	movs	r3, #0
 800368c:	9305      	str	r3, [sp, #20]
 800368e:	4618      	mov	r0, r3
 8003690:	250a      	movs	r5, #10
 8003692:	4688      	mov	r8, r1
 8003694:	3101      	adds	r1, #1
 8003696:	f898 2000 	ldrb.w	r2, [r8]
 800369a:	3a30      	subs	r2, #48	; 0x30
 800369c:	2a09      	cmp	r2, #9
 800369e:	d903      	bls.n	80036a8 <_vfiprintf_r+0x1cc>
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0c5      	beq.n	8003630 <_vfiprintf_r+0x154>
 80036a4:	9005      	str	r0, [sp, #20]
 80036a6:	e7c3      	b.n	8003630 <_vfiprintf_r+0x154>
 80036a8:	fb05 2000 	mla	r0, r5, r0, r2
 80036ac:	2301      	movs	r3, #1
 80036ae:	e7f0      	b.n	8003692 <_vfiprintf_r+0x1b6>
 80036b0:	ab03      	add	r3, sp, #12
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	4622      	mov	r2, r4
 80036b6:	4b13      	ldr	r3, [pc, #76]	; (8003704 <_vfiprintf_r+0x228>)
 80036b8:	a904      	add	r1, sp, #16
 80036ba:	4630      	mov	r0, r6
 80036bc:	f3af 8000 	nop.w
 80036c0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80036c4:	4681      	mov	r9, r0
 80036c6:	d1d8      	bne.n	800367a <_vfiprintf_r+0x19e>
 80036c8:	89a3      	ldrh	r3, [r4, #12]
 80036ca:	065b      	lsls	r3, r3, #25
 80036cc:	f53f af7d 	bmi.w	80035ca <_vfiprintf_r+0xee>
 80036d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036d2:	e77c      	b.n	80035ce <_vfiprintf_r+0xf2>
 80036d4:	ab03      	add	r3, sp, #12
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	4622      	mov	r2, r4
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <_vfiprintf_r+0x228>)
 80036dc:	a904      	add	r1, sp, #16
 80036de:	4630      	mov	r0, r6
 80036e0:	f000 f888 	bl	80037f4 <_printf_i>
 80036e4:	e7ec      	b.n	80036c0 <_vfiprintf_r+0x1e4>
 80036e6:	bf00      	nop
 80036e8:	08003d04 	.word	0x08003d04
 80036ec:	08003d48 	.word	0x08003d48
 80036f0:	08003d24 	.word	0x08003d24
 80036f4:	08003ce4 	.word	0x08003ce4
 80036f8:	08003d4e 	.word	0x08003d4e
 80036fc:	08003d52 	.word	0x08003d52
 8003700:	00000000 	.word	0x00000000
 8003704:	080034b9 	.word	0x080034b9

08003708 <_printf_common>:
 8003708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800370c:	4691      	mov	r9, r2
 800370e:	461f      	mov	r7, r3
 8003710:	688a      	ldr	r2, [r1, #8]
 8003712:	690b      	ldr	r3, [r1, #16]
 8003714:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003718:	4293      	cmp	r3, r2
 800371a:	bfb8      	it	lt
 800371c:	4613      	movlt	r3, r2
 800371e:	f8c9 3000 	str.w	r3, [r9]
 8003722:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003726:	4606      	mov	r6, r0
 8003728:	460c      	mov	r4, r1
 800372a:	b112      	cbz	r2, 8003732 <_printf_common+0x2a>
 800372c:	3301      	adds	r3, #1
 800372e:	f8c9 3000 	str.w	r3, [r9]
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	0699      	lsls	r1, r3, #26
 8003736:	bf42      	ittt	mi
 8003738:	f8d9 3000 	ldrmi.w	r3, [r9]
 800373c:	3302      	addmi	r3, #2
 800373e:	f8c9 3000 	strmi.w	r3, [r9]
 8003742:	6825      	ldr	r5, [r4, #0]
 8003744:	f015 0506 	ands.w	r5, r5, #6
 8003748:	d107      	bne.n	800375a <_printf_common+0x52>
 800374a:	f104 0a19 	add.w	sl, r4, #25
 800374e:	68e3      	ldr	r3, [r4, #12]
 8003750:	f8d9 2000 	ldr.w	r2, [r9]
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	429d      	cmp	r5, r3
 8003758:	db29      	blt.n	80037ae <_printf_common+0xa6>
 800375a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800375e:	6822      	ldr	r2, [r4, #0]
 8003760:	3300      	adds	r3, #0
 8003762:	bf18      	it	ne
 8003764:	2301      	movne	r3, #1
 8003766:	0692      	lsls	r2, r2, #26
 8003768:	d42e      	bmi.n	80037c8 <_printf_common+0xc0>
 800376a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800376e:	4639      	mov	r1, r7
 8003770:	4630      	mov	r0, r6
 8003772:	47c0      	blx	r8
 8003774:	3001      	adds	r0, #1
 8003776:	d021      	beq.n	80037bc <_printf_common+0xb4>
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	68e5      	ldr	r5, [r4, #12]
 800377c:	f8d9 2000 	ldr.w	r2, [r9]
 8003780:	f003 0306 	and.w	r3, r3, #6
 8003784:	2b04      	cmp	r3, #4
 8003786:	bf08      	it	eq
 8003788:	1aad      	subeq	r5, r5, r2
 800378a:	68a3      	ldr	r3, [r4, #8]
 800378c:	6922      	ldr	r2, [r4, #16]
 800378e:	bf0c      	ite	eq
 8003790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003794:	2500      	movne	r5, #0
 8003796:	4293      	cmp	r3, r2
 8003798:	bfc4      	itt	gt
 800379a:	1a9b      	subgt	r3, r3, r2
 800379c:	18ed      	addgt	r5, r5, r3
 800379e:	f04f 0900 	mov.w	r9, #0
 80037a2:	341a      	adds	r4, #26
 80037a4:	454d      	cmp	r5, r9
 80037a6:	d11b      	bne.n	80037e0 <_printf_common+0xd8>
 80037a8:	2000      	movs	r0, #0
 80037aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ae:	2301      	movs	r3, #1
 80037b0:	4652      	mov	r2, sl
 80037b2:	4639      	mov	r1, r7
 80037b4:	4630      	mov	r0, r6
 80037b6:	47c0      	blx	r8
 80037b8:	3001      	adds	r0, #1
 80037ba:	d103      	bne.n	80037c4 <_printf_common+0xbc>
 80037bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c4:	3501      	adds	r5, #1
 80037c6:	e7c2      	b.n	800374e <_printf_common+0x46>
 80037c8:	18e1      	adds	r1, r4, r3
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	2030      	movs	r0, #48	; 0x30
 80037ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037d2:	4422      	add	r2, r4
 80037d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037dc:	3302      	adds	r3, #2
 80037de:	e7c4      	b.n	800376a <_printf_common+0x62>
 80037e0:	2301      	movs	r3, #1
 80037e2:	4622      	mov	r2, r4
 80037e4:	4639      	mov	r1, r7
 80037e6:	4630      	mov	r0, r6
 80037e8:	47c0      	blx	r8
 80037ea:	3001      	adds	r0, #1
 80037ec:	d0e6      	beq.n	80037bc <_printf_common+0xb4>
 80037ee:	f109 0901 	add.w	r9, r9, #1
 80037f2:	e7d7      	b.n	80037a4 <_printf_common+0x9c>

080037f4 <_printf_i>:
 80037f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037f8:	4617      	mov	r7, r2
 80037fa:	7e0a      	ldrb	r2, [r1, #24]
 80037fc:	b085      	sub	sp, #20
 80037fe:	2a6e      	cmp	r2, #110	; 0x6e
 8003800:	4698      	mov	r8, r3
 8003802:	4606      	mov	r6, r0
 8003804:	460c      	mov	r4, r1
 8003806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003808:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800380c:	f000 80bc 	beq.w	8003988 <_printf_i+0x194>
 8003810:	d81a      	bhi.n	8003848 <_printf_i+0x54>
 8003812:	2a63      	cmp	r2, #99	; 0x63
 8003814:	d02e      	beq.n	8003874 <_printf_i+0x80>
 8003816:	d80a      	bhi.n	800382e <_printf_i+0x3a>
 8003818:	2a00      	cmp	r2, #0
 800381a:	f000 80c8 	beq.w	80039ae <_printf_i+0x1ba>
 800381e:	2a58      	cmp	r2, #88	; 0x58
 8003820:	f000 808a 	beq.w	8003938 <_printf_i+0x144>
 8003824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003828:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800382c:	e02a      	b.n	8003884 <_printf_i+0x90>
 800382e:	2a64      	cmp	r2, #100	; 0x64
 8003830:	d001      	beq.n	8003836 <_printf_i+0x42>
 8003832:	2a69      	cmp	r2, #105	; 0x69
 8003834:	d1f6      	bne.n	8003824 <_printf_i+0x30>
 8003836:	6821      	ldr	r1, [r4, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800383e:	d023      	beq.n	8003888 <_printf_i+0x94>
 8003840:	1d11      	adds	r1, r2, #4
 8003842:	6019      	str	r1, [r3, #0]
 8003844:	6813      	ldr	r3, [r2, #0]
 8003846:	e027      	b.n	8003898 <_printf_i+0xa4>
 8003848:	2a73      	cmp	r2, #115	; 0x73
 800384a:	f000 80b4 	beq.w	80039b6 <_printf_i+0x1c2>
 800384e:	d808      	bhi.n	8003862 <_printf_i+0x6e>
 8003850:	2a6f      	cmp	r2, #111	; 0x6f
 8003852:	d02a      	beq.n	80038aa <_printf_i+0xb6>
 8003854:	2a70      	cmp	r2, #112	; 0x70
 8003856:	d1e5      	bne.n	8003824 <_printf_i+0x30>
 8003858:	680a      	ldr	r2, [r1, #0]
 800385a:	f042 0220 	orr.w	r2, r2, #32
 800385e:	600a      	str	r2, [r1, #0]
 8003860:	e003      	b.n	800386a <_printf_i+0x76>
 8003862:	2a75      	cmp	r2, #117	; 0x75
 8003864:	d021      	beq.n	80038aa <_printf_i+0xb6>
 8003866:	2a78      	cmp	r2, #120	; 0x78
 8003868:	d1dc      	bne.n	8003824 <_printf_i+0x30>
 800386a:	2278      	movs	r2, #120	; 0x78
 800386c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003870:	496e      	ldr	r1, [pc, #440]	; (8003a2c <_printf_i+0x238>)
 8003872:	e064      	b.n	800393e <_printf_i+0x14a>
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800387a:	1d11      	adds	r1, r2, #4
 800387c:	6019      	str	r1, [r3, #0]
 800387e:	6813      	ldr	r3, [r2, #0]
 8003880:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003884:	2301      	movs	r3, #1
 8003886:	e0a3      	b.n	80039d0 <_printf_i+0x1dc>
 8003888:	f011 0f40 	tst.w	r1, #64	; 0x40
 800388c:	f102 0104 	add.w	r1, r2, #4
 8003890:	6019      	str	r1, [r3, #0]
 8003892:	d0d7      	beq.n	8003844 <_printf_i+0x50>
 8003894:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003898:	2b00      	cmp	r3, #0
 800389a:	da03      	bge.n	80038a4 <_printf_i+0xb0>
 800389c:	222d      	movs	r2, #45	; 0x2d
 800389e:	425b      	negs	r3, r3
 80038a0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80038a4:	4962      	ldr	r1, [pc, #392]	; (8003a30 <_printf_i+0x23c>)
 80038a6:	220a      	movs	r2, #10
 80038a8:	e017      	b.n	80038da <_printf_i+0xe6>
 80038aa:	6820      	ldr	r0, [r4, #0]
 80038ac:	6819      	ldr	r1, [r3, #0]
 80038ae:	f010 0f80 	tst.w	r0, #128	; 0x80
 80038b2:	d003      	beq.n	80038bc <_printf_i+0xc8>
 80038b4:	1d08      	adds	r0, r1, #4
 80038b6:	6018      	str	r0, [r3, #0]
 80038b8:	680b      	ldr	r3, [r1, #0]
 80038ba:	e006      	b.n	80038ca <_printf_i+0xd6>
 80038bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038c0:	f101 0004 	add.w	r0, r1, #4
 80038c4:	6018      	str	r0, [r3, #0]
 80038c6:	d0f7      	beq.n	80038b8 <_printf_i+0xc4>
 80038c8:	880b      	ldrh	r3, [r1, #0]
 80038ca:	4959      	ldr	r1, [pc, #356]	; (8003a30 <_printf_i+0x23c>)
 80038cc:	2a6f      	cmp	r2, #111	; 0x6f
 80038ce:	bf14      	ite	ne
 80038d0:	220a      	movne	r2, #10
 80038d2:	2208      	moveq	r2, #8
 80038d4:	2000      	movs	r0, #0
 80038d6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80038da:	6865      	ldr	r5, [r4, #4]
 80038dc:	60a5      	str	r5, [r4, #8]
 80038de:	2d00      	cmp	r5, #0
 80038e0:	f2c0 809c 	blt.w	8003a1c <_printf_i+0x228>
 80038e4:	6820      	ldr	r0, [r4, #0]
 80038e6:	f020 0004 	bic.w	r0, r0, #4
 80038ea:	6020      	str	r0, [r4, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d13f      	bne.n	8003970 <_printf_i+0x17c>
 80038f0:	2d00      	cmp	r5, #0
 80038f2:	f040 8095 	bne.w	8003a20 <_printf_i+0x22c>
 80038f6:	4675      	mov	r5, lr
 80038f8:	2a08      	cmp	r2, #8
 80038fa:	d10b      	bne.n	8003914 <_printf_i+0x120>
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	07da      	lsls	r2, r3, #31
 8003900:	d508      	bpl.n	8003914 <_printf_i+0x120>
 8003902:	6923      	ldr	r3, [r4, #16]
 8003904:	6862      	ldr	r2, [r4, #4]
 8003906:	429a      	cmp	r2, r3
 8003908:	bfde      	ittt	le
 800390a:	2330      	movle	r3, #48	; 0x30
 800390c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003910:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003914:	ebae 0305 	sub.w	r3, lr, r5
 8003918:	6123      	str	r3, [r4, #16]
 800391a:	f8cd 8000 	str.w	r8, [sp]
 800391e:	463b      	mov	r3, r7
 8003920:	aa03      	add	r2, sp, #12
 8003922:	4621      	mov	r1, r4
 8003924:	4630      	mov	r0, r6
 8003926:	f7ff feef 	bl	8003708 <_printf_common>
 800392a:	3001      	adds	r0, #1
 800392c:	d155      	bne.n	80039da <_printf_i+0x1e6>
 800392e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003932:	b005      	add	sp, #20
 8003934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003938:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800393c:	493c      	ldr	r1, [pc, #240]	; (8003a30 <_printf_i+0x23c>)
 800393e:	6822      	ldr	r2, [r4, #0]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003946:	f100 0504 	add.w	r5, r0, #4
 800394a:	601d      	str	r5, [r3, #0]
 800394c:	d001      	beq.n	8003952 <_printf_i+0x15e>
 800394e:	6803      	ldr	r3, [r0, #0]
 8003950:	e002      	b.n	8003958 <_printf_i+0x164>
 8003952:	0655      	lsls	r5, r2, #25
 8003954:	d5fb      	bpl.n	800394e <_printf_i+0x15a>
 8003956:	8803      	ldrh	r3, [r0, #0]
 8003958:	07d0      	lsls	r0, r2, #31
 800395a:	bf44      	itt	mi
 800395c:	f042 0220 	orrmi.w	r2, r2, #32
 8003960:	6022      	strmi	r2, [r4, #0]
 8003962:	b91b      	cbnz	r3, 800396c <_printf_i+0x178>
 8003964:	6822      	ldr	r2, [r4, #0]
 8003966:	f022 0220 	bic.w	r2, r2, #32
 800396a:	6022      	str	r2, [r4, #0]
 800396c:	2210      	movs	r2, #16
 800396e:	e7b1      	b.n	80038d4 <_printf_i+0xe0>
 8003970:	4675      	mov	r5, lr
 8003972:	fbb3 f0f2 	udiv	r0, r3, r2
 8003976:	fb02 3310 	mls	r3, r2, r0, r3
 800397a:	5ccb      	ldrb	r3, [r1, r3]
 800397c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003980:	4603      	mov	r3, r0
 8003982:	2800      	cmp	r0, #0
 8003984:	d1f5      	bne.n	8003972 <_printf_i+0x17e>
 8003986:	e7b7      	b.n	80038f8 <_printf_i+0x104>
 8003988:	6808      	ldr	r0, [r1, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	6949      	ldr	r1, [r1, #20]
 800398e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003992:	d004      	beq.n	800399e <_printf_i+0x1aa>
 8003994:	1d10      	adds	r0, r2, #4
 8003996:	6018      	str	r0, [r3, #0]
 8003998:	6813      	ldr	r3, [r2, #0]
 800399a:	6019      	str	r1, [r3, #0]
 800399c:	e007      	b.n	80039ae <_printf_i+0x1ba>
 800399e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039a2:	f102 0004 	add.w	r0, r2, #4
 80039a6:	6018      	str	r0, [r3, #0]
 80039a8:	6813      	ldr	r3, [r2, #0]
 80039aa:	d0f6      	beq.n	800399a <_printf_i+0x1a6>
 80039ac:	8019      	strh	r1, [r3, #0]
 80039ae:	2300      	movs	r3, #0
 80039b0:	6123      	str	r3, [r4, #16]
 80039b2:	4675      	mov	r5, lr
 80039b4:	e7b1      	b.n	800391a <_printf_i+0x126>
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	1d11      	adds	r1, r2, #4
 80039ba:	6019      	str	r1, [r3, #0]
 80039bc:	6815      	ldr	r5, [r2, #0]
 80039be:	6862      	ldr	r2, [r4, #4]
 80039c0:	2100      	movs	r1, #0
 80039c2:	4628      	mov	r0, r5
 80039c4:	f7fc fc0c 	bl	80001e0 <memchr>
 80039c8:	b108      	cbz	r0, 80039ce <_printf_i+0x1da>
 80039ca:	1b40      	subs	r0, r0, r5
 80039cc:	6060      	str	r0, [r4, #4]
 80039ce:	6863      	ldr	r3, [r4, #4]
 80039d0:	6123      	str	r3, [r4, #16]
 80039d2:	2300      	movs	r3, #0
 80039d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d8:	e79f      	b.n	800391a <_printf_i+0x126>
 80039da:	6923      	ldr	r3, [r4, #16]
 80039dc:	462a      	mov	r2, r5
 80039de:	4639      	mov	r1, r7
 80039e0:	4630      	mov	r0, r6
 80039e2:	47c0      	blx	r8
 80039e4:	3001      	adds	r0, #1
 80039e6:	d0a2      	beq.n	800392e <_printf_i+0x13a>
 80039e8:	6823      	ldr	r3, [r4, #0]
 80039ea:	079b      	lsls	r3, r3, #30
 80039ec:	d507      	bpl.n	80039fe <_printf_i+0x20a>
 80039ee:	2500      	movs	r5, #0
 80039f0:	f104 0919 	add.w	r9, r4, #25
 80039f4:	68e3      	ldr	r3, [r4, #12]
 80039f6:	9a03      	ldr	r2, [sp, #12]
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	429d      	cmp	r5, r3
 80039fc:	db05      	blt.n	8003a0a <_printf_i+0x216>
 80039fe:	68e0      	ldr	r0, [r4, #12]
 8003a00:	9b03      	ldr	r3, [sp, #12]
 8003a02:	4298      	cmp	r0, r3
 8003a04:	bfb8      	it	lt
 8003a06:	4618      	movlt	r0, r3
 8003a08:	e793      	b.n	8003932 <_printf_i+0x13e>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	464a      	mov	r2, r9
 8003a0e:	4639      	mov	r1, r7
 8003a10:	4630      	mov	r0, r6
 8003a12:	47c0      	blx	r8
 8003a14:	3001      	adds	r0, #1
 8003a16:	d08a      	beq.n	800392e <_printf_i+0x13a>
 8003a18:	3501      	adds	r5, #1
 8003a1a:	e7eb      	b.n	80039f4 <_printf_i+0x200>
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1a7      	bne.n	8003970 <_printf_i+0x17c>
 8003a20:	780b      	ldrb	r3, [r1, #0]
 8003a22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a2a:	e765      	b.n	80038f8 <_printf_i+0x104>
 8003a2c:	08003d6a 	.word	0x08003d6a
 8003a30:	08003d59 	.word	0x08003d59

08003a34 <_sbrk_r>:
 8003a34:	b538      	push	{r3, r4, r5, lr}
 8003a36:	4c06      	ldr	r4, [pc, #24]	; (8003a50 <_sbrk_r+0x1c>)
 8003a38:	2300      	movs	r3, #0
 8003a3a:	4605      	mov	r5, r0
 8003a3c:	4608      	mov	r0, r1
 8003a3e:	6023      	str	r3, [r4, #0]
 8003a40:	f7ff f852 	bl	8002ae8 <_sbrk>
 8003a44:	1c43      	adds	r3, r0, #1
 8003a46:	d102      	bne.n	8003a4e <_sbrk_r+0x1a>
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	b103      	cbz	r3, 8003a4e <_sbrk_r+0x1a>
 8003a4c:	602b      	str	r3, [r5, #0]
 8003a4e:	bd38      	pop	{r3, r4, r5, pc}
 8003a50:	20000090 	.word	0x20000090

08003a54 <__sread>:
 8003a54:	b510      	push	{r4, lr}
 8003a56:	460c      	mov	r4, r1
 8003a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a5c:	f000 f896 	bl	8003b8c <_read_r>
 8003a60:	2800      	cmp	r0, #0
 8003a62:	bfab      	itete	ge
 8003a64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a66:	89a3      	ldrhlt	r3, [r4, #12]
 8003a68:	181b      	addge	r3, r3, r0
 8003a6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a6e:	bfac      	ite	ge
 8003a70:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a72:	81a3      	strhlt	r3, [r4, #12]
 8003a74:	bd10      	pop	{r4, pc}

08003a76 <__swrite>:
 8003a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a7a:	461f      	mov	r7, r3
 8003a7c:	898b      	ldrh	r3, [r1, #12]
 8003a7e:	05db      	lsls	r3, r3, #23
 8003a80:	4605      	mov	r5, r0
 8003a82:	460c      	mov	r4, r1
 8003a84:	4616      	mov	r6, r2
 8003a86:	d505      	bpl.n	8003a94 <__swrite+0x1e>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a90:	f000 f868 	bl	8003b64 <_lseek_r>
 8003a94:	89a3      	ldrh	r3, [r4, #12]
 8003a96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a9e:	81a3      	strh	r3, [r4, #12]
 8003aa0:	4632      	mov	r2, r6
 8003aa2:	463b      	mov	r3, r7
 8003aa4:	4628      	mov	r0, r5
 8003aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aaa:	f000 b817 	b.w	8003adc <_write_r>

08003aae <__sseek>:
 8003aae:	b510      	push	{r4, lr}
 8003ab0:	460c      	mov	r4, r1
 8003ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ab6:	f000 f855 	bl	8003b64 <_lseek_r>
 8003aba:	1c43      	adds	r3, r0, #1
 8003abc:	89a3      	ldrh	r3, [r4, #12]
 8003abe:	bf15      	itete	ne
 8003ac0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ac2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ac6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003aca:	81a3      	strheq	r3, [r4, #12]
 8003acc:	bf18      	it	ne
 8003ace:	81a3      	strhne	r3, [r4, #12]
 8003ad0:	bd10      	pop	{r4, pc}

08003ad2 <__sclose>:
 8003ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ad6:	f000 b813 	b.w	8003b00 <_close_r>
	...

08003adc <_write_r>:
 8003adc:	b538      	push	{r3, r4, r5, lr}
 8003ade:	4c07      	ldr	r4, [pc, #28]	; (8003afc <_write_r+0x20>)
 8003ae0:	4605      	mov	r5, r0
 8003ae2:	4608      	mov	r0, r1
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	6022      	str	r2, [r4, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	f7fe ffdd 	bl	8002aaa <_write>
 8003af0:	1c43      	adds	r3, r0, #1
 8003af2:	d102      	bne.n	8003afa <_write_r+0x1e>
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	b103      	cbz	r3, 8003afa <_write_r+0x1e>
 8003af8:	602b      	str	r3, [r5, #0]
 8003afa:	bd38      	pop	{r3, r4, r5, pc}
 8003afc:	20000090 	.word	0x20000090

08003b00 <_close_r>:
 8003b00:	b538      	push	{r3, r4, r5, lr}
 8003b02:	4c06      	ldr	r4, [pc, #24]	; (8003b1c <_close_r+0x1c>)
 8003b04:	2300      	movs	r3, #0
 8003b06:	4605      	mov	r5, r0
 8003b08:	4608      	mov	r0, r1
 8003b0a:	6023      	str	r3, [r4, #0]
 8003b0c:	f7ff f80c 	bl	8002b28 <_close>
 8003b10:	1c43      	adds	r3, r0, #1
 8003b12:	d102      	bne.n	8003b1a <_close_r+0x1a>
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	b103      	cbz	r3, 8003b1a <_close_r+0x1a>
 8003b18:	602b      	str	r3, [r5, #0]
 8003b1a:	bd38      	pop	{r3, r4, r5, pc}
 8003b1c:	20000090 	.word	0x20000090

08003b20 <_fstat_r>:
 8003b20:	b538      	push	{r3, r4, r5, lr}
 8003b22:	4c07      	ldr	r4, [pc, #28]	; (8003b40 <_fstat_r+0x20>)
 8003b24:	2300      	movs	r3, #0
 8003b26:	4605      	mov	r5, r0
 8003b28:	4608      	mov	r0, r1
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	6023      	str	r3, [r4, #0]
 8003b2e:	f7ff f80d 	bl	8002b4c <_fstat>
 8003b32:	1c43      	adds	r3, r0, #1
 8003b34:	d102      	bne.n	8003b3c <_fstat_r+0x1c>
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	b103      	cbz	r3, 8003b3c <_fstat_r+0x1c>
 8003b3a:	602b      	str	r3, [r5, #0]
 8003b3c:	bd38      	pop	{r3, r4, r5, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000090 	.word	0x20000090

08003b44 <_isatty_r>:
 8003b44:	b538      	push	{r3, r4, r5, lr}
 8003b46:	4c06      	ldr	r4, [pc, #24]	; (8003b60 <_isatty_r+0x1c>)
 8003b48:	2300      	movs	r3, #0
 8003b4a:	4605      	mov	r5, r0
 8003b4c:	4608      	mov	r0, r1
 8003b4e:	6023      	str	r3, [r4, #0]
 8003b50:	f7ff f80e 	bl	8002b70 <_isatty>
 8003b54:	1c43      	adds	r3, r0, #1
 8003b56:	d102      	bne.n	8003b5e <_isatty_r+0x1a>
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	b103      	cbz	r3, 8003b5e <_isatty_r+0x1a>
 8003b5c:	602b      	str	r3, [r5, #0]
 8003b5e:	bd38      	pop	{r3, r4, r5, pc}
 8003b60:	20000090 	.word	0x20000090

08003b64 <_lseek_r>:
 8003b64:	b538      	push	{r3, r4, r5, lr}
 8003b66:	4c07      	ldr	r4, [pc, #28]	; (8003b84 <_lseek_r+0x20>)
 8003b68:	4605      	mov	r5, r0
 8003b6a:	4608      	mov	r0, r1
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	2200      	movs	r2, #0
 8003b70:	6022      	str	r2, [r4, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	f7ff f80c 	bl	8002b90 <_lseek>
 8003b78:	1c43      	adds	r3, r0, #1
 8003b7a:	d102      	bne.n	8003b82 <_lseek_r+0x1e>
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	b103      	cbz	r3, 8003b82 <_lseek_r+0x1e>
 8003b80:	602b      	str	r3, [r5, #0]
 8003b82:	bd38      	pop	{r3, r4, r5, pc}
 8003b84:	20000090 	.word	0x20000090

08003b88 <__malloc_lock>:
 8003b88:	4770      	bx	lr

08003b8a <__malloc_unlock>:
 8003b8a:	4770      	bx	lr

08003b8c <_read_r>:
 8003b8c:	b538      	push	{r3, r4, r5, lr}
 8003b8e:	4c07      	ldr	r4, [pc, #28]	; (8003bac <_read_r+0x20>)
 8003b90:	4605      	mov	r5, r0
 8003b92:	4608      	mov	r0, r1
 8003b94:	4611      	mov	r1, r2
 8003b96:	2200      	movs	r2, #0
 8003b98:	6022      	str	r2, [r4, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f7ff f80c 	bl	8002bb8 <_read>
 8003ba0:	1c43      	adds	r3, r0, #1
 8003ba2:	d102      	bne.n	8003baa <_read_r+0x1e>
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	b103      	cbz	r3, 8003baa <_read_r+0x1e>
 8003ba8:	602b      	str	r3, [r5, #0]
 8003baa:	bd38      	pop	{r3, r4, r5, pc}
 8003bac:	20000090 	.word	0x20000090

08003bb0 <_init>:
 8003bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb2:	bf00      	nop
 8003bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bb6:	bc08      	pop	{r3}
 8003bb8:	469e      	mov	lr, r3
 8003bba:	4770      	bx	lr

08003bbc <_fini>:
 8003bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bbe:	bf00      	nop
 8003bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc2:	bc08      	pop	{r3}
 8003bc4:	469e      	mov	lr, r3
 8003bc6:	4770      	bx	lr
