
KPL_SS2_AM_TS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005460  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08005600  08005600  00015600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080058fc  080058fc  000158fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005900  08005900  00015900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08005904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000040  20000074  08005978  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000b4  08005978  000200b4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c3bd  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001e37  00000000  00000000  0002c461  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c68  00000000  00000000  0002e298  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b70  00000000  00000000  0002ef00  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004a91  00000000  00000000  0002fa70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000035fa  00000000  00000000  00034501  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00037afb  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003bc4  00000000  00000000  00037b78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080055e8 	.word	0x080055e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080055e8 	.word	0x080055e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_d2f>:
 80005f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005f4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80005f8:	bf24      	itt	cs
 80005fa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80005fe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000602:	d90d      	bls.n	8000620 <__aeabi_d2f+0x30>
 8000604:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000608:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800060c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000610:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000614:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000618:	bf08      	it	eq
 800061a:	f020 0001 	biceq.w	r0, r0, #1
 800061e:	4770      	bx	lr
 8000620:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000624:	d121      	bne.n	800066a <__aeabi_d2f+0x7a>
 8000626:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800062a:	bfbc      	itt	lt
 800062c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000630:	4770      	bxlt	lr
 8000632:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000636:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800063a:	f1c2 0218 	rsb	r2, r2, #24
 800063e:	f1c2 0c20 	rsb	ip, r2, #32
 8000642:	fa10 f30c 	lsls.w	r3, r0, ip
 8000646:	fa20 f002 	lsr.w	r0, r0, r2
 800064a:	bf18      	it	ne
 800064c:	f040 0001 	orrne.w	r0, r0, #1
 8000650:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000654:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000658:	fa03 fc0c 	lsl.w	ip, r3, ip
 800065c:	ea40 000c 	orr.w	r0, r0, ip
 8000660:	fa23 f302 	lsr.w	r3, r3, r2
 8000664:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000668:	e7cc      	b.n	8000604 <__aeabi_d2f+0x14>
 800066a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800066e:	d107      	bne.n	8000680 <__aeabi_d2f+0x90>
 8000670:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000674:	bf1e      	ittt	ne
 8000676:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800067a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800067e:	4770      	bxne	lr
 8000680:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000684:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000688:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000698:	4905      	ldr	r1, [pc, #20]	; (80006b0 <LL_EXTI_EnableIT_0_31+0x20>)
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <LL_EXTI_EnableIT_0_31+0x20>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	600b      	str	r3, [r1, #0]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	40010400 	.word	0x40010400

080006b4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80006bc:	4905      	ldr	r1, [pc, #20]	; (80006d4 <LL_EXTI_EnableIT_32_63+0x20>)
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <LL_EXTI_EnableIT_32_63+0x20>)
 80006c0:	6a1a      	ldr	r2, [r3, #32]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	620b      	str	r3, [r1, #32]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	40010400 	.word	0x40010400

080006d8 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80006e0:	4906      	ldr	r1, [pc, #24]	; (80006fc <LL_EXTI_DisableIT_0_31+0x24>)
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <LL_EXTI_DisableIT_0_31+0x24>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	43db      	mvns	r3, r3
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40010400 	.word	0x40010400

08000700 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000708:	4906      	ldr	r1, [pc, #24]	; (8000724 <LL_EXTI_DisableIT_32_63+0x24>)
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <LL_EXTI_DisableIT_32_63+0x24>)
 800070c:	6a1a      	ldr	r2, [r3, #32]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	43db      	mvns	r3, r3
 8000712:	4013      	ands	r3, r2
 8000714:	620b      	str	r3, [r1, #32]
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	40010400 	.word	0x40010400

08000728 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8000730:	4905      	ldr	r1, [pc, #20]	; (8000748 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000734:	685a      	ldr	r2, [r3, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4313      	orrs	r3, r2
 800073a:	604b      	str	r3, [r1, #4]

}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	40010400 	.word	0x40010400

0800074c <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000754:	4905      	ldr	r1, [pc, #20]	; (800076c <LL_EXTI_EnableEvent_32_63+0x20>)
 8000756:	4b05      	ldr	r3, [pc, #20]	; (800076c <LL_EXTI_EnableEvent_32_63+0x20>)
 8000758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4313      	orrs	r3, r2
 800075e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	40010400 	.word	0x40010400

08000770 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8000778:	4906      	ldr	r1, [pc, #24]	; (8000794 <LL_EXTI_DisableEvent_0_31+0x24>)
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <LL_EXTI_DisableEvent_0_31+0x24>)
 800077c:	685a      	ldr	r2, [r3, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	43db      	mvns	r3, r3
 8000782:	4013      	ands	r3, r2
 8000784:	604b      	str	r3, [r1, #4]
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40010400 	.word	0x40010400

08000798 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80007a0:	4906      	ldr	r1, [pc, #24]	; (80007bc <LL_EXTI_DisableEvent_32_63+0x24>)
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <LL_EXTI_DisableEvent_32_63+0x24>)
 80007a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	43db      	mvns	r3, r3
 80007aa:	4013      	ands	r3, r2
 80007ac:	624b      	str	r3, [r1, #36]	; 0x24
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40010400 	.word	0x40010400

080007c0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80007c8:	4905      	ldr	r1, [pc, #20]	; (80007e0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80007cc:	689a      	ldr	r2, [r3, #8]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	608b      	str	r3, [r1, #8]

}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	40010400 	.word	0x40010400

080007e4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80007ec:	4905      	ldr	r1, [pc, #20]	; (8000804 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80007f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	628b      	str	r3, [r1, #40]	; 0x28
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	40010400 	.word	0x40010400

08000808 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8000810:	4906      	ldr	r1, [pc, #24]	; (800082c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000814:	689a      	ldr	r2, [r3, #8]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	43db      	mvns	r3, r3
 800081a:	4013      	ands	r3, r2
 800081c:	608b      	str	r3, [r1, #8]

}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40010400 	.word	0x40010400

08000830 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000838:	4906      	ldr	r1, [pc, #24]	; (8000854 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800083c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	43db      	mvns	r3, r3
 8000842:	4013      	ands	r3, r2
 8000844:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40010400 	.word	0x40010400

08000858 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8000860:	4905      	ldr	r1, [pc, #20]	; (8000878 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000864:	68da      	ldr	r2, [r3, #12]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4313      	orrs	r3, r2
 800086a:	60cb      	str	r3, [r1, #12]
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	40010400 	.word	0x40010400

0800087c <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000884:	4905      	ldr	r1, [pc, #20]	; (800089c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000886:	4b05      	ldr	r3, [pc, #20]	; (800089c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4313      	orrs	r3, r2
 800088e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	40010400 	.word	0x40010400

080008a0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80008a8:	4906      	ldr	r1, [pc, #24]	; (80008c4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80008ac:	68da      	ldr	r2, [r3, #12]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	43db      	mvns	r3, r3
 80008b2:	4013      	ands	r3, r2
 80008b4:	60cb      	str	r3, [r1, #12]
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40010400 	.word	0x40010400

080008c8 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80008d0:	4906      	ldr	r1, [pc, #24]	; (80008ec <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80008d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	43db      	mvns	r3, r3
 80008da:	4013      	ands	r3, r2
 80008dc:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40010400 	.word	0x40010400

080008f0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80008f8:	2301      	movs	r3, #1
 80008fa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	7a1b      	ldrb	r3, [r3, #8]
 8000900:	2b00      	cmp	r3, #0
 8000902:	f000 80c1 	beq.w	8000a88 <LL_EXTI_Init+0x198>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d05b      	beq.n	80009c6 <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	7a5b      	ldrb	r3, [r3, #9]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d00e      	beq.n	8000934 <LL_EXTI_Init+0x44>
 8000916:	2b02      	cmp	r3, #2
 8000918:	d017      	beq.n	800094a <LL_EXTI_Init+0x5a>
 800091a:	2b00      	cmp	r3, #0
 800091c:	d120      	bne.n	8000960 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff ff24 	bl	8000770 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff feaf 	bl	8000690 <LL_EXTI_EnableIT_0_31>
          break;
 8000932:	e018      	b.n	8000966 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fecd 	bl	80006d8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fef0 	bl	8000728 <LL_EXTI_EnableEvent_0_31>
          break;
 8000948:	e00d      	b.n	8000966 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fe9e 	bl	8000690 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fee5 	bl	8000728 <LL_EXTI_EnableEvent_0_31>
          break;
 800095e:	e002      	b.n	8000966 <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 8000960:	2300      	movs	r3, #0
 8000962:	73fb      	strb	r3, [r7, #15]
          break;
 8000964:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7a9b      	ldrb	r3, [r3, #10]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d02b      	beq.n	80009c6 <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	7a9b      	ldrb	r3, [r3, #10]
 8000972:	2b02      	cmp	r3, #2
 8000974:	d00e      	beq.n	8000994 <LL_EXTI_Init+0xa4>
 8000976:	2b03      	cmp	r3, #3
 8000978:	d017      	beq.n	80009aa <LL_EXTI_Init+0xba>
 800097a:	2b01      	cmp	r3, #1
 800097c:	d120      	bne.n	80009c0 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff8c 	bl	80008a0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff17 	bl	80007c0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000992:	e018      	b.n	80009c6 <LL_EXTI_Init+0xd6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ff35 	bl	8000808 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ff58 	bl	8000858 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80009a8:	e00d      	b.n	80009c6 <LL_EXTI_Init+0xd6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ff06 	bl	80007c0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff4d 	bl	8000858 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80009be:	e002      	b.n	80009c6 <LL_EXTI_Init+0xd6>
          default:
            status = ERROR;
 80009c0:	2300      	movs	r3, #0
 80009c2:	73fb      	strb	r3, [r7, #15]
            break;
 80009c4:	bf00      	nop
        }
      }
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d070      	beq.n	8000ab0 <LL_EXTI_Init+0x1c0>
    {
      switch (EXTI_InitStruct->Mode)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	7a5b      	ldrb	r3, [r3, #9]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d00e      	beq.n	80009f4 <LL_EXTI_Init+0x104>
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d017      	beq.n	8000a0a <LL_EXTI_Init+0x11a>
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d120      	bne.n	8000a20 <LL_EXTI_Init+0x130>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fed8 	bl	8000798 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fe61 	bl	80006b4 <LL_EXTI_EnableIT_32_63>
          break;
 80009f2:	e018      	b.n	8000a26 <LL_EXTI_Init+0x136>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fe81 	bl	8000700 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fea2 	bl	800074c <LL_EXTI_EnableEvent_32_63>
          break;
 8000a08:	e00d      	b.n	8000a26 <LL_EXTI_Init+0x136>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fe50 	bl	80006b4 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fe97 	bl	800074c <LL_EXTI_EnableEvent_32_63>
          break;
 8000a1e:	e002      	b.n	8000a26 <LL_EXTI_Init+0x136>
        default:
          status = ERROR;
 8000a20:	2300      	movs	r3, #0
 8000a22:	73fb      	strb	r3, [r7, #15]
          break;
 8000a24:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	7a9b      	ldrb	r3, [r3, #10]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d040      	beq.n	8000ab0 <LL_EXTI_Init+0x1c0>
      {
        switch (EXTI_InitStruct->Trigger)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	7a9b      	ldrb	r3, [r3, #10]
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	d00e      	beq.n	8000a54 <LL_EXTI_Init+0x164>
 8000a36:	2b03      	cmp	r3, #3
 8000a38:	d017      	beq.n	8000a6a <LL_EXTI_Init+0x17a>
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d120      	bne.n	8000a80 <LL_EXTI_Init+0x190>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ff40 	bl	80008c8 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fec9 	bl	80007e4 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8000a52:	e02d      	b.n	8000ab0 <LL_EXTI_Init+0x1c0>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fee9 	bl	8000830 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff ff0a 	bl	800087c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000a68:	e022      	b.n	8000ab0 <LL_EXTI_Init+0x1c0>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff feb8 	bl	80007e4 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff feff 	bl	800087c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8000a7e:	e017      	b.n	8000ab0 <LL_EXTI_Init+0x1c0>
          default:
            status = ERROR;
 8000a80:	2300      	movs	r3, #0
 8000a82:	73fb      	strb	r3, [r7, #15]
            break;
 8000a84:	bf00      	nop
 8000a86:	e013      	b.n	8000ab0 <LL_EXTI_Init+0x1c0>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fe23 	bl	80006d8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fe6a 	bl	8000770 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fe2d 	bl	8000700 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fe74 	bl	8000798 <LL_EXTI_DisableEvent_32_63>
  }
  return status;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b089      	sub	sp, #36	; 0x24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	60f8      	str	r0, [r7, #12]
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	fa93 f3a3 	rbit	r3, r3
 8000ad4:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	fab3 f383 	clz	r3, r3
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	2103      	movs	r1, #3
 8000ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	fa93 f3a3 	rbit	r3, r3
 8000af2:	61bb      	str	r3, [r7, #24]
  return(result);
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	fab3 f383 	clz	r3, r3
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	6879      	ldr	r1, [r7, #4]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	431a      	orrs	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	601a      	str	r2, [r3, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	3724      	adds	r7, #36	; 0x24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	685a      	ldr	r2, [r3, #4]
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	401a      	ands	r2, r3
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	6879      	ldr	r1, [r7, #4]
 8000b2e:	fb01 f303 	mul.w	r3, r1, r3
 8000b32:	431a      	orrs	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	605a      	str	r2, [r3, #4]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	689a      	ldr	r2, [r3, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa93 f3a3 	rbit	r3, r3
 8000b5e:	613b      	str	r3, [r7, #16]
  return(result);
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	fab3 f383 	clz	r3, r3
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	2103      	movs	r1, #3
 8000b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	401a      	ands	r2, r3
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	fa93 f3a3 	rbit	r3, r3
 8000b7c:	61bb      	str	r3, [r7, #24]
  return(result);
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	fab3 f383 	clz	r3, r3
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000b92:	bf00      	nop
 8000b94:	3724      	adds	r7, #36	; 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b089      	sub	sp, #36	; 0x24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	60f8      	str	r0, [r7, #12]
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	68da      	ldr	r2, [r3, #12]
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	fa93 f3a3 	rbit	r3, r3
 8000bb8:	613b      	str	r3, [r7, #16]
  return(result);
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	fab3 f383 	clz	r3, r3
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	2103      	movs	r1, #3
 8000bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	401a      	ands	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	fa93 f3a3 	rbit	r3, r3
 8000bd6:	61bb      	str	r3, [r7, #24]
  return(result);
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	fab3 f383 	clz	r3, r3
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	fa01 f303 	lsl.w	r3, r1, r3
 8000be6:	431a      	orrs	r2, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	60da      	str	r2, [r3, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3724      	adds	r7, #36	; 0x24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	; 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	6a1a      	ldr	r2, [r3, #32]
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa93 f3a3 	rbit	r3, r3
 8000c12:	613b      	str	r3, [r7, #16]
  return(result);
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	fab3 f383 	clz	r3, r3
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	210f      	movs	r1, #15
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	401a      	ands	r2, r3
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa93 f3a3 	rbit	r3, r3
 8000c30:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	fab3 f383 	clz	r3, r3
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c40:	431a      	orrs	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000c46:	bf00      	nop
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b089      	sub	sp, #36	; 0x24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa93 f3a3 	rbit	r3, r3
 8000c6e:	613b      	str	r3, [r7, #16]
  return(result);
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	fab3 f383 	clz	r3, r3
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	210f      	movs	r1, #15
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	401a      	ands	r2, r3
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	fa93 f3a3 	rbit	r3, r3
 8000c8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	fab3 f383 	clz	r3, r3
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	6879      	ldr	r1, [r7, #4]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000ca4:	bf00      	nop
 8000ca6:	3724      	adds	r7, #36	; 0x24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa93 f3a3 	rbit	r3, r3
 8000cce:	613b      	str	r3, [r7, #16]
  return(result);
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	fab3 f383 	clz	r3, r3
 8000cd6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000cd8:	e048      	b.n	8000d6c <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	2101      	movs	r1, #1
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d03a      	beq.n	8000d66 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	69b9      	ldr	r1, [r7, #24]
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff fede 	bl	8000aba <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d003      	beq.n	8000d0e <LL_GPIO_Init+0x5e>
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d106      	bne.n	8000d1c <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	461a      	mov	r2, r3
 8000d14:	69b9      	ldr	r1, [r7, #24]
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ff14 	bl	8000b44 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	461a      	mov	r2, r3
 8000d22:	69b9      	ldr	r1, [r7, #24]
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ff3a 	bl	8000b9e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d119      	bne.n	8000d66 <LL_GPIO_Init+0xb6>
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	fa93 f3a3 	rbit	r3, r3
 8000d3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8000d3e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000d40:	fab3 f383 	clz	r3, r3
 8000d44:	2b07      	cmp	r3, #7
 8000d46:	d807      	bhi.n	8000d58 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	695b      	ldr	r3, [r3, #20]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	69b9      	ldr	r1, [r7, #24]
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ff51 	bl	8000bf8 <LL_GPIO_SetAFPin_0_7>
 8000d56:	e006      	b.n	8000d66 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	69b9      	ldr	r1, [r7, #24]
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff76 	bl	8000c52 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	fa22 f303 	lsr.w	r3, r2, r3
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1af      	bne.n	8000cda <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d003      	beq.n	8000d8a <LL_GPIO_Init+0xda>
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d107      	bne.n	8000d9a <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	6819      	ldr	r1, [r3, #0]
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	461a      	mov	r2, r3
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff febd 	bl	8000b14 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3720      	adds	r7, #32
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f043 0201 	orr.w	r2, r3, #1
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	601a      	str	r2, [r3, #0]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f023 0201 	bic.w	r2, r3, #1
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	601a      	str	r2, [r3, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	0219      	lsls	r1, r3, #8
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	430b      	orrs	r3, r1
 8000e00:	431a      	orrs	r2, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	601a      	str	r2, [r3, #0]
}
 8000e06:	bf00      	nop
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b085      	sub	sp, #20
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	60f8      	str	r0, [r7, #12]
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000e26:	f023 0307 	bic.w	r3, r3, #7
 8000e2a:	68b9      	ldr	r1, [r7, #8]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	431a      	orrs	r2, r3
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	609a      	str	r2, [r3, #8]
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	609a      	str	r2, [r3, #8]
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	609a      	str	r2, [r3, #8]
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
 8000e8a:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	611a      	str	r2, [r3, #16]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	601a      	str	r2, [r3, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	605a      	str	r2, [r3, #4]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff65 	bl	8000dc4 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	6899      	ldr	r1, [r3, #8]
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	461a      	mov	r2, r3
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff6d 	bl	8000de4 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ffb6 	bl	8000e82 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ff44 	bl	8000da4 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ffa0 	bl	8000e62 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	6919      	ldr	r1, [r3, #16]
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ff70 	bl	8000e12 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	691b      	ldr	r3, [r3, #16]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ff81 	bl	8000e42 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ffa9 	bl	8000e9e <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	4619      	mov	r1, r3
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffb6 	bl	8000ec4 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8000f58:	2301      	movs	r3, #1
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <LL_RCC_HSI_IsReady+0x24>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f74:	bf0c      	ite	eq
 8000f76:	2301      	moveq	r3, #1
 8000f78:	2300      	movne	r3, #0
 8000f7a:	b2db      	uxtb	r3, r3
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000

08000f8c <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <LL_RCC_LSE_IsReady+0x24>)
 8000f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	bf0c      	ite	eq
 8000f9e:	2301      	moveq	r3, #1
 8000fa0:	2300      	movne	r3, #0
 8000fa2:	b2db      	uxtb	r3, r3
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL));
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0308 	and.w	r3, r3, #8
 8000fc0:	2b08      	cmp	r3, #8
 8000fc2:	bf0c      	ite	eq
 8000fc4:	2301      	moveq	r3, #1
 8000fc6:	2300      	movne	r3, #0
 8000fc8:	b2db      	uxtb	r3, r3
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <LL_RCC_MSI_GetRange+0x18>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8000ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ffe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	40021000 	.word	0x40021000

08001010 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <LL_RCC_GetSysClkSource+0x18>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 030c 	and.w	r3, r3, #12
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000

0800102c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <LL_RCC_GetAHBPrescaler+0x18>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000

08001048 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <LL_RCC_GetAPB1Prescaler+0x18>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000

08001064 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <LL_RCC_GetAPB2Prescaler+0x18>)
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000

08001080 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <LL_RCC_GetUSARTClockSource+0x24>)
 800108a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	401a      	ands	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	041b      	lsls	r3, r3, #16
 8001096:	4313      	orrs	r3, r2
}
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	40021000 	.word	0x40021000

080010a8 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <LL_RCC_GetUARTClockSource+0x24>)
 80010b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	401a      	ands	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	041b      	lsls	r3, r3, #16
 80010be:	4313      	orrs	r3, r2
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	40021000 	.word	0x40021000

080010d0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <LL_RCC_PLL_GetMainSource+0x18>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	f003 0303 	and.w	r3, r3, #3
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000

080010ec <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <LL_RCC_PLL_GetN+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	40021000 	.word	0x40021000

08001108 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <LL_RCC_PLL_GetR+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000

08001124 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <LL_RCC_PLL_GetDivider+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000

08001140 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d12e      	bne.n	80011b0 <LL_RCC_GetUSARTClockFreq+0x70>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ff94 	bl	8001080 <LL_RCC_GetUSARTClockSource>
 8001158:	4603      	mov	r3, r0
 800115a:	4a4f      	ldr	r2, [pc, #316]	; (8001298 <LL_RCC_GetUSARTClockFreq+0x158>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d009      	beq.n	8001174 <LL_RCC_GetUSARTClockFreq+0x34>
 8001160:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8001164:	d00e      	beq.n	8001184 <LL_RCC_GetUSARTClockFreq+0x44>
 8001166:	4a4d      	ldr	r2, [pc, #308]	; (800129c <LL_RCC_GetUSARTClockFreq+0x15c>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d114      	bne.n	8001196 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800116c:	f000 f8e8 	bl	8001340 <RCC_GetSystemClockFreq>
 8001170:	60f8      	str	r0, [r7, #12]
        break;
 8001172:	e08b      	b.n	800128c <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001174:	f7ff fef6 	bl	8000f64 <LL_RCC_HSI_IsReady>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d07b      	beq.n	8001276 <LL_RCC_GetUSARTClockFreq+0x136>
        {
          usart_frequency = HSI_VALUE;
 800117e:	4b48      	ldr	r3, [pc, #288]	; (80012a0 <LL_RCC_GetUSARTClockFreq+0x160>)
 8001180:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001182:	e078      	b.n	8001276 <LL_RCC_GetUSARTClockFreq+0x136>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001184:	f7ff ff02 	bl	8000f8c <LL_RCC_LSE_IsReady>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d075      	beq.n	800127a <LL_RCC_GetUSARTClockFreq+0x13a>
        {
          usart_frequency = LSE_VALUE;
 800118e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001192:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001194:	e071      	b.n	800127a <LL_RCC_GetUSARTClockFreq+0x13a>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001196:	f000 f8d3 	bl	8001340 <RCC_GetSystemClockFreq>
 800119a:	4603      	mov	r3, r0
 800119c:	4618      	mov	r0, r3
 800119e:	f000 f95f 	bl	8001460 <RCC_GetHCLKClockFreq>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 f985 	bl	80014b4 <RCC_GetPCLK2ClockFreq>
 80011aa:	60f8      	str	r0, [r7, #12]
        break;
 80011ac:	bf00      	nop
 80011ae:	e06d      	b.n	800128c <LL_RCC_GetUSARTClockFreq+0x14c>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b0c      	cmp	r3, #12
 80011b4:	d12e      	bne.n	8001214 <LL_RCC_GetUSARTClockFreq+0xd4>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ff62 	bl	8001080 <LL_RCC_GetUSARTClockSource>
 80011bc:	4603      	mov	r3, r0
 80011be:	4a39      	ldr	r2, [pc, #228]	; (80012a4 <LL_RCC_GetUSARTClockFreq+0x164>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d009      	beq.n	80011d8 <LL_RCC_GetUSARTClockFreq+0x98>
 80011c4:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 80011c8:	d00e      	beq.n	80011e8 <LL_RCC_GetUSARTClockFreq+0xa8>
 80011ca:	4a37      	ldr	r2, [pc, #220]	; (80012a8 <LL_RCC_GetUSARTClockFreq+0x168>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d114      	bne.n	80011fa <LL_RCC_GetUSARTClockFreq+0xba>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80011d0:	f000 f8b6 	bl	8001340 <RCC_GetSystemClockFreq>
 80011d4:	60f8      	str	r0, [r7, #12]
        break;
 80011d6:	e059      	b.n	800128c <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80011d8:	f7ff fec4 	bl	8000f64 <LL_RCC_HSI_IsReady>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d04d      	beq.n	800127e <LL_RCC_GetUSARTClockFreq+0x13e>
        {
          usart_frequency = HSI_VALUE;
 80011e2:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <LL_RCC_GetUSARTClockFreq+0x160>)
 80011e4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80011e6:	e04a      	b.n	800127e <LL_RCC_GetUSARTClockFreq+0x13e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80011e8:	f7ff fed0 	bl	8000f8c <LL_RCC_LSE_IsReady>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d047      	beq.n	8001282 <LL_RCC_GetUSARTClockFreq+0x142>
        {
          usart_frequency = LSE_VALUE;
 80011f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011f6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80011f8:	e043      	b.n	8001282 <LL_RCC_GetUSARTClockFreq+0x142>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80011fa:	f000 f8a1 	bl	8001340 <RCC_GetSystemClockFreq>
 80011fe:	4603      	mov	r3, r0
 8001200:	4618      	mov	r0, r3
 8001202:	f000 f92d 	bl	8001460 <RCC_GetHCLKClockFreq>
 8001206:	4603      	mov	r3, r0
 8001208:	4618      	mov	r0, r3
 800120a:	f000 f93f 	bl	800148c <RCC_GetPCLK1ClockFreq>
 800120e:	60f8      	str	r0, [r7, #12]
        break;
 8001210:	bf00      	nop
 8001212:	e03b      	b.n	800128c <LL_RCC_GetUSARTClockFreq+0x14c>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b30      	cmp	r3, #48	; 0x30
 8001218:	d138      	bne.n	800128c <LL_RCC_GetUSARTClockFreq+0x14c>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff30 	bl	8001080 <LL_RCC_GetUSARTClockSource>
 8001220:	4603      	mov	r3, r0
 8001222:	4a22      	ldr	r2, [pc, #136]	; (80012ac <LL_RCC_GetUSARTClockFreq+0x16c>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d009      	beq.n	800123c <LL_RCC_GetUSARTClockFreq+0xfc>
 8001228:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800122c:	d00e      	beq.n	800124c <LL_RCC_GetUSARTClockFreq+0x10c>
 800122e:	4a20      	ldr	r2, [pc, #128]	; (80012b0 <LL_RCC_GetUSARTClockFreq+0x170>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d114      	bne.n	800125e <LL_RCC_GetUSARTClockFreq+0x11e>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8001234:	f000 f884 	bl	8001340 <RCC_GetSystemClockFreq>
 8001238:	60f8      	str	r0, [r7, #12]
          break;
 800123a:	e027      	b.n	800128c <LL_RCC_GetUSARTClockFreq+0x14c>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 800123c:	f7ff fe92 	bl	8000f64 <LL_RCC_HSI_IsReady>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d01f      	beq.n	8001286 <LL_RCC_GetUSARTClockFreq+0x146>
          {
            usart_frequency = HSI_VALUE;
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <LL_RCC_GetUSARTClockFreq+0x160>)
 8001248:	60fb      	str	r3, [r7, #12]
          }
          break;
 800124a:	e01c      	b.n	8001286 <LL_RCC_GetUSARTClockFreq+0x146>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 800124c:	f7ff fe9e 	bl	8000f8c <LL_RCC_LSE_IsReady>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d019      	beq.n	800128a <LL_RCC_GetUSARTClockFreq+0x14a>
          {
            usart_frequency = LSE_VALUE;
 8001256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800125a:	60fb      	str	r3, [r7, #12]
          }
          break;
 800125c:	e015      	b.n	800128a <LL_RCC_GetUSARTClockFreq+0x14a>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800125e:	f000 f86f 	bl	8001340 <RCC_GetSystemClockFreq>
 8001262:	4603      	mov	r3, r0
 8001264:	4618      	mov	r0, r3
 8001266:	f000 f8fb 	bl	8001460 <RCC_GetHCLKClockFreq>
 800126a:	4603      	mov	r3, r0
 800126c:	4618      	mov	r0, r3
 800126e:	f000 f90d 	bl	800148c <RCC_GetPCLK1ClockFreq>
 8001272:	60f8      	str	r0, [r7, #12]
          break;
 8001274:	e00a      	b.n	800128c <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 8001276:	bf00      	nop
 8001278:	e008      	b.n	800128c <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 800127a:	bf00      	nop
 800127c:	e006      	b.n	800128c <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 800127e:	bf00      	nop
 8001280:	e004      	b.n	800128c <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 8001282:	bf00      	nop
 8001284:	e002      	b.n	800128c <LL_RCC_GetUSARTClockFreq+0x14c>
          break;
 8001286:	bf00      	nop
 8001288:	e000      	b.n	800128c <LL_RCC_GetUSARTClockFreq+0x14c>
          break;
 800128a:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 800128c:	68fb      	ldr	r3, [r7, #12]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	00030002 	.word	0x00030002
 800129c:	00030001 	.word	0x00030001
 80012a0:	00f42400 	.word	0x00f42400
 80012a4:	000c0008 	.word	0x000c0008
 80012a8:	000c0004 	.word	0x000c0004
 80012ac:	00300020 	.word	0x00300020
 80012b0:	00300010 	.word	0x00300010

080012b4 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2bc0      	cmp	r3, #192	; 0xc0
 80012c4:	d130      	bne.n	8001328 <LL_RCC_GetUARTClockFreq+0x74>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff feee 	bl	80010a8 <LL_RCC_GetUARTClockSource>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a19      	ldr	r2, [pc, #100]	; (8001334 <LL_RCC_GetUARTClockFreq+0x80>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d009      	beq.n	80012e8 <LL_RCC_GetUARTClockFreq+0x34>
 80012d4:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80012d8:	d00e      	beq.n	80012f8 <LL_RCC_GetUARTClockFreq+0x44>
 80012da:	4a17      	ldr	r2, [pc, #92]	; (8001338 <LL_RCC_GetUARTClockFreq+0x84>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d114      	bne.n	800130a <LL_RCC_GetUARTClockFreq+0x56>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80012e0:	f000 f82e 	bl	8001340 <RCC_GetSystemClockFreq>
 80012e4:	60f8      	str	r0, [r7, #12]
        break;
 80012e6:	e01f      	b.n	8001328 <LL_RCC_GetUARTClockFreq+0x74>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80012e8:	f7ff fe3c 	bl	8000f64 <LL_RCC_HSI_IsReady>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d017      	beq.n	8001322 <LL_RCC_GetUARTClockFreq+0x6e>
        {
          uart_frequency = HSI_VALUE;
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <LL_RCC_GetUARTClockFreq+0x88>)
 80012f4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80012f6:	e014      	b.n	8001322 <LL_RCC_GetUARTClockFreq+0x6e>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80012f8:	f7ff fe48 	bl	8000f8c <LL_RCC_LSE_IsReady>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d011      	beq.n	8001326 <LL_RCC_GetUARTClockFreq+0x72>
        {
          uart_frequency = LSE_VALUE;
 8001302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001306:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001308:	e00d      	b.n	8001326 <LL_RCC_GetUARTClockFreq+0x72>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800130a:	f000 f819 	bl	8001340 <RCC_GetSystemClockFreq>
 800130e:	4603      	mov	r3, r0
 8001310:	4618      	mov	r0, r3
 8001312:	f000 f8a5 	bl	8001460 <RCC_GetHCLKClockFreq>
 8001316:	4603      	mov	r3, r0
 8001318:	4618      	mov	r0, r3
 800131a:	f000 f8b7 	bl	800148c <RCC_GetPCLK1ClockFreq>
 800131e:	60f8      	str	r0, [r7, #12]
        break;
 8001320:	e002      	b.n	8001328 <LL_RCC_GetUARTClockFreq+0x74>
        break;
 8001322:	bf00      	nop
 8001324:	e000      	b.n	8001328 <LL_RCC_GetUARTClockFreq+0x74>
        break;
 8001326:	bf00      	nop
        break;
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8001328:	68fb      	ldr	r3, [r7, #12]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	00c00080 	.word	0x00c00080
 8001338:	00c00040 	.word	0x00c00040
 800133c:	00f42400 	.word	0x00f42400

08001340 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800134a:	f7ff fe61 	bl	8001010 <LL_RCC_GetSysClkSource>
 800134e:	4603      	mov	r3, r0
 8001350:	2b0c      	cmp	r3, #12
 8001352:	d851      	bhi.n	80013f8 <RCC_GetSystemClockFreq+0xb8>
 8001354:	a201      	add	r2, pc, #4	; (adr r2, 800135c <RCC_GetSystemClockFreq+0x1c>)
 8001356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135a:	bf00      	nop
 800135c:	08001391 	.word	0x08001391
 8001360:	080013f9 	.word	0x080013f9
 8001364:	080013f9 	.word	0x080013f9
 8001368:	080013f9 	.word	0x080013f9
 800136c:	080013e5 	.word	0x080013e5
 8001370:	080013f9 	.word	0x080013f9
 8001374:	080013f9 	.word	0x080013f9
 8001378:	080013f9 	.word	0x080013f9
 800137c:	080013eb 	.word	0x080013eb
 8001380:	080013f9 	.word	0x080013f9
 8001384:	080013f9 	.word	0x080013f9
 8001388:	080013f9 	.word	0x080013f9
 800138c:	080013f1 	.word	0x080013f1
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001390:	f7ff fe10 	bl	8000fb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d111      	bne.n	80013be <RCC_GetSystemClockFreq+0x7e>
 800139a:	f7ff fe0b 	bl	8000fb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d004      	beq.n	80013ae <RCC_GetSystemClockFreq+0x6e>
 80013a4:	f7ff fe18 	bl	8000fd8 <LL_RCC_MSI_GetRange>
 80013a8:	4603      	mov	r3, r0
 80013aa:	0a1b      	lsrs	r3, r3, #8
 80013ac:	e003      	b.n	80013b6 <RCC_GetSystemClockFreq+0x76>
 80013ae:	f7ff fe21 	bl	8000ff4 <LL_RCC_MSI_GetRangeAfterStandby>
 80013b2:	4603      	mov	r3, r0
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	4a28      	ldr	r2, [pc, #160]	; (8001458 <RCC_GetSystemClockFreq+0x118>)
 80013b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013bc:	e010      	b.n	80013e0 <RCC_GetSystemClockFreq+0xa0>
 80013be:	f7ff fdf9 	bl	8000fb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d004      	beq.n	80013d2 <RCC_GetSystemClockFreq+0x92>
 80013c8:	f7ff fe06 	bl	8000fd8 <LL_RCC_MSI_GetRange>
 80013cc:	4603      	mov	r3, r0
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	e003      	b.n	80013da <RCC_GetSystemClockFreq+0x9a>
 80013d2:	f7ff fe0f 	bl	8000ff4 <LL_RCC_MSI_GetRangeAfterStandby>
 80013d6:	4603      	mov	r3, r0
 80013d8:	091b      	lsrs	r3, r3, #4
 80013da:	4a1f      	ldr	r2, [pc, #124]	; (8001458 <RCC_GetSystemClockFreq+0x118>)
 80013dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e0:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80013e2:	e033      	b.n	800144c <RCC_GetSystemClockFreq+0x10c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80013e4:	4b1d      	ldr	r3, [pc, #116]	; (800145c <RCC_GetSystemClockFreq+0x11c>)
 80013e6:	607b      	str	r3, [r7, #4]
      break;
 80013e8:	e030      	b.n	800144c <RCC_GetSystemClockFreq+0x10c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80013ea:	4b1c      	ldr	r3, [pc, #112]	; (800145c <RCC_GetSystemClockFreq+0x11c>)
 80013ec:	607b      	str	r3, [r7, #4]
      break;
 80013ee:	e02d      	b.n	800144c <RCC_GetSystemClockFreq+0x10c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80013f0:	f000 f874 	bl	80014dc <RCC_PLL_GetFreqDomain_SYS>
 80013f4:	6078      	str	r0, [r7, #4]
      break;
 80013f6:	e029      	b.n	800144c <RCC_GetSystemClockFreq+0x10c>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80013f8:	f7ff fddc 	bl	8000fb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d111      	bne.n	8001426 <RCC_GetSystemClockFreq+0xe6>
 8001402:	f7ff fdd7 	bl	8000fb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <RCC_GetSystemClockFreq+0xd6>
 800140c:	f7ff fde4 	bl	8000fd8 <LL_RCC_MSI_GetRange>
 8001410:	4603      	mov	r3, r0
 8001412:	0a1b      	lsrs	r3, r3, #8
 8001414:	e003      	b.n	800141e <RCC_GetSystemClockFreq+0xde>
 8001416:	f7ff fded 	bl	8000ff4 <LL_RCC_MSI_GetRangeAfterStandby>
 800141a:	4603      	mov	r3, r0
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <RCC_GetSystemClockFreq+0x118>)
 8001420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001424:	e010      	b.n	8001448 <RCC_GetSystemClockFreq+0x108>
 8001426:	f7ff fdc5 	bl	8000fb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d004      	beq.n	800143a <RCC_GetSystemClockFreq+0xfa>
 8001430:	f7ff fdd2 	bl	8000fd8 <LL_RCC_MSI_GetRange>
 8001434:	4603      	mov	r3, r0
 8001436:	091b      	lsrs	r3, r3, #4
 8001438:	e003      	b.n	8001442 <RCC_GetSystemClockFreq+0x102>
 800143a:	f7ff fddb 	bl	8000ff4 <LL_RCC_MSI_GetRangeAfterStandby>
 800143e:	4603      	mov	r3, r0
 8001440:	091b      	lsrs	r3, r3, #4
 8001442:	4a05      	ldr	r2, [pc, #20]	; (8001458 <RCC_GetSystemClockFreq+0x118>)
 8001444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001448:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800144a:	bf00      	nop
  }

  return frequency;
 800144c:	687b      	ldr	r3, [r7, #4]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	08005834 	.word	0x08005834
 800145c:	00f42400 	.word	0x00f42400

08001460 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001468:	f7ff fde0 	bl	800102c <LL_RCC_GetAHBPrescaler>
 800146c:	4603      	mov	r3, r0
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	f003 030f 	and.w	r3, r3, #15
 8001474:	4a04      	ldr	r2, [pc, #16]	; (8001488 <RCC_GetHCLKClockFreq+0x28>)
 8001476:	5cd3      	ldrb	r3, [r2, r3]
 8001478:	461a      	mov	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	40d3      	lsrs	r3, r2
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	0800581c 	.word	0x0800581c

0800148c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001494:	f7ff fdd8 	bl	8001048 <LL_RCC_GetAPB1Prescaler>
 8001498:	4603      	mov	r3, r0
 800149a:	0a1b      	lsrs	r3, r3, #8
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <RCC_GetPCLK1ClockFreq+0x24>)
 800149e:	5cd3      	ldrb	r3, [r2, r3]
 80014a0:	461a      	mov	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	40d3      	lsrs	r3, r2
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	0800582c 	.word	0x0800582c

080014b4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80014bc:	f7ff fdd2 	bl	8001064 <LL_RCC_GetAPB2Prescaler>
 80014c0:	4603      	mov	r3, r0
 80014c2:	0adb      	lsrs	r3, r3, #11
 80014c4:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <RCC_GetPCLK2ClockFreq+0x24>)
 80014c6:	5cd3      	ldrb	r3, [r2, r3]
 80014c8:	461a      	mov	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	40d3      	lsrs	r3, r2
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	0800582c 	.word	0x0800582c

080014dc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	2300      	movs	r3, #0
 80014e8:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80014ea:	f7ff fdf1 	bl	80010d0 <LL_RCC_PLL_GetMainSource>
 80014ee:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d02d      	beq.n	8001552 <RCC_PLL_GetFreqDomain_SYS+0x76>
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d02e      	beq.n	8001558 <RCC_PLL_GetFreqDomain_SYS+0x7c>
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d12f      	bne.n	800155e <RCC_PLL_GetFreqDomain_SYS+0x82>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80014fe:	f7ff fd59 	bl	8000fb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d111      	bne.n	800152c <RCC_PLL_GetFreqDomain_SYS+0x50>
 8001508:	f7ff fd54 	bl	8000fb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d004      	beq.n	800151c <RCC_PLL_GetFreqDomain_SYS+0x40>
 8001512:	f7ff fd61 	bl	8000fd8 <LL_RCC_MSI_GetRange>
 8001516:	4603      	mov	r3, r0
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	e003      	b.n	8001524 <RCC_PLL_GetFreqDomain_SYS+0x48>
 800151c:	f7ff fd6a 	bl	8000ff4 <LL_RCC_MSI_GetRangeAfterStandby>
 8001520:	4603      	mov	r3, r0
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	4a2f      	ldr	r2, [pc, #188]	; (80015e4 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8001526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152a:	e010      	b.n	800154e <RCC_PLL_GetFreqDomain_SYS+0x72>
 800152c:	f7ff fd42 	bl	8000fb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d004      	beq.n	8001540 <RCC_PLL_GetFreqDomain_SYS+0x64>
 8001536:	f7ff fd4f 	bl	8000fd8 <LL_RCC_MSI_GetRange>
 800153a:	4603      	mov	r3, r0
 800153c:	091b      	lsrs	r3, r3, #4
 800153e:	e003      	b.n	8001548 <RCC_PLL_GetFreqDomain_SYS+0x6c>
 8001540:	f7ff fd58 	bl	8000ff4 <LL_RCC_MSI_GetRangeAfterStandby>
 8001544:	4603      	mov	r3, r0
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	4a26      	ldr	r2, [pc, #152]	; (80015e4 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 800154a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154e:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001550:	e02f      	b.n	80015b2 <RCC_PLL_GetFreqDomain_SYS+0xd6>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001552:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8001554:	607b      	str	r3, [r7, #4]
      break;
 8001556:	e02c      	b.n	80015b2 <RCC_PLL_GetFreqDomain_SYS+0xd6>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001558:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800155a:	607b      	str	r3, [r7, #4]
      break;
 800155c:	e029      	b.n	80015b2 <RCC_PLL_GetFreqDomain_SYS+0xd6>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800155e:	f7ff fd29 	bl	8000fb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d111      	bne.n	800158c <RCC_PLL_GetFreqDomain_SYS+0xb0>
 8001568:	f7ff fd24 	bl	8000fb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d004      	beq.n	800157c <RCC_PLL_GetFreqDomain_SYS+0xa0>
 8001572:	f7ff fd31 	bl	8000fd8 <LL_RCC_MSI_GetRange>
 8001576:	4603      	mov	r3, r0
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	e003      	b.n	8001584 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 800157c:	f7ff fd3a 	bl	8000ff4 <LL_RCC_MSI_GetRangeAfterStandby>
 8001580:	4603      	mov	r3, r0
 8001582:	0a1b      	lsrs	r3, r3, #8
 8001584:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8001586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158a:	e010      	b.n	80015ae <RCC_PLL_GetFreqDomain_SYS+0xd2>
 800158c:	f7ff fd12 	bl	8000fb4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d004      	beq.n	80015a0 <RCC_PLL_GetFreqDomain_SYS+0xc4>
 8001596:	f7ff fd1f 	bl	8000fd8 <LL_RCC_MSI_GetRange>
 800159a:	4603      	mov	r3, r0
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	e003      	b.n	80015a8 <RCC_PLL_GetFreqDomain_SYS+0xcc>
 80015a0:	f7ff fd28 	bl	8000ff4 <LL_RCC_MSI_GetRangeAfterStandby>
 80015a4:	4603      	mov	r3, r0
 80015a6:	091b      	lsrs	r3, r3, #4
 80015a8:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 80015aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ae:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80015b0:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80015b2:	f7ff fdb7 	bl	8001124 <LL_RCC_PLL_GetDivider>
 80015b6:	4603      	mov	r3, r0
 80015b8:	091b      	lsrs	r3, r3, #4
 80015ba:	3301      	adds	r3, #1
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	fbb2 f4f3 	udiv	r4, r2, r3
 80015c2:	f7ff fd93 	bl	80010ec <LL_RCC_PLL_GetN>
 80015c6:	4603      	mov	r3, r0
 80015c8:	fb03 f404 	mul.w	r4, r3, r4
 80015cc:	f7ff fd9c 	bl	8001108 <LL_RCC_PLL_GetR>
 80015d0:	4603      	mov	r3, r0
 80015d2:	0e5b      	lsrs	r3, r3, #25
 80015d4:	3301      	adds	r3, #1
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd90      	pop	{r4, r7, pc}
 80015e4:	08005834 	.word	0x08005834
 80015e8:	00f42400 	.word	0x00f42400

080015ec <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015fc:	2b40      	cmp	r3, #64	; 0x40
 80015fe:	d101      	bne.n	8001604 <LL_SPI_IsEnabled+0x18>
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <LL_SPI_IsEnabled+0x1a>
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	b29b      	uxth	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	611a      	str	r2, [r3, #16]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b084      	sub	sp, #16
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ffd3 	bl	80015ec <LL_SPI_IsEnabled>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d13b      	bne.n	80016c4 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001654:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	6811      	ldr	r1, [r2, #0]
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	6852      	ldr	r2, [r2, #4]
 8001660:	4311      	orrs	r1, r2
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	68d2      	ldr	r2, [r2, #12]
 8001666:	4311      	orrs	r1, r2
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	6912      	ldr	r2, [r2, #16]
 800166c:	4311      	orrs	r1, r2
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	6952      	ldr	r2, [r2, #20]
 8001672:	4311      	orrs	r1, r2
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	6992      	ldr	r2, [r2, #24]
 8001678:	4311      	orrs	r1, r2
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	69d2      	ldr	r2, [r2, #28]
 800167e:	4311      	orrs	r1, r2
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	6a12      	ldr	r2, [r2, #32]
 8001684:	430a      	orrs	r2, r1
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001694:	f023 0304 	bic.w	r3, r3, #4
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	6891      	ldr	r1, [r2, #8]
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	6952      	ldr	r2, [r2, #20]
 80016a0:	0c12      	lsrs	r2, r2, #16
 80016a2:	430a      	orrs	r2, r1
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016b2:	d105      	bne.n	80016c0 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	4619      	mov	r1, r3
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffa9 	bl	8001612 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80016c0:	2301      	movs	r3, #1
 80016c2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <LL_TIM_OC_SetCompareCH5>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	659a      	str	r2, [r3, #88]	; 0x58
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <LL_TIM_OC_SetCompareCH6>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	f043 0201 	orr.w	r2, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	615a      	str	r2, [r3, #20]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <LL_TIM_StructInit>:
  *         to their default values.
  * @param  TIM_InitStruct pointer to a @ref LL_TIM_InitTypeDef structure (time base unit configuration data structure)
  * @retval None
  */
void LL_TIM_StructInit(LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	605a      	str	r2, [r3, #4]
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001804:	609a      	str	r2, [r3, #8]
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
  TIM_InitStruct->RepetitionCounter = (uint8_t)0x00;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	741a      	strb	r2, [r3, #16]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a2b      	ldr	r2, [pc, #172]	; (80018e0 <LL_TIM_Init+0xc0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d007      	beq.n	8001848 <LL_TIM_Init+0x28>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800183e:	d003      	beq.n	8001848 <LL_TIM_Init+0x28>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a28      	ldr	r2, [pc, #160]	; (80018e4 <LL_TIM_Init+0xc4>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d106      	bne.n	8001856 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4313      	orrs	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a21      	ldr	r2, [pc, #132]	; (80018e0 <LL_TIM_Init+0xc0>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d00f      	beq.n	800187e <LL_TIM_Init+0x5e>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001864:	d00b      	beq.n	800187e <LL_TIM_Init+0x5e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a1e      	ldr	r2, [pc, #120]	; (80018e4 <LL_TIM_Init+0xc4>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d007      	beq.n	800187e <LL_TIM_Init+0x5e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a1d      	ldr	r2, [pc, #116]	; (80018e8 <LL_TIM_Init+0xc8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d003      	beq.n	800187e <LL_TIM_Init+0x5e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <LL_TIM_Init+0xcc>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d106      	bne.n	800188c <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	4619      	mov	r1, r3
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff26 	bl	80016ea <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	4619      	mov	r1, r3
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ff12 	bl	80016ce <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a0c      	ldr	r2, [pc, #48]	; (80018e0 <LL_TIM_Init+0xc0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d007      	beq.n	80018c2 <LL_TIM_Init+0xa2>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a0c      	ldr	r2, [pc, #48]	; (80018e8 <LL_TIM_Init+0xc8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d003      	beq.n	80018c2 <LL_TIM_Init+0xa2>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <LL_TIM_Init+0xcc>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d105      	bne.n	80018ce <LL_TIM_Init+0xae>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	7c1b      	ldrb	r3, [r3, #16]
 80018c6:	4619      	mov	r1, r3
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ff1c 	bl	8001706 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ff7b 	bl	80017ca <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80018d4:	2301      	movs	r3, #1
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40012c00 	.word	0x40012c00
 80018e4:	40000400 	.word	0x40000400
 80018e8:	40014000 	.word	0x40014000
 80018ec:	40014400 	.word	0x40014400

080018f0 <LL_TIM_OC_StructInit>:
  *         structure to their default values.
  * @param  TIM_OC_InitStruct pointer to a @ref LL_TIM_OC_InitTypeDef structure (the output channel configuration data structure)
  * @retval None
  */
void LL_TIM_OC_StructInit(LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct->OCNState     = LL_TIM_OCSTATE_DISABLE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitStruct->OCPolarity   = LL_TIM_OCPOLARITY_HIGH;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	615a      	str	r2, [r3, #20]
  TIM_OC_InitStruct->OCIdleState  = LL_TIM_OCIDLESTATE_LOW;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	61da      	str	r2, [r3, #28]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001940:	2300      	movs	r3, #0
 8001942:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800194a:	d01f      	beq.n	800198c <LL_TIM_OC_Init+0x58>
 800194c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001950:	d804      	bhi.n	800195c <LL_TIM_OC_Init+0x28>
 8001952:	2b01      	cmp	r3, #1
 8001954:	d00c      	beq.n	8001970 <LL_TIM_OC_Init+0x3c>
 8001956:	2b10      	cmp	r3, #16
 8001958:	d011      	beq.n	800197e <LL_TIM_OC_Init+0x4a>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800195a:	e033      	b.n	80019c4 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 800195c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001960:	d022      	beq.n	80019a8 <LL_TIM_OC_Init+0x74>
 8001962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001966:	d026      	beq.n	80019b6 <LL_TIM_OC_Init+0x82>
 8001968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800196c:	d015      	beq.n	800199a <LL_TIM_OC_Init+0x66>
      break;
 800196e:	e029      	b.n	80019c4 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 f82c 	bl	80019d0 <OC1Config>
 8001978:	4603      	mov	r3, r0
 800197a:	75fb      	strb	r3, [r7, #23]
      break;
 800197c:	e022      	b.n	80019c4 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f000 f899 	bl	8001ab8 <OC2Config>
 8001986:	4603      	mov	r3, r0
 8001988:	75fb      	strb	r3, [r7, #23]
      break;
 800198a:	e01b      	b.n	80019c4 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 f90a 	bl	8001ba8 <OC3Config>
 8001994:	4603      	mov	r3, r0
 8001996:	75fb      	strb	r3, [r7, #23]
      break;
 8001998:	e014      	b.n	80019c4 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 f97b 	bl	8001c98 <OC4Config>
 80019a2:	4603      	mov	r3, r0
 80019a4:	75fb      	strb	r3, [r7, #23]
      break;
 80019a6:	e00d      	b.n	80019c4 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 f9d4 	bl	8001d58 <OC5Config>
 80019b0:	4603      	mov	r3, r0
 80019b2:	75fb      	strb	r3, [r7, #23]
      break;
 80019b4:	e006      	b.n	80019c4 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f000 fa25 	bl	8001e08 <OC6Config>
 80019be:	4603      	mov	r3, r0
 80019c0:	75fb      	strb	r3, [r7, #23]
      break;
 80019c2:	bf00      	nop
  }

  return result;
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	f023 0201 	bic.w	r2, r3, #1
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f023 0303 	bic.w	r3, r3, #3
 80019fe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f023 0202 	bic.w	r2, r3, #2
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f023 0201 	bic.w	r2, r3, #1
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <OC1Config+0xdc>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d007      	beq.n	8001a46 <OC1Config+0x76>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a1d      	ldr	r2, [pc, #116]	; (8001ab0 <OC1Config+0xe0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d003      	beq.n	8001a46 <OC1Config+0x76>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a1c      	ldr	r2, [pc, #112]	; (8001ab4 <OC1Config+0xe4>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d11e      	bne.n	8001a84 <OC1Config+0xb4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f023 0208 	bic.w	r2, r3, #8
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4313      	orrs	r3, r2
 8001a54:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f023 0204 	bic.w	r2, r3, #4
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4313      	orrs	r3, r2
 8001a64:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4619      	mov	r1, r3
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fe43 	bl	8001722 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001aa2:	2301      	movs	r3, #1
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40012c00 	.word	0x40012c00
 8001ab0:	40014000 	.word	0x40014000
 8001ab4:	40014400 	.word	0x40014400

08001ab8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	f023 0210 	bic.w	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	0212      	lsls	r2, r2, #8
 8001af8:	4313      	orrs	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f023 0220 	bic.w	r2, r3, #32
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f023 0210 	bic.w	r2, r3, #16
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a1f      	ldr	r2, [pc, #124]	; (8001b9c <OC2Config+0xe4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d007      	beq.n	8001b34 <OC2Config+0x7c>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a1e      	ldr	r2, [pc, #120]	; (8001ba0 <OC2Config+0xe8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d003      	beq.n	8001b34 <OC2Config+0x7c>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ba4 <OC2Config+0xec>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d11f      	bne.n	8001b74 <OC2Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	019b      	lsls	r3, r3, #6
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	019b      	lsls	r3, r3, #6
 8001b50:	4313      	orrs	r3, r2
 8001b52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4313      	orrs	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	4619      	mov	r1, r3
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff fdd9 	bl	800173e <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40012c00 	.word	0x40012c00
 8001ba0:	40014000 	.word	0x40014000
 8001ba4:	40014400 	.word	0x40014400

08001ba8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f023 0303 	bic.w	r3, r3, #3
 8001bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	4313      	orrs	r3, r2
 8001c08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a1f      	ldr	r2, [pc, #124]	; (8001c8c <OC3Config+0xe4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d007      	beq.n	8001c22 <OC3Config+0x7a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a1e      	ldr	r2, [pc, #120]	; (8001c90 <OC3Config+0xe8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d003      	beq.n	8001c22 <OC3Config+0x7a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a1d      	ldr	r2, [pc, #116]	; (8001c94 <OC3Config+0xec>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d11f      	bne.n	8001c62 <OC3Config+0xba>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	029b      	lsls	r3, r3, #10
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	029b      	lsls	r3, r3, #10
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	015b      	lsls	r3, r3, #5
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	4619      	mov	r1, r3
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff fd70 	bl	800175a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001c80:	2301      	movs	r3, #1
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40012c00 	.word	0x40012c00
 8001c90:	40014000 	.word	0x40014000
 8001c94:	40014400 	.word	0x40014400

08001c98 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	6812      	ldr	r2, [r2, #0]
 8001cd6:	0212      	lsls	r2, r2, #8
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	031b      	lsls	r3, r3, #12
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	031b      	lsls	r3, r3, #12
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a13      	ldr	r2, [pc, #76]	; (8001d4c <OC4Config+0xb4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d007      	beq.n	8001d14 <OC4Config+0x7c>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <OC4Config+0xb8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d003      	beq.n	8001d14 <OC4Config+0x7c>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a11      	ldr	r2, [pc, #68]	; (8001d54 <OC4Config+0xbc>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d107      	bne.n	8001d24 <OC4Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	019b      	lsls	r3, r3, #6
 8001d20:	4313      	orrs	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4619      	mov	r1, r3
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff fd1d 	bl	8001776 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001d42:	2301      	movs	r3, #1
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40012c00 	.word	0x40012c00
 8001d50:	40014000 	.word	0x40014000
 8001d54:	40014400 	.word	0x40014400

08001d58 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d78:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	041b      	lsls	r3, r3, #16
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	041b      	lsls	r3, r3, #16
 8001da8:	4313      	orrs	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a13      	ldr	r2, [pc, #76]	; (8001dfc <OC5Config+0xa4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d007      	beq.n	8001dc4 <OC5Config+0x6c>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <OC5Config+0xa8>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d003      	beq.n	8001dc4 <OC5Config+0x6c>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a11      	ldr	r2, [pc, #68]	; (8001e04 <OC5Config+0xac>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d109      	bne.n	8001dd8 <OC5Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	4619      	mov	r1, r3
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fcd4 	bl	8001792 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001df0:	2301      	movs	r3, #1
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40012c00 	.word	0x40012c00
 8001e00:	40014000 	.word	0x40014000
 8001e04:	40014400 	.word	0x40014400

08001e08 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e28:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	0212      	lsls	r2, r2, #8
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	051b      	lsls	r3, r3, #20
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	051b      	lsls	r3, r3, #20
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a12      	ldr	r2, [pc, #72]	; (8001eac <OC6Config+0xa4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d007      	beq.n	8001e76 <OC6Config+0x6e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a11      	ldr	r2, [pc, #68]	; (8001eb0 <OC6Config+0xa8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d003      	beq.n	8001e76 <OC6Config+0x6e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a10      	ldr	r2, [pc, #64]	; (8001eb4 <OC6Config+0xac>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d109      	bne.n	8001e8a <OC6Config+0x82>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	029b      	lsls	r3, r3, #10
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	4619      	mov	r1, r3
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff fc89 	bl	80017ae <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001ea2:	2301      	movs	r3, #1
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40012c00 	.word	0x40012c00
 8001eb0:	40014000 	.word	0x40014000
 8001eb4:	40014400 	.word	0x40014400

08001eb8 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	bf0c      	ite	eq
 8001ecc:	2301      	moveq	r3, #1
 8001ece:	2300      	movne	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	605a      	str	r2, [r3, #4]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif
{
 8001f2a:	b4b0      	push	{r4, r5, r7}
 8001f2c:	b085      	sub	sp, #20
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 8001f38:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 8001f3a:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f42:	d114      	bne.n	8001f6e <LL_USART_SetBaudRate+0x44>
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	005a      	lsls	r2, r3, #1
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	085b      	lsrs	r3, r3, #1
 8001f4c:	441a      	add	r2, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	461d      	mov	r5, r3
#endif
    brrtemp = usartdiv & 0xFFF0U;
 8001f58:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8001f5c:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f5e:	086b      	lsrs	r3, r5, #1
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	60dc      	str	r4, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif
  }
}
 8001f6c:	e00a      	b.n	8001f84 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	085a      	lsrs	r2, r3, #1
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	441a      	add	r2, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	60da      	str	r2, [r3, #12]
}
 8001f84:	bf00      	nop
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bcb0      	pop	{r4, r5, r7}
 8001f8c:	4770      	bx	lr
	...

08001f90 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ff88 	bl	8001eb8 <LL_USART_IsEnabled>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d151      	bne.n	8002052 <LL_USART_Init+0xc2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	4b2a      	ldr	r3, [pc, #168]	; (800205c <LL_USART_Init+0xcc>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	6851      	ldr	r1, [r2, #4]
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	68d2      	ldr	r2, [r2, #12]
 8001fbe:	4311      	orrs	r1, r2
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	6912      	ldr	r2, [r2, #16]
 8001fc4:	4311      	orrs	r1, r2
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	6992      	ldr	r2, [r2, #24]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ff80 	bl	8001ede <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ff8d 	bl	8001f04 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a1c      	ldr	r2, [pc, #112]	; (8002060 <LL_USART_Init+0xd0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d104      	bne.n	8001ffc <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001ff2:	2003      	movs	r0, #3
 8001ff4:	f7ff f8a4 	bl	8001140 <LL_RCC_GetUSARTClockFreq>
 8001ff8:	60b8      	str	r0, [r7, #8]
 8001ffa:	e019      	b.n	8002030 <LL_USART_Init+0xa0>
    }
    else if (USARTx == USART2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a19      	ldr	r2, [pc, #100]	; (8002064 <LL_USART_Init+0xd4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d104      	bne.n	800200e <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002004:	200c      	movs	r0, #12
 8002006:	f7ff f89b 	bl	8001140 <LL_RCC_GetUSARTClockFreq>
 800200a:	60b8      	str	r0, [r7, #8]
 800200c:	e010      	b.n	8002030 <LL_USART_Init+0xa0>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a15      	ldr	r2, [pc, #84]	; (8002068 <LL_USART_Init+0xd8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d104      	bne.n	8002020 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8002016:	2030      	movs	r0, #48	; 0x30
 8002018:	f7ff f892 	bl	8001140 <LL_RCC_GetUSARTClockFreq>
 800201c:	60b8      	str	r0, [r7, #8]
 800201e:	e007      	b.n	8002030 <LL_USART_Init+0xa0>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a12      	ldr	r2, [pc, #72]	; (800206c <LL_USART_Init+0xdc>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d103      	bne.n	8002030 <LL_USART_Init+0xa0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8002028:	20c0      	movs	r0, #192	; 0xc0
 800202a:	f7ff f943 	bl	80012b4 <LL_RCC_GetUARTClockFreq>
 800202e:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00d      	beq.n	8002052 <LL_USART_Init+0xc2>
        && (USART_InitStruct->BaudRate != 0U))
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d009      	beq.n	8002052 <LL_USART_Init+0xc2>
    {
      status = SUCCESS;
 800203e:	2301      	movs	r3, #1
 8002040:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	699a      	ldr	r2, [r3, #24]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68b9      	ldr	r1, [r7, #8]
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ff6c 	bl	8001f2a <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002052:	7bfb      	ldrb	r3, [r7, #15]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	efff69f3 	.word	0xefff69f3
 8002060:	40013800 	.word	0x40013800
 8002064:	40004400 	.word	0x40004400
 8002068:	40004800 	.word	0x40004800
 800206c:	40004c00 	.word	0x40004c00

08002070 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800207a:	4909      	ldr	r1, [pc, #36]	; (80020a0 <LL_InitTick+0x30>)
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	fbb2 f3f3 	udiv	r3, r2, r3
 8002084:	3b01      	subs	r3, #1
 8002086:	604b      	str	r3, [r1, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <LL_InitTick+0x30>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208e:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <LL_InitTick+0x30>)
 8002090:	2205      	movs	r2, #5
 8002092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000e010 	.word	0xe000e010

080020a4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80020ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ffdd 	bl	8002070 <LL_InitTick>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80020c8:	4a04      	ldr	r2, [pc, #16]	; (80020dc <LL_SetSystemCoreClock+0x1c>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6013      	str	r3, [r2, #0]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	2000000c 	.word	0x2000000c

080020e0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <NVIC_SetPriorityGrouping+0x44>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020fc:	4013      	ands	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800210c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002112:	4a04      	ldr	r2, [pc, #16]	; (8002124 <NVIC_SetPriorityGrouping+0x44>)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	60d3      	str	r3, [r2, #12]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800212c:	4b04      	ldr	r3, [pc, #16]	; (8002140 <NVIC_GetPriorityGrouping+0x18>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	0a1b      	lsrs	r3, r3, #8
 8002132:	f003 0307 	and.w	r3, r3, #7
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800214e:	4909      	ldr	r1, [pc, #36]	; (8002174 <NVIC_EnableIRQ+0x30>)
 8002150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002154:	095b      	lsrs	r3, r3, #5
 8002156:	79fa      	ldrb	r2, [r7, #7]
 8002158:	f002 021f 	and.w	r2, r2, #31
 800215c:	2001      	movs	r0, #1
 800215e:	fa00 f202 	lsl.w	r2, r0, r2
 8002162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000e100 	.word	0xe000e100

08002178 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	2b00      	cmp	r3, #0
 800218a:	da0b      	bge.n	80021a4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218c:	490d      	ldr	r1, [pc, #52]	; (80021c4 <NVIC_SetPriority+0x4c>)
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	3b04      	subs	r3, #4
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	0112      	lsls	r2, r2, #4
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	440b      	add	r3, r1
 80021a0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a2:	e009      	b.n	80021b8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a4:	4908      	ldr	r1, [pc, #32]	; (80021c8 <NVIC_SetPriority+0x50>)
 80021a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	0112      	lsls	r2, r2, #4
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	440b      	add	r3, r1
 80021b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000ed00 	.word	0xe000ed00
 80021c8:	e000e100 	.word	0xe000e100

080021cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	; 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f1c3 0307 	rsb	r3, r3, #7
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	bf28      	it	cs
 80021ea:	2304      	movcs	r3, #4
 80021ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3304      	adds	r3, #4
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d902      	bls.n	80021fc <NVIC_EncodePriority+0x30>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3b03      	subs	r3, #3
 80021fa:	e000      	b.n	80021fe <NVIC_EncodePriority+0x32>
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	2201      	movs	r2, #1
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	1e5a      	subs	r2, r3, #1
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	401a      	ands	r2, r3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002212:	2101      	movs	r1, #1
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	1e59      	subs	r1, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	4313      	orrs	r3, r2
         );
}
 8002222:	4618      	mov	r0, r3
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002230:	b490      	push	{r4, r7}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800223a:	4c11      	ldr	r4, [pc, #68]	; (8002280 <LL_SYSCFG_SetEXTISource+0x50>)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	490f      	ldr	r1, [pc, #60]	; (8002280 <LL_SYSCFG_SetEXTISource+0x50>)
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	3202      	adds	r2, #2
 8002248:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	0c12      	lsrs	r2, r2, #16
 8002250:	43d2      	mvns	r2, r2
 8002252:	4011      	ands	r1, r2
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	0c12      	lsrs	r2, r2, #16
 8002258:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	fa92 f2a2 	rbit	r2, r2
 8002260:	60ba      	str	r2, [r7, #8]
  return(result);
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	fab2 f282 	clz	r2, r2
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	fa00 f202 	lsl.w	r2, r0, r2
 800226e:	430a      	orrs	r2, r1
 8002270:	3302      	adds	r3, #2
 8002272:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bc90      	pop	{r4, r7}
 800227e:	4770      	bx	lr
 8002280:	40010000 	.word	0x40010000

08002284 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800228c:	4906      	ldr	r1, [pc, #24]	; (80022a8 <LL_FLASH_SetLatency+0x24>)
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <LL_FLASH_SetLatency+0x24>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 0207 	bic.w	r2, r3, #7
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4313      	orrs	r3, r2
 800229a:	600b      	str	r3, [r1, #0]
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40022000 	.word	0x40022000

080022ac <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <LL_FLASH_GetLatency+0x18>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0307 	and.w	r3, r3, #7
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40022000 	.word	0x40022000

080022c8 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d106      	bne.n	80022e4 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80022d6:	4a09      	ldr	r2, [pc, #36]	; (80022fc <LL_SYSTICK_SetClkSource+0x34>)
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <LL_SYSTICK_SetClkSource+0x34>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f043 0304 	orr.w	r3, r3, #4
 80022e0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80022e2:	e005      	b.n	80022f0 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80022e4:	4a05      	ldr	r2, [pc, #20]	; (80022fc <LL_SYSTICK_SetClkSource+0x34>)
 80022e6:	4b05      	ldr	r3, [pc, #20]	; (80022fc <LL_SYSTICK_SetClkSource+0x34>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 0304 	bic.w	r3, r3, #4
 80022ee:	6013      	str	r3, [r2, #0]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000e010 	.word	0xe000e010

08002300 <LL_RCC_HSE_EnableBypass>:
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002304:	4a05      	ldr	r2, [pc, #20]	; (800231c <LL_RCC_HSE_EnableBypass+0x1c>)
 8002306:	4b05      	ldr	r3, [pc, #20]	; (800231c <LL_RCC_HSE_EnableBypass+0x1c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800230e:	6013      	str	r3, [r2, #0]
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000

08002320 <LL_RCC_HSE_Enable>:
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002324:	4a05      	ldr	r2, [pc, #20]	; (800233c <LL_RCC_HSE_Enable+0x1c>)
 8002326:	4b05      	ldr	r3, [pc, #20]	; (800233c <LL_RCC_HSE_Enable+0x1c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232e:	6013      	str	r3, [r2, #0]
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000

08002340 <LL_RCC_HSE_IsReady>:
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8002344:	4b07      	ldr	r3, [pc, #28]	; (8002364 <LL_RCC_HSE_IsReady+0x24>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002350:	bf0c      	ite	eq
 8002352:	2301      	moveq	r3, #1
 8002354:	2300      	movne	r3, #0
 8002356:	b2db      	uxtb	r3, r3
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40021000 	.word	0x40021000

08002368 <LL_RCC_LSI_Enable>:
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800236c:	4a06      	ldr	r2, [pc, #24]	; (8002388 <LL_RCC_LSI_Enable+0x20>)
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <LL_RCC_LSI_Enable+0x20>)
 8002370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000

0800238c <LL_RCC_LSI_IsReady>:
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <LL_RCC_LSI_IsReady+0x24>)
 8002392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b02      	cmp	r3, #2
 800239c:	bf0c      	ite	eq
 800239e:	2301      	moveq	r3, #1
 80023a0:	2300      	movne	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000

080023b4 <LL_RCC_SetSysClkSource>:
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80023bc:	4906      	ldr	r1, [pc, #24]	; (80023d8 <LL_RCC_SetSysClkSource+0x24>)
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <LL_RCC_SetSysClkSource+0x24>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f023 0203 	bic.w	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	608b      	str	r3, [r1, #8]
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	40021000 	.word	0x40021000

080023dc <LL_RCC_GetSysClkSource>:
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <LL_RCC_GetSysClkSource+0x18>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 030c 	and.w	r3, r3, #12
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000

080023f8 <LL_RCC_SetAHBPrescaler>:
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002400:	4906      	ldr	r1, [pc, #24]	; (800241c <LL_RCC_SetAHBPrescaler+0x24>)
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <LL_RCC_SetAHBPrescaler+0x24>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4313      	orrs	r3, r2
 800240e:	608b      	str	r3, [r1, #8]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	40021000 	.word	0x40021000

08002420 <LL_RCC_SetAPB1Prescaler>:
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002428:	4906      	ldr	r1, [pc, #24]	; (8002444 <LL_RCC_SetAPB1Prescaler+0x24>)
 800242a:	4b06      	ldr	r3, [pc, #24]	; (8002444 <LL_RCC_SetAPB1Prescaler+0x24>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4313      	orrs	r3, r2
 8002436:	608b      	str	r3, [r1, #8]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	40021000 	.word	0x40021000

08002448 <LL_RCC_SetAPB2Prescaler>:
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002450:	4906      	ldr	r1, [pc, #24]	; (800246c <LL_RCC_SetAPB2Prescaler+0x24>)
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <LL_RCC_SetAPB2Prescaler+0x24>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4313      	orrs	r3, r2
 800245e:	608b      	str	r3, [r1, #8]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	40021000 	.word	0x40021000

08002470 <LL_RCC_SetUSARTClockSource>:
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFF));
 8002478:	4909      	ldr	r1, [pc, #36]	; (80024a0 <LL_RCC_SetUSARTClockSource+0x30>)
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <LL_RCC_SetUSARTClockSource+0x30>)
 800247c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	0c1b      	lsrs	r3, r3, #16
 8002484:	43db      	mvns	r3, r3
 8002486:	401a      	ands	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	b29b      	uxth	r3, r3
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000

080024a4 <LL_RCC_SetI2CClockSource>:
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	0e1a      	lsrs	r2, r3, #24
 80024b0:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <LL_RCC_SetI2CClockSource+0x48>)
 80024b2:	4413      	add	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3U << ((I2CxSource & 0x00FF0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x00FF0000U) >> 16U)));
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	0c1b      	lsrs	r3, r3, #16
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2103      	movs	r1, #3
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	401a      	ands	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	b2d9      	uxtb	r1, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	0c1b      	lsrs	r3, r3, #16
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	fa01 f303 	lsl.w	r3, r1, r3
 80024d8:	431a      	orrs	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	601a      	str	r2, [r3, #0]
}
 80024de:	bf00      	nop
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40021088 	.word	0x40021088

080024f0 <LL_RCC_PLL_Enable>:
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80024f4:	4a05      	ldr	r2, [pc, #20]	; (800250c <LL_RCC_PLL_Enable+0x1c>)
 80024f6:	4b05      	ldr	r3, [pc, #20]	; (800250c <LL_RCC_PLL_Enable+0x1c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000

08002510 <LL_RCC_PLL_IsReady>:
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8002514:	4b07      	ldr	r3, [pc, #28]	; (8002534 <LL_RCC_PLL_IsReady+0x24>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002520:	bf0c      	ite	eq
 8002522:	2301      	moveq	r3, #1
 8002524:	2300      	movne	r3, #0
 8002526:	b2db      	uxtb	r3, r3
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000

08002538 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8002546:	480a      	ldr	r0, [pc, #40]	; (8002570 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8002548:	4b09      	ldr	r3, [pc, #36]	; (8002570 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	4b09      	ldr	r3, [pc, #36]	; (8002574 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800254e:	4013      	ands	r3, r2
 8002550:	68f9      	ldr	r1, [r7, #12]
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	4311      	orrs	r1, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	0212      	lsls	r2, r2, #8
 800255a:	4311      	orrs	r1, r2
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	4313      	orrs	r3, r2
 8002562:	60c3      	str	r3, [r0, #12]
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	40021000 	.word	0x40021000
 8002574:	f9ff808c 	.word	0xf9ff808c

08002578 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800257c:	4a05      	ldr	r2, [pc, #20]	; (8002594 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800257e:	4b05      	ldr	r3, [pc, #20]	; (8002594 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002586:	60d3      	str	r3, [r2, #12]
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000

08002598 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80025a0:	4906      	ldr	r1, [pc, #24]	; (80025bc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	40007000 	.word	0x40007000

080025c0 <LL_I2C_Enable>:
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f043 0201 	orr.w	r2, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	601a      	str	r2, [r3, #0]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <LL_I2C_EnableClockStretching>:
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	601a      	str	r2, [r3, #0]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <LL_I2C_DisableGeneralCall>:
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	601a      	str	r2, [r3, #0]
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_I2C_SetOwnAddress2>:
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002634:	f023 0306 	bic.w	r3, r3, #6
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	430a      	orrs	r2, r1
 800263e:	431a      	orrs	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	60da      	str	r2, [r3, #12]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_I2C_DisableOwnAddress2>:
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	60da      	str	r2, [r3, #12]
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <LL_I2C_EnableAutoEndMode>:
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	605a      	str	r2, [r3, #4]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002698:	4908      	ldr	r1, [pc, #32]	; (80026bc <LL_AHB2_GRP1_EnableClock+0x2c>)
 800269a:	4b08      	ldr	r3, [pc, #32]	; (80026bc <LL_AHB2_GRP1_EnableClock+0x2c>)
 800269c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80026a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4013      	ands	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026ae:	68fb      	ldr	r3, [r7, #12]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	40021000 	.word	0x40021000

080026c0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80026c8:	4908      	ldr	r1, [pc, #32]	; (80026ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80026ca:	4b08      	ldr	r3, [pc, #32]	; (80026ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80026cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80026d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4013      	ands	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026de:	68fb      	ldr	r3, [r7, #12]
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	40021000 	.word	0x40021000

080026f0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80026f8:	4908      	ldr	r1, [pc, #32]	; (800271c <LL_APB2_GRP1_EnableClock+0x2c>)
 80026fa:	4b08      	ldr	r3, [pc, #32]	; (800271c <LL_APB2_GRP1_EnableClock+0x2c>)
 80026fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4313      	orrs	r3, r2
 8002702:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002706:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4013      	ands	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800270e:	68fb      	ldr	r3, [r7, #12]
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40021000 	.word	0x40021000

08002720 <LL_EXTI_DisableIT_0_31>:
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002728:	4906      	ldr	r1, [pc, #24]	; (8002744 <LL_EXTI_DisableIT_0_31+0x24>)
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <LL_EXTI_DisableIT_0_31+0x24>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	43db      	mvns	r3, r3
 8002732:	4013      	ands	r3, r2
 8002734:	600b      	str	r3, [r1, #0]
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40010400 	.word	0x40010400

08002748 <LL_SPI_Enable>:
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	601a      	str	r2, [r3, #0]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <LL_SPI_Disable>:
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	601a      	str	r2, [r3, #0]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <LL_SPI_SetStandard>:
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f023 0210 	bic.w	r2, r3, #16
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	605a      	str	r2, [r3, #4]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f043 0208 	orr.w	r2, r3, #8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	605a      	str	r2, [r3, #4]
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <LL_GPIO_SetPinMode>:
{
 80027ce:	b480      	push	{r7}
 80027d0:	b089      	sub	sp, #36	; 0x24
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	fa93 f3a3 	rbit	r3, r3
 80027e8:	613b      	str	r3, [r7, #16]
  return(result);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	2103      	movs	r1, #3
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	401a      	ands	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	61bb      	str	r3, [r7, #24]
  return(result);
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	fa01 f303 	lsl.w	r3, r1, r3
 8002816:	431a      	orrs	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	601a      	str	r2, [r3, #0]
}
 800281c:	bf00      	nop
 800281e:	3724      	adds	r7, #36	; 0x24
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <LL_GPIO_SetPinPull>:
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	; 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	613b      	str	r3, [r7, #16]
  return(result);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	2103      	movs	r1, #3
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	401a      	ands	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	61bb      	str	r3, [r7, #24]
  return(result);
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	fab3 f383 	clz	r3, r3
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	431a      	orrs	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	60da      	str	r2, [r3, #12]
}
 8002876:	bf00      	nop
 8002878:	3724      	adds	r7, #36	; 0x24
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	619a      	str	r2, [r3, #24]
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LL_TIM_EnableCounter>:
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f043 0201 	orr.w	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	601a      	str	r2, [r3, #0]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <LL_TIM_OC_EnablePreload>:
{
 80028dc:	b4b0      	push	{r4, r5, r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d028      	beq.n	800293e <LL_TIM_OC_EnablePreload+0x62>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d023      	beq.n	800293a <LL_TIM_OC_EnablePreload+0x5e>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b10      	cmp	r3, #16
 80028f6:	d01e      	beq.n	8002936 <LL_TIM_OC_EnablePreload+0x5a>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2b40      	cmp	r3, #64	; 0x40
 80028fc:	d019      	beq.n	8002932 <LL_TIM_OC_EnablePreload+0x56>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002904:	d013      	beq.n	800292e <LL_TIM_OC_EnablePreload+0x52>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800290c:	d00d      	beq.n	800292a <LL_TIM_OC_EnablePreload+0x4e>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002914:	d007      	beq.n	8002926 <LL_TIM_OC_EnablePreload+0x4a>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291c:	d101      	bne.n	8002922 <LL_TIM_OC_EnablePreload+0x46>
 800291e:	2307      	movs	r3, #7
 8002920:	e00e      	b.n	8002940 <LL_TIM_OC_EnablePreload+0x64>
 8002922:	2308      	movs	r3, #8
 8002924:	e00c      	b.n	8002940 <LL_TIM_OC_EnablePreload+0x64>
 8002926:	2306      	movs	r3, #6
 8002928:	e00a      	b.n	8002940 <LL_TIM_OC_EnablePreload+0x64>
 800292a:	2305      	movs	r3, #5
 800292c:	e008      	b.n	8002940 <LL_TIM_OC_EnablePreload+0x64>
 800292e:	2304      	movs	r3, #4
 8002930:	e006      	b.n	8002940 <LL_TIM_OC_EnablePreload+0x64>
 8002932:	2303      	movs	r3, #3
 8002934:	e004      	b.n	8002940 <LL_TIM_OC_EnablePreload+0x64>
 8002936:	2302      	movs	r3, #2
 8002938:	e002      	b.n	8002940 <LL_TIM_OC_EnablePreload+0x64>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <LL_TIM_OC_EnablePreload+0x64>
 800293e:	2300      	movs	r3, #0
 8002940:	461d      	mov	r5, r3
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3318      	adds	r3, #24
 8002946:	461a      	mov	r2, r3
 8002948:	4629      	mov	r1, r5
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <LL_TIM_OC_EnablePreload+0x94>)
 800294c:	5c5b      	ldrb	r3, [r3, r1]
 800294e:	4413      	add	r3, r2
 8002950:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002952:	6822      	ldr	r2, [r4, #0]
 8002954:	4629      	mov	r1, r5
 8002956:	4b07      	ldr	r3, [pc, #28]	; (8002974 <LL_TIM_OC_EnablePreload+0x98>)
 8002958:	5c5b      	ldrb	r3, [r3, r1]
 800295a:	4619      	mov	r1, r3
 800295c:	2308      	movs	r3, #8
 800295e:	408b      	lsls	r3, r1
 8002960:	4313      	orrs	r3, r2
 8002962:	6023      	str	r3, [r4, #0]
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bcb0      	pop	{r4, r5, r7}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	08005804 	.word	0x08005804
 8002974:	08005810 	.word	0x08005810

08002978 <LL_TIM_SetClockSource>:
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800298a:	f023 0307 	bic.w	r3, r3, #7
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	609a      	str	r2, [r3, #8]
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <LL_USART_Enable>:
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f043 0201 	orr.w	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	601a      	str	r2, [r3, #0]
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <LL_USART_SetTXRXSwap>:
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	605a      	str	r2, [r3, #4]
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	609a      	str	r2, [r3, #8]
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f043 0220 	orr.w	r2, r3, #32
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	601a      	str	r2, [r3, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_Init>:

//#include "stm32l4xx_ll_dma.h"



void LL_Init(void){
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002a38:	2001      	movs	r0, #1
 8002a3a:	f7ff fe59 	bl	80026f0 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002a3e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002a42:	f7ff fe3d 	bl	80026c0 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a46:	2003      	movs	r0, #3
 8002a48:	f7ff fb4a 	bl	80020e0 <NVIC_SetPriorityGrouping>

	/* System interrupt init*/
	/* MemoryManagement_IRQn interrupt configuration */
	NVIC_SetPriority(MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002a4c:	f7ff fb6c 	bl	8002128 <NVIC_GetPriorityGrouping>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2200      	movs	r2, #0
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fbb8 	bl	80021cc <NVIC_EncodePriority>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f06f 000b 	mvn.w	r0, #11
 8002a64:	f7ff fb88 	bl	8002178 <NVIC_SetPriority>
	/* BusFault_IRQn interrupt configuration */
	NVIC_SetPriority(BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002a68:	f7ff fb5e 	bl	8002128 <NVIC_GetPriorityGrouping>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fbaa 	bl	80021cc <NVIC_EncodePriority>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f06f 000a 	mvn.w	r0, #10
 8002a80:	f7ff fb7a 	bl	8002178 <NVIC_SetPriority>
	/* UsageFault_IRQn interrupt configuration */
	NVIC_SetPriority(UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002a84:	f7ff fb50 	bl	8002128 <NVIC_GetPriorityGrouping>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fb9c 	bl	80021cc <NVIC_EncodePriority>
 8002a94:	4603      	mov	r3, r0
 8002a96:	4619      	mov	r1, r3
 8002a98:	f06f 0009 	mvn.w	r0, #9
 8002a9c:	f7ff fb6c 	bl	8002178 <NVIC_SetPriority>
	/* SVCall_IRQn interrupt configuration */
	NVIC_SetPriority(SVCall_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002aa0:	f7ff fb42 	bl	8002128 <NVIC_GetPriorityGrouping>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fb8e 	bl	80021cc <NVIC_EncodePriority>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f06f 0004 	mvn.w	r0, #4
 8002ab8:	f7ff fb5e 	bl	8002178 <NVIC_SetPriority>
	/* DebugMonitor_IRQn interrupt configuration */
	NVIC_SetPriority(DebugMonitor_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002abc:	f7ff fb34 	bl	8002128 <NVIC_GetPriorityGrouping>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fb80 	bl	80021cc <NVIC_EncodePriority>
 8002acc:	4603      	mov	r3, r0
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f06f 0003 	mvn.w	r0, #3
 8002ad4:	f7ff fb50 	bl	8002178 <NVIC_SetPriority>
	/* PendSV_IRQn interrupt configuration */
	NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002ad8:	f7ff fb26 	bl	8002128 <NVIC_GetPriorityGrouping>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fb72 	bl	80021cc <NVIC_EncodePriority>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4619      	mov	r1, r3
 8002aec:	f06f 0001 	mvn.w	r0, #1
 8002af0:	f7ff fb42 	bl	8002178 <NVIC_SetPriority>
	/* SysTick_IRQn interrupt configuration */
	//NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
}
 8002af4:	bf00      	nop
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void){
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0

	LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8002afc:	2004      	movs	r0, #4
 8002afe:	f7ff fbc1 	bl	8002284 <LL_FLASH_SetLatency>

	if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4){
 8002b02:	f7ff fbd3 	bl	80022ac <LL_FLASH_GetLatency>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d003      	beq.n	8002b14 <SystemClock_Config+0x1c>
		Error_Handler();
 8002b0c:	2146      	movs	r1, #70	; 0x46
 8002b0e:	482d      	ldr	r0, [pc, #180]	; (8002bc4 <SystemClock_Config+0xcc>)
 8002b10:	f000 fbb2 	bl	8003278 <_Error_Handler>
	}

	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8002b14:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b18:	f7ff fd3e 	bl	8002598 <LL_PWR_SetRegulVoltageScaling>

  	//Enable HSE
  	LL_RCC_HSE_EnableBypass();
 8002b1c:	f7ff fbf0 	bl	8002300 <LL_RCC_HSE_EnableBypass>
  	LL_RCC_HSE_Enable();
 8002b20:	f7ff fbfe 	bl	8002320 <LL_RCC_HSE_Enable>
   	// Wait till HSE is ready
  	while(LL_RCC_HSE_IsReady() != 1);
 8002b24:	bf00      	nop
 8002b26:	f7ff fc0b 	bl	8002340 <LL_RCC_HSE_IsReady>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d1fa      	bne.n	8002b26 <SystemClock_Config+0x2e>
	while(LL_RCC_HSI_IsReady() != 1);
	//LL_RCC_HSI_SetCalibTrimming(16);//not need to do this
    */

	// Enable LSI
	LL_RCC_LSI_Enable();
 8002b30:	f7ff fc1a 	bl	8002368 <LL_RCC_LSI_Enable>

	/* Wait till LSI is ready */
	while(LL_RCC_LSI_IsReady() != 1);
 8002b34:	bf00      	nop
 8002b36:	f7ff fc29 	bl	800238c <LL_RCC_LSI_IsReady>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d1fa      	bne.n	8002b36 <SystemClock_Config+0x3e>

	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_1, 10, LL_RCC_PLLR_DIV_2); // LL_RCC_PLLSOURCE_HSE
 8002b40:	2300      	movs	r3, #0
 8002b42:	220a      	movs	r2, #10
 8002b44:	2100      	movs	r1, #0
 8002b46:	2003      	movs	r0, #3
 8002b48:	f7ff fcf6 	bl	8002538 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 8002b4c:	f7ff fcd0 	bl	80024f0 <LL_RCC_PLL_Enable>
	LL_RCC_PLL_EnableDomain_SYS();
 8002b50:	f7ff fd12 	bl	8002578 <LL_RCC_PLL_EnableDomain_SYS>

	/* Wait till PLL is ready */
	while(LL_RCC_PLL_IsReady() != 1);
 8002b54:	bf00      	nop
 8002b56:	f7ff fcdb 	bl	8002510 <LL_RCC_PLL_IsReady>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d1fa      	bne.n	8002b56 <SystemClock_Config+0x5e>

	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8002b60:	2003      	movs	r0, #3
 8002b62:	f7ff fc27 	bl	80023b4 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002b66:	bf00      	nop
 8002b68:	f7ff fc38 	bl	80023dc <LL_RCC_GetSysClkSource>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b0c      	cmp	r3, #12
 8002b70:	d1fa      	bne.n	8002b68 <SystemClock_Config+0x70>

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002b72:	2000      	movs	r0, #0
 8002b74:	f7ff fc40 	bl	80023f8 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7ff fc51 	bl	8002420 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f7ff fc62 	bl	8002448 <LL_RCC_SetAPB2Prescaler>
	LL_Init1msTick(80000000);
 8002b84:	4810      	ldr	r0, [pc, #64]	; (8002bc8 <SystemClock_Config+0xd0>)
 8002b86:	f7ff fa8d 	bl	80020a4 <LL_Init1msTick>
	LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8002b8a:	2004      	movs	r0, #4
 8002b8c:	f7ff fb9c 	bl	80022c8 <LL_SYSTICK_SetClkSource>
	LL_SetSystemCoreClock(80000000);
 8002b90:	480d      	ldr	r0, [pc, #52]	; (8002bc8 <SystemClock_Config+0xd0>)
 8002b92:	f7ff fa95 	bl	80020c0 <LL_SetSystemCoreClock>

  /* Setup clock source for USART1 and I2C */
	LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_SYSCLK);
 8002b96:	480d      	ldr	r0, [pc, #52]	; (8002bcc <SystemClock_Config+0xd4>)
 8002b98:	f7ff fc6a 	bl	8002470 <LL_RCC_SetUSARTClockSource>
	LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_SYSCLK);
 8002b9c:	480c      	ldr	r0, [pc, #48]	; (8002bd0 <SystemClock_Config+0xd8>)
 8002b9e:	f7ff fc81 	bl	80024a4 <LL_RCC_SetI2CClockSource>

	/* SysTick_IRQn interrupt configuration */
	NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8002ba2:	f7ff fac1 	bl	8002128 <NVIC_GetPriorityGrouping>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2200      	movs	r2, #0
 8002baa:	210f      	movs	r1, #15
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fb0d 	bl	80021cc <NVIC_EncodePriority>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bba:	f7ff fadd 	bl	8002178 <NVIC_SetPriority>
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	08005600 	.word	0x08005600
 8002bc8:	04c4b400 	.word	0x04c4b400
 8002bcc:	00030001 	.word	0x00030001
 8002bd0:	000c0001 	.word	0x000c0001

08002bd4 <SetupLED>:

/**
  * @brief  This function setup  Led on the KTIVT_SS_board.
  * @retval None
*/
void SetupLED(void){
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8002bda:	2004      	movs	r0, #4
 8002bdc:	f7ff fd58 	bl	8002690 <LL_AHB2_GRP1_EnableClock>

	 /*Configure LED_Yellow_HL1 (PC10), LED_Green_HL2 (PC11), LED_Green_HL3 (PC12) as output Push-Pull      */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8002be0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002be4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002be6:	2301      	movs	r3, #1
 8002be8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bf6:	463b      	mov	r3, r7
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4806      	ldr	r0, [pc, #24]	; (8002c14 <SetupLED+0x40>)
 8002bfc:	f7fe f858 	bl	8000cb0 <LL_GPIO_Init>

	/* Diode is off */
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12);
 8002c00:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002c04:	4803      	ldr	r0, [pc, #12]	; (8002c14 <SetupLED+0x40>)
 8002c06:	f7ff fe3c 	bl	8002882 <LL_GPIO_SetOutputPin>
	/*For ON/OFF LED need to use function:                            */
	  /*LED_Yellow_HL1_ON()       LED_Yellow_HL1_OFF()                */
	  /*LED_Green_HL2_ON()        LED_Green_HL2_OFF()                 */
	  /*LED_Green_HL3_ON()        LED_Green_HL3_OFF()                 */
	  /*Define in SetupPeriph.h                                       */
}
 8002c0a:	bf00      	nop
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	48000800 	.word	0x48000800

08002c18 <SetupGPIO>:

/**
  * @brief  This function setup GPIO to control IC on the KTIVT_SS_board.
  * @retval None
*/
void SetupGPIO(void){
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f7ff fd36 	bl	8002690 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8002c24:	2004      	movs	r0, #4
 8002c26:	f7ff fd33 	bl	8002690 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8002c2a:	2002      	movs	r0, #2
 8002c2c:	f7ff fd30 	bl	8002690 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8002c30:	2008      	movs	r0, #8
 8002c32:	f7ff fd2d 	bl	8002690 <LL_AHB2_GRP1_EnableClock>


	/* Configure pins out for control preamplifier K1. PA3=10 PA4=100 PA5=1000 for AG1411 ON=0 OFF=1    */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8002c36:	2338      	movs	r3, #56	; 0x38
 8002c38:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002c46:	2301      	movs	r3, #1
 8002c48:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4a:	463b      	mov	r3, r7
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c52:	f7fe f82d 	bl	8000cb0 <LL_GPIO_Init>
	/*off K1 */
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 8002c56:	2138      	movs	r1, #56	; 0x38
 8002c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c5c:	f7ff fe11 	bl	8002882 <LL_GPIO_SetOutputPin>
	/*Define in SetupPeriph.h                       */



	/* Configure pins in for control COMPorators COMP1=PC0, COMP2=PC1, COMP3=PA0, COMP4=PA2*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8002c60:	2303      	movs	r3, #3
 8002c62:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002c64:	2300      	movs	r3, #0
 8002c66:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c6c:	463b      	mov	r3, r7
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4844      	ldr	r0, [pc, #272]	; (8002d84 <SetupGPIO+0x16c>)
 8002c72:	f7fe f81d 	bl	8000cb0 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_2;
 8002c76:	2305      	movs	r3, #5
 8002c78:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c82:	463b      	mov	r3, r7
 8002c84:	4619      	mov	r1, r3
 8002c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c8a:	f7fe f811 	bl	8000cb0 <LL_GPIO_Init>
  /* VALUE_COMP3()                        */
  /* VALUE_COMP4()                        */
  /*Define in SetupPeriph.h               */

	/* Configure pins ???? PC8=F_SA0 PC9=F_SA1 PA8=F_SA2 for AG1411 ON=0 OFF=1 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8002c8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c92:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002c94:	2301      	movs	r3, #1
 8002c96:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ca4:	463b      	mov	r3, r7
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4836      	ldr	r0, [pc, #216]	; (8002d84 <SetupGPIO+0x16c>)
 8002caa:	f7fe f801 	bl	8000cb0 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8002cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cb2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc4:	463b      	mov	r3, r7
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ccc:	f7fd fff0 	bl	8000cb0 <LL_GPIO_Init>

	/*off F_SA*/
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_8|LL_GPIO_PIN_9);
 8002cd0:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002cd4:	482b      	ldr	r0, [pc, #172]	; (8002d84 <SetupGPIO+0x16c>)
 8002cd6:	f7ff fde2 	bl	800289e <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8002cda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ce2:	f7ff fdce 	bl	8002882 <LL_GPIO_SetOutputPin>
	/*F_SA1_Set()       F_SA1_Reset()          		*/
	/*F_SA2_Set()       F_SA2_Reset()               */
	/*Define in SetupPeriph.h                       */

	/* Configure pins for control main amplifier K2. out: PB0=G0 PB1=G1 PB2=G2 PB10=G3 PB11=G4  in: COMP4=PA2   */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8002ce6:	f640 4307 	movw	r3, #3079	; 0xc07
 8002cea:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002cec:	2301      	movs	r3, #1
 8002cee:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfc:	463b      	mov	r3, r7
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4821      	ldr	r0, [pc, #132]	; (8002d88 <SetupGPIO+0x170>)
 8002d02:	f7fd ffd5 	bl	8000cb0 <LL_GPIO_Init>

	/*off K2=1 */
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11);
 8002d06:	f640 4107 	movw	r1, #3079	; 0xc07
 8002d0a:	481f      	ldr	r0, [pc, #124]	; (8002d88 <SetupGPIO+0x170>)
 8002d0c:	f7ff fdc7 	bl	800289e <LL_GPIO_ResetOutputPin>

	/* Config COMP4*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8002d10:	2304      	movs	r3, #4
 8002d12:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002d14:	2300      	movs	r3, #0
 8002d16:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1c:	463b      	mov	r3, r7
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d24:	f7fd ffc4 	bl	8000cb0 <LL_GPIO_Init>
	/*PB10_G3_Set()     PB10_G3_Reset()             */
	/*PB11_G4_Set()     PB11_G4_Reset()             */
	/*Define in SetupPeriph.h                       */

	/*Config input pin to start manual settup */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8002d28:	2304      	movs	r3, #4
 8002d2a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002d30:	2301      	movs	r3, #1
 8002d32:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d34:	463b      	mov	r3, r7
 8002d36:	4619      	mov	r1, r3
 8002d38:	4814      	ldr	r0, [pc, #80]	; (8002d8c <SetupGPIO+0x174>)
 8002d3a:	f7fd ffb9 	bl	8000cb0 <LL_GPIO_Init>

	/* Configure pins STOP-ADC out: PB14= STOP-ADC*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8002d3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d42:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d44:	2301      	movs	r3, #1
 8002d46:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d50:	2300      	movs	r3, #0
 8002d52:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d54:	463b      	mov	r3, r7
 8002d56:	4619      	mov	r1, r3
 8002d58:	480b      	ldr	r0, [pc, #44]	; (8002d88 <SetupGPIO+0x170>)
 8002d5a:	f7fd ffa9 	bl	8000cb0 <LL_GPIO_Init>
	/*PB14_STOP_ADC_Reset()                       */
	/*Define in SetupPeriph.h                     */


	/* Configure pins MCLK+1 out: PC7= MCLK+1*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002d5e:	2380      	movs	r3, #128	; 0x80
 8002d60:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d62:	2301      	movs	r3, #1
 8002d64:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002d66:	2302      	movs	r3, #2
 8002d68:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d72:	463b      	mov	r3, r7
 8002d74:	4619      	mov	r1, r3
 8002d76:	4803      	ldr	r0, [pc, #12]	; (8002d84 <SetupGPIO+0x16c>)
 8002d78:	f7fd ff9a 	bl	8000cb0 <LL_GPIO_Init>
	/*For setup STOP-ADC need use:                */
	/*PC7_MCLK_Set()                   	      */
	/*PC7_MCLK_Reset()                	      */
	/*Define in SetupPeriph.h                     */

}
 8002d7c:	bf00      	nop
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	48000800 	.word	0x48000800
 8002d88:	48000400 	.word	0x48000400
 8002d8c:	48000c00 	.word	0x48000c00

08002d90 <USART1_Init>:

void USART1_Init(void){
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08e      	sub	sp, #56	; 0x38
 8002d94:	af00      	add	r7, sp, #0

  	LL_USART_InitTypeDef USART_InitStruct;
  	LL_GPIO_InitTypeDef GPIO_InitStruct;

  	/* Peripheral clock enable */
  	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002d96:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d9a:	f7ff fca9 	bl	80026f0 <LL_APB2_GRP1_EnableClock>
  	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002d9e:	2001      	movs	r0, #1
 8002da0:	f7ff fc76 	bl	8002690 <LL_AHB2_GRP1_EnableClock>
  
  	/**USART1 GPIO Configuration  
  	PA9   ------> USART1_TX
  	PA10   ------> USART1_RX 
  	*/
  	GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8002da4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002da8:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002daa:	2302      	movs	r3, #2
 8002dac:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002dae:	2303      	movs	r3, #3
 8002db0:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	613b      	str	r3, [r7, #16]
  	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
  	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002dba:	2307      	movs	r3, #7
 8002dbc:	61bb      	str	r3, [r7, #24]
  	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dbe:	1d3b      	adds	r3, r7, #4
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dc6:	f7fd ff73 	bl	8000cb0 <LL_GPIO_Init>
            - One Stop Bit
            - No parity
            - Hardware flow control disabled (RTS and CTS signals)
            - Receive and transmit enabled
      */
  	USART_InitStruct.BaudRate = 5000000;
 8002dca:	4b20      	ldr	r3, [pc, #128]	; (8002e4c <USART1_Init+0xbc>)
 8002dcc:	61fb      	str	r3, [r7, #28]
  	USART_InitStruct.DataWidth =  LL_USART_DATAWIDTH_9B;
 8002dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dd2:	623b      	str	r3, [r7, #32]
  	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
  	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	62bb      	str	r3, [r7, #40]	; 0x28
  	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002ddc:	230c      	movs	r3, #12
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002de0:	2300      	movs	r3, #0
 8002de2:	633b      	str	r3, [r7, #48]	; 0x30
  	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002de4:	2300      	movs	r3, #0
 8002de6:	637b      	str	r3, [r7, #52]	; 0x34
  	LL_USART_Init(USART1, &USART_InitStruct);
 8002de8:	f107 031c 	add.w	r3, r7, #28
 8002dec:	4619      	mov	r1, r3
 8002dee:	4818      	ldr	r0, [pc, #96]	; (8002e50 <USART1_Init+0xc0>)
 8002df0:	f7ff f8ce 	bl	8001f90 <LL_USART_Init>

  	LL_USART_SetTXRXSwap(USART1, LL_USART_TXRX_SWAPPED);
 8002df4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002df8:	4815      	ldr	r0, [pc, #84]	; (8002e50 <USART1_Init+0xc0>)
 8002dfa:	f7ff fde2 	bl	80029c2 <LL_USART_SetTXRXSwap>

  	LL_USART_ConfigAsyncMode(USART1); 
 8002dfe:	4814      	ldr	r0, [pc, #80]	; (8002e50 <USART1_Init+0xc0>)
 8002e00:	f7ff fdf2 	bl	80029e8 <LL_USART_ConfigAsyncMode>
  	LL_USART_Enable(USART1);
 8002e04:	4812      	ldr	r0, [pc, #72]	; (8002e50 <USART1_Init+0xc0>)
 8002e06:	f7ff fdcc 	bl	80029a2 <LL_USART_Enable>

    /* Configure pins RE and TE to control transfer data throughISO3086DW, PA11=RE PA12=DE */
    GPIO_InitStruct.Pin = LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8002e0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002e0e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e10:	2301      	movs	r3, #1
 8002e12:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	617b      	str	r3, [r7, #20]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e20:	1d3b      	adds	r3, r7, #4
 8002e22:	4619      	mov	r1, r3
 8002e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e28:	f7fd ff42 	bl	8000cb0 <LL_GPIO_Init>
    /**/
    //RE -Enable when low
    //TE - Enbale when high
    LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11); //Enable receive data
 8002e2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e34:	f7ff fd33 	bl	800289e <LL_GPIO_ResetOutputPin>
    LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_12); //Enable transmit data
 8002e38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e40:	f7ff fd1f 	bl	8002882 <LL_GPIO_SetOutputPin>

}
 8002e44:	bf00      	nop
 8002e46:	3738      	adds	r7, #56	; 0x38
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	004c4b40 	.word	0x004c4b40
 8002e50:	40013800 	.word	0x40013800

08002e54 <SPI2_Init>:
/**
  * @brief  Setup I2C.
  * @param  None
  * @retval None
*/
void SPI2_Init(void){
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b090      	sub	sp, #64	; 0x40
 8002e58:	af00      	add	r7, sp, #0

	LL_SPI_Disable(SPI2); ///Возможно убрать после теста
 8002e5a:	482d      	ldr	r0, [pc, #180]	; (8002f10 <SPI2_Init+0xbc>)
 8002e5c:	f7ff fc84 	bl	8002768 <LL_SPI_Disable>

  	LL_SPI_InitTypeDef SPI_InitStruct;

  	LL_GPIO_InitTypeDef GPIO_InitStruct;
  	/* Peripheral clock enable */
  	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8002e60:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e64:	f7ff fc2c 	bl	80026c0 <LL_APB1_GRP1_EnableClock>
  	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8002e68:	2004      	movs	r0, #4
 8002e6a:	f7ff fc11 	bl	8002690 <LL_AHB2_GRP1_EnableClock>
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8002e6e:	2002      	movs	r0, #2
 8002e70:	f7ff fc0e 	bl	8002690 <LL_AHB2_GRP1_EnableClock>
  	PC2   ------> SPI2_MISO
  	PC3   ------> SPI2_MOSI
  	PB12   ------> SPI2_NSS
  	PB13   ------> SPI2_SCK 
  	*/
  	GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8002e74:	230c      	movs	r3, #12
 8002e76:	603b      	str	r3, [r7, #0]
  	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e84:	2300      	movs	r3, #0
 8002e86:	613b      	str	r3, [r7, #16]
  	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002e88:	2305      	movs	r3, #5
 8002e8a:	617b      	str	r3, [r7, #20]
  	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e8c:	463b      	mov	r3, r7
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4820      	ldr	r0, [pc, #128]	; (8002f14 <SPI2_Init+0xc0>)
 8002e92:	f7fd ff0d 	bl	8000cb0 <LL_GPIO_Init>

  	GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13;
 8002e96:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002e9a:	603b      	str	r3, [r7, #0]
  	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	613b      	str	r3, [r7, #16]
  	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002eac:	2305      	movs	r3, #5
 8002eae:	617b      	str	r3, [r7, #20]
  	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb0:	463b      	mov	r3, r7
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4818      	ldr	r0, [pc, #96]	; (8002f18 <SPI2_Init+0xc4>)
 8002eb6:	f7fd fefb 	bl	8000cb0 <LL_GPIO_Init>

  	/*Setup SPI2 */
  	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61bb      	str	r3, [r7, #24]
  	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002ebe:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002ec2:	61fb      	str	r3, [r7, #28]
  	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002ec4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002ec8:	623b      	str	r3, [r7, #32]
  	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
  	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  	SPI_InitStruct.NSS = LL_SPI_NSS_HARD_OUTPUT;
 8002ed2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2; /// Скорость обмена нужно уточнить у Саши
 8002ed8:	2300      	movs	r3, #0
 8002eda:	633b      	str	r3, [r7, #48]	; 0x30
  	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002edc:	2300      	movs	r3, #0
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34
  	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	63bb      	str	r3, [r7, #56]	; 0x38
  	SPI_InitStruct.CRCPoly = 0;//7;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  	LL_SPI_Init(SPI2, &SPI_InitStruct);
 8002ee8:	f107 0318 	add.w	r3, r7, #24
 8002eec:	4619      	mov	r1, r3
 8002eee:	4808      	ldr	r0, [pc, #32]	; (8002f10 <SPI2_Init+0xbc>)
 8002ef0:	f7fe fb9f 	bl	8001632 <LL_SPI_Init>

  	LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4806      	ldr	r0, [pc, #24]	; (8002f10 <SPI2_Init+0xbc>)
 8002ef8:	f7ff fc46 	bl	8002788 <LL_SPI_SetStandard>

  	LL_SPI_EnableNSSPulseMgt(SPI2);
 8002efc:	4804      	ldr	r0, [pc, #16]	; (8002f10 <SPI2_Init+0xbc>)
 8002efe:	f7ff fc56 	bl	80027ae <LL_SPI_EnableNSSPulseMgt>

  	LL_SPI_Enable(SPI2);
 8002f02:	4803      	ldr	r0, [pc, #12]	; (8002f10 <SPI2_Init+0xbc>)
 8002f04:	f7ff fc20 	bl	8002748 <LL_SPI_Enable>

}
 8002f08:	bf00      	nop
 8002f0a:	3740      	adds	r7, #64	; 0x40
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40003800 	.word	0x40003800
 8002f14:	48000800 	.word	0x48000800
 8002f18:	48000400 	.word	0x48000400

08002f1c <I2C1_Init>:
/**
  * @brief  Setup I2C.
  * @param  None
  * @retval None
*/
void I2C1_Init(void){
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08e      	sub	sp, #56	; 0x38
 8002f20:	af00      	add	r7, sp, #0
	LL_I2C_InitTypeDef I2C_InitStruct;

  	LL_GPIO_InitTypeDef GPIO_InitStruct;

  	/* Peripheral clock enable */
  	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8002f22:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002f26:	f7ff fbcb 	bl	80026c0 <LL_APB1_GRP1_EnableClock>
  	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8002f2a:	2002      	movs	r0, #2
 8002f2c:	f7ff fbb0 	bl	8002690 <LL_AHB2_GRP1_EnableClock>
  
  	/**I2C1 GPIO Configuration  
  	PB6   ------> I2C1_SCL
  	PB7   ------> I2C1_SDA 
  	*/
  	GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002f30:	23c0      	movs	r3, #192	; 0xc0
 8002f32:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f34:	2302      	movs	r3, #2
 8002f36:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	613b      	str	r3, [r7, #16]
  	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002f40:	2301      	movs	r3, #1
 8002f42:	617b      	str	r3, [r7, #20]
  	GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002f44:	2304      	movs	r3, #4
 8002f46:	61bb      	str	r3, [r7, #24]
  	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f48:	1d3b      	adds	r3, r7, #4
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4817      	ldr	r0, [pc, #92]	; (8002fac <I2C1_Init+0x90>)
 8002f4e:	f7fd feaf 	bl	8000cb0 <LL_GPIO_Init>

    /**I2C Initialization 
    */
  	LL_I2C_EnableAutoEndMode(I2C1);
 8002f52:	4817      	ldr	r0, [pc, #92]	; (8002fb0 <I2C1_Init+0x94>)
 8002f54:	f7ff fb8c 	bl	8002670 <LL_I2C_EnableAutoEndMode>
	LL_I2C_DisableOwnAddress2(I2C1);
 8002f58:	4815      	ldr	r0, [pc, #84]	; (8002fb0 <I2C1_Init+0x94>)
 8002f5a:	f7ff fb79 	bl	8002650 <LL_I2C_DisableOwnAddress2>
  	LL_I2C_DisableGeneralCall(I2C1);
 8002f5e:	4814      	ldr	r0, [pc, #80]	; (8002fb0 <I2C1_Init+0x94>)
 8002f60:	f7ff fb4e 	bl	8002600 <LL_I2C_DisableGeneralCall>
  	LL_I2C_EnableClockStretching(I2C1);
 8002f64:	4812      	ldr	r0, [pc, #72]	; (8002fb0 <I2C1_Init+0x94>)
 8002f66:	f7ff fb3b 	bl	80025e0 <LL_I2C_EnableClockStretching>

  	I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
  	I2C_InitStruct.Timing = 0x10909CEC;//  - Frequenci I2C=100 kHz //0x00702991; - Frequenci I2C=400 kHz
 8002f6e:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <I2C1_Init+0x98>)
 8002f70:	623b      	str	r3, [r7, #32]
  	I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
  	I2C_InitStruct.DigitalFilter = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	62bb      	str	r3, [r7, #40]	; 0x28
  	I2C_InitStruct.OwnAddress1 = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  	I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK; //LL_I2C_NACK 
 8002f7e:	2300      	movs	r3, #0
 8002f80:	633b      	str	r3, [r7, #48]	; 0x30
  	I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002f82:	2300      	movs	r3, #0
 8002f84:	637b      	str	r3, [r7, #52]	; 0x34
  	LL_I2C_Init(I2C1, &I2C_InitStruct);
 8002f86:	f107 031c 	add.w	r3, r7, #28
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4808      	ldr	r0, [pc, #32]	; (8002fb0 <I2C1_Init+0x94>)
 8002f8e:	f7fd ffac 	bl	8000eea <LL_I2C_Init>

  	LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8002f92:	2200      	movs	r2, #0
 8002f94:	2100      	movs	r1, #0
 8002f96:	4806      	ldr	r0, [pc, #24]	; (8002fb0 <I2C1_Init+0x94>)
 8002f98:	f7ff fb42 	bl	8002620 <LL_I2C_SetOwnAddress2>

  	LL_I2C_Enable(I2C1);
 8002f9c:	4804      	ldr	r0, [pc, #16]	; (8002fb0 <I2C1_Init+0x94>)
 8002f9e:	f7ff fb0f 	bl	80025c0 <LL_I2C_Enable>
}
 8002fa2:	bf00      	nop
 8002fa4:	3738      	adds	r7, #56	; 0x38
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	48000400 	.word	0x48000400
 8002fb0:	40005400 	.word	0x40005400
 8002fb4:	10909cec 	.word	0x10909cec

08002fb8 <PWM_Init>:
/**
  * @brief  Setup PWM Timer2 or Timer 3.
  * @param  None
  * @retval None
*/
void PWM_Init(enum PWR_TIMx timer_number){
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b096      	sub	sp, #88	; 0x58
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
    LL_TIM_InitTypeDef TIM_InitStruct;
    LL_TIM_OC_InitTypeDef TIM_OC_InitStruct;
    LL_GPIO_InitTypeDef GPIO_InitStruct;

    /* Peripheral clock enable */
    LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	f7ff fb64 	bl	8002690 <LL_AHB2_GRP1_EnableClock>

    if (timer_number == PWM_TIM2_CH2_PA1){
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d152      	bne.n	8003074 <PWM_Init+0xbc>

    	//Setup GPIO TIM2_CH2 ------> PA1
    	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	60fb      	str	r3, [r7, #12]
    	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	613b      	str	r3, [r7, #16]
    	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
    	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61bb      	str	r3, [r7, #24]
    	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	623b      	str	r3, [r7, #32]
    	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe6:	f107 030c 	add.w	r3, r7, #12
 8002fea:	4619      	mov	r1, r3
 8002fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ff0:	f7fd fe5e 	bl	8000cb0 <LL_GPIO_Init>

    	/* TIM2 clock enable */
    	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	f7ff fb63 	bl	80026c0 <LL_APB1_GRP1_EnableClock>

    	LL_TIM_StructInit(&TIM_InitStruct);
 8002ffa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe fbf3 	bl	80017ea <LL_TIM_StructInit>
    	TIM_InitStruct.Prescaler = 0;//(SystemCoreClock/1000000)-1;
 8003004:	2300      	movs	r3, #0
 8003006:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800300a:	2300      	movs	r3, #0
 800300c:	64bb      	str	r3, [r7, #72]	; 0x48
    	TIM_InitStruct.Autoreload = 61538-1;
 800300e:	f24f 0361 	movw	r3, #61537	; 0xf061
 8003012:	64fb      	str	r3, [r7, #76]	; 0x4c
    	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003014:	2300      	movs	r3, #0
 8003016:	653b      	str	r3, [r7, #80]	; 0x50
    	LL_TIM_Init(TIM2, &TIM_InitStruct);
 8003018:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800301c:	4619      	mov	r1, r3
 800301e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003022:	f7fe fbfd 	bl	8001820 <LL_TIM_Init>

    	LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003026:	2100      	movs	r1, #0
 8003028:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800302c:	f7ff fca4 	bl	8002978 <LL_TIM_SetClockSource>
    	LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8003030:	2110      	movs	r1, #16
 8003032:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003036:	f7ff fc51 	bl	80028dc <LL_TIM_OC_EnablePreload>

    	LL_TIM_OC_StructInit(&TIM_OC_InitStruct);
 800303a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe fc56 	bl	80018f0 <LL_TIM_OC_StructInit>
    	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003044:	2360      	movs	r3, #96	; 0x60
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
    	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 8003048:	2301      	movs	r3, #1
 800304a:	62bb      	str	r3, [r7, #40]	; 0x28
    	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800304c:	2300      	movs	r3, #0
 800304e:	62fb      	str	r3, [r7, #44]	; 0x2c
    	TIM_OC_InitStruct.CompareValue = 30769-1;
 8003050:	f647 0330 	movw	r3, #30768	; 0x7830
 8003054:	633b      	str	r3, [r7, #48]	; 0x30
    	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003056:	2300      	movs	r3, #0
 8003058:	637b      	str	r3, [r7, #52]	; 0x34
    	LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800305a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800305e:	461a      	mov	r2, r3
 8003060:	2110      	movs	r1, #16
 8003062:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003066:	f7fe fc65 	bl	8001934 <LL_TIM_OC_Init>

    	LL_TIM_EnableCounter(TIM2);
 800306a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800306e:	f7ff fc24 	bl	80028ba <LL_TIM_EnableCounter>
        LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);

        LL_TIM_EnableCounter(TIM3);
    }

}
 8003072:	e04f      	b.n	8003114 <PWM_Init+0x15c>
    } else if (timer_number == PWM_TIM3_CH1_PA6){
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d14c      	bne.n	8003114 <PWM_Init+0x15c>
    	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800307a:	2340      	movs	r3, #64	; 0x40
 800307c:	60fb      	str	r3, [r7, #12]
    	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800307e:	2302      	movs	r3, #2
 8003080:	613b      	str	r3, [r7, #16]
    	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
    	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	61bb      	str	r3, [r7, #24]
    	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800308e:	2302      	movs	r3, #2
 8003090:	623b      	str	r3, [r7, #32]
    	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003092:	f107 030c 	add.w	r3, r7, #12
 8003096:	4619      	mov	r1, r3
 8003098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800309c:	f7fd fe08 	bl	8000cb0 <LL_GPIO_Init>
    	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80030a0:	2002      	movs	r0, #2
 80030a2:	f7ff fb0d 	bl	80026c0 <LL_APB1_GRP1_EnableClock>
    	LL_TIM_StructInit(&TIM_InitStruct);
 80030a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe fb9d 	bl	80017ea <LL_TIM_StructInit>
    	TIM_InitStruct.Prescaler = 0;//(SystemCoreClock/1000000)-1;;
 80030b0:	2300      	movs	r3, #0
 80030b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80030b6:	2300      	movs	r3, #0
 80030b8:	64bb      	str	r3, [r7, #72]	; 0x48
    	TIM_InitStruct.Autoreload = 61538-1;
 80030ba:	f24f 0361 	movw	r3, #61537	; 0xf061
 80030be:	64fb      	str	r3, [r7, #76]	; 0x4c
    	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80030c0:	2300      	movs	r3, #0
 80030c2:	653b      	str	r3, [r7, #80]	; 0x50
    	LL_TIM_Init(TIM3, &TIM_InitStruct);
 80030c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80030c8:	4619      	mov	r1, r3
 80030ca:	4814      	ldr	r0, [pc, #80]	; (800311c <PWM_Init+0x164>)
 80030cc:	f7fe fba8 	bl	8001820 <LL_TIM_Init>
        LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80030d0:	2100      	movs	r1, #0
 80030d2:	4812      	ldr	r0, [pc, #72]	; (800311c <PWM_Init+0x164>)
 80030d4:	f7ff fc50 	bl	8002978 <LL_TIM_SetClockSource>
        LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 80030d8:	2101      	movs	r1, #1
 80030da:	4810      	ldr	r0, [pc, #64]	; (800311c <PWM_Init+0x164>)
 80030dc:	f7ff fbfe 	bl	80028dc <LL_TIM_OC_EnablePreload>
        LL_TIM_OC_StructInit(&TIM_OC_InitStruct);
 80030e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fe fc03 	bl	80018f0 <LL_TIM_OC_StructInit>
        TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80030ea:	2360      	movs	r3, #96	; 0x60
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
        TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 80030ee:	2301      	movs	r3, #1
 80030f0:	62bb      	str	r3, [r7, #40]	; 0x28
        TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        TIM_OC_InitStruct.CompareValue = 30769-1;
 80030f6:	f647 0330 	movw	r3, #30768	; 0x7830
 80030fa:	633b      	str	r3, [r7, #48]	; 0x30
        TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80030fc:	2300      	movs	r3, #0
 80030fe:	637b      	str	r3, [r7, #52]	; 0x34
        LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003104:	461a      	mov	r2, r3
 8003106:	2101      	movs	r1, #1
 8003108:	4804      	ldr	r0, [pc, #16]	; (800311c <PWM_Init+0x164>)
 800310a:	f7fe fc13 	bl	8001934 <LL_TIM_OC_Init>
        LL_TIM_EnableCounter(TIM3);
 800310e:	4803      	ldr	r0, [pc, #12]	; (800311c <PWM_Init+0x164>)
 8003110:	f7ff fbd3 	bl	80028ba <LL_TIM_EnableCounter>
}
 8003114:	bf00      	nop
 8003116:	3758      	adds	r7, #88	; 0x58
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40000400 	.word	0x40000400

08003120 <SetupInterrupt>:
/**
  * @brief  This function setup interrupts for all ports and inside event .
  * @param  None
  * @retval None
*/
void SetupInterrupt(void){
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
	
    LL_EXTI_InitTypeDef EXTI_InitStruct;

  	/* Setup USART1 interrupt Init */
  	NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0)); //Set priority №1 from 0..15
 8003126:	f7fe ffff 	bl	8002128 <NVIC_GetPriorityGrouping>
 800312a:	4603      	mov	r3, r0
 800312c:	2200      	movs	r2, #0
 800312e:	2101      	movs	r1, #1
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff f84b 	bl	80021cc <NVIC_EncodePriority>
 8003136:	4603      	mov	r3, r0
 8003138:	4619      	mov	r1, r3
 800313a:	2025      	movs	r0, #37	; 0x25
 800313c:	f7ff f81c 	bl	8002178 <NVIC_SetPriority>
 	LL_USART_EnableIT_RXNE(USART1); //Enable RX no empty Interrupt
 8003140:	4847      	ldr	r0, [pc, #284]	; (8003260 <SetupInterrupt+0x140>)
 8003142:	f7ff fc67 	bl	8002a14 <LL_USART_EnableIT_RXNE>
  	//LL_USART_DisableIT_RXNE(USART1);
  	NVIC_EnableIRQ(USART1_IRQn);
 8003146:	2025      	movs	r0, #37	; 0x25
 8003148:	f7fe fffc 	bl	8002144 <NVIC_EnableIRQ>
  	/**********************************************/


  	/*Setup interrupt PB15 ADC-DRDY*/
    LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE15);
 800314c:	4945      	ldr	r1, [pc, #276]	; (8003264 <SetupInterrupt+0x144>)
 800314e:	2001      	movs	r0, #1
 8003150:	f7ff f86e 	bl	8002230 <LL_SYSCFG_SetEXTISource>

    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8003154:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003158:	607b      	str	r3, [r7, #4]
    EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
    EXTI_InitStruct.LineCommand = ENABLE;
 800315e:	2301      	movs	r3, #1
 8003160:	733b      	strb	r3, [r7, #12]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003162:	2300      	movs	r3, #0
 8003164:	737b      	strb	r3, [r7, #13]
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8003166:	2302      	movs	r3, #2
 8003168:	73bb      	strb	r3, [r7, #14]
    LL_EXTI_Init(&EXTI_InitStruct);
 800316a:	1d3b      	adds	r3, r7, #4
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd fbbf 	bl	80008f0 <LL_EXTI_Init>

    LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_15, LL_GPIO_PULL_NO);
 8003172:	2200      	movs	r2, #0
 8003174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003178:	483b      	ldr	r0, [pc, #236]	; (8003268 <SetupInterrupt+0x148>)
 800317a:	f7ff fb55 	bl	8002828 <LL_GPIO_SetPinPull>
    LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_15, LL_GPIO_MODE_INPUT);
 800317e:	2200      	movs	r2, #0
 8003180:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003184:	4838      	ldr	r0, [pc, #224]	; (8003268 <SetupInterrupt+0x148>)
 8003186:	f7ff fb22 	bl	80027ce <LL_GPIO_SetPinMode>
    /*INTERRUPT_ADC_DRDY_Enable()       LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_15)                 */
    /*INTERRUPT_ADC_DRDY_Disable()      LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_15)                */
    /*Define in SetupPeriph.h                                                                  */

    // EXTI interrupt init
    NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0)); //Set priority №2 from 0..15
 800318a:	f7fe ffcd 	bl	8002128 <NVIC_GetPriorityGrouping>
 800318e:	4603      	mov	r3, r0
 8003190:	2200      	movs	r2, #0
 8003192:	2102      	movs	r1, #2
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff f819 	bl	80021cc <NVIC_EncodePriority>
 800319a:	4603      	mov	r3, r0
 800319c:	4619      	mov	r1, r3
 800319e:	2028      	movs	r0, #40	; 0x28
 80031a0:	f7fe ffea 	bl	8002178 <NVIC_SetPriority>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 80031a4:	2028      	movs	r0, #40	; 0x28
 80031a6:	f7fe ffcd 	bl	8002144 <NVIC_EnableIRQ>
    INTERRUPT_ADC_DRDY_Disable();
 80031aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80031ae:	f7ff fab7 	bl	8002720 <LL_EXTI_DisableIT_0_31>
    /**********************************************/
 	  

    /*Setup interrupt PC5 DRDY_GOOD*/
    LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE5);
 80031b2:	492e      	ldr	r1, [pc, #184]	; (800326c <SetupInterrupt+0x14c>)
 80031b4:	2002      	movs	r0, #2
 80031b6:	f7ff f83b 	bl	8002230 <LL_SYSCFG_SetEXTISource>

    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 80031ba:	2320      	movs	r3, #32
 80031bc:	607b      	str	r3, [r7, #4]
    EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80031be:	2300      	movs	r3, #0
 80031c0:	60bb      	str	r3, [r7, #8]
    EXTI_InitStruct.LineCommand = ENABLE;
 80031c2:	2301      	movs	r3, #1
 80031c4:	733b      	strb	r3, [r7, #12]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80031c6:	2300      	movs	r3, #0
 80031c8:	737b      	strb	r3, [r7, #13]
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73bb      	strb	r3, [r7, #14]
    LL_EXTI_Init(&EXTI_InitStruct);
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd fb8d 	bl	80008f0 <LL_EXTI_Init>

    LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_5, LL_GPIO_PULL_NO);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2120      	movs	r1, #32
 80031da:	4825      	ldr	r0, [pc, #148]	; (8003270 <SetupInterrupt+0x150>)
 80031dc:	f7ff fb24 	bl	8002828 <LL_GPIO_SetPinPull>
    LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_5, LL_GPIO_MODE_INPUT);
 80031e0:	2200      	movs	r2, #0
 80031e2:	2120      	movs	r1, #32
 80031e4:	4822      	ldr	r0, [pc, #136]	; (8003270 <SetupInterrupt+0x150>)
 80031e6:	f7ff faf2 	bl	80027ce <LL_GPIO_SetPinMode>
    /*INTERRUPT_DRDY_GOOD_Disable()     LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_5)                */
    /*Define in SetupPeriph.h                                                                 */


    /*Setup interrupt PB8 PULSE*/
    LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE8);
 80031ea:	4922      	ldr	r1, [pc, #136]	; (8003274 <SetupInterrupt+0x154>)
 80031ec:	2001      	movs	r0, #1
 80031ee:	f7ff f81f 	bl	8002230 <LL_SYSCFG_SetEXTISource>

    EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 80031f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031f6:	607b      	str	r3, [r7, #4]
    EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60bb      	str	r3, [r7, #8]
    EXTI_InitStruct.LineCommand = ENABLE;
 80031fc:	2301      	movs	r3, #1
 80031fe:	733b      	strb	r3, [r7, #12]
    EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003200:	2300      	movs	r3, #0
 8003202:	737b      	strb	r3, [r7, #13]
    EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8003204:	2302      	movs	r3, #2
 8003206:	73bb      	strb	r3, [r7, #14]
    LL_EXTI_Init(&EXTI_InitStruct);
 8003208:	1d3b      	adds	r3, r7, #4
 800320a:	4618      	mov	r0, r3
 800320c:	f7fd fb70 	bl	80008f0 <LL_EXTI_Init>

    LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_8, LL_GPIO_PULL_NO);
 8003210:	2200      	movs	r2, #0
 8003212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003216:	4814      	ldr	r0, [pc, #80]	; (8003268 <SetupInterrupt+0x148>)
 8003218:	f7ff fb06 	bl	8002828 <LL_GPIO_SetPinPull>
    LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_8, LL_GPIO_MODE_INPUT);
 800321c:	2200      	movs	r2, #0
 800321e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003222:	4811      	ldr	r0, [pc, #68]	; (8003268 <SetupInterrupt+0x148>)
 8003224:	f7ff fad3 	bl	80027ce <LL_GPIO_SetPinMode>
    /*INTERRUPT_PULSE_Enable()           LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_8)                 */
    /*INTERRUPT_PULSE_Disable()          LL_EXTI_DisableIT_0_31(LL_EXTI_LINE_8)                */
    /*Define in SetupPeriph.h                          */

    // EXTI interrupt init
    NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0)); //Set priority №3 from 0..15
 8003228:	f7fe ff7e 	bl	8002128 <NVIC_GetPriorityGrouping>
 800322c:	4603      	mov	r3, r0
 800322e:	2200      	movs	r2, #0
 8003230:	2103      	movs	r1, #3
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe ffca 	bl	80021cc <NVIC_EncodePriority>
 8003238:	4603      	mov	r3, r0
 800323a:	4619      	mov	r1, r3
 800323c:	2017      	movs	r0, #23
 800323e:	f7fe ff9b 	bl	8002178 <NVIC_SetPriority>

    NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003242:	2017      	movs	r0, #23
 8003244:	f7fe ff7e 	bl	8002144 <NVIC_EnableIRQ>
    INTERRUPT_DRDY_GOOD_Disable();
 8003248:	2020      	movs	r0, #32
 800324a:	f7ff fa69 	bl	8002720 <LL_EXTI_DisableIT_0_31>
    INTERRUPT_PULSE_Disable();
 800324e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003252:	f7ff fa65 	bl	8002720 <LL_EXTI_DisableIT_0_31>
    /***************************************************/

}
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40013800 	.word	0x40013800
 8003264:	f0000003 	.word	0xf0000003
 8003268:	48000400 	.word	0x48000400
 800326c:	00f00001 	.word	0x00f00001
 8003270:	48000800 	.word	0x48000800
 8003274:	000f0002 	.word	0x000f0002

08003278 <_Error_Handler>:
  *
  *
  *
  */
void _Error_Handler(char *file, int line)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]

	printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4803      	ldr	r0, [pc, #12]	; (8003294 <_Error_Handler+0x1c>)
 8003288:	f001 fa4a 	bl	8004720 <iprintf>
  /* User can add his own implementation to report the HAL error return state */
 //while(1)
  //{
 // }
  /* USER CODE END Error_Handler_Debug */
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	08005618 	.word	0x08005618

08003298 <LL_GPIO_SetOutputPin>:
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	619a      	str	r2, [r3, #24]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <LL_GPIO_ResetOutputPin>:
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <LL_TIM_EnableCounter>:
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f043 0201 	orr.w	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	601a      	str	r2, [r3, #0]
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <LL_TIM_DisableCounter>:
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f023 0201 	bic.w	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	601a      	str	r2, [r3, #0]
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <LL_TIM_SetCounter>:
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <LL_TIM_SetAutoReload>:
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <LL_TIM_OC_SetCompareCH1>:
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <LL_TIM_OC_SetCompareCH2>:
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <Set_Ficlk_and_F_SAx>:
  * @param  PWM_TIM2_CH2_PA1 or PWM_TIM3_CH1_PA6
  * @retval An ErrorStatus enumeration
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus Set_Ficlk_and_F_SAx(uint8_t par_value, enum PWR_TIMx timer_number){
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	460a      	mov	r2, r1
 800338a:	71fb      	strb	r3, [r7, #7]
 800338c:	4613      	mov	r3, r2
 800338e:	71bb      	strb	r3, [r7, #6]

	uint32_t Counter_TIM_Value, Fcut, Ficlk;
	//Fcut -  cutoff frequency of low-pass filter (Hz)
	//Ficlkt -  real value of the frequency fed to the low-pass filter (Hz)

	Fcut=par_value*10;// cutoff frequency of low-pass filter (Hz)
 8003390:	79fa      	ldrb	r2, [r7, #7]
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	617b      	str	r3, [r7, #20]

	if(Fcut==10){
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	2b0a      	cmp	r3, #10
 80033a0:	d103      	bne.n	80033aa <Set_Ficlk_and_F_SAx+0x2a>
		Ficlk=1300;//Hz
 80033a2:	f240 5314 	movw	r3, #1300	; 0x514
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	e01f      	b.n	80033ea <Set_Ficlk_and_F_SAx+0x6a>
	}else if(Fcut>=1270){
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f240 42f5 	movw	r2, #1269	; 0x4f5
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d902      	bls.n	80033ba <Set_Ficlk_and_F_SAx+0x3a>
		Ficlk=130000;//Hz
 80033b4:	4b54      	ldr	r3, [pc, #336]	; (8003508 <Set_Ficlk_and_F_SAx+0x188>)
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	e017      	b.n	80033ea <Set_Ficlk_and_F_SAx+0x6a>
	}else{
		//Ficlk = ( ((Fcut%50)==0) ? ((Fcut<1000) ? (Fcut=Fcut+5) : (Fcut=Fcut+50)) : Fcut )*100;
		Ficlk = ( ((Fcut%50)==0) ? (Fcut=Fcut+5): Fcut )*100;
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4b53      	ldr	r3, [pc, #332]	; (800350c <Set_Ficlk_and_F_SAx+0x18c>)
 80033be:	fba3 1302 	umull	r1, r3, r3, r2
 80033c2:	091b      	lsrs	r3, r3, #4
 80033c4:	2132      	movs	r1, #50	; 0x32
 80033c6:	fb01 f303 	mul.w	r3, r1, r3
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d107      	bne.n	80033e0 <Set_Ficlk_and_F_SAx+0x60>
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	3305      	adds	r3, #5
 80033d4:	617b      	str	r3, [r7, #20]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2264      	movs	r2, #100	; 0x64
 80033da:	fb02 f303 	mul.w	r3, r2, r3
 80033de:	e003      	b.n	80033e8 <Set_Ficlk_and_F_SAx+0x68>
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2264      	movs	r2, #100	; 0x64
 80033e4:	fb02 f303 	mul.w	r3, r2, r3
 80033e8:	613b      	str	r3, [r7, #16]
	}

	Counter_TIM_Value = SystemCoreClock/Ficlk;
 80033ea:	4b49      	ldr	r3, [pc, #292]	; (8003510 <Set_Ficlk_and_F_SAx+0x190>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f4:	60fb      	str	r3, [r7, #12]

	if(timer_number == PWM_TIM2_CH2_PA1){
 80033f6:	79bb      	ldrb	r3, [r7, #6]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d11c      	bne.n	8003436 <Set_Ficlk_and_F_SAx+0xb6>
		LL_TIM_DisableCounter(TIM2); // Disable timer for resetup
 80033fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003400:	f7ff ff76 	bl	80032f0 <LL_TIM_DisableCounter>
		LL_TIM_SetCounter(TIM2, 0);
 8003404:	2100      	movs	r1, #0
 8003406:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800340a:	f7ff ff81 	bl	8003310 <LL_TIM_SetCounter>
		LL_TIM_SetAutoReload(TIM2, Counter_TIM_Value-1);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	3b01      	subs	r3, #1
 8003412:	4619      	mov	r1, r3
 8003414:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003418:	f7ff ff88 	bl	800332c <LL_TIM_SetAutoReload>
		LL_TIM_OC_SetCompareCH2(TIM2, ((Counter_TIM_Value/2)-1));
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	085b      	lsrs	r3, r3, #1
 8003420:	3b01      	subs	r3, #1
 8003422:	4619      	mov	r1, r3
 8003424:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003428:	f7ff ff9c 	bl	8003364 <LL_TIM_OC_SetCompareCH2>
		//LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
		LL_TIM_EnableCounter(TIM2);
 800342c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003430:	f7ff ff4e 	bl	80032d0 <LL_TIM_EnableCounter>
 8003434:	e020      	b.n	8003478 <Set_Ficlk_and_F_SAx+0xf8>
	}else if(timer_number == PWM_TIM3_CH1_PA6){
 8003436:	79bb      	ldrb	r3, [r7, #6]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d117      	bne.n	800346c <Set_Ficlk_and_F_SAx+0xec>
		LL_TIM_DisableCounter(TIM3); // Disable timer for resetup
 800343c:	4835      	ldr	r0, [pc, #212]	; (8003514 <Set_Ficlk_and_F_SAx+0x194>)
 800343e:	f7ff ff57 	bl	80032f0 <LL_TIM_DisableCounter>
		LL_TIM_SetCounter(TIM3, 0);
 8003442:	2100      	movs	r1, #0
 8003444:	4833      	ldr	r0, [pc, #204]	; (8003514 <Set_Ficlk_and_F_SAx+0x194>)
 8003446:	f7ff ff63 	bl	8003310 <LL_TIM_SetCounter>
		LL_TIM_SetAutoReload(TIM3, Counter_TIM_Value-1);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	3b01      	subs	r3, #1
 800344e:	4619      	mov	r1, r3
 8003450:	4830      	ldr	r0, [pc, #192]	; (8003514 <Set_Ficlk_and_F_SAx+0x194>)
 8003452:	f7ff ff6b 	bl	800332c <LL_TIM_SetAutoReload>
		LL_TIM_OC_SetCompareCH1(TIM3, ((Counter_TIM_Value/2)-1));
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	085b      	lsrs	r3, r3, #1
 800345a:	3b01      	subs	r3, #1
 800345c:	4619      	mov	r1, r3
 800345e:	482d      	ldr	r0, [pc, #180]	; (8003514 <Set_Ficlk_and_F_SAx+0x194>)
 8003460:	f7ff ff72 	bl	8003348 <LL_TIM_OC_SetCompareCH1>
		//LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
		LL_TIM_EnableCounter(TIM3);
 8003464:	482b      	ldr	r0, [pc, #172]	; (8003514 <Set_Ficlk_and_F_SAx+0x194>)
 8003466:	f7ff ff33 	bl	80032d0 <LL_TIM_EnableCounter>
 800346a:	e005      	b.n	8003478 <Set_Ficlk_and_F_SAx+0xf8>
	}else{
		Error_Handler();
 800346c:	213b      	movs	r1, #59	; 0x3b
 800346e:	482a      	ldr	r0, [pc, #168]	; (8003518 <Set_Ficlk_and_F_SAx+0x198>)
 8003470:	f7ff ff02 	bl	8003278 <_Error_Handler>
		return ERROR;
 8003474:	2300      	movs	r3, #0
 8003476:	e043      	b.n	8003500 <Set_Ficlk_and_F_SAx+0x180>
	}

    // Control F_SAx
	if( Fcut==10 || Fcut==20 ){
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2b0a      	cmp	r3, #10
 800347c:	d002      	beq.n	8003484 <Set_Ficlk_and_F_SAx+0x104>
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b14      	cmp	r3, #20
 8003482:	d110      	bne.n	80034a6 <Set_Ficlk_and_F_SAx+0x126>
		F_SA0_Reset();
 8003484:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003488:	4824      	ldr	r0, [pc, #144]	; (800351c <Set_Ficlk_and_F_SAx+0x19c>)
 800348a:	f7ff ff13 	bl	80032b4 <LL_GPIO_ResetOutputPin>
		F_SA1_Reset();
 800348e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003492:	4822      	ldr	r0, [pc, #136]	; (800351c <Set_Ficlk_and_F_SAx+0x19c>)
 8003494:	f7ff ff0e 	bl	80032b4 <LL_GPIO_ResetOutputPin>
#ifdef DEBUGprintf
			printf("Param_value=%d  Fcut=%luHz  Ficlk=%luHz  F_SA0=0 F_SA1=0\r\n",par_value, (unsigned long)Fcut, (unsigned long)Ficlk );
 8003498:	79f9      	ldrb	r1, [r7, #7]
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	4820      	ldr	r0, [pc, #128]	; (8003520 <Set_Ficlk_and_F_SAx+0x1a0>)
 80034a0:	f001 f93e 	bl	8004720 <iprintf>
 80034a4:	e02b      	b.n	80034fe <Set_Ficlk_and_F_SAx+0x17e>
#endif

	}else if ( Fcut > 20 && Fcut < 330 ){
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b14      	cmp	r3, #20
 80034aa:	d914      	bls.n	80034d6 <Set_Ficlk_and_F_SAx+0x156>
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80034b2:	d210      	bcs.n	80034d6 <Set_Ficlk_and_F_SAx+0x156>
		F_SA0_Set();
 80034b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034b8:	4818      	ldr	r0, [pc, #96]	; (800351c <Set_Ficlk_and_F_SAx+0x19c>)
 80034ba:	f7ff feed 	bl	8003298 <LL_GPIO_SetOutputPin>
		F_SA1_Reset();
 80034be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034c2:	4816      	ldr	r0, [pc, #88]	; (800351c <Set_Ficlk_and_F_SAx+0x19c>)
 80034c4:	f7ff fef6 	bl	80032b4 <LL_GPIO_ResetOutputPin>
#ifdef DEBUGprintf
			printf("Param_value=%d  Fcut=%luHz  Ficlk=%luHz  F_SA0=1 F_SA1=0\r\n",par_value, (unsigned long)Fcut, (unsigned long)Ficlk );
 80034c8:	79f9      	ldrb	r1, [r7, #7]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4815      	ldr	r0, [pc, #84]	; (8003524 <Set_Ficlk_and_F_SAx+0x1a4>)
 80034d0:	f001 f926 	bl	8004720 <iprintf>
 80034d4:	e013      	b.n	80034fe <Set_Ficlk_and_F_SAx+0x17e>
#endif

	}else if( Fcut >= 330 ){
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 80034dc:	d30f      	bcc.n	80034fe <Set_Ficlk_and_F_SAx+0x17e>
		F_SA0_Reset();
 80034de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034e2:	480e      	ldr	r0, [pc, #56]	; (800351c <Set_Ficlk_and_F_SAx+0x19c>)
 80034e4:	f7ff fee6 	bl	80032b4 <LL_GPIO_ResetOutputPin>
		F_SA1_Set();
 80034e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034ec:	480b      	ldr	r0, [pc, #44]	; (800351c <Set_Ficlk_and_F_SAx+0x19c>)
 80034ee:	f7ff fed3 	bl	8003298 <LL_GPIO_SetOutputPin>
#ifdef DEBUGprintf
			printf("Param_value=%d  Fcut=%luHz  Ficlk=%luHz  F_SA0=0 F_SA1=1\r\n",par_value, (unsigned long)Fcut, (unsigned long)Ficlk );
 80034f2:	79f9      	ldrb	r1, [r7, #7]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	480b      	ldr	r0, [pc, #44]	; (8003528 <Set_Ficlk_and_F_SAx+0x1a8>)
 80034fa:	f001 f911 	bl	8004720 <iprintf>
#endif

	}

	return SUCCESS;
 80034fe:	2301      	movs	r3, #1
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	0001fbd0 	.word	0x0001fbd0
 800350c:	51eb851f 	.word	0x51eb851f
 8003510:	2000000c 	.word	0x2000000c
 8003514:	40000400 	.word	0x40000400
 8003518:	08005648 	.word	0x08005648
 800351c:	48000800 	.word	0x48000800
 8003520:	08005660 	.word	0x08005660
 8003524:	0800569c 	.word	0x0800569c
 8003528:	080056d8 	.word	0x080056d8

0800352c <Set_Amp_Factor_K1>:
  * @param  namber_value
  * @retval An ErrorStatus enumeration
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus Set_Amp_Factor_K1(uint8_t namber_value){
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	71fb      	strb	r3, [r7, #7]

	uint16_t K1=0;
 8003536:	2300      	movs	r3, #0
 8003538:	81fb      	strh	r3, [r7, #14]

	switch(namber_value){
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	2b03      	cmp	r3, #3
 800353e:	d854      	bhi.n	80035ea <Set_Amp_Factor_K1+0xbe>
 8003540:	a201      	add	r2, pc, #4	; (adr r2, 8003548 <Set_Amp_Factor_K1+0x1c>)
 8003542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003546:	bf00      	nop
 8003548:	08003559 	.word	0x08003559
 800354c:	0800357d 	.word	0x0800357d
 8003550:	080035a1 	.word	0x080035a1
 8003554:	080035c5 	.word	0x080035c5
		case 0: // Set K1=1
			PA3_10_Set();
 8003558:	2108      	movs	r1, #8
 800355a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800355e:	f7ff fe9b 	bl	8003298 <LL_GPIO_SetOutputPin>
			PA4_100_Set();
 8003562:	2110      	movs	r1, #16
 8003564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003568:	f7ff fe96 	bl	8003298 <LL_GPIO_SetOutputPin>
			PA5_1000_Set();
 800356c:	2120      	movs	r1, #32
 800356e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003572:	f7ff fe91 	bl	8003298 <LL_GPIO_SetOutputPin>
			K1=1;
 8003576:	2301      	movs	r3, #1
 8003578:	81fb      	strh	r3, [r7, #14]
			break;
 800357a:	e03c      	b.n	80035f6 <Set_Amp_Factor_K1+0xca>
		case 1:// Set K1=10
			PA3_10_Reset();
 800357c:	2108      	movs	r1, #8
 800357e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003582:	f7ff fe97 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PA4_100_Set();
 8003586:	2110      	movs	r1, #16
 8003588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800358c:	f7ff fe84 	bl	8003298 <LL_GPIO_SetOutputPin>
			PA5_1000_Set();
 8003590:	2120      	movs	r1, #32
 8003592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003596:	f7ff fe7f 	bl	8003298 <LL_GPIO_SetOutputPin>
			K1=10;
 800359a:	230a      	movs	r3, #10
 800359c:	81fb      	strh	r3, [r7, #14]
			break;
 800359e:	e02a      	b.n	80035f6 <Set_Amp_Factor_K1+0xca>
		case 2:// Set K1=100
			PA3_10_Set();
 80035a0:	2108      	movs	r1, #8
 80035a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035a6:	f7ff fe77 	bl	8003298 <LL_GPIO_SetOutputPin>
			PA4_100_Reset();
 80035aa:	2110      	movs	r1, #16
 80035ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035b0:	f7ff fe80 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PA5_1000_Set();
 80035b4:	2120      	movs	r1, #32
 80035b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035ba:	f7ff fe6d 	bl	8003298 <LL_GPIO_SetOutputPin>
			K1=100;
 80035be:	2364      	movs	r3, #100	; 0x64
 80035c0:	81fb      	strh	r3, [r7, #14]
			break;
 80035c2:	e018      	b.n	80035f6 <Set_Amp_Factor_K1+0xca>
		case 3:// Set K1=1000
			PA3_10_Set();
 80035c4:	2108      	movs	r1, #8
 80035c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035ca:	f7ff fe65 	bl	8003298 <LL_GPIO_SetOutputPin>
			PA4_100_Set();
 80035ce:	2110      	movs	r1, #16
 80035d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035d4:	f7ff fe60 	bl	8003298 <LL_GPIO_SetOutputPin>
			PA5_1000_Reset();
 80035d8:	2120      	movs	r1, #32
 80035da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035de:	f7ff fe69 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			K1=1000;
 80035e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035e6:	81fb      	strh	r3, [r7, #14]
			break;
 80035e8:	e005      	b.n	80035f6 <Set_Amp_Factor_K1+0xca>
		default:
			Error_Handler();
 80035ea:	217f      	movs	r1, #127	; 0x7f
 80035ec:	4807      	ldr	r0, [pc, #28]	; (800360c <Set_Amp_Factor_K1+0xe0>)
 80035ee:	f7ff fe43 	bl	8003278 <_Error_Handler>
			return ERROR;
 80035f2:	2300      	movs	r3, #0
 80035f4:	e005      	b.n	8003602 <Set_Amp_Factor_K1+0xd6>
	}

#ifdef DEBUGprintf
	printf("K1 = %d \r\n",K1);
 80035f6:	89fb      	ldrh	r3, [r7, #14]
 80035f8:	4619      	mov	r1, r3
 80035fa:	4805      	ldr	r0, [pc, #20]	; (8003610 <Set_Amp_Factor_K1+0xe4>)
 80035fc:	f001 f890 	bl	8004720 <iprintf>
#endif

	return SUCCESS;
 8003600:	2301      	movs	r3, #1
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	08005648 	.word	0x08005648
 8003610:	08005714 	.word	0x08005714

08003614 <Set_Amp_Factor_K2>:
  * @param  namber_value
  * @retval An ErrorStatus enumeration
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus Set_Amp_Factor_K2(uint8_t namber_value){
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	71fb      	strb	r3, [r7, #7]

	uint16_t K2=0;
 800361e:	2300      	movs	r3, #0
 8003620:	81fb      	strh	r3, [r7, #14]
	
	switch(namber_value){
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	2b0b      	cmp	r3, #11
 8003626:	f200 8193 	bhi.w	8003950 <Set_Amp_Factor_K2+0x33c>
 800362a:	a201      	add	r2, pc, #4	; (adr r2, 8003630 <Set_Amp_Factor_K2+0x1c>)
 800362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003630:	08003661 	.word	0x08003661
 8003634:	0800369f 	.word	0x0800369f
 8003638:	080036dd 	.word	0x080036dd
 800363c:	0800371b 	.word	0x0800371b
 8003640:	08003759 	.word	0x08003759
 8003644:	08003797 	.word	0x08003797
 8003648:	080037d5 	.word	0x080037d5
 800364c:	08003813 	.word	0x08003813
 8003650:	08003851 	.word	0x08003851
 8003654:	08003891 	.word	0x08003891
 8003658:	080038d1 	.word	0x080038d1
 800365c:	08003911 	.word	0x08003911

		case 0: // Set K2=1
			PB0_G0_Reset();
 8003660:	2101      	movs	r1, #1
 8003662:	48c4      	ldr	r0, [pc, #784]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 8003664:	f7ff fe26 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB1_G1_Reset();
 8003668:	2102      	movs	r1, #2
 800366a:	48c2      	ldr	r0, [pc, #776]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 800366c:	f7ff fe22 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB2_G2_Reset();
 8003670:	2104      	movs	r1, #4
 8003672:	48c0      	ldr	r0, [pc, #768]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 8003674:	f7ff fe1e 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB10_G3_Reset();
 8003678:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800367c:	48bd      	ldr	r0, [pc, #756]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 800367e:	f7ff fe19 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB11_G4_Reset();
 8003682:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003686:	48bb      	ldr	r0, [pc, #748]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 8003688:	f7ff fe14 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			F_SA2_Reset();
 800368c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003694:	f7ff fe0e 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			K2=1;
 8003698:	2301      	movs	r3, #1
 800369a:	81fb      	strh	r3, [r7, #14]
			break;
 800369c:	e15f      	b.n	800395e <Set_Amp_Factor_K2+0x34a>
		case 1: // Set K2=2
			PB0_G0_Set();
 800369e:	2101      	movs	r1, #1
 80036a0:	48b4      	ldr	r0, [pc, #720]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80036a2:	f7ff fdf9 	bl	8003298 <LL_GPIO_SetOutputPin>
			PB1_G1_Reset();
 80036a6:	2102      	movs	r1, #2
 80036a8:	48b2      	ldr	r0, [pc, #712]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80036aa:	f7ff fe03 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB2_G2_Reset();
 80036ae:	2104      	movs	r1, #4
 80036b0:	48b0      	ldr	r0, [pc, #704]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80036b2:	f7ff fdff 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB10_G3_Reset();
 80036b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036ba:	48ae      	ldr	r0, [pc, #696]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80036bc:	f7ff fdfa 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB11_G4_Reset();
 80036c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036c4:	48ab      	ldr	r0, [pc, #684]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80036c6:	f7ff fdf5 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			F_SA2_Reset();
 80036ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036d2:	f7ff fdef 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			K2=2;
 80036d6:	2302      	movs	r3, #2
 80036d8:	81fb      	strh	r3, [r7, #14]
			break;
 80036da:	e140      	b.n	800395e <Set_Amp_Factor_K2+0x34a>
		case 2: // Set K2=4
			PB0_G0_Reset();
 80036dc:	2101      	movs	r1, #1
 80036de:	48a5      	ldr	r0, [pc, #660]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80036e0:	f7ff fde8 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB1_G1_Set();
 80036e4:	2102      	movs	r1, #2
 80036e6:	48a3      	ldr	r0, [pc, #652]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80036e8:	f7ff fdd6 	bl	8003298 <LL_GPIO_SetOutputPin>
			PB2_G2_Reset();
 80036ec:	2104      	movs	r1, #4
 80036ee:	48a1      	ldr	r0, [pc, #644]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80036f0:	f7ff fde0 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB10_G3_Reset();
 80036f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036f8:	489e      	ldr	r0, [pc, #632]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80036fa:	f7ff fddb 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB11_G4_Reset();
 80036fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003702:	489c      	ldr	r0, [pc, #624]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 8003704:	f7ff fdd6 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			F_SA2_Reset();
 8003708:	f44f 7180 	mov.w	r1, #256	; 0x100
 800370c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003710:	f7ff fdd0 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			K2=4;
 8003714:	2304      	movs	r3, #4
 8003716:	81fb      	strh	r3, [r7, #14]
			break;
 8003718:	e121      	b.n	800395e <Set_Amp_Factor_K2+0x34a>
		case 3: // Set K2=8
			PB0_G0_Set();
 800371a:	2101      	movs	r1, #1
 800371c:	4895      	ldr	r0, [pc, #596]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 800371e:	f7ff fdbb 	bl	8003298 <LL_GPIO_SetOutputPin>
			PB1_G1_Set();
 8003722:	2102      	movs	r1, #2
 8003724:	4893      	ldr	r0, [pc, #588]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 8003726:	f7ff fdb7 	bl	8003298 <LL_GPIO_SetOutputPin>
			PB2_G2_Reset();
 800372a:	2104      	movs	r1, #4
 800372c:	4891      	ldr	r0, [pc, #580]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 800372e:	f7ff fdc1 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB10_G3_Reset();
 8003732:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003736:	488f      	ldr	r0, [pc, #572]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 8003738:	f7ff fdbc 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB11_G4_Reset();
 800373c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003740:	488c      	ldr	r0, [pc, #560]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 8003742:	f7ff fdb7 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			F_SA2_Reset();
 8003746:	f44f 7180 	mov.w	r1, #256	; 0x100
 800374a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800374e:	f7ff fdb1 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			K2=8;
 8003752:	2308      	movs	r3, #8
 8003754:	81fb      	strh	r3, [r7, #14]
			break;
 8003756:	e102      	b.n	800395e <Set_Amp_Factor_K2+0x34a>
		case 4: // Set K2=16
			PB0_G0_Reset();
 8003758:	2101      	movs	r1, #1
 800375a:	4886      	ldr	r0, [pc, #536]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 800375c:	f7ff fdaa 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB1_G1_Reset();
 8003760:	2102      	movs	r1, #2
 8003762:	4884      	ldr	r0, [pc, #528]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 8003764:	f7ff fda6 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB2_G2_Set();
 8003768:	2104      	movs	r1, #4
 800376a:	4882      	ldr	r0, [pc, #520]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 800376c:	f7ff fd94 	bl	8003298 <LL_GPIO_SetOutputPin>
			PB10_G3_Reset();
 8003770:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003774:	487f      	ldr	r0, [pc, #508]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 8003776:	f7ff fd9d 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB11_G4_Reset();
 800377a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800377e:	487d      	ldr	r0, [pc, #500]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 8003780:	f7ff fd98 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			F_SA2_Reset();
 8003784:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800378c:	f7ff fd92 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			K2=16;
 8003790:	2310      	movs	r3, #16
 8003792:	81fb      	strh	r3, [r7, #14]
			break;
 8003794:	e0e3      	b.n	800395e <Set_Amp_Factor_K2+0x34a>
		case 5: // Set K2=32
			PB0_G0_Set();
 8003796:	2101      	movs	r1, #1
 8003798:	4876      	ldr	r0, [pc, #472]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 800379a:	f7ff fd7d 	bl	8003298 <LL_GPIO_SetOutputPin>
			PB1_G1_Reset();
 800379e:	2102      	movs	r1, #2
 80037a0:	4874      	ldr	r0, [pc, #464]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80037a2:	f7ff fd87 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB2_G2_Set();
 80037a6:	2104      	movs	r1, #4
 80037a8:	4872      	ldr	r0, [pc, #456]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80037aa:	f7ff fd75 	bl	8003298 <LL_GPIO_SetOutputPin>
			PB10_G3_Reset();
 80037ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037b2:	4870      	ldr	r0, [pc, #448]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80037b4:	f7ff fd7e 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB11_G4_Reset();
 80037b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80037bc:	486d      	ldr	r0, [pc, #436]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80037be:	f7ff fd79 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			F_SA2_Reset();
 80037c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037ca:	f7ff fd73 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			K2=32;
 80037ce:	2320      	movs	r3, #32
 80037d0:	81fb      	strh	r3, [r7, #14]
			break;
 80037d2:	e0c4      	b.n	800395e <Set_Amp_Factor_K2+0x34a>
		case 6: // Set K2=64
			PB0_G0_Reset();
 80037d4:	2101      	movs	r1, #1
 80037d6:	4867      	ldr	r0, [pc, #412]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80037d8:	f7ff fd6c 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB1_G1_Set();
 80037dc:	2102      	movs	r1, #2
 80037de:	4865      	ldr	r0, [pc, #404]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80037e0:	f7ff fd5a 	bl	8003298 <LL_GPIO_SetOutputPin>
			PB2_G2_Set();
 80037e4:	2104      	movs	r1, #4
 80037e6:	4863      	ldr	r0, [pc, #396]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80037e8:	f7ff fd56 	bl	8003298 <LL_GPIO_SetOutputPin>
			PB10_G3_Reset();
 80037ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037f0:	4860      	ldr	r0, [pc, #384]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80037f2:	f7ff fd5f 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB11_G4_Reset();
 80037f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80037fa:	485e      	ldr	r0, [pc, #376]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80037fc:	f7ff fd5a 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			F_SA2_Reset();
 8003800:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003808:	f7ff fd54 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			K2=64;
 800380c:	2340      	movs	r3, #64	; 0x40
 800380e:	81fb      	strh	r3, [r7, #14]
			break;
 8003810:	e0a5      	b.n	800395e <Set_Amp_Factor_K2+0x34a>
		case 7: // Set K2=128
			PB0_G0_Set();
 8003812:	2101      	movs	r1, #1
 8003814:	4857      	ldr	r0, [pc, #348]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 8003816:	f7ff fd3f 	bl	8003298 <LL_GPIO_SetOutputPin>
			PB1_G1_Set();
 800381a:	2102      	movs	r1, #2
 800381c:	4855      	ldr	r0, [pc, #340]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 800381e:	f7ff fd3b 	bl	8003298 <LL_GPIO_SetOutputPin>
			PB2_G2_Set();
 8003822:	2104      	movs	r1, #4
 8003824:	4853      	ldr	r0, [pc, #332]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 8003826:	f7ff fd37 	bl	8003298 <LL_GPIO_SetOutputPin>
			PB10_G3_Reset();
 800382a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800382e:	4851      	ldr	r0, [pc, #324]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 8003830:	f7ff fd40 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB11_G4_Reset();
 8003834:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003838:	484e      	ldr	r0, [pc, #312]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 800383a:	f7ff fd3b 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			F_SA2_Reset();
 800383e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003846:	f7ff fd35 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			K2=128;
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	81fb      	strh	r3, [r7, #14]
			break;
 800384e:	e086      	b.n	800395e <Set_Amp_Factor_K2+0x34a>
		case 8: // Set K2=256
			PB0_G0_Reset();
 8003850:	2101      	movs	r1, #1
 8003852:	4848      	ldr	r0, [pc, #288]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 8003854:	f7ff fd2e 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB1_G1_Reset();
 8003858:	2102      	movs	r1, #2
 800385a:	4846      	ldr	r0, [pc, #280]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 800385c:	f7ff fd2a 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB2_G2_Reset();
 8003860:	2104      	movs	r1, #4
 8003862:	4844      	ldr	r0, [pc, #272]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 8003864:	f7ff fd26 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB10_G3_Set();
 8003868:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800386c:	4841      	ldr	r0, [pc, #260]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 800386e:	f7ff fd13 	bl	8003298 <LL_GPIO_SetOutputPin>
			PB11_G4_Reset();
 8003872:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003876:	483f      	ldr	r0, [pc, #252]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 8003878:	f7ff fd1c 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			F_SA2_Reset();
 800387c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003884:	f7ff fd16 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			K2=256;
 8003888:	f44f 7380 	mov.w	r3, #256	; 0x100
 800388c:	81fb      	strh	r3, [r7, #14]
			break;
 800388e:	e066      	b.n	800395e <Set_Amp_Factor_K2+0x34a>
		case 9: // Set K2=512
			PB0_G0_Set();
 8003890:	2101      	movs	r1, #1
 8003892:	4838      	ldr	r0, [pc, #224]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 8003894:	f7ff fd00 	bl	8003298 <LL_GPIO_SetOutputPin>
			PB1_G1_Reset();
 8003898:	2102      	movs	r1, #2
 800389a:	4836      	ldr	r0, [pc, #216]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 800389c:	f7ff fd0a 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB2_G2_Reset();
 80038a0:	2104      	movs	r1, #4
 80038a2:	4834      	ldr	r0, [pc, #208]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80038a4:	f7ff fd06 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB10_G3_Set();
 80038a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80038ac:	4831      	ldr	r0, [pc, #196]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80038ae:	f7ff fcf3 	bl	8003298 <LL_GPIO_SetOutputPin>
			PB11_G4_Reset();
 80038b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80038b6:	482f      	ldr	r0, [pc, #188]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80038b8:	f7ff fcfc 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			F_SA2_Reset();
 80038bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80038c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038c4:	f7ff fcf6 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			K2=512;
 80038c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038cc:	81fb      	strh	r3, [r7, #14]
			break;
 80038ce:	e046      	b.n	800395e <Set_Amp_Factor_K2+0x34a>
		case 10: // Set K2=1024
			PB0_G0_Reset();
 80038d0:	2101      	movs	r1, #1
 80038d2:	4828      	ldr	r0, [pc, #160]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80038d4:	f7ff fcee 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB1_G1_Set();
 80038d8:	2102      	movs	r1, #2
 80038da:	4826      	ldr	r0, [pc, #152]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80038dc:	f7ff fcdc 	bl	8003298 <LL_GPIO_SetOutputPin>
			PB2_G2_Reset();
 80038e0:	2104      	movs	r1, #4
 80038e2:	4824      	ldr	r0, [pc, #144]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80038e4:	f7ff fce6 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB10_G3_Set();
 80038e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80038ec:	4821      	ldr	r0, [pc, #132]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80038ee:	f7ff fcd3 	bl	8003298 <LL_GPIO_SetOutputPin>
			PB11_G4_Reset();
 80038f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80038f6:	481f      	ldr	r0, [pc, #124]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 80038f8:	f7ff fcdc 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			F_SA2_Reset();
 80038fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003904:	f7ff fcd6 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			K2=1024;
 8003908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800390c:	81fb      	strh	r3, [r7, #14]
			break;
 800390e:	e026      	b.n	800395e <Set_Amp_Factor_K2+0x34a>
		case 11: // Set K2=2048
			PB0_G0_Reset();
 8003910:	2101      	movs	r1, #1
 8003912:	4818      	ldr	r0, [pc, #96]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 8003914:	f7ff fcce 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB1_G1_Set();
 8003918:	2102      	movs	r1, #2
 800391a:	4816      	ldr	r0, [pc, #88]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 800391c:	f7ff fcbc 	bl	8003298 <LL_GPIO_SetOutputPin>
			PB2_G2_Reset();
 8003920:	2104      	movs	r1, #4
 8003922:	4814      	ldr	r0, [pc, #80]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 8003924:	f7ff fcc6 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			PB10_G3_Set();
 8003928:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800392c:	4811      	ldr	r0, [pc, #68]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 800392e:	f7ff fcb3 	bl	8003298 <LL_GPIO_SetOutputPin>
			PB11_G4_Reset();
 8003932:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003936:	480f      	ldr	r0, [pc, #60]	; (8003974 <Set_Amp_Factor_K2+0x360>)
 8003938:	f7ff fcbc 	bl	80032b4 <LL_GPIO_ResetOutputPin>
			F_SA2_Set();
 800393c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003944:	f7ff fca8 	bl	8003298 <LL_GPIO_SetOutputPin>
			K2=2048;
 8003948:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800394c:	81fb      	strh	r3, [r7, #14]
			break;
 800394e:	e006      	b.n	800395e <Set_Amp_Factor_K2+0x34a>
		default:
			Error_Handler();
 8003950:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003954:	4808      	ldr	r0, [pc, #32]	; (8003978 <Set_Amp_Factor_K2+0x364>)
 8003956:	f7ff fc8f 	bl	8003278 <_Error_Handler>
			return ERROR;
 800395a:	2300      	movs	r3, #0
 800395c:	e005      	b.n	800396a <Set_Amp_Factor_K2+0x356>
	}

#ifdef DEBUGprintf
	printf("K2 = %d \r\n",K2);
 800395e:	89fb      	ldrh	r3, [r7, #14]
 8003960:	4619      	mov	r1, r3
 8003962:	4806      	ldr	r0, [pc, #24]	; (800397c <Set_Amp_Factor_K2+0x368>)
 8003964:	f000 fedc 	bl	8004720 <iprintf>
#endif

	return SUCCESS;
 8003968:	2301      	movs	r3, #1
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	48000400 	.word	0x48000400
 8003978:	08005648 	.word	0x08005648
 800397c:	08005720 	.word	0x08005720

08003980 <Manual_settings>:
  * @param  number_settings
  * @retval An ErrorStatus enumeration
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
 */
ErrorStatus Manual_settings(uint8_t namber_settings, enum PWR_TIMx timer_numberr){
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	460a      	mov	r2, r1
 800398a:	71fb      	strb	r3, [r7, #7]
 800398c:	4613      	mov	r3, r2
 800398e:	71bb      	strb	r3, [r7, #6]

	uint8_t namber_settings_K1_k2,namber_settings_Fcut;

	namber_settings_K1_k2 = 0x7 & namber_settings;
 8003990:	79fb      	ldrb	r3, [r7, #7]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	73fb      	strb	r3, [r7, #15]
	namber_settings_Fcut = namber_settings >> 3;
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	08db      	lsrs	r3, r3, #3
 800399c:	73bb      	strb	r3, [r7, #14]

#ifdef DEBUGprintf
	printf("\r\nManual configuration of the analog module:\r\n");
 800399e:	4845      	ldr	r0, [pc, #276]	; (8003ab4 <Manual_settings+0x134>)
 80039a0:	f000 ff32 	bl	8004808 <puts>
#endif

	switch (namber_settings_K1_k2){
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	2b07      	cmp	r3, #7
 80039a8:	d84a      	bhi.n	8003a40 <Manual_settings+0xc0>
 80039aa:	a201      	add	r2, pc, #4	; (adr r2, 80039b0 <Manual_settings+0x30>)
 80039ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b0:	080039d1 	.word	0x080039d1
 80039b4:	080039df 	.word	0x080039df
 80039b8:	080039ed 	.word	0x080039ed
 80039bc:	080039fb 	.word	0x080039fb
 80039c0:	08003a09 	.word	0x08003a09
 80039c4:	08003a17 	.word	0x08003a17
 80039c8:	08003a25 	.word	0x08003a25
 80039cc:	08003a33 	.word	0x08003a33

		case 0: //K1=1 K2=1 
			Set_Amp_Factor_K1(0);
 80039d0:	2000      	movs	r0, #0
 80039d2:	f7ff fdab 	bl	800352c <Set_Amp_Factor_K1>
			Set_Amp_Factor_K2(0);
 80039d6:	2000      	movs	r0, #0
 80039d8:	f7ff fe1c 	bl	8003614 <Set_Amp_Factor_K2>
			break;
 80039dc:	e037      	b.n	8003a4e <Manual_settings+0xce>

		case 1: //K1=10 K2=1 
			Set_Amp_Factor_K1(1);
 80039de:	2001      	movs	r0, #1
 80039e0:	f7ff fda4 	bl	800352c <Set_Amp_Factor_K1>
			Set_Amp_Factor_K2(0);
 80039e4:	2000      	movs	r0, #0
 80039e6:	f7ff fe15 	bl	8003614 <Set_Amp_Factor_K2>
			break;
 80039ea:	e030      	b.n	8003a4e <Manual_settings+0xce>

		case 2: //K1=10 K2=2
			Set_Amp_Factor_K1(1);
 80039ec:	2001      	movs	r0, #1
 80039ee:	f7ff fd9d 	bl	800352c <Set_Amp_Factor_K1>
			Set_Amp_Factor_K2(1);
 80039f2:	2001      	movs	r0, #1
 80039f4:	f7ff fe0e 	bl	8003614 <Set_Amp_Factor_K2>
			break;
 80039f8:	e029      	b.n	8003a4e <Manual_settings+0xce>

		case 3: //K1=10 K2=4
			Set_Amp_Factor_K1(1);
 80039fa:	2001      	movs	r0, #1
 80039fc:	f7ff fd96 	bl	800352c <Set_Amp_Factor_K1>
			Set_Amp_Factor_K2(2);
 8003a00:	2002      	movs	r0, #2
 8003a02:	f7ff fe07 	bl	8003614 <Set_Amp_Factor_K2>
			break;
 8003a06:	e022      	b.n	8003a4e <Manual_settings+0xce>

		case 4: //K1=100 K2=1
			Set_Amp_Factor_K1(2);
 8003a08:	2002      	movs	r0, #2
 8003a0a:	f7ff fd8f 	bl	800352c <Set_Amp_Factor_K1>
			Set_Amp_Factor_K2(0);
 8003a0e:	2000      	movs	r0, #0
 8003a10:	f7ff fe00 	bl	8003614 <Set_Amp_Factor_K2>
			break;
 8003a14:	e01b      	b.n	8003a4e <Manual_settings+0xce>

		case 5: //K1=100 K2=2
			Set_Amp_Factor_K1(2);
 8003a16:	2002      	movs	r0, #2
 8003a18:	f7ff fd88 	bl	800352c <Set_Amp_Factor_K1>
			Set_Amp_Factor_K2(1);
 8003a1c:	2001      	movs	r0, #1
 8003a1e:	f7ff fdf9 	bl	8003614 <Set_Amp_Factor_K2>
			break;
 8003a22:	e014      	b.n	8003a4e <Manual_settings+0xce>

		case 6: //K1=100 K2=4
			Set_Amp_Factor_K1(2);
 8003a24:	2002      	movs	r0, #2
 8003a26:	f7ff fd81 	bl	800352c <Set_Amp_Factor_K1>
			Set_Amp_Factor_K2(2);
 8003a2a:	2002      	movs	r0, #2
 8003a2c:	f7ff fdf2 	bl	8003614 <Set_Amp_Factor_K2>
			break;
 8003a30:	e00d      	b.n	8003a4e <Manual_settings+0xce>

		case 7: //K1=1000 K2=2048
			Set_Amp_Factor_K1(3);
 8003a32:	2003      	movs	r0, #3
 8003a34:	f7ff fd7a 	bl	800352c <Set_Amp_Factor_K1>
			Set_Amp_Factor_K2(11);
 8003a38:	200b      	movs	r0, #11
 8003a3a:	f7ff fdeb 	bl	8003614 <Set_Amp_Factor_K2>
			break;
 8003a3e:	e006      	b.n	8003a4e <Manual_settings+0xce>

		default:
			Error_Handler();
 8003a40:	f240 114d 	movw	r1, #333	; 0x14d
 8003a44:	481c      	ldr	r0, [pc, #112]	; (8003ab8 <Manual_settings+0x138>)
 8003a46:	f7ff fc17 	bl	8003278 <_Error_Handler>
			return ERROR;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e02e      	b.n	8003aac <Manual_settings+0x12c>
	}

	switch(namber_settings_Fcut){
 8003a4e:	7bbb      	ldrb	r3, [r7, #14]
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d823      	bhi.n	8003a9c <Manual_settings+0x11c>
 8003a54:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <Manual_settings+0xdc>)
 8003a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003a6d 	.word	0x08003a6d
 8003a60:	08003a79 	.word	0x08003a79
 8003a64:	08003a85 	.word	0x08003a85
 8003a68:	08003a91 	.word	0x08003a91

		case 0: //Fcut=10
			Set_Ficlk_and_F_SAx(1, timer_numberr);
 8003a6c:	79bb      	ldrb	r3, [r7, #6]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	2001      	movs	r0, #1
 8003a72:	f7ff fc85 	bl	8003380 <Set_Ficlk_and_F_SAx>
			break;
 8003a76:	e018      	b.n	8003aaa <Manual_settings+0x12a>

		case 1: //Fcut=300
			Set_Ficlk_and_F_SAx(30, timer_numberr);
 8003a78:	79bb      	ldrb	r3, [r7, #6]
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	201e      	movs	r0, #30
 8003a7e:	f7ff fc7f 	bl	8003380 <Set_Ficlk_and_F_SAx>
			break;
 8003a82:	e012      	b.n	8003aaa <Manual_settings+0x12a>

		case 2: //Fcut=700
			Set_Ficlk_and_F_SAx(70, timer_numberr);
 8003a84:	79bb      	ldrb	r3, [r7, #6]
 8003a86:	4619      	mov	r1, r3
 8003a88:	2046      	movs	r0, #70	; 0x46
 8003a8a:	f7ff fc79 	bl	8003380 <Set_Ficlk_and_F_SAx>
			break;
 8003a8e:	e00c      	b.n	8003aaa <Manual_settings+0x12a>

		case 3: ////Fcut=1000
			Set_Ficlk_and_F_SAx(100, timer_numberr);
 8003a90:	79bb      	ldrb	r3, [r7, #6]
 8003a92:	4619      	mov	r1, r3
 8003a94:	2064      	movs	r0, #100	; 0x64
 8003a96:	f7ff fc73 	bl	8003380 <Set_Ficlk_and_F_SAx>
			break;
 8003a9a:	e006      	b.n	8003aaa <Manual_settings+0x12a>

		default:
			Error_Handler();
 8003a9c:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8003aa0:	4805      	ldr	r0, [pc, #20]	; (8003ab8 <Manual_settings+0x138>)
 8003aa2:	f7ff fbe9 	bl	8003278 <_Error_Handler>
			return ERROR;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	e000      	b.n	8003aac <Manual_settings+0x12c>
	}

	return SUCCESS;
 8003aaa:	2301      	movs	r3, #1
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	0800572c 	.word	0x0800572c
 8003ab8:	08005648 	.word	0x08005648

08003abc <LL_I2C_IsActiveFlag_TXE>:
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	bf0c      	ite	eq
 8003ad0:	2301      	moveq	r3, #1
 8003ad2:	2300      	movne	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <LL_I2C_IsActiveFlag_RXNE>:
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	bf0c      	ite	eq
 8003af6:	2301      	moveq	r3, #1
 8003af8:	2300      	movne	r3, #0
 8003afa:	b2db      	uxtb	r3, r3
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <LL_I2C_IsActiveFlag_STOP>:
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	bf0c      	ite	eq
 8003b1c:	2301      	moveq	r3, #1
 8003b1e:	2300      	movne	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <LL_I2C_IsActiveFlag_TC>:
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3e:	2b40      	cmp	r3, #64	; 0x40
 8003b40:	bf0c      	ite	eq
 8003b42:	2301      	moveq	r3, #1
 8003b44:	2300      	movne	r3, #0
 8003b46:	b2db      	uxtb	r3, r3
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <LL_I2C_IsActiveFlag_BUSY>:
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b68:	bf0c      	ite	eq
 8003b6a:	2301      	moveq	r3, #1
 8003b6c:	2300      	movne	r3, #0
 8003b6e:	b2db      	uxtb	r3, r3
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <LL_I2C_ClearFlag_STOP>:
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	f043 0220 	orr.w	r2, r3, #32
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	61da      	str	r2, [r3, #28]
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	0d5b      	lsrs	r3, r3, #21
 8003bb2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <LL_I2C_HandleTransfer+0x48>)
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	401a      	ands	r2, r3
 8003bbe:	68b9      	ldr	r1, [r7, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4319      	orrs	r1, r3
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	041b      	lsls	r3, r3, #16
 8003bc8:	4319      	orrs	r1, r3
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	4319      	orrs	r1, r3
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8003bd8:	bf00      	nop
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	03ff7bff 	.word	0x03ff7bff

08003be8 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	b2db      	uxtb	r3, r3
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8003c0e:	78fa      	ldrb	r2, [r7, #3]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <I2C_Read_addr_a_module>:
  * @param  namber_value
  * @retval An ErrorStatus enumeration
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
uint8_t I2C_Read_addr_a_module(I2C_TypeDef *I2Cx,uint32_t SlaveAddr){
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]

	uint8_t address_module;

	SlaveAddr=SlaveAddr<<1;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	603b      	str	r3, [r7, #0]
	
	while(LL_I2C_IsActiveFlag_BUSY(I2Cx)==SET); 
 8003c30:	bf00      	nop
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff ff8e 	bl	8003b54 <LL_I2C_IsActiveFlag_BUSY>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d0f9      	beq.n	8003c32 <I2C_Read_addr_a_module+0x12>

	LL_I2C_HandleTransfer(I2Cx, SlaveAddr,LL_I2C_ADDRSLAVE_7BIT, 1,LL_I2C_MODE_SOFTEND,LL_I2C_GENERATE_START_WRITE ); //LL_I2C_GENERATE_START_READ
 8003c3e:	4b28      	ldr	r3, [pc, #160]	; (8003ce0 <I2C_Read_addr_a_module+0xc0>)
 8003c40:	9301      	str	r3, [sp, #4]
 8003c42:	2300      	movs	r3, #0
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	2301      	movs	r3, #1
 8003c48:	2200      	movs	r2, #0
 8003c4a:	6839      	ldr	r1, [r7, #0]
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff ffa5 	bl	8003b9c <LL_I2C_HandleTransfer>
	while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);
 8003c52:	bf00      	nop
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff ff31 	bl	8003abc <LL_I2C_IsActiveFlag_TXE>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f9      	beq.n	8003c54 <I2C_Read_addr_a_module+0x34>


	LL_I2C_TransmitData8(I2Cx, 0x00);
 8003c60:	2100      	movs	r1, #0
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff ffcd 	bl	8003c02 <LL_I2C_TransmitData8>
	while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);
 8003c68:	bf00      	nop
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff ff26 	bl	8003abc <LL_I2C_IsActiveFlag_TXE>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f9      	beq.n	8003c6a <I2C_Read_addr_a_module+0x4a>
	while(LL_I2C_IsActiveFlag_TC(I2Cx)==RESET);
 8003c76:	bf00      	nop
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7ff ff58 	bl	8003b2e <LL_I2C_IsActiveFlag_TC>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f9      	beq.n	8003c78 <I2C_Read_addr_a_module+0x58>

	LL_I2C_HandleTransfer(I2Cx, SlaveAddr,LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_RESTART_7BIT_READ); //LL_I2C_MODE_SOFTEND
 8003c84:	4b17      	ldr	r3, [pc, #92]	; (8003ce4 <I2C_Read_addr_a_module+0xc4>)
 8003c86:	9301      	str	r3, [sp, #4]
 8003c88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	2301      	movs	r3, #1
 8003c90:	2200      	movs	r2, #0
 8003c92:	6839      	ldr	r1, [r7, #0]
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff ff81 	bl	8003b9c <LL_I2C_HandleTransfer>

	while(LL_I2C_IsActiveFlag_STOP(I2Cx)==RESET);
 8003c9a:	bf00      	nop
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff ff33 	bl	8003b08 <LL_I2C_IsActiveFlag_STOP>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f9      	beq.n	8003c9c <I2C_Read_addr_a_module+0x7c>
	while(LL_I2C_IsActiveFlag_RXNE(I2Cx)==RESET);
 8003ca8:	bf00      	nop
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff ff19 	bl	8003ae2 <LL_I2C_IsActiveFlag_RXNE>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f9      	beq.n	8003caa <I2C_Read_addr_a_module+0x8a>

	address_module=(0x1F & (LL_I2C_ReceiveData8(I2Cx))); //0x1F & - because address contain only 5 bits (xxxAAAAA)
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff ff96 	bl	8003be8 <LL_I2C_ReceiveData8>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f003 031f 	and.w	r3, r3, #31
 8003cc2:	73fb      	strb	r3, [r7, #15]

	LL_I2C_ClearFlag_STOP(I2Cx);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff ff59 	bl	8003b7c <LL_I2C_ClearFlag_STOP>

#ifdef DEBUGprintf
			printf("Address Module=%d \r\n", address_module);
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4806      	ldr	r0, [pc, #24]	; (8003ce8 <I2C_Read_addr_a_module+0xc8>)
 8003cd0:	f000 fd26 	bl	8004720 <iprintf>
#endif

	return address_module;
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]

}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	80002000 	.word	0x80002000
 8003ce4:	80002400 	.word	0x80002400
 8003ce8:	0800575c 	.word	0x0800575c

08003cec <LL_USART_TransmitData9>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0x1FF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData9(USART_TypeDef *USARTx, uint16_t Value)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	807b      	strh	r3, [r7, #2]
  USARTx->TDR = Value & 0x1FFU;
 8003cf8:	887b      	ldrh	r3, [r7, #2]
 8003cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <LL_GPIO_IsInputPinSet>:
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	401a      	ands	r2, r3
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	bf0c      	ite	eq
 8003d28:	2301      	moveq	r3, #1
 8003d2a:	2300      	movne	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <LL_GPIO_SetOutputPin>:
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	619a      	str	r2, [r3, #24]
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <LL_GPIO_ResetOutputPin>:
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	0000      	movs	r0, r0
 8003d74:	0000      	movs	r0, r0
	...

08003d78 <main>:
_UART_BUF uart1_buf, *UART1_BUF_ptr=&uart1_buf;

_ADC_PARAMETERS adc_param, *ADC_PARAM_ptr=&adc_param;


int main(void){
 8003d78:	b590      	push	{r4, r7, lr}
 8003d7a:	b08b      	sub	sp, #44	; 0x2c
 8003d7c:	af00      	add	r7, sp, #0

	uint8_t i=0, pin=1;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003d84:	2301      	movs	r3, #1
 8003d86:	76fb      	strb	r3, [r7, #27]
	//uint8_t ADC_data_mas[3];
	uint8_t ADC_data_transmit[4];

	LL_Init();
 8003d88:	f7fe fe54 	bl	8002a34 <LL_Init>
	SystemClock_Config(); //Setup system clock at 80 MHz
 8003d8c:	f7fe feb4 	bl	8002af8 <SystemClock_Config>
	//LL_RCC_GetSystemClocksFreq(CHECK_RCC_CLOCKS); // Only for check setup clock Not need use in release
	printf("Hello human. I am Analog module.\r\n");
 8003d90:	48ad      	ldr	r0, [pc, #692]	; (8004048 <main+0x2d0>)
 8003d92:	f000 fd39 	bl	8004808 <puts>
	printf("Start setup periphery STM32L452.....\r\n");
 8003d96:	48ad      	ldr	r0, [pc, #692]	; (800404c <main+0x2d4>)
 8003d98:	f000 fd36 	bl	8004808 <puts>
	SetupLED();
 8003d9c:	f7fe ff1a 	bl	8002bd4 <SetupLED>
	SetupGPIO();
 8003da0:	f7fe ff3a 	bl	8002c18 <SetupGPIO>
	USART1_Init();
 8003da4:	f7fe fff4 	bl	8002d90 <USART1_Init>
	SPI2_Init();
 8003da8:	f7ff f854 	bl	8002e54 <SPI2_Init>
	I2C1_Init();
 8003dac:	f7ff f8b6 	bl	8002f1c <I2C1_Init>
	PWM_Init(PWM_TIM2_CH2_PA1); //PWM_TIM3_CH1_PA6
 8003db0:	2000      	movs	r0, #0
 8003db2:	f7ff f901 	bl	8002fb8 <PWM_Init>
	SetupInterrupt();
 8003db6:	f7ff f9b3 	bl	8003120 <SetupInterrupt>
	//MX_IWDG_Init();
	printf("Finish setup periphery. Success! \r\n");
 8003dba:	48a5      	ldr	r0, [pc, #660]	; (8004050 <main+0x2d8>)
 8003dbc:	f000 fd24 	bl	8004808 <puts>
	
	PB14_STOP_ADC_Set(); 
 8003dc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003dc4:	48a3      	ldr	r0, [pc, #652]	; (8004054 <main+0x2dc>)
 8003dc6:	f7ff ffb8 	bl	8003d3a <LL_GPIO_SetOutputPin>
	PC7_MCLK_Reset();
 8003dca:	2180      	movs	r1, #128	; 0x80
 8003dcc:	48a2      	ldr	r0, [pc, #648]	; (8004058 <main+0x2e0>)
 8003dce:	f7ff ffc2 	bl	8003d56 <LL_GPIO_ResetOutputPin>
    ADC_PARAM_ptr->ADC_DRDY_flag = 0;
 8003dd2:	4ba2      	ldr	r3, [pc, #648]	; (800405c <main+0x2e4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
    ADC_PARAM_ptr->DRDY_GOOD_flag = 0;
 8003dda:	4ba0      	ldr	r3, [pc, #640]	; (800405c <main+0x2e4>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2200      	movs	r2, #0
 8003de0:	705a      	strb	r2, [r3, #1]
    ADC_PARAM_ptr->PULSE_flag = 0;
 8003de2:	4b9e      	ldr	r3, [pc, #632]	; (800405c <main+0x2e4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2200      	movs	r2, #0
 8003de8:	709a      	strb	r2, [r3, #2]
    ADC_PARAM_ptr->Count_MCLK = 0;
 8003dea:	4b9c      	ldr	r3, [pc, #624]	; (800405c <main+0x2e4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2200      	movs	r2, #0
 8003df0:	70da      	strb	r2, [r3, #3]
    printf("Default settings. Success! \r\n");
 8003df2:	489b      	ldr	r0, [pc, #620]	; (8004060 <main+0x2e8>)
 8003df4:	f000 fd08 	bl	8004808 <puts>


	LED_Yellow_HL1_ON();
 8003df8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003dfc:	4896      	ldr	r0, [pc, #600]	; (8004058 <main+0x2e0>)
 8003dfe:	f7ff ffaa 	bl	8003d56 <LL_GPIO_ResetOutputPin>
	LED_Green_HL2_ON();
 8003e02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e06:	4894      	ldr	r0, [pc, #592]	; (8004058 <main+0x2e0>)
 8003e08:	f7ff ffa5 	bl	8003d56 <LL_GPIO_ResetOutputPin>

	CONF_MOD_ptr->addr_module =I2C_Read_addr_a_module(I2C1, ADDR_I2C_TCA9554PWR);	
 8003e0c:	4b95      	ldr	r3, [pc, #596]	; (8004064 <main+0x2ec>)
 8003e0e:	681c      	ldr	r4, [r3, #0]
 8003e10:	2120      	movs	r1, #32
 8003e12:	4895      	ldr	r0, [pc, #596]	; (8004068 <main+0x2f0>)
 8003e14:	f7ff ff04 	bl	8003c20 <I2C_Read_addr_a_module>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	7023      	strb	r3, [r4, #0]
	
	// Manual settings if jumper is set
	if( LL_GPIO_IsInputPinSet(GPIOD, LL_GPIO_PIN_2) == RESET ){ //check jumper
 8003e1c:	2104      	movs	r1, #4
 8003e1e:	4893      	ldr	r0, [pc, #588]	; (800406c <main+0x2f4>)
 8003e20:	f7ff ff76 	bl	8003d10 <LL_GPIO_IsInputPinSet>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10a      	bne.n	8003e40 <main+0xc8>
		Manual_settings(CONF_MOD_ptr->addr_module, PWM_TIM2_CH2_PA1);
 8003e2a:	4b8e      	ldr	r3, [pc, #568]	; (8004064 <main+0x2ec>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2100      	movs	r1, #0
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff fda4 	bl	8003980 <Manual_settings>
		CONF_MOD_ptr->addr_module = 0x01;
 8003e38:	4b8a      	ldr	r3, [pc, #552]	; (8004064 <main+0x2ec>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	701a      	strb	r2, [r3, #0]
	} 
	
	CONF_MOD_ptr-> addr_module_req_data_adc = (CONF_MOD_ptr->addr_module << 3)| 0x01;
 8003e40:	4b88      	ldr	r3, [pc, #544]	; (8004064 <main+0x2ec>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a87      	ldr	r2, [pc, #540]	; (8004064 <main+0x2ec>)
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	7812      	ldrb	r2, [r2, #0]
 8003e4a:	00d2      	lsls	r2, r2, #3
 8003e4c:	b252      	sxtb	r2, r2
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	b252      	sxtb	r2, r2
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	705a      	strb	r2, [r3, #1]

	LED_Green_HL3_ON();
 8003e58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e5c:	487e      	ldr	r0, [pc, #504]	; (8004058 <main+0x2e0>)
 8003e5e:	f7ff ff7a 	bl	8003d56 <LL_GPIO_ResetOutputPin>

    //To OD выстасить статутсный байт 


	int32_t RAW_DATA_24_ADC =  0x800001; //0x7FFFFF;//
 8003e62:	4b83      	ldr	r3, [pc, #524]	; (8004070 <main+0x2f8>)
 8003e64:	623b      	str	r3, [r7, #32]
			int16_t RAW_DATA_16_ADC = 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	833b      	strh	r3, [r7, #24]
			uint8_t data_mas[2] = {0};
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	81bb      	strh	r3, [r7, #12]

			float DATA_24_ADC = 0;
 8003e6e:	f04f 0300 	mov.w	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]
			float DATA_16_ADC = 0;
 8003e74:	f04f 0300 	mov.w	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]

			if ( (RAW_DATA_24_ADC & 0x800000) == 0x800000 ){
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d009      	beq.n	8003e98 <main+0x120>
				RAW_DATA_24_ADC = RAW_DATA_24_ADC & 0x7FFFFF; //убераем 24 бит
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003e8a:	623b      	str	r3, [r7, #32]
				RAW_DATA_24_ADC = RAW_DATA_24_ADC | 0xFF800000; //
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8003e92:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8003e96:	623b      	str	r3, [r7, #32]
			}

			DATA_24_ADC = (((float)RAW_DATA_24_ADC)/16777216)*5;
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ea2:	eddf 6a74 	vldr	s13, [pc, #464]	; 8004074 <main+0x2fc>
 8003ea6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003eaa:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003eb2:	edc7 7a05 	vstr	s15, [r7, #20]

			DATA_16_ADC = ((DATA_24_ADC* 65536)/5);
 8003eb6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003eba:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8004078 <main+0x300>
 8003ebe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ec2:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003ec6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003eca:	edc7 7a07 	vstr	s15, [r7, #28]

			if(DATA_16_ADC<0){
 8003ece:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ed2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eda:	d519      	bpl.n	8003f10 <main+0x198>
				if(DATA_16_ADC > -32768){
 8003edc:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ee0:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800407c <main+0x304>
 8003ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eec:	dd29      	ble.n	8003f42 <main+0x1ca>
					DATA_16_ADC = DATA_16_ADC - 0.55;
 8003eee:	69f8      	ldr	r0, [r7, #28]
 8003ef0:	f7fc fb2a 	bl	8000548 <__aeabi_f2d>
 8003ef4:	a352      	add	r3, pc, #328	; (adr r3, 8004040 <main+0x2c8>)
 8003ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efa:	f7fc f9c5 	bl	8000288 <__aeabi_dsub>
 8003efe:	4603      	mov	r3, r0
 8003f00:	460c      	mov	r4, r1
 8003f02:	4618      	mov	r0, r3
 8003f04:	4621      	mov	r1, r4
 8003f06:	f7fc fb73 	bl	80005f0 <__aeabi_d2f>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	e018      	b.n	8003f42 <main+0x1ca>
				}

			}else{
				if(DATA_16_ADC < 32767){
 8003f10:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f14:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8004080 <main+0x308>
 8003f18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f20:	d50f      	bpl.n	8003f42 <main+0x1ca>
					DATA_16_ADC = DATA_16_ADC + 0.55;
 8003f22:	69f8      	ldr	r0, [r7, #28]
 8003f24:	f7fc fb10 	bl	8000548 <__aeabi_f2d>
 8003f28:	a345      	add	r3, pc, #276	; (adr r3, 8004040 <main+0x2c8>)
 8003f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2e:	f7fc f9ad 	bl	800028c <__adddf3>
 8003f32:	4603      	mov	r3, r0
 8003f34:	460c      	mov	r4, r1
 8003f36:	4618      	mov	r0, r3
 8003f38:	4621      	mov	r1, r4
 8003f3a:	f7fc fb59 	bl	80005f0 <__aeabi_d2f>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	61fb      	str	r3, [r7, #28]
				}

			}
			//RAW_DATA_16_ADC = (int16_t)((DATA_24_ADC* 65536)/5);
			RAW_DATA_16_ADC = (int16_t)DATA_16_ADC;
 8003f42:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f4a:	edc7 7a01 	vstr	s15, [r7, #4]
 8003f4e:	88bb      	ldrh	r3, [r7, #4]
 8003f50:	833b      	strh	r3, [r7, #24]

			data_mas[0] = (uint8_t)(RAW_DATA_16_ADC>>8);
 8003f52:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003f56:	121b      	asrs	r3, r3, #8
 8003f58:	b21b      	sxth	r3, r3
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	733b      	strb	r3, [r7, #12]
			data_mas[1] =  (uint8_t)RAW_DATA_16_ADC;
 8003f5e:	8b3b      	ldrh	r3, [r7, #24]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	737b      	strb	r3, [r7, #13]


	//Read ADC if we got ADC interrupt 
	if(CONF_MOD_ptr->start_stop_ADC == 0x02 && ADC_PARAM_ptr->ADC_DRDY_flag==1 ){
 8003f64:	4b3f      	ldr	r3, [pc, #252]	; (8004064 <main+0x2ec>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	789b      	ldrb	r3, [r3, #2]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	f040 80be 	bne.w	80040ec <main+0x374>
 8003f70:	4b3a      	ldr	r3, [pc, #232]	; (800405c <main+0x2e4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	f040 80b8 	bne.w	80040ec <main+0x374>

		ADC_PARAM_ptr->ADC_DRDY_flag=0;
 8003f7c:	4b37      	ldr	r3, [pc, #220]	; (800405c <main+0x2e4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2200      	movs	r2, #0
 8003f82:	701a      	strb	r2, [r3, #0]
			}
		}*/
 /////////////////////////////////////////


		ADC_data_transmit[0] =  CONF_MOD_ptr->addr_module << 3;
 8003f84:	4b37      	ldr	r3, [pc, #220]	; (8004064 <main+0x2ec>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	743b      	strb	r3, [r7, #16]
		ADC_data_transmit[1] = 0x00;
 8003f90:	2300      	movs	r3, #0
 8003f92:	747b      	strb	r3, [r7, #17]
		ADC_data_transmit[2] = data_mas[0];
 8003f94:	7b3b      	ldrb	r3, [r7, #12]
 8003f96:	74bb      	strb	r3, [r7, #18]
		ADC_data_transmit[3] = data_mas[1];
 8003f98:	7b7b      	ldrb	r3, [r7, #13]
 8003f9a:	74fb      	strb	r3, [r7, #19]

		//if( VALUE_COMP1() == 1 && VALUE_COMP2() ==1 && VALUE_COMP4() == 0){ 
		//	ADC_data_transmit[0] = ADC_data_transmit[0] | 0x00; // Error COMP1 and COMP2
		//	CONF_MOD_ptr->status_module = 0x15

		if( VALUE_COMP1() == 0 && VALUE_COMP2() == 1 && VALUE_COMP4() == 0){ 
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	482e      	ldr	r0, [pc, #184]	; (8004058 <main+0x2e0>)
 8003fa0:	f7ff feb6 	bl	8003d10 <LL_GPIO_IsInputPinSet>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d118      	bne.n	8003fdc <main+0x264>
 8003faa:	2102      	movs	r1, #2
 8003fac:	482a      	ldr	r0, [pc, #168]	; (8004058 <main+0x2e0>)
 8003fae:	f7ff feaf 	bl	8003d10 <LL_GPIO_IsInputPinSet>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d111      	bne.n	8003fdc <main+0x264>
 8003fb8:	2104      	movs	r1, #4
 8003fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fbe:	f7ff fea7 	bl	8003d10 <LL_GPIO_IsInputPinSet>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d109      	bne.n	8003fdc <main+0x264>
			ADC_data_transmit[0] = ADC_data_transmit[0] | 0x04;  //Error  COMP2
 8003fc8:	7c3b      	ldrb	r3, [r7, #16]
 8003fca:	f043 0304 	orr.w	r3, r3, #4
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	743b      	strb	r3, [r7, #16]
			CONF_MOD_ptr->status_module = 0x15;
 8003fd2:	4b24      	ldr	r3, [pc, #144]	; (8004064 <main+0x2ec>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2215      	movs	r2, #21
 8003fd8:	719a      	strb	r2, [r3, #6]
 8003fda:	e058      	b.n	800408e <main+0x316>

		} else if( VALUE_COMP1() == 1 && VALUE_COMP2() ==0 && VALUE_COMP4() == 0){  
 8003fdc:	2101      	movs	r1, #1
 8003fde:	481e      	ldr	r0, [pc, #120]	; (8004058 <main+0x2e0>)
 8003fe0:	f7ff fe96 	bl	8003d10 <LL_GPIO_IsInputPinSet>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d118      	bne.n	800401c <main+0x2a4>
 8003fea:	2102      	movs	r1, #2
 8003fec:	481a      	ldr	r0, [pc, #104]	; (8004058 <main+0x2e0>)
 8003fee:	f7ff fe8f 	bl	8003d10 <LL_GPIO_IsInputPinSet>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d111      	bne.n	800401c <main+0x2a4>
 8003ff8:	2104      	movs	r1, #4
 8003ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ffe:	f7ff fe87 	bl	8003d10 <LL_GPIO_IsInputPinSet>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d109      	bne.n	800401c <main+0x2a4>
			ADC_data_transmit[0] = ADC_data_transmit[0] | 0x02; //Error  COMP1
 8004008:	7c3b      	ldrb	r3, [r7, #16]
 800400a:	f043 0302 	orr.w	r3, r3, #2
 800400e:	b2db      	uxtb	r3, r3
 8004010:	743b      	strb	r3, [r7, #16]
			CONF_MOD_ptr->status_module = 0x15;
 8004012:	4b14      	ldr	r3, [pc, #80]	; (8004064 <main+0x2ec>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2215      	movs	r2, #21
 8004018:	719a      	strb	r2, [r3, #6]
 800401a:	e038      	b.n	800408e <main+0x316>

		} else if( VALUE_COMP4() == 1 ){ 
 800401c:	2104      	movs	r1, #4
 800401e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004022:	f7ff fe75 	bl	8003d10 <LL_GPIO_IsInputPinSet>
 8004026:	4603      	mov	r3, r0
 8004028:	2b01      	cmp	r3, #1
 800402a:	d12b      	bne.n	8004084 <main+0x30c>
			ADC_data_transmit[0] = ADC_data_transmit[0] | 0x06; //Error  COMP4
 800402c:	7c3b      	ldrb	r3, [r7, #16]
 800402e:	f043 0306 	orr.w	r3, r3, #6
 8004032:	b2db      	uxtb	r3, r3
 8004034:	743b      	strb	r3, [r7, #16]
			CONF_MOD_ptr->status_module = 0x15;
 8004036:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <main+0x2ec>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2215      	movs	r2, #21
 800403c:	719a      	strb	r2, [r3, #6]
 800403e:	e026      	b.n	800408e <main+0x316>
 8004040:	9999999a 	.word	0x9999999a
 8004044:	3fe19999 	.word	0x3fe19999
 8004048:	08005774 	.word	0x08005774
 800404c:	08005798 	.word	0x08005798
 8004050:	080057c0 	.word	0x080057c0
 8004054:	48000400 	.word	0x48000400
 8004058:	48000800 	.word	0x48000800
 800405c:	20000008 	.word	0x20000008
 8004060:	080057e4 	.word	0x080057e4
 8004064:	20000000 	.word	0x20000000
 8004068:	40005400 	.word	0x40005400
 800406c:	48000c00 	.word	0x48000c00
 8004070:	00800001 	.word	0x00800001
 8004074:	4b800000 	.word	0x4b800000
 8004078:	47800000 	.word	0x47800000
 800407c:	c7000000 	.word	0xc7000000
 8004080:	46fffe00 	.word	0x46fffe00

		} else {
			ADC_data_transmit[0] = ADC_data_transmit[0] | 0x01; // No Error
 8004084:	7c3b      	ldrb	r3, [r7, #16]
 8004086:	f043 0301 	orr.w	r3, r3, #1
 800408a:	b2db      	uxtb	r3, r3
 800408c:	743b      	strb	r3, [r7, #16]
		} 


		if( ADC_PARAM_ptr->ADC_DRDY_flag != 1 ){ // do not got sync signal
 800408e:	4b2d      	ldr	r3, [pc, #180]	; (8004144 <main+0x3cc>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d025      	beq.n	80040e4 <main+0x36c>

			while(ADC_PARAM_ptr->PULSE_flag == 0);
 8004098:	bf00      	nop
 800409a:	4b2a      	ldr	r3, [pc, #168]	; (8004144 <main+0x3cc>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	789b      	ldrb	r3, [r3, #2]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0fa      	beq.n	800409a <main+0x322>

			ADC_PARAM_ptr->PULSE_flag = 0;
 80040a4:	4b27      	ldr	r3, [pc, #156]	; (8004144 <main+0x3cc>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2200      	movs	r2, #0
 80040aa:	709a      	strb	r2, [r3, #2]

			CONF_MOD_ptr->status_module = 0x15;
 80040ac:	4b26      	ldr	r3, [pc, #152]	; (8004148 <main+0x3d0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2215      	movs	r2, #21
 80040b2:	719a      	strb	r2, [r3, #6]

			if(ADC_PARAM_ptr->Count_MCLK  == 8 ){
 80040b4:	4b23      	ldr	r3, [pc, #140]	; (8004144 <main+0x3cc>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	78db      	ldrb	r3, [r3, #3]
 80040ba:	2b08      	cmp	r3, #8
 80040bc:	d10d      	bne.n	80040da <main+0x362>
				CONF_MOD_ptr->status_module = 0x1D;
 80040be:	4b22      	ldr	r3, [pc, #136]	; (8004148 <main+0x3d0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	221d      	movs	r2, #29
 80040c4:	719a      	strb	r2, [r3, #6]
				ADC_PARAM_ptr->Count_MCLK = 0x00;
 80040c6:	4b1f      	ldr	r3, [pc, #124]	; (8004144 <main+0x3cc>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2200      	movs	r2, #0
 80040cc:	70da      	strb	r2, [r3, #3]
				ADC_data_transmit[1] = 0x00;
 80040ce:	2300      	movs	r3, #0
 80040d0:	747b      	strb	r3, [r7, #17]
				ADC_data_transmit[2] = 0x00;
 80040d2:	2300      	movs	r3, #0
 80040d4:	74bb      	strb	r3, [r7, #18]
				ADC_data_transmit[3] = 0x00;
 80040d6:	2300      	movs	r3, #0
 80040d8:	74fb      	strb	r3, [r7, #19]
			}

			ADC_data_transmit[0] = ADC_data_transmit[0] & 0xF8;
 80040da:	7c3b      	ldrb	r3, [r7, #16]
 80040dc:	f023 0307 	bic.w	r3, r3, #7
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	743b      	strb	r3, [r7, #16]
		}

		ADC_PARAM_ptr->ADC_DRDY_flag = 0;
 80040e4:	4b17      	ldr	r3, [pc, #92]	; (8004144 <main+0x3cc>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]


//******************below test zone******************************//


	LL_USART_TransmitData9(USART1, 0x16B);
 80040ec:	f240 116b 	movw	r1, #363	; 0x16b
 80040f0:	4816      	ldr	r0, [pc, #88]	; (800414c <main+0x3d4>)
 80040f2:	f7ff fdfb 	bl	8003cec <LL_USART_TransmitData9>


//for test
	while(1){

		pin=LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_13);
 80040f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040fa:	4815      	ldr	r0, [pc, #84]	; (8004150 <main+0x3d8>)
 80040fc:	f7ff fe08 	bl	8003d10 <LL_GPIO_IsInputPinSet>
 8004100:	4603      	mov	r3, r0
 8004102:	76fb      	strb	r3, [r7, #27]

		if(pin==0){
 8004104:	7efb      	ldrb	r3, [r7, #27]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f5      	bne.n	80040f6 <main+0x37e>
			while(!LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_13)){
 800410a:	bf00      	nop
 800410c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004110:	480f      	ldr	r0, [pc, #60]	; (8004150 <main+0x3d8>)
 8004112:	f7ff fdfd 	bl	8003d10 <LL_GPIO_IsInputPinSet>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0f7      	beq.n	800410c <main+0x394>

			};

			i++;
 800411c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004120:	3301      	adds	r3, #1
 8004122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Set_Ficlk_and_F_SAx(i, PWM_TIM2_CH2_PA1);
 8004126:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800412a:	2100      	movs	r1, #0
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff f927 	bl	8003380 <Set_Ficlk_and_F_SAx>
			if(i==130){
 8004132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004136:	2b82      	cmp	r3, #130	; 0x82
 8004138:	d1dd      	bne.n	80040f6 <main+0x37e>
				i=0;
 800413a:	2300      	movs	r3, #0
 800413c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		pin=LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_13);
 8004140:	e7d9      	b.n	80040f6 <main+0x37e>
 8004142:	bf00      	nop
 8004144:	20000008 	.word	0x20000008
 8004148:	20000000 	.word	0x20000000
 800414c:	40013800 	.word	0x40013800
 8004150:	48000800 	.word	0x48000800

08004154 <LL_GPIO_SetOutputPin>:
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	619a      	str	r2, [r3, #24]
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <LL_GPIO_ResetOutputPin>:
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <LL_EXTI_EnableIT_0_31>:
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004194:	4905      	ldr	r1, [pc, #20]	; (80041ac <LL_EXTI_EnableIT_0_31+0x20>)
 8004196:	4b05      	ldr	r3, [pc, #20]	; (80041ac <LL_EXTI_EnableIT_0_31+0x20>)
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4313      	orrs	r3, r2
 800419e:	600b      	str	r3, [r1, #0]
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	40010400 	.word	0x40010400

080041b0 <LL_EXTI_DisableIT_0_31>:
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80041b8:	4906      	ldr	r1, [pc, #24]	; (80041d4 <LL_EXTI_DisableIT_0_31+0x24>)
 80041ba:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <LL_EXTI_DisableIT_0_31+0x24>)
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	43db      	mvns	r3, r3
 80041c2:	4013      	ands	r3, r2
 80041c4:	600b      	str	r3, [r1, #0]
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40010400 	.word	0x40010400

080041d8 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine));
 80041e0:	4b07      	ldr	r3, [pc, #28]	; (8004200 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80041e2:	695a      	ldr	r2, [r3, #20]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	401a      	ands	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	bf0c      	ite	eq
 80041ee:	2301      	moveq	r3, #1
 80041f0:	2300      	movne	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	40010400 	.word	0x40010400

08004204 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800420c:	4a04      	ldr	r2, [pc, #16]	; (8004220 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6153      	str	r3, [r2, #20]
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40010400 	.word	0x40010400

08004224 <LL_USART_IsActiveFlag_RXNE>:
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b20      	cmp	r3, #32
 8004236:	bf0c      	ite	eq
 8004238:	2301      	moveq	r3, #1
 800423a:	2300      	movne	r3, #0
 800423c:	b2db      	uxtb	r3, r3
}
 800423e:	4618      	mov	r0, r3
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <LL_USART_ReceiveData9>:
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004256:	b29b      	uxth	r3, r3
 8004258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800425c:	b29b      	uxth	r3, r3
}
 800425e:	4618      	mov	r0, r3
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800426a:	b480      	push	{r7}
 800426c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800426e:	bf00      	nop
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800427c:	e7fe      	b.n	800427c <HardFault_Handler+0x4>

0800427e <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800427e:	b480      	push	{r7}
 8004280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004282:	e7fe      	b.n	8004282 <MemManage_Handler+0x4>

08004284 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004288:	e7fe      	b.n	8004288 <BusFault_Handler+0x4>

0800428a <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800428a:	b480      	push	{r7}
 800428c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800428e:	e7fe      	b.n	800428e <UsageFault_Handler+0x4>

08004290 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004294:	bf00      	nop
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800429e:	b480      	push	{r7}
 80042a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042a2:	bf00      	nop
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042b0:	bf00      	nop
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80042ba:	b480      	push	{r7}
 80042bc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042be:	bf00      	nop
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <USART1_IRQHandler>:
/******************************************************************************/

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void){
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0

    uint16_t input_data9b = 0;
 80042ce:	2300      	movs	r3, #0
 80042d0:	80fb      	strh	r3, [r7, #6]
    uint8_t input_data8b = 0;
 80042d2:	2300      	movs	r3, #0
 80042d4:	717b      	strb	r3, [r7, #5]
   
    if(LL_USART_IsActiveFlag_RXNE(USART1)){
 80042d6:	4833      	ldr	r0, [pc, #204]	; (80043a4 <USART1_IRQHandler+0xdc>)
 80042d8:	f7ff ffa4 	bl	8004224 <LL_USART_IsActiveFlag_RXNE>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d05b      	beq.n	800439a <USART1_IRQHandler+0xd2>

        input_data9b = LL_USART_ReceiveData9(USART1);
 80042e2:	4830      	ldr	r0, [pc, #192]	; (80043a4 <USART1_IRQHandler+0xdc>)
 80042e4:	f7ff ffb1 	bl	800424a <LL_USART_ReceiveData9>
 80042e8:	4603      	mov	r3, r0
 80042ea:	80fb      	strh	r3, [r7, #6]

        if( (input_data9b & 0x0100) != 0 ){ //check that we got byte with address 
 80042ec:	88fb      	ldrh	r3, [r7, #6]
 80042ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d031      	beq.n	800435a <USART1_IRQHandler+0x92>

            input_data8b = (uint8_t)input_data9b;
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	717b      	strb	r3, [r7, #5]

            if( input_data8b == CONF_MOD_ptr->addr_module_req_data_adc ){ // check got request ADC data 
 80042fa:	4b2b      	ldr	r3, [pc, #172]	; (80043a8 <USART1_IRQHandler+0xe0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	785b      	ldrb	r3, [r3, #1]
 8004300:	797a      	ldrb	r2, [r7, #5]
 8004302:	429a      	cmp	r2, r3
 8004304:	d108      	bne.n	8004318 <USART1_IRQHandler+0x50>

                UART1_BUF_ptr->ADC_data_request_flag = 1;
 8004306:	4b29      	ldr	r3, [pc, #164]	; (80043ac <USART1_IRQHandler+0xe4>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2201      	movs	r2, #1
 800430c:	71da      	strb	r2, [r3, #7]
                UART1_BUF_ptr->received_command_flag = 1;
 800430e:	4b27      	ldr	r3, [pc, #156]	; (80043ac <USART1_IRQHandler+0xe4>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2201      	movs	r2, #1
 8004314:	719a      	strb	r2, [r3, #6]
  	 a read to the USART_RDR register. The RXNE
  	flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register.
  	An interrupt is generated if RXNEIE=1 in the USART_CR1 register.
  	0: data is not received
  	1: Received data is ready to be read.*/
}
 8004316:	e040      	b.n	800439a <USART1_IRQHandler+0xd2>
            } else if( (input_data8b == 0x00) || ((input_data8b>>3) == CONF_MOD_ptr->addr_module) ){ // chaeck we got broadcast message or me address module
 8004318:	797b      	ldrb	r3, [r7, #5]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d007      	beq.n	800432e <USART1_IRQHandler+0x66>
 800431e:	797b      	ldrb	r3, [r7, #5]
 8004320:	08db      	lsrs	r3, r3, #3
 8004322:	b2da      	uxtb	r2, r3
 8004324:	4b20      	ldr	r3, [pc, #128]	; (80043a8 <USART1_IRQHandler+0xe0>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d135      	bne.n	800439a <USART1_IRQHandler+0xd2>
                  if( UART1_BUF_ptr->received_command_flag == 1){ //Protection if you do not have time to process previous massage.
 800432e:	4b1f      	ldr	r3, [pc, #124]	; (80043ac <USART1_IRQHandler+0xe4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	799b      	ldrb	r3, [r3, #6]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d103      	bne.n	8004340 <USART1_IRQHandler+0x78>
                    UART1_BUF_ptr->received_command_flag = 0;//Clear previous message
 8004338:	4b1c      	ldr	r3, [pc, #112]	; (80043ac <USART1_IRQHandler+0xe4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2200      	movs	r2, #0
 800433e:	719a      	strb	r2, [r3, #6]
                  UART1_BUF_ptr->UART_Recive_Buf[0] = input_data8b;
 8004340:	4b1a      	ldr	r3, [pc, #104]	; (80043ac <USART1_IRQHandler+0xe4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	797a      	ldrb	r2, [r7, #5]
 8004346:	701a      	strb	r2, [r3, #0]
                  UART1_BUF_ptr->UART_rec_buf_len = 1;
 8004348:	4b18      	ldr	r3, [pc, #96]	; (80043ac <USART1_IRQHandler+0xe4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2201      	movs	r2, #1
 800434e:	711a      	strb	r2, [r3, #4]
                  UART1_BUF_ptr->recive_data_permit_flag = 1;
 8004350:	4b16      	ldr	r3, [pc, #88]	; (80043ac <USART1_IRQHandler+0xe4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2201      	movs	r2, #1
 8004356:	715a      	strb	r2, [r3, #5]
}
 8004358:	e01f      	b.n	800439a <USART1_IRQHandler+0xd2>
        } else if( UART1_BUF_ptr->recive_data_permit_flag == 1 ){ // getting data if we have permit to recive byte with data 
 800435a:	4b14      	ldr	r3, [pc, #80]	; (80043ac <USART1_IRQHandler+0xe4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	795b      	ldrb	r3, [r3, #5]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d11a      	bne.n	800439a <USART1_IRQHandler+0xd2>
            UART1_BUF_ptr->UART_Recive_Buf[ UART1_BUF_ptr->UART_rec_buf_len ] = (uint8_t)input_data9b;
 8004364:	4b11      	ldr	r3, [pc, #68]	; (80043ac <USART1_IRQHandler+0xe4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a10      	ldr	r2, [pc, #64]	; (80043ac <USART1_IRQHandler+0xe4>)
 800436a:	6812      	ldr	r2, [r2, #0]
 800436c:	7912      	ldrb	r2, [r2, #4]
 800436e:	88f9      	ldrh	r1, [r7, #6]
 8004370:	b2c9      	uxtb	r1, r1
 8004372:	5499      	strb	r1, [r3, r2]
            UART1_BUF_ptr->UART_rec_buf_len++;
 8004374:	4b0d      	ldr	r3, [pc, #52]	; (80043ac <USART1_IRQHandler+0xe4>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	791a      	ldrb	r2, [r3, #4]
 800437a:	3201      	adds	r2, #1
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	711a      	strb	r2, [r3, #4]
            if( UART1_BUF_ptr->UART_rec_buf_len == 4 ){ // finish getting command
 8004380:	4b0a      	ldr	r3, [pc, #40]	; (80043ac <USART1_IRQHandler+0xe4>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	791b      	ldrb	r3, [r3, #4]
 8004386:	2b04      	cmp	r3, #4
 8004388:	d107      	bne.n	800439a <USART1_IRQHandler+0xd2>
                UART1_BUF_ptr->received_command_flag = 1;
 800438a:	4b08      	ldr	r3, [pc, #32]	; (80043ac <USART1_IRQHandler+0xe4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2201      	movs	r2, #1
 8004390:	719a      	strb	r2, [r3, #6]
                UART1_BUF_ptr->recive_data_permit_flag = 0;
 8004392:	4b06      	ldr	r3, [pc, #24]	; (80043ac <USART1_IRQHandler+0xe4>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2200      	movs	r2, #0
 8004398:	715a      	strb	r2, [r3, #5]
}
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40013800 	.word	0x40013800
 80043a8:	20000000 	.word	0x20000000
 80043ac:	20000004 	.word	0x20000004

080043b0 <EXTI15_10_IRQHandler>:

/**
* @brief This function handles EXTI line[15:10] interrupts.
*/
void EXTI15_10_IRQHandler(void){
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0

	//interrupt PB15 ADC-DRDY  FALLING edge
	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET){
 80043b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80043b8:	f7ff ff0e 	bl	80041d8 <LL_EXTI_IsActiveFlag_0_31>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d016      	beq.n	80043f0 <EXTI15_10_IRQHandler+0x40>
		LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 80043c2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80043c6:	f7ff ff1d 	bl	8004204 <LL_EXTI_ClearFlag_0_31>

    ADC_PARAM_ptr->ADC_DRDY_flag = 1;
 80043ca:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <EXTI15_10_IRQHandler+0x44>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2201      	movs	r2, #1
 80043d0:	701a      	strb	r2, [r3, #0]
    ADC_PARAM_ptr->DRDY_GOOD_flag = 0;
 80043d2:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <EXTI15_10_IRQHandler+0x44>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2200      	movs	r2, #0
 80043d8:	705a      	strb	r2, [r3, #1]
    ADC_PARAM_ptr->PULSE_flag = 0;
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <EXTI15_10_IRQHandler+0x44>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2200      	movs	r2, #0
 80043e0:	709a      	strb	r2, [r3, #2]

    INTERRUPT_DRDY_GOOD_Enable();
 80043e2:	2020      	movs	r0, #32
 80043e4:	f7ff fed2 	bl	800418c <LL_EXTI_EnableIT_0_31>
    INTERRUPT_PULSE_Enable();
 80043e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80043ec:	f7ff fece 	bl	800418c <LL_EXTI_EnableIT_0_31>
	}

}
 80043f0:	bf00      	nop
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20000008 	.word	0x20000008

080043f8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0

  //interrupt PC5 DRDY_GOOD  RISING edge
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET){
 80043fc:	2020      	movs	r0, #32
 80043fe:	f7ff feeb 	bl	80041d8 <LL_EXTI_IsActiveFlag_0_31>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d015      	beq.n	8004434 <EXTI9_5_IRQHandler+0x3c>
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 8004408:	2020      	movs	r0, #32
 800440a:	f7ff fefb 	bl	8004204 <LL_EXTI_ClearFlag_0_31>

    ADC_PARAM_ptr->DRDY_GOOD_flag = 1;
 800440e:	4b1f      	ldr	r3, [pc, #124]	; (800448c <EXTI9_5_IRQHandler+0x94>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2201      	movs	r2, #1
 8004414:	705a      	strb	r2, [r3, #1]

    INTERRUPT_DRDY_GOOD_Disable();
 8004416:	2020      	movs	r0, #32
 8004418:	f7ff feca 	bl	80041b0 <LL_EXTI_DisableIT_0_31>
    INTERRUPT_PULSE_Disable();
 800441c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004420:	f7ff fec6 	bl	80041b0 <LL_EXTI_DisableIT_0_31>
    ADC_PARAM_ptr->Count_MCLK = 0;
 8004424:	4b19      	ldr	r3, [pc, #100]	; (800448c <EXTI9_5_IRQHandler+0x94>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2200      	movs	r2, #0
 800442a:	70da      	strb	r2, [r3, #3]
    ADC_PARAM_ptr->PULSE_flag = 0;
 800442c:	4b17      	ldr	r3, [pc, #92]	; (800448c <EXTI9_5_IRQHandler+0x94>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2200      	movs	r2, #0
 8004432:	709a      	strb	r2, [r3, #2]
  }

  //interrupt PB8 PULSE FALLING edge
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_8) != RESET){
 8004434:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004438:	f7ff fece 	bl	80041d8 <LL_EXTI_IsActiveFlag_0_31>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d021      	beq.n	8004486 <EXTI9_5_IRQHandler+0x8e>
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_8);
 8004442:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004446:	f7ff fedd 	bl	8004204 <LL_EXTI_ClearFlag_0_31>

    ADC_PARAM_ptr->PULSE_flag = 1;
 800444a:	4b10      	ldr	r3, [pc, #64]	; (800448c <EXTI9_5_IRQHandler+0x94>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2201      	movs	r2, #1
 8004450:	709a      	strb	r2, [r3, #2]
    INTERRUPT_PULSE_Disable();
 8004452:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004456:	f7ff feab 	bl	80041b0 <LL_EXTI_DisableIT_0_31>
    INTERRUPT_DRDY_GOOD_Disable();
 800445a:	2020      	movs	r0, #32
 800445c:	f7ff fea8 	bl	80041b0 <LL_EXTI_DisableIT_0_31>
    PC7_MCLK_Set();
 8004460:	2180      	movs	r1, #128	; 0x80
 8004462:	480b      	ldr	r0, [pc, #44]	; (8004490 <EXTI9_5_IRQHandler+0x98>)
 8004464:	f7ff fe76 	bl	8004154 <LL_GPIO_SetOutputPin>
    ADC_PARAM_ptr->Count_MCLK = ADC_PARAM_ptr->Count_MCLK + 1;
 8004468:	4b08      	ldr	r3, [pc, #32]	; (800448c <EXTI9_5_IRQHandler+0x94>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a07      	ldr	r2, [pc, #28]	; (800448c <EXTI9_5_IRQHandler+0x94>)
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	78d2      	ldrb	r2, [r2, #3]
 8004472:	3201      	adds	r2, #1
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	70da      	strb	r2, [r3, #3]
  __ASM volatile ("nop");
 8004478:	bf00      	nop
 800447a:	bf00      	nop
 800447c:	bf00      	nop
    __NOP();
    __NOP();
    __NOP();
    PC7_MCLK_Reset();
 800447e:	2180      	movs	r1, #128	; 0x80
 8004480:	4803      	ldr	r0, [pc, #12]	; (8004490 <EXTI9_5_IRQHandler+0x98>)
 8004482:	f7ff fe75 	bl	8004170 <LL_GPIO_ResetOutputPin>
  }

}
 8004486:	bf00      	nop
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	20000008 	.word	0x20000008
 8004490:	48000800 	.word	0x48000800

08004494 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800449c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80044a0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d013      	beq.n	80044d4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80044ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80044b0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80044b4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00b      	beq.n	80044d4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80044bc:	e000      	b.n	80044c0 <ITM_SendChar+0x2c>
 80044be:	bf00      	nop
 80044c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f9      	beq.n	80044be <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80044ca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80044d4:	687b      	ldr	r3, [r7, #4]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b086      	sub	sp, #24
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	60f8      	str	r0, [r7, #12]
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	607a      	str	r2, [r7, #4]
	/* return len; */
	
	//errno = ENOSYS;
	//return -1;

	int i=0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++){
 80044f2:	2300      	movs	r3, #0
 80044f4:	617b      	str	r3, [r7, #20]
 80044f6:	e009      	b.n	800450c <_write+0x2a>
		ITM_SendChar((*ptr++));
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	60ba      	str	r2, [r7, #8]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff ffc7 	bl	8004494 <ITM_SendChar>
	for(i=0;i<len;i++){
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	3301      	adds	r3, #1
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	429a      	cmp	r2, r3
 8004512:	dbf1      	blt.n	80044f8 <_write+0x16>
	}
	return len;
 8004514:	687b      	ldr	r3, [r7, #4]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
	...

08004520 <_sbrk>:

void * _sbrk(int32_t incr)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8004528:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <_sbrk+0x38>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d102      	bne.n	8004536 <_sbrk+0x16>
		heap_end = & end;
 8004530:	4b09      	ldr	r3, [pc, #36]	; (8004558 <_sbrk+0x38>)
 8004532:	4a0a      	ldr	r2, [pc, #40]	; (800455c <_sbrk+0x3c>)
 8004534:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8004536:	4b08      	ldr	r3, [pc, #32]	; (8004558 <_sbrk+0x38>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 800453c:	4b06      	ldr	r3, [pc, #24]	; (8004558 <_sbrk+0x38>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4413      	add	r3, r2
 8004544:	4a04      	ldr	r2, [pc, #16]	; (8004558 <_sbrk+0x38>)
 8004546:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8004548:	68fb      	ldr	r3, [r7, #12]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	20000090 	.word	0x20000090
 800455c:	200000b4 	.word	0x200000b4

08004560 <_close>:

int _close(int32_t file)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8004568:	4b05      	ldr	r3, [pc, #20]	; (8004580 <_close+0x20>)
 800456a:	2258      	movs	r2, #88	; 0x58
 800456c:	601a      	str	r2, [r3, #0]
	return -1;
 800456e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004572:	4618      	mov	r0, r3
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	200000b0 	.word	0x200000b0

08004584 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <_fstat+0x20>)
 8004590:	2258      	movs	r2, #88	; 0x58
 8004592:	601a      	str	r2, [r3, #0]
	return -1;
 8004594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	200000b0 	.word	0x200000b0

080045a8 <_isatty>:

int _isatty(int32_t file)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 80045b0:	4b04      	ldr	r3, [pc, #16]	; (80045c4 <_isatty+0x1c>)
 80045b2:	2258      	movs	r2, #88	; 0x58
 80045b4:	601a      	str	r2, [r3, #0]
	return 0;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	200000b0 	.word	0x200000b0

080045c8 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 80045d4:	4b05      	ldr	r3, [pc, #20]	; (80045ec <_lseek+0x24>)
 80045d6:	2258      	movs	r2, #88	; 0x58
 80045d8:	601a      	str	r2, [r3, #0]
	return -1;
 80045da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	200000b0 	.word	0x200000b0

080045f0 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <_read+0x24>)
 80045fe:	2258      	movs	r2, #88	; 0x58
 8004600:	601a      	str	r2, [r3, #0]
	return -1;
 8004602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	200000b0 	.word	0x200000b0

08004618 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800461c:	4a17      	ldr	r2, [pc, #92]	; (800467c <SystemInit+0x64>)
 800461e:	4b17      	ldr	r3, [pc, #92]	; (800467c <SystemInit+0x64>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800462c:	4a14      	ldr	r2, [pc, #80]	; (8004680 <SystemInit+0x68>)
 800462e:	4b14      	ldr	r3, [pc, #80]	; (8004680 <SystemInit+0x68>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004638:	4b11      	ldr	r3, [pc, #68]	; (8004680 <SystemInit+0x68>)
 800463a:	2200      	movs	r2, #0
 800463c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800463e:	4a10      	ldr	r2, [pc, #64]	; (8004680 <SystemInit+0x68>)
 8004640:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <SystemInit+0x68>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004648:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800464c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800464e:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <SystemInit+0x68>)
 8004650:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004654:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004656:	4a0a      	ldr	r2, [pc, #40]	; (8004680 <SystemInit+0x68>)
 8004658:	4b09      	ldr	r3, [pc, #36]	; (8004680 <SystemInit+0x68>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004660:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004662:	4b07      	ldr	r3, [pc, #28]	; (8004680 <SystemInit+0x68>)
 8004664:	2200      	movs	r2, #0
 8004666:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004668:	4b04      	ldr	r3, [pc, #16]	; (800467c <SystemInit+0x64>)
 800466a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800466e:	609a      	str	r2, [r3, #8]
#endif
}
 8004670:	bf00      	nop
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	e000ed00 	.word	0xe000ed00
 8004680:	40021000 	.word	0x40021000

08004684 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046bc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004688:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800468a:	e003      	b.n	8004694 <LoopCopyDataInit>

0800468c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800468c:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800468e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004690:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004692:	3104      	adds	r1, #4

08004694 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004694:	480b      	ldr	r0, [pc, #44]	; (80046c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004696:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004698:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800469a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800469c:	d3f6      	bcc.n	800468c <CopyDataInit>
	ldr	r2, =_sbss
 800469e:	4a0b      	ldr	r2, [pc, #44]	; (80046cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80046a0:	e002      	b.n	80046a8 <LoopFillZerobss>

080046a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80046a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80046a4:	f842 3b04 	str.w	r3, [r2], #4

080046a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80046a8:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <LoopForever+0x16>)
	cmp	r2, r3
 80046aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80046ac:	d3f9      	bcc.n	80046a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80046ae:	f7ff ffb3 	bl	8004618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046b2:	f000 f811 	bl	80046d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80046b6:	f7ff fb5f 	bl	8003d78 <main>

080046ba <LoopForever>:

LoopForever:
    b LoopForever
 80046ba:	e7fe      	b.n	80046ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80046bc:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 80046c0:	08005904 	.word	0x08005904
	ldr	r0, =_sdata
 80046c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80046c8:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 80046cc:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 80046d0:	200000b4 	.word	0x200000b4

080046d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80046d4:	e7fe      	b.n	80046d4 <ADC1_IRQHandler>
	...

080046d8 <__libc_init_array>:
 80046d8:	b570      	push	{r4, r5, r6, lr}
 80046da:	4e0d      	ldr	r6, [pc, #52]	; (8004710 <__libc_init_array+0x38>)
 80046dc:	4c0d      	ldr	r4, [pc, #52]	; (8004714 <__libc_init_array+0x3c>)
 80046de:	1ba4      	subs	r4, r4, r6
 80046e0:	10a4      	asrs	r4, r4, #2
 80046e2:	2500      	movs	r5, #0
 80046e4:	42a5      	cmp	r5, r4
 80046e6:	d109      	bne.n	80046fc <__libc_init_array+0x24>
 80046e8:	4e0b      	ldr	r6, [pc, #44]	; (8004718 <__libc_init_array+0x40>)
 80046ea:	4c0c      	ldr	r4, [pc, #48]	; (800471c <__libc_init_array+0x44>)
 80046ec:	f000 ff7c 	bl	80055e8 <_init>
 80046f0:	1ba4      	subs	r4, r4, r6
 80046f2:	10a4      	asrs	r4, r4, #2
 80046f4:	2500      	movs	r5, #0
 80046f6:	42a5      	cmp	r5, r4
 80046f8:	d105      	bne.n	8004706 <__libc_init_array+0x2e>
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
 80046fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004700:	4798      	blx	r3
 8004702:	3501      	adds	r5, #1
 8004704:	e7ee      	b.n	80046e4 <__libc_init_array+0xc>
 8004706:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800470a:	4798      	blx	r3
 800470c:	3501      	adds	r5, #1
 800470e:	e7f2      	b.n	80046f6 <__libc_init_array+0x1e>
 8004710:	080058fc 	.word	0x080058fc
 8004714:	080058fc 	.word	0x080058fc
 8004718:	080058fc 	.word	0x080058fc
 800471c:	08005900 	.word	0x08005900

08004720 <iprintf>:
 8004720:	b40f      	push	{r0, r1, r2, r3}
 8004722:	4b0a      	ldr	r3, [pc, #40]	; (800474c <iprintf+0x2c>)
 8004724:	b513      	push	{r0, r1, r4, lr}
 8004726:	681c      	ldr	r4, [r3, #0]
 8004728:	b124      	cbz	r4, 8004734 <iprintf+0x14>
 800472a:	69a3      	ldr	r3, [r4, #24]
 800472c:	b913      	cbnz	r3, 8004734 <iprintf+0x14>
 800472e:	4620      	mov	r0, r4
 8004730:	f000 fa24 	bl	8004b7c <__sinit>
 8004734:	ab05      	add	r3, sp, #20
 8004736:	9a04      	ldr	r2, [sp, #16]
 8004738:	68a1      	ldr	r1, [r4, #8]
 800473a:	9301      	str	r3, [sp, #4]
 800473c:	4620      	mov	r0, r4
 800473e:	f000 fbe9 	bl	8004f14 <_vfiprintf_r>
 8004742:	b002      	add	sp, #8
 8004744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004748:	b004      	add	sp, #16
 800474a:	4770      	bx	lr
 800474c:	20000010 	.word	0x20000010

08004750 <_puts_r>:
 8004750:	b570      	push	{r4, r5, r6, lr}
 8004752:	460e      	mov	r6, r1
 8004754:	4605      	mov	r5, r0
 8004756:	b118      	cbz	r0, 8004760 <_puts_r+0x10>
 8004758:	6983      	ldr	r3, [r0, #24]
 800475a:	b90b      	cbnz	r3, 8004760 <_puts_r+0x10>
 800475c:	f000 fa0e 	bl	8004b7c <__sinit>
 8004760:	69ab      	ldr	r3, [r5, #24]
 8004762:	68ac      	ldr	r4, [r5, #8]
 8004764:	b913      	cbnz	r3, 800476c <_puts_r+0x1c>
 8004766:	4628      	mov	r0, r5
 8004768:	f000 fa08 	bl	8004b7c <__sinit>
 800476c:	4b23      	ldr	r3, [pc, #140]	; (80047fc <_puts_r+0xac>)
 800476e:	429c      	cmp	r4, r3
 8004770:	d117      	bne.n	80047a2 <_puts_r+0x52>
 8004772:	686c      	ldr	r4, [r5, #4]
 8004774:	89a3      	ldrh	r3, [r4, #12]
 8004776:	071b      	lsls	r3, r3, #28
 8004778:	d51d      	bpl.n	80047b6 <_puts_r+0x66>
 800477a:	6923      	ldr	r3, [r4, #16]
 800477c:	b1db      	cbz	r3, 80047b6 <_puts_r+0x66>
 800477e:	3e01      	subs	r6, #1
 8004780:	68a3      	ldr	r3, [r4, #8]
 8004782:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004786:	3b01      	subs	r3, #1
 8004788:	60a3      	str	r3, [r4, #8]
 800478a:	b9e9      	cbnz	r1, 80047c8 <_puts_r+0x78>
 800478c:	2b00      	cmp	r3, #0
 800478e:	da2e      	bge.n	80047ee <_puts_r+0x9e>
 8004790:	4622      	mov	r2, r4
 8004792:	210a      	movs	r1, #10
 8004794:	4628      	mov	r0, r5
 8004796:	f000 f83f 	bl	8004818 <__swbuf_r>
 800479a:	3001      	adds	r0, #1
 800479c:	d011      	beq.n	80047c2 <_puts_r+0x72>
 800479e:	200a      	movs	r0, #10
 80047a0:	bd70      	pop	{r4, r5, r6, pc}
 80047a2:	4b17      	ldr	r3, [pc, #92]	; (8004800 <_puts_r+0xb0>)
 80047a4:	429c      	cmp	r4, r3
 80047a6:	d101      	bne.n	80047ac <_puts_r+0x5c>
 80047a8:	68ac      	ldr	r4, [r5, #8]
 80047aa:	e7e3      	b.n	8004774 <_puts_r+0x24>
 80047ac:	4b15      	ldr	r3, [pc, #84]	; (8004804 <_puts_r+0xb4>)
 80047ae:	429c      	cmp	r4, r3
 80047b0:	bf08      	it	eq
 80047b2:	68ec      	ldreq	r4, [r5, #12]
 80047b4:	e7de      	b.n	8004774 <_puts_r+0x24>
 80047b6:	4621      	mov	r1, r4
 80047b8:	4628      	mov	r0, r5
 80047ba:	f000 f87f 	bl	80048bc <__swsetup_r>
 80047be:	2800      	cmp	r0, #0
 80047c0:	d0dd      	beq.n	800477e <_puts_r+0x2e>
 80047c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047c6:	bd70      	pop	{r4, r5, r6, pc}
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	da04      	bge.n	80047d6 <_puts_r+0x86>
 80047cc:	69a2      	ldr	r2, [r4, #24]
 80047ce:	4293      	cmp	r3, r2
 80047d0:	db06      	blt.n	80047e0 <_puts_r+0x90>
 80047d2:	290a      	cmp	r1, #10
 80047d4:	d004      	beq.n	80047e0 <_puts_r+0x90>
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	6022      	str	r2, [r4, #0]
 80047dc:	7019      	strb	r1, [r3, #0]
 80047de:	e7cf      	b.n	8004780 <_puts_r+0x30>
 80047e0:	4622      	mov	r2, r4
 80047e2:	4628      	mov	r0, r5
 80047e4:	f000 f818 	bl	8004818 <__swbuf_r>
 80047e8:	3001      	adds	r0, #1
 80047ea:	d1c9      	bne.n	8004780 <_puts_r+0x30>
 80047ec:	e7e9      	b.n	80047c2 <_puts_r+0x72>
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	200a      	movs	r0, #10
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	6022      	str	r2, [r4, #0]
 80047f6:	7018      	strb	r0, [r3, #0]
 80047f8:	bd70      	pop	{r4, r5, r6, pc}
 80047fa:	bf00      	nop
 80047fc:	08005884 	.word	0x08005884
 8004800:	080058a4 	.word	0x080058a4
 8004804:	08005864 	.word	0x08005864

08004808 <puts>:
 8004808:	4b02      	ldr	r3, [pc, #8]	; (8004814 <puts+0xc>)
 800480a:	4601      	mov	r1, r0
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	f7ff bf9f 	b.w	8004750 <_puts_r>
 8004812:	bf00      	nop
 8004814:	20000010 	.word	0x20000010

08004818 <__swbuf_r>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	460e      	mov	r6, r1
 800481c:	4614      	mov	r4, r2
 800481e:	4605      	mov	r5, r0
 8004820:	b118      	cbz	r0, 800482a <__swbuf_r+0x12>
 8004822:	6983      	ldr	r3, [r0, #24]
 8004824:	b90b      	cbnz	r3, 800482a <__swbuf_r+0x12>
 8004826:	f000 f9a9 	bl	8004b7c <__sinit>
 800482a:	4b21      	ldr	r3, [pc, #132]	; (80048b0 <__swbuf_r+0x98>)
 800482c:	429c      	cmp	r4, r3
 800482e:	d12a      	bne.n	8004886 <__swbuf_r+0x6e>
 8004830:	686c      	ldr	r4, [r5, #4]
 8004832:	69a3      	ldr	r3, [r4, #24]
 8004834:	60a3      	str	r3, [r4, #8]
 8004836:	89a3      	ldrh	r3, [r4, #12]
 8004838:	071a      	lsls	r2, r3, #28
 800483a:	d52e      	bpl.n	800489a <__swbuf_r+0x82>
 800483c:	6923      	ldr	r3, [r4, #16]
 800483e:	b363      	cbz	r3, 800489a <__swbuf_r+0x82>
 8004840:	6923      	ldr	r3, [r4, #16]
 8004842:	6820      	ldr	r0, [r4, #0]
 8004844:	1ac0      	subs	r0, r0, r3
 8004846:	6963      	ldr	r3, [r4, #20]
 8004848:	b2f6      	uxtb	r6, r6
 800484a:	4298      	cmp	r0, r3
 800484c:	4637      	mov	r7, r6
 800484e:	db04      	blt.n	800485a <__swbuf_r+0x42>
 8004850:	4621      	mov	r1, r4
 8004852:	4628      	mov	r0, r5
 8004854:	f000 f928 	bl	8004aa8 <_fflush_r>
 8004858:	bb28      	cbnz	r0, 80048a6 <__swbuf_r+0x8e>
 800485a:	68a3      	ldr	r3, [r4, #8]
 800485c:	3b01      	subs	r3, #1
 800485e:	60a3      	str	r3, [r4, #8]
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	6022      	str	r2, [r4, #0]
 8004866:	701e      	strb	r6, [r3, #0]
 8004868:	6963      	ldr	r3, [r4, #20]
 800486a:	3001      	adds	r0, #1
 800486c:	4298      	cmp	r0, r3
 800486e:	d004      	beq.n	800487a <__swbuf_r+0x62>
 8004870:	89a3      	ldrh	r3, [r4, #12]
 8004872:	07db      	lsls	r3, r3, #31
 8004874:	d519      	bpl.n	80048aa <__swbuf_r+0x92>
 8004876:	2e0a      	cmp	r6, #10
 8004878:	d117      	bne.n	80048aa <__swbuf_r+0x92>
 800487a:	4621      	mov	r1, r4
 800487c:	4628      	mov	r0, r5
 800487e:	f000 f913 	bl	8004aa8 <_fflush_r>
 8004882:	b190      	cbz	r0, 80048aa <__swbuf_r+0x92>
 8004884:	e00f      	b.n	80048a6 <__swbuf_r+0x8e>
 8004886:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <__swbuf_r+0x9c>)
 8004888:	429c      	cmp	r4, r3
 800488a:	d101      	bne.n	8004890 <__swbuf_r+0x78>
 800488c:	68ac      	ldr	r4, [r5, #8]
 800488e:	e7d0      	b.n	8004832 <__swbuf_r+0x1a>
 8004890:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <__swbuf_r+0xa0>)
 8004892:	429c      	cmp	r4, r3
 8004894:	bf08      	it	eq
 8004896:	68ec      	ldreq	r4, [r5, #12]
 8004898:	e7cb      	b.n	8004832 <__swbuf_r+0x1a>
 800489a:	4621      	mov	r1, r4
 800489c:	4628      	mov	r0, r5
 800489e:	f000 f80d 	bl	80048bc <__swsetup_r>
 80048a2:	2800      	cmp	r0, #0
 80048a4:	d0cc      	beq.n	8004840 <__swbuf_r+0x28>
 80048a6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80048aa:	4638      	mov	r0, r7
 80048ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048ae:	bf00      	nop
 80048b0:	08005884 	.word	0x08005884
 80048b4:	080058a4 	.word	0x080058a4
 80048b8:	08005864 	.word	0x08005864

080048bc <__swsetup_r>:
 80048bc:	4b32      	ldr	r3, [pc, #200]	; (8004988 <__swsetup_r+0xcc>)
 80048be:	b570      	push	{r4, r5, r6, lr}
 80048c0:	681d      	ldr	r5, [r3, #0]
 80048c2:	4606      	mov	r6, r0
 80048c4:	460c      	mov	r4, r1
 80048c6:	b125      	cbz	r5, 80048d2 <__swsetup_r+0x16>
 80048c8:	69ab      	ldr	r3, [r5, #24]
 80048ca:	b913      	cbnz	r3, 80048d2 <__swsetup_r+0x16>
 80048cc:	4628      	mov	r0, r5
 80048ce:	f000 f955 	bl	8004b7c <__sinit>
 80048d2:	4b2e      	ldr	r3, [pc, #184]	; (800498c <__swsetup_r+0xd0>)
 80048d4:	429c      	cmp	r4, r3
 80048d6:	d10f      	bne.n	80048f8 <__swsetup_r+0x3c>
 80048d8:	686c      	ldr	r4, [r5, #4]
 80048da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048de:	b29a      	uxth	r2, r3
 80048e0:	0715      	lsls	r5, r2, #28
 80048e2:	d42c      	bmi.n	800493e <__swsetup_r+0x82>
 80048e4:	06d0      	lsls	r0, r2, #27
 80048e6:	d411      	bmi.n	800490c <__swsetup_r+0x50>
 80048e8:	2209      	movs	r2, #9
 80048ea:	6032      	str	r2, [r6, #0]
 80048ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048f0:	81a3      	strh	r3, [r4, #12]
 80048f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048f6:	bd70      	pop	{r4, r5, r6, pc}
 80048f8:	4b25      	ldr	r3, [pc, #148]	; (8004990 <__swsetup_r+0xd4>)
 80048fa:	429c      	cmp	r4, r3
 80048fc:	d101      	bne.n	8004902 <__swsetup_r+0x46>
 80048fe:	68ac      	ldr	r4, [r5, #8]
 8004900:	e7eb      	b.n	80048da <__swsetup_r+0x1e>
 8004902:	4b24      	ldr	r3, [pc, #144]	; (8004994 <__swsetup_r+0xd8>)
 8004904:	429c      	cmp	r4, r3
 8004906:	bf08      	it	eq
 8004908:	68ec      	ldreq	r4, [r5, #12]
 800490a:	e7e6      	b.n	80048da <__swsetup_r+0x1e>
 800490c:	0751      	lsls	r1, r2, #29
 800490e:	d512      	bpl.n	8004936 <__swsetup_r+0x7a>
 8004910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004912:	b141      	cbz	r1, 8004926 <__swsetup_r+0x6a>
 8004914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004918:	4299      	cmp	r1, r3
 800491a:	d002      	beq.n	8004922 <__swsetup_r+0x66>
 800491c:	4630      	mov	r0, r6
 800491e:	f000 fa23 	bl	8004d68 <_free_r>
 8004922:	2300      	movs	r3, #0
 8004924:	6363      	str	r3, [r4, #52]	; 0x34
 8004926:	89a3      	ldrh	r3, [r4, #12]
 8004928:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800492c:	81a3      	strh	r3, [r4, #12]
 800492e:	2300      	movs	r3, #0
 8004930:	6063      	str	r3, [r4, #4]
 8004932:	6923      	ldr	r3, [r4, #16]
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	89a3      	ldrh	r3, [r4, #12]
 8004938:	f043 0308 	orr.w	r3, r3, #8
 800493c:	81a3      	strh	r3, [r4, #12]
 800493e:	6923      	ldr	r3, [r4, #16]
 8004940:	b94b      	cbnz	r3, 8004956 <__swsetup_r+0x9a>
 8004942:	89a3      	ldrh	r3, [r4, #12]
 8004944:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800494c:	d003      	beq.n	8004956 <__swsetup_r+0x9a>
 800494e:	4621      	mov	r1, r4
 8004950:	4630      	mov	r0, r6
 8004952:	f000 f9c1 	bl	8004cd8 <__smakebuf_r>
 8004956:	89a2      	ldrh	r2, [r4, #12]
 8004958:	f012 0301 	ands.w	r3, r2, #1
 800495c:	d00c      	beq.n	8004978 <__swsetup_r+0xbc>
 800495e:	2300      	movs	r3, #0
 8004960:	60a3      	str	r3, [r4, #8]
 8004962:	6963      	ldr	r3, [r4, #20]
 8004964:	425b      	negs	r3, r3
 8004966:	61a3      	str	r3, [r4, #24]
 8004968:	6923      	ldr	r3, [r4, #16]
 800496a:	b953      	cbnz	r3, 8004982 <__swsetup_r+0xc6>
 800496c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004970:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004974:	d1ba      	bne.n	80048ec <__swsetup_r+0x30>
 8004976:	bd70      	pop	{r4, r5, r6, pc}
 8004978:	0792      	lsls	r2, r2, #30
 800497a:	bf58      	it	pl
 800497c:	6963      	ldrpl	r3, [r4, #20]
 800497e:	60a3      	str	r3, [r4, #8]
 8004980:	e7f2      	b.n	8004968 <__swsetup_r+0xac>
 8004982:	2000      	movs	r0, #0
 8004984:	e7f7      	b.n	8004976 <__swsetup_r+0xba>
 8004986:	bf00      	nop
 8004988:	20000010 	.word	0x20000010
 800498c:	08005884 	.word	0x08005884
 8004990:	080058a4 	.word	0x080058a4
 8004994:	08005864 	.word	0x08005864

08004998 <__sflush_r>:
 8004998:	898a      	ldrh	r2, [r1, #12]
 800499a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800499e:	4605      	mov	r5, r0
 80049a0:	0710      	lsls	r0, r2, #28
 80049a2:	460c      	mov	r4, r1
 80049a4:	d45a      	bmi.n	8004a5c <__sflush_r+0xc4>
 80049a6:	684b      	ldr	r3, [r1, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	dc05      	bgt.n	80049b8 <__sflush_r+0x20>
 80049ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	dc02      	bgt.n	80049b8 <__sflush_r+0x20>
 80049b2:	2000      	movs	r0, #0
 80049b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049ba:	2e00      	cmp	r6, #0
 80049bc:	d0f9      	beq.n	80049b2 <__sflush_r+0x1a>
 80049be:	2300      	movs	r3, #0
 80049c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80049c4:	682f      	ldr	r7, [r5, #0]
 80049c6:	602b      	str	r3, [r5, #0]
 80049c8:	d033      	beq.n	8004a32 <__sflush_r+0x9a>
 80049ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	075a      	lsls	r2, r3, #29
 80049d0:	d505      	bpl.n	80049de <__sflush_r+0x46>
 80049d2:	6863      	ldr	r3, [r4, #4]
 80049d4:	1ac0      	subs	r0, r0, r3
 80049d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049d8:	b10b      	cbz	r3, 80049de <__sflush_r+0x46>
 80049da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049dc:	1ac0      	subs	r0, r0, r3
 80049de:	2300      	movs	r3, #0
 80049e0:	4602      	mov	r2, r0
 80049e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049e4:	6a21      	ldr	r1, [r4, #32]
 80049e6:	4628      	mov	r0, r5
 80049e8:	47b0      	blx	r6
 80049ea:	1c43      	adds	r3, r0, #1
 80049ec:	89a3      	ldrh	r3, [r4, #12]
 80049ee:	d106      	bne.n	80049fe <__sflush_r+0x66>
 80049f0:	6829      	ldr	r1, [r5, #0]
 80049f2:	291d      	cmp	r1, #29
 80049f4:	d84b      	bhi.n	8004a8e <__sflush_r+0xf6>
 80049f6:	4a2b      	ldr	r2, [pc, #172]	; (8004aa4 <__sflush_r+0x10c>)
 80049f8:	40ca      	lsrs	r2, r1
 80049fa:	07d6      	lsls	r6, r2, #31
 80049fc:	d547      	bpl.n	8004a8e <__sflush_r+0xf6>
 80049fe:	2200      	movs	r2, #0
 8004a00:	6062      	str	r2, [r4, #4]
 8004a02:	04d9      	lsls	r1, r3, #19
 8004a04:	6922      	ldr	r2, [r4, #16]
 8004a06:	6022      	str	r2, [r4, #0]
 8004a08:	d504      	bpl.n	8004a14 <__sflush_r+0x7c>
 8004a0a:	1c42      	adds	r2, r0, #1
 8004a0c:	d101      	bne.n	8004a12 <__sflush_r+0x7a>
 8004a0e:	682b      	ldr	r3, [r5, #0]
 8004a10:	b903      	cbnz	r3, 8004a14 <__sflush_r+0x7c>
 8004a12:	6560      	str	r0, [r4, #84]	; 0x54
 8004a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a16:	602f      	str	r7, [r5, #0]
 8004a18:	2900      	cmp	r1, #0
 8004a1a:	d0ca      	beq.n	80049b2 <__sflush_r+0x1a>
 8004a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a20:	4299      	cmp	r1, r3
 8004a22:	d002      	beq.n	8004a2a <__sflush_r+0x92>
 8004a24:	4628      	mov	r0, r5
 8004a26:	f000 f99f 	bl	8004d68 <_free_r>
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	6360      	str	r0, [r4, #52]	; 0x34
 8004a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a32:	6a21      	ldr	r1, [r4, #32]
 8004a34:	2301      	movs	r3, #1
 8004a36:	4628      	mov	r0, r5
 8004a38:	47b0      	blx	r6
 8004a3a:	1c41      	adds	r1, r0, #1
 8004a3c:	d1c6      	bne.n	80049cc <__sflush_r+0x34>
 8004a3e:	682b      	ldr	r3, [r5, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0c3      	beq.n	80049cc <__sflush_r+0x34>
 8004a44:	2b1d      	cmp	r3, #29
 8004a46:	d001      	beq.n	8004a4c <__sflush_r+0xb4>
 8004a48:	2b16      	cmp	r3, #22
 8004a4a:	d101      	bne.n	8004a50 <__sflush_r+0xb8>
 8004a4c:	602f      	str	r7, [r5, #0]
 8004a4e:	e7b0      	b.n	80049b2 <__sflush_r+0x1a>
 8004a50:	89a3      	ldrh	r3, [r4, #12]
 8004a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a56:	81a3      	strh	r3, [r4, #12]
 8004a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a5c:	690f      	ldr	r7, [r1, #16]
 8004a5e:	2f00      	cmp	r7, #0
 8004a60:	d0a7      	beq.n	80049b2 <__sflush_r+0x1a>
 8004a62:	0793      	lsls	r3, r2, #30
 8004a64:	680e      	ldr	r6, [r1, #0]
 8004a66:	bf08      	it	eq
 8004a68:	694b      	ldreq	r3, [r1, #20]
 8004a6a:	600f      	str	r7, [r1, #0]
 8004a6c:	bf18      	it	ne
 8004a6e:	2300      	movne	r3, #0
 8004a70:	eba6 0807 	sub.w	r8, r6, r7
 8004a74:	608b      	str	r3, [r1, #8]
 8004a76:	f1b8 0f00 	cmp.w	r8, #0
 8004a7a:	dd9a      	ble.n	80049b2 <__sflush_r+0x1a>
 8004a7c:	4643      	mov	r3, r8
 8004a7e:	463a      	mov	r2, r7
 8004a80:	6a21      	ldr	r1, [r4, #32]
 8004a82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a84:	4628      	mov	r0, r5
 8004a86:	47b0      	blx	r6
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	dc07      	bgt.n	8004a9c <__sflush_r+0x104>
 8004a8c:	89a3      	ldrh	r3, [r4, #12]
 8004a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a92:	81a3      	strh	r3, [r4, #12]
 8004a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a9c:	4407      	add	r7, r0
 8004a9e:	eba8 0800 	sub.w	r8, r8, r0
 8004aa2:	e7e8      	b.n	8004a76 <__sflush_r+0xde>
 8004aa4:	20400001 	.word	0x20400001

08004aa8 <_fflush_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	690b      	ldr	r3, [r1, #16]
 8004aac:	4605      	mov	r5, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	b1db      	cbz	r3, 8004aea <_fflush_r+0x42>
 8004ab2:	b118      	cbz	r0, 8004abc <_fflush_r+0x14>
 8004ab4:	6983      	ldr	r3, [r0, #24]
 8004ab6:	b90b      	cbnz	r3, 8004abc <_fflush_r+0x14>
 8004ab8:	f000 f860 	bl	8004b7c <__sinit>
 8004abc:	4b0c      	ldr	r3, [pc, #48]	; (8004af0 <_fflush_r+0x48>)
 8004abe:	429c      	cmp	r4, r3
 8004ac0:	d109      	bne.n	8004ad6 <_fflush_r+0x2e>
 8004ac2:	686c      	ldr	r4, [r5, #4]
 8004ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ac8:	b17b      	cbz	r3, 8004aea <_fflush_r+0x42>
 8004aca:	4621      	mov	r1, r4
 8004acc:	4628      	mov	r0, r5
 8004ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ad2:	f7ff bf61 	b.w	8004998 <__sflush_r>
 8004ad6:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <_fflush_r+0x4c>)
 8004ad8:	429c      	cmp	r4, r3
 8004ada:	d101      	bne.n	8004ae0 <_fflush_r+0x38>
 8004adc:	68ac      	ldr	r4, [r5, #8]
 8004ade:	e7f1      	b.n	8004ac4 <_fflush_r+0x1c>
 8004ae0:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <_fflush_r+0x50>)
 8004ae2:	429c      	cmp	r4, r3
 8004ae4:	bf08      	it	eq
 8004ae6:	68ec      	ldreq	r4, [r5, #12]
 8004ae8:	e7ec      	b.n	8004ac4 <_fflush_r+0x1c>
 8004aea:	2000      	movs	r0, #0
 8004aec:	bd38      	pop	{r3, r4, r5, pc}
 8004aee:	bf00      	nop
 8004af0:	08005884 	.word	0x08005884
 8004af4:	080058a4 	.word	0x080058a4
 8004af8:	08005864 	.word	0x08005864

08004afc <_cleanup_r>:
 8004afc:	4901      	ldr	r1, [pc, #4]	; (8004b04 <_cleanup_r+0x8>)
 8004afe:	f000 b8a9 	b.w	8004c54 <_fwalk_reent>
 8004b02:	bf00      	nop
 8004b04:	08004aa9 	.word	0x08004aa9

08004b08 <std.isra.0>:
 8004b08:	2300      	movs	r3, #0
 8004b0a:	b510      	push	{r4, lr}
 8004b0c:	4604      	mov	r4, r0
 8004b0e:	6003      	str	r3, [r0, #0]
 8004b10:	6043      	str	r3, [r0, #4]
 8004b12:	6083      	str	r3, [r0, #8]
 8004b14:	8181      	strh	r1, [r0, #12]
 8004b16:	6643      	str	r3, [r0, #100]	; 0x64
 8004b18:	81c2      	strh	r2, [r0, #14]
 8004b1a:	6103      	str	r3, [r0, #16]
 8004b1c:	6143      	str	r3, [r0, #20]
 8004b1e:	6183      	str	r3, [r0, #24]
 8004b20:	4619      	mov	r1, r3
 8004b22:	2208      	movs	r2, #8
 8004b24:	305c      	adds	r0, #92	; 0x5c
 8004b26:	f000 f917 	bl	8004d58 <memset>
 8004b2a:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <std.isra.0+0x38>)
 8004b2c:	6263      	str	r3, [r4, #36]	; 0x24
 8004b2e:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <std.isra.0+0x3c>)
 8004b30:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b32:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <std.isra.0+0x40>)
 8004b34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b36:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <std.isra.0+0x44>)
 8004b38:	6224      	str	r4, [r4, #32]
 8004b3a:	6323      	str	r3, [r4, #48]	; 0x30
 8004b3c:	bd10      	pop	{r4, pc}
 8004b3e:	bf00      	nop
 8004b40:	0800548d 	.word	0x0800548d
 8004b44:	080054af 	.word	0x080054af
 8004b48:	080054e7 	.word	0x080054e7
 8004b4c:	0800550b 	.word	0x0800550b

08004b50 <__sfmoreglue>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	1e4a      	subs	r2, r1, #1
 8004b54:	2568      	movs	r5, #104	; 0x68
 8004b56:	4355      	muls	r5, r2
 8004b58:	460e      	mov	r6, r1
 8004b5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b5e:	f000 f951 	bl	8004e04 <_malloc_r>
 8004b62:	4604      	mov	r4, r0
 8004b64:	b140      	cbz	r0, 8004b78 <__sfmoreglue+0x28>
 8004b66:	2100      	movs	r1, #0
 8004b68:	e880 0042 	stmia.w	r0, {r1, r6}
 8004b6c:	300c      	adds	r0, #12
 8004b6e:	60a0      	str	r0, [r4, #8]
 8004b70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b74:	f000 f8f0 	bl	8004d58 <memset>
 8004b78:	4620      	mov	r0, r4
 8004b7a:	bd70      	pop	{r4, r5, r6, pc}

08004b7c <__sinit>:
 8004b7c:	6983      	ldr	r3, [r0, #24]
 8004b7e:	b510      	push	{r4, lr}
 8004b80:	4604      	mov	r4, r0
 8004b82:	bb33      	cbnz	r3, 8004bd2 <__sinit+0x56>
 8004b84:	6483      	str	r3, [r0, #72]	; 0x48
 8004b86:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004b88:	6503      	str	r3, [r0, #80]	; 0x50
 8004b8a:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <__sinit+0x58>)
 8004b8c:	4a12      	ldr	r2, [pc, #72]	; (8004bd8 <__sinit+0x5c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6282      	str	r2, [r0, #40]	; 0x28
 8004b92:	4298      	cmp	r0, r3
 8004b94:	bf04      	itt	eq
 8004b96:	2301      	moveq	r3, #1
 8004b98:	6183      	streq	r3, [r0, #24]
 8004b9a:	f000 f81f 	bl	8004bdc <__sfp>
 8004b9e:	6060      	str	r0, [r4, #4]
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f000 f81b 	bl	8004bdc <__sfp>
 8004ba6:	60a0      	str	r0, [r4, #8]
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f000 f817 	bl	8004bdc <__sfp>
 8004bae:	2200      	movs	r2, #0
 8004bb0:	60e0      	str	r0, [r4, #12]
 8004bb2:	2104      	movs	r1, #4
 8004bb4:	6860      	ldr	r0, [r4, #4]
 8004bb6:	f7ff ffa7 	bl	8004b08 <std.isra.0>
 8004bba:	2201      	movs	r2, #1
 8004bbc:	2109      	movs	r1, #9
 8004bbe:	68a0      	ldr	r0, [r4, #8]
 8004bc0:	f7ff ffa2 	bl	8004b08 <std.isra.0>
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	2112      	movs	r1, #18
 8004bc8:	68e0      	ldr	r0, [r4, #12]
 8004bca:	f7ff ff9d 	bl	8004b08 <std.isra.0>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	61a3      	str	r3, [r4, #24]
 8004bd2:	bd10      	pop	{r4, pc}
 8004bd4:	080058c4 	.word	0x080058c4
 8004bd8:	08004afd 	.word	0x08004afd

08004bdc <__sfp>:
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	4b1c      	ldr	r3, [pc, #112]	; (8004c50 <__sfp+0x74>)
 8004be0:	681e      	ldr	r6, [r3, #0]
 8004be2:	69b3      	ldr	r3, [r6, #24]
 8004be4:	4607      	mov	r7, r0
 8004be6:	b913      	cbnz	r3, 8004bee <__sfp+0x12>
 8004be8:	4630      	mov	r0, r6
 8004bea:	f7ff ffc7 	bl	8004b7c <__sinit>
 8004bee:	3648      	adds	r6, #72	; 0x48
 8004bf0:	68b4      	ldr	r4, [r6, #8]
 8004bf2:	6873      	ldr	r3, [r6, #4]
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	d503      	bpl.n	8004c00 <__sfp+0x24>
 8004bf8:	6833      	ldr	r3, [r6, #0]
 8004bfa:	b133      	cbz	r3, 8004c0a <__sfp+0x2e>
 8004bfc:	6836      	ldr	r6, [r6, #0]
 8004bfe:	e7f7      	b.n	8004bf0 <__sfp+0x14>
 8004c00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c04:	b16d      	cbz	r5, 8004c22 <__sfp+0x46>
 8004c06:	3468      	adds	r4, #104	; 0x68
 8004c08:	e7f4      	b.n	8004bf4 <__sfp+0x18>
 8004c0a:	2104      	movs	r1, #4
 8004c0c:	4638      	mov	r0, r7
 8004c0e:	f7ff ff9f 	bl	8004b50 <__sfmoreglue>
 8004c12:	6030      	str	r0, [r6, #0]
 8004c14:	2800      	cmp	r0, #0
 8004c16:	d1f1      	bne.n	8004bfc <__sfp+0x20>
 8004c18:	230c      	movs	r3, #12
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	4620      	mov	r0, r4
 8004c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c26:	81e3      	strh	r3, [r4, #14]
 8004c28:	2301      	movs	r3, #1
 8004c2a:	81a3      	strh	r3, [r4, #12]
 8004c2c:	6665      	str	r5, [r4, #100]	; 0x64
 8004c2e:	6025      	str	r5, [r4, #0]
 8004c30:	60a5      	str	r5, [r4, #8]
 8004c32:	6065      	str	r5, [r4, #4]
 8004c34:	6125      	str	r5, [r4, #16]
 8004c36:	6165      	str	r5, [r4, #20]
 8004c38:	61a5      	str	r5, [r4, #24]
 8004c3a:	2208      	movs	r2, #8
 8004c3c:	4629      	mov	r1, r5
 8004c3e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c42:	f000 f889 	bl	8004d58 <memset>
 8004c46:	6365      	str	r5, [r4, #52]	; 0x34
 8004c48:	63a5      	str	r5, [r4, #56]	; 0x38
 8004c4a:	64a5      	str	r5, [r4, #72]	; 0x48
 8004c4c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004c4e:	e7e6      	b.n	8004c1e <__sfp+0x42>
 8004c50:	080058c4 	.word	0x080058c4

08004c54 <_fwalk_reent>:
 8004c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c58:	4680      	mov	r8, r0
 8004c5a:	4689      	mov	r9, r1
 8004c5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c60:	2600      	movs	r6, #0
 8004c62:	b914      	cbnz	r4, 8004c6a <_fwalk_reent+0x16>
 8004c64:	4630      	mov	r0, r6
 8004c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c6a:	68a5      	ldr	r5, [r4, #8]
 8004c6c:	6867      	ldr	r7, [r4, #4]
 8004c6e:	3f01      	subs	r7, #1
 8004c70:	d501      	bpl.n	8004c76 <_fwalk_reent+0x22>
 8004c72:	6824      	ldr	r4, [r4, #0]
 8004c74:	e7f5      	b.n	8004c62 <_fwalk_reent+0xe>
 8004c76:	89ab      	ldrh	r3, [r5, #12]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d907      	bls.n	8004c8c <_fwalk_reent+0x38>
 8004c7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c80:	3301      	adds	r3, #1
 8004c82:	d003      	beq.n	8004c8c <_fwalk_reent+0x38>
 8004c84:	4629      	mov	r1, r5
 8004c86:	4640      	mov	r0, r8
 8004c88:	47c8      	blx	r9
 8004c8a:	4306      	orrs	r6, r0
 8004c8c:	3568      	adds	r5, #104	; 0x68
 8004c8e:	e7ee      	b.n	8004c6e <_fwalk_reent+0x1a>

08004c90 <__swhatbuf_r>:
 8004c90:	b570      	push	{r4, r5, r6, lr}
 8004c92:	460e      	mov	r6, r1
 8004c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c98:	2900      	cmp	r1, #0
 8004c9a:	b090      	sub	sp, #64	; 0x40
 8004c9c:	4614      	mov	r4, r2
 8004c9e:	461d      	mov	r5, r3
 8004ca0:	da07      	bge.n	8004cb2 <__swhatbuf_r+0x22>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	602b      	str	r3, [r5, #0]
 8004ca6:	89b3      	ldrh	r3, [r6, #12]
 8004ca8:	061a      	lsls	r2, r3, #24
 8004caa:	d410      	bmi.n	8004cce <__swhatbuf_r+0x3e>
 8004cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cb0:	e00e      	b.n	8004cd0 <__swhatbuf_r+0x40>
 8004cb2:	aa01      	add	r2, sp, #4
 8004cb4:	f000 fc50 	bl	8005558 <_fstat_r>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	dbf2      	blt.n	8004ca2 <__swhatbuf_r+0x12>
 8004cbc:	9a02      	ldr	r2, [sp, #8]
 8004cbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004cc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004cc6:	425a      	negs	r2, r3
 8004cc8:	415a      	adcs	r2, r3
 8004cca:	602a      	str	r2, [r5, #0]
 8004ccc:	e7ee      	b.n	8004cac <__swhatbuf_r+0x1c>
 8004cce:	2340      	movs	r3, #64	; 0x40
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	6023      	str	r3, [r4, #0]
 8004cd4:	b010      	add	sp, #64	; 0x40
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}

08004cd8 <__smakebuf_r>:
 8004cd8:	898b      	ldrh	r3, [r1, #12]
 8004cda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cdc:	079d      	lsls	r5, r3, #30
 8004cde:	4606      	mov	r6, r0
 8004ce0:	460c      	mov	r4, r1
 8004ce2:	d507      	bpl.n	8004cf4 <__smakebuf_r+0x1c>
 8004ce4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	6123      	str	r3, [r4, #16]
 8004cec:	2301      	movs	r3, #1
 8004cee:	6163      	str	r3, [r4, #20]
 8004cf0:	b002      	add	sp, #8
 8004cf2:	bd70      	pop	{r4, r5, r6, pc}
 8004cf4:	ab01      	add	r3, sp, #4
 8004cf6:	466a      	mov	r2, sp
 8004cf8:	f7ff ffca 	bl	8004c90 <__swhatbuf_r>
 8004cfc:	9900      	ldr	r1, [sp, #0]
 8004cfe:	4605      	mov	r5, r0
 8004d00:	4630      	mov	r0, r6
 8004d02:	f000 f87f 	bl	8004e04 <_malloc_r>
 8004d06:	b948      	cbnz	r0, 8004d1c <__smakebuf_r+0x44>
 8004d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d0c:	059a      	lsls	r2, r3, #22
 8004d0e:	d4ef      	bmi.n	8004cf0 <__smakebuf_r+0x18>
 8004d10:	f023 0303 	bic.w	r3, r3, #3
 8004d14:	f043 0302 	orr.w	r3, r3, #2
 8004d18:	81a3      	strh	r3, [r4, #12]
 8004d1a:	e7e3      	b.n	8004ce4 <__smakebuf_r+0xc>
 8004d1c:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <__smakebuf_r+0x7c>)
 8004d1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d20:	89a3      	ldrh	r3, [r4, #12]
 8004d22:	6020      	str	r0, [r4, #0]
 8004d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d28:	81a3      	strh	r3, [r4, #12]
 8004d2a:	9b00      	ldr	r3, [sp, #0]
 8004d2c:	6163      	str	r3, [r4, #20]
 8004d2e:	9b01      	ldr	r3, [sp, #4]
 8004d30:	6120      	str	r0, [r4, #16]
 8004d32:	b15b      	cbz	r3, 8004d4c <__smakebuf_r+0x74>
 8004d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d38:	4630      	mov	r0, r6
 8004d3a:	f000 fc1f 	bl	800557c <_isatty_r>
 8004d3e:	b128      	cbz	r0, 8004d4c <__smakebuf_r+0x74>
 8004d40:	89a3      	ldrh	r3, [r4, #12]
 8004d42:	f023 0303 	bic.w	r3, r3, #3
 8004d46:	f043 0301 	orr.w	r3, r3, #1
 8004d4a:	81a3      	strh	r3, [r4, #12]
 8004d4c:	89a3      	ldrh	r3, [r4, #12]
 8004d4e:	431d      	orrs	r5, r3
 8004d50:	81a5      	strh	r5, [r4, #12]
 8004d52:	e7cd      	b.n	8004cf0 <__smakebuf_r+0x18>
 8004d54:	08004afd 	.word	0x08004afd

08004d58 <memset>:
 8004d58:	4402      	add	r2, r0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d100      	bne.n	8004d62 <memset+0xa>
 8004d60:	4770      	bx	lr
 8004d62:	f803 1b01 	strb.w	r1, [r3], #1
 8004d66:	e7f9      	b.n	8004d5c <memset+0x4>

08004d68 <_free_r>:
 8004d68:	b538      	push	{r3, r4, r5, lr}
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	2900      	cmp	r1, #0
 8004d6e:	d045      	beq.n	8004dfc <_free_r+0x94>
 8004d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d74:	1f0c      	subs	r4, r1, #4
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	bfb8      	it	lt
 8004d7a:	18e4      	addlt	r4, r4, r3
 8004d7c:	f000 fc20 	bl	80055c0 <__malloc_lock>
 8004d80:	4a1f      	ldr	r2, [pc, #124]	; (8004e00 <_free_r+0x98>)
 8004d82:	6813      	ldr	r3, [r2, #0]
 8004d84:	4610      	mov	r0, r2
 8004d86:	b933      	cbnz	r3, 8004d96 <_free_r+0x2e>
 8004d88:	6063      	str	r3, [r4, #4]
 8004d8a:	6014      	str	r4, [r2, #0]
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d92:	f000 bc16 	b.w	80055c2 <__malloc_unlock>
 8004d96:	42a3      	cmp	r3, r4
 8004d98:	d90c      	bls.n	8004db4 <_free_r+0x4c>
 8004d9a:	6821      	ldr	r1, [r4, #0]
 8004d9c:	1862      	adds	r2, r4, r1
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	bf04      	itt	eq
 8004da2:	681a      	ldreq	r2, [r3, #0]
 8004da4:	685b      	ldreq	r3, [r3, #4]
 8004da6:	6063      	str	r3, [r4, #4]
 8004da8:	bf04      	itt	eq
 8004daa:	1852      	addeq	r2, r2, r1
 8004dac:	6022      	streq	r2, [r4, #0]
 8004dae:	6004      	str	r4, [r0, #0]
 8004db0:	e7ec      	b.n	8004d8c <_free_r+0x24>
 8004db2:	4613      	mov	r3, r2
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	b10a      	cbz	r2, 8004dbc <_free_r+0x54>
 8004db8:	42a2      	cmp	r2, r4
 8004dba:	d9fa      	bls.n	8004db2 <_free_r+0x4a>
 8004dbc:	6819      	ldr	r1, [r3, #0]
 8004dbe:	1858      	adds	r0, r3, r1
 8004dc0:	42a0      	cmp	r0, r4
 8004dc2:	d10b      	bne.n	8004ddc <_free_r+0x74>
 8004dc4:	6820      	ldr	r0, [r4, #0]
 8004dc6:	4401      	add	r1, r0
 8004dc8:	1858      	adds	r0, r3, r1
 8004dca:	4282      	cmp	r2, r0
 8004dcc:	6019      	str	r1, [r3, #0]
 8004dce:	d1dd      	bne.n	8004d8c <_free_r+0x24>
 8004dd0:	6810      	ldr	r0, [r2, #0]
 8004dd2:	6852      	ldr	r2, [r2, #4]
 8004dd4:	605a      	str	r2, [r3, #4]
 8004dd6:	4401      	add	r1, r0
 8004dd8:	6019      	str	r1, [r3, #0]
 8004dda:	e7d7      	b.n	8004d8c <_free_r+0x24>
 8004ddc:	d902      	bls.n	8004de4 <_free_r+0x7c>
 8004dde:	230c      	movs	r3, #12
 8004de0:	602b      	str	r3, [r5, #0]
 8004de2:	e7d3      	b.n	8004d8c <_free_r+0x24>
 8004de4:	6820      	ldr	r0, [r4, #0]
 8004de6:	1821      	adds	r1, r4, r0
 8004de8:	428a      	cmp	r2, r1
 8004dea:	bf04      	itt	eq
 8004dec:	6811      	ldreq	r1, [r2, #0]
 8004dee:	6852      	ldreq	r2, [r2, #4]
 8004df0:	6062      	str	r2, [r4, #4]
 8004df2:	bf04      	itt	eq
 8004df4:	1809      	addeq	r1, r1, r0
 8004df6:	6021      	streq	r1, [r4, #0]
 8004df8:	605c      	str	r4, [r3, #4]
 8004dfa:	e7c7      	b.n	8004d8c <_free_r+0x24>
 8004dfc:	bd38      	pop	{r3, r4, r5, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000094 	.word	0x20000094

08004e04 <_malloc_r>:
 8004e04:	b570      	push	{r4, r5, r6, lr}
 8004e06:	1ccd      	adds	r5, r1, #3
 8004e08:	f025 0503 	bic.w	r5, r5, #3
 8004e0c:	3508      	adds	r5, #8
 8004e0e:	2d0c      	cmp	r5, #12
 8004e10:	bf38      	it	cc
 8004e12:	250c      	movcc	r5, #12
 8004e14:	2d00      	cmp	r5, #0
 8004e16:	4606      	mov	r6, r0
 8004e18:	db01      	blt.n	8004e1e <_malloc_r+0x1a>
 8004e1a:	42a9      	cmp	r1, r5
 8004e1c:	d903      	bls.n	8004e26 <_malloc_r+0x22>
 8004e1e:	230c      	movs	r3, #12
 8004e20:	6033      	str	r3, [r6, #0]
 8004e22:	2000      	movs	r0, #0
 8004e24:	bd70      	pop	{r4, r5, r6, pc}
 8004e26:	f000 fbcb 	bl	80055c0 <__malloc_lock>
 8004e2a:	4a23      	ldr	r2, [pc, #140]	; (8004eb8 <_malloc_r+0xb4>)
 8004e2c:	6814      	ldr	r4, [r2, #0]
 8004e2e:	4621      	mov	r1, r4
 8004e30:	b991      	cbnz	r1, 8004e58 <_malloc_r+0x54>
 8004e32:	4c22      	ldr	r4, [pc, #136]	; (8004ebc <_malloc_r+0xb8>)
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	b91b      	cbnz	r3, 8004e40 <_malloc_r+0x3c>
 8004e38:	4630      	mov	r0, r6
 8004e3a:	f000 fb17 	bl	800546c <_sbrk_r>
 8004e3e:	6020      	str	r0, [r4, #0]
 8004e40:	4629      	mov	r1, r5
 8004e42:	4630      	mov	r0, r6
 8004e44:	f000 fb12 	bl	800546c <_sbrk_r>
 8004e48:	1c43      	adds	r3, r0, #1
 8004e4a:	d126      	bne.n	8004e9a <_malloc_r+0x96>
 8004e4c:	230c      	movs	r3, #12
 8004e4e:	6033      	str	r3, [r6, #0]
 8004e50:	4630      	mov	r0, r6
 8004e52:	f000 fbb6 	bl	80055c2 <__malloc_unlock>
 8004e56:	e7e4      	b.n	8004e22 <_malloc_r+0x1e>
 8004e58:	680b      	ldr	r3, [r1, #0]
 8004e5a:	1b5b      	subs	r3, r3, r5
 8004e5c:	d41a      	bmi.n	8004e94 <_malloc_r+0x90>
 8004e5e:	2b0b      	cmp	r3, #11
 8004e60:	d90f      	bls.n	8004e82 <_malloc_r+0x7e>
 8004e62:	600b      	str	r3, [r1, #0]
 8004e64:	50cd      	str	r5, [r1, r3]
 8004e66:	18cc      	adds	r4, r1, r3
 8004e68:	4630      	mov	r0, r6
 8004e6a:	f000 fbaa 	bl	80055c2 <__malloc_unlock>
 8004e6e:	f104 000b 	add.w	r0, r4, #11
 8004e72:	1d23      	adds	r3, r4, #4
 8004e74:	f020 0007 	bic.w	r0, r0, #7
 8004e78:	1ac3      	subs	r3, r0, r3
 8004e7a:	d01b      	beq.n	8004eb4 <_malloc_r+0xb0>
 8004e7c:	425a      	negs	r2, r3
 8004e7e:	50e2      	str	r2, [r4, r3]
 8004e80:	bd70      	pop	{r4, r5, r6, pc}
 8004e82:	428c      	cmp	r4, r1
 8004e84:	bf0d      	iteet	eq
 8004e86:	6863      	ldreq	r3, [r4, #4]
 8004e88:	684b      	ldrne	r3, [r1, #4]
 8004e8a:	6063      	strne	r3, [r4, #4]
 8004e8c:	6013      	streq	r3, [r2, #0]
 8004e8e:	bf18      	it	ne
 8004e90:	460c      	movne	r4, r1
 8004e92:	e7e9      	b.n	8004e68 <_malloc_r+0x64>
 8004e94:	460c      	mov	r4, r1
 8004e96:	6849      	ldr	r1, [r1, #4]
 8004e98:	e7ca      	b.n	8004e30 <_malloc_r+0x2c>
 8004e9a:	1cc4      	adds	r4, r0, #3
 8004e9c:	f024 0403 	bic.w	r4, r4, #3
 8004ea0:	42a0      	cmp	r0, r4
 8004ea2:	d005      	beq.n	8004eb0 <_malloc_r+0xac>
 8004ea4:	1a21      	subs	r1, r4, r0
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	f000 fae0 	bl	800546c <_sbrk_r>
 8004eac:	3001      	adds	r0, #1
 8004eae:	d0cd      	beq.n	8004e4c <_malloc_r+0x48>
 8004eb0:	6025      	str	r5, [r4, #0]
 8004eb2:	e7d9      	b.n	8004e68 <_malloc_r+0x64>
 8004eb4:	bd70      	pop	{r4, r5, r6, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000094 	.word	0x20000094
 8004ebc:	20000098 	.word	0x20000098

08004ec0 <__sfputc_r>:
 8004ec0:	6893      	ldr	r3, [r2, #8]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	b410      	push	{r4}
 8004ec8:	6093      	str	r3, [r2, #8]
 8004eca:	da09      	bge.n	8004ee0 <__sfputc_r+0x20>
 8004ecc:	6994      	ldr	r4, [r2, #24]
 8004ece:	42a3      	cmp	r3, r4
 8004ed0:	db02      	blt.n	8004ed8 <__sfputc_r+0x18>
 8004ed2:	b2cb      	uxtb	r3, r1
 8004ed4:	2b0a      	cmp	r3, #10
 8004ed6:	d103      	bne.n	8004ee0 <__sfputc_r+0x20>
 8004ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004edc:	f7ff bc9c 	b.w	8004818 <__swbuf_r>
 8004ee0:	6813      	ldr	r3, [r2, #0]
 8004ee2:	1c58      	adds	r0, r3, #1
 8004ee4:	6010      	str	r0, [r2, #0]
 8004ee6:	7019      	strb	r1, [r3, #0]
 8004ee8:	b2c8      	uxtb	r0, r1
 8004eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <__sfputs_r>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	4606      	mov	r6, r0
 8004ef4:	460f      	mov	r7, r1
 8004ef6:	4614      	mov	r4, r2
 8004ef8:	18d5      	adds	r5, r2, r3
 8004efa:	42ac      	cmp	r4, r5
 8004efc:	d101      	bne.n	8004f02 <__sfputs_r+0x12>
 8004efe:	2000      	movs	r0, #0
 8004f00:	e007      	b.n	8004f12 <__sfputs_r+0x22>
 8004f02:	463a      	mov	r2, r7
 8004f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f08:	4630      	mov	r0, r6
 8004f0a:	f7ff ffd9 	bl	8004ec0 <__sfputc_r>
 8004f0e:	1c43      	adds	r3, r0, #1
 8004f10:	d1f3      	bne.n	8004efa <__sfputs_r+0xa>
 8004f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004f14 <_vfiprintf_r>:
 8004f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f18:	b09d      	sub	sp, #116	; 0x74
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	4617      	mov	r7, r2
 8004f1e:	9303      	str	r3, [sp, #12]
 8004f20:	4606      	mov	r6, r0
 8004f22:	b118      	cbz	r0, 8004f2c <_vfiprintf_r+0x18>
 8004f24:	6983      	ldr	r3, [r0, #24]
 8004f26:	b90b      	cbnz	r3, 8004f2c <_vfiprintf_r+0x18>
 8004f28:	f7ff fe28 	bl	8004b7c <__sinit>
 8004f2c:	4b7c      	ldr	r3, [pc, #496]	; (8005120 <_vfiprintf_r+0x20c>)
 8004f2e:	429c      	cmp	r4, r3
 8004f30:	d157      	bne.n	8004fe2 <_vfiprintf_r+0xce>
 8004f32:	6874      	ldr	r4, [r6, #4]
 8004f34:	89a3      	ldrh	r3, [r4, #12]
 8004f36:	0718      	lsls	r0, r3, #28
 8004f38:	d55d      	bpl.n	8004ff6 <_vfiprintf_r+0xe2>
 8004f3a:	6923      	ldr	r3, [r4, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d05a      	beq.n	8004ff6 <_vfiprintf_r+0xe2>
 8004f40:	2300      	movs	r3, #0
 8004f42:	9309      	str	r3, [sp, #36]	; 0x24
 8004f44:	2320      	movs	r3, #32
 8004f46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f4a:	2330      	movs	r3, #48	; 0x30
 8004f4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f50:	f04f 0b01 	mov.w	fp, #1
 8004f54:	46b8      	mov	r8, r7
 8004f56:	4645      	mov	r5, r8
 8004f58:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d155      	bne.n	800500c <_vfiprintf_r+0xf8>
 8004f60:	ebb8 0a07 	subs.w	sl, r8, r7
 8004f64:	d00b      	beq.n	8004f7e <_vfiprintf_r+0x6a>
 8004f66:	4653      	mov	r3, sl
 8004f68:	463a      	mov	r2, r7
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	f7ff ffbf 	bl	8004ef0 <__sfputs_r>
 8004f72:	3001      	adds	r0, #1
 8004f74:	f000 80c4 	beq.w	8005100 <_vfiprintf_r+0x1ec>
 8004f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f7a:	4453      	add	r3, sl
 8004f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f7e:	f898 3000 	ldrb.w	r3, [r8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 80bc 	beq.w	8005100 <_vfiprintf_r+0x1ec>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f8e:	9304      	str	r3, [sp, #16]
 8004f90:	9307      	str	r3, [sp, #28]
 8004f92:	9205      	str	r2, [sp, #20]
 8004f94:	9306      	str	r3, [sp, #24]
 8004f96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f9a:	931a      	str	r3, [sp, #104]	; 0x68
 8004f9c:	2205      	movs	r2, #5
 8004f9e:	7829      	ldrb	r1, [r5, #0]
 8004fa0:	4860      	ldr	r0, [pc, #384]	; (8005124 <_vfiprintf_r+0x210>)
 8004fa2:	f7fb f91d 	bl	80001e0 <memchr>
 8004fa6:	f105 0801 	add.w	r8, r5, #1
 8004faa:	9b04      	ldr	r3, [sp, #16]
 8004fac:	2800      	cmp	r0, #0
 8004fae:	d131      	bne.n	8005014 <_vfiprintf_r+0x100>
 8004fb0:	06d9      	lsls	r1, r3, #27
 8004fb2:	bf44      	itt	mi
 8004fb4:	2220      	movmi	r2, #32
 8004fb6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fba:	071a      	lsls	r2, r3, #28
 8004fbc:	bf44      	itt	mi
 8004fbe:	222b      	movmi	r2, #43	; 0x2b
 8004fc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fc4:	782a      	ldrb	r2, [r5, #0]
 8004fc6:	2a2a      	cmp	r2, #42	; 0x2a
 8004fc8:	d02c      	beq.n	8005024 <_vfiprintf_r+0x110>
 8004fca:	9a07      	ldr	r2, [sp, #28]
 8004fcc:	2100      	movs	r1, #0
 8004fce:	200a      	movs	r0, #10
 8004fd0:	46a8      	mov	r8, r5
 8004fd2:	3501      	adds	r5, #1
 8004fd4:	f898 3000 	ldrb.w	r3, [r8]
 8004fd8:	3b30      	subs	r3, #48	; 0x30
 8004fda:	2b09      	cmp	r3, #9
 8004fdc:	d96d      	bls.n	80050ba <_vfiprintf_r+0x1a6>
 8004fde:	b371      	cbz	r1, 800503e <_vfiprintf_r+0x12a>
 8004fe0:	e026      	b.n	8005030 <_vfiprintf_r+0x11c>
 8004fe2:	4b51      	ldr	r3, [pc, #324]	; (8005128 <_vfiprintf_r+0x214>)
 8004fe4:	429c      	cmp	r4, r3
 8004fe6:	d101      	bne.n	8004fec <_vfiprintf_r+0xd8>
 8004fe8:	68b4      	ldr	r4, [r6, #8]
 8004fea:	e7a3      	b.n	8004f34 <_vfiprintf_r+0x20>
 8004fec:	4b4f      	ldr	r3, [pc, #316]	; (800512c <_vfiprintf_r+0x218>)
 8004fee:	429c      	cmp	r4, r3
 8004ff0:	bf08      	it	eq
 8004ff2:	68f4      	ldreq	r4, [r6, #12]
 8004ff4:	e79e      	b.n	8004f34 <_vfiprintf_r+0x20>
 8004ff6:	4621      	mov	r1, r4
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	f7ff fc5f 	bl	80048bc <__swsetup_r>
 8004ffe:	2800      	cmp	r0, #0
 8005000:	d09e      	beq.n	8004f40 <_vfiprintf_r+0x2c>
 8005002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005006:	b01d      	add	sp, #116	; 0x74
 8005008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800500c:	2b25      	cmp	r3, #37	; 0x25
 800500e:	d0a7      	beq.n	8004f60 <_vfiprintf_r+0x4c>
 8005010:	46a8      	mov	r8, r5
 8005012:	e7a0      	b.n	8004f56 <_vfiprintf_r+0x42>
 8005014:	4a43      	ldr	r2, [pc, #268]	; (8005124 <_vfiprintf_r+0x210>)
 8005016:	1a80      	subs	r0, r0, r2
 8005018:	fa0b f000 	lsl.w	r0, fp, r0
 800501c:	4318      	orrs	r0, r3
 800501e:	9004      	str	r0, [sp, #16]
 8005020:	4645      	mov	r5, r8
 8005022:	e7bb      	b.n	8004f9c <_vfiprintf_r+0x88>
 8005024:	9a03      	ldr	r2, [sp, #12]
 8005026:	1d11      	adds	r1, r2, #4
 8005028:	6812      	ldr	r2, [r2, #0]
 800502a:	9103      	str	r1, [sp, #12]
 800502c:	2a00      	cmp	r2, #0
 800502e:	db01      	blt.n	8005034 <_vfiprintf_r+0x120>
 8005030:	9207      	str	r2, [sp, #28]
 8005032:	e004      	b.n	800503e <_vfiprintf_r+0x12a>
 8005034:	4252      	negs	r2, r2
 8005036:	f043 0302 	orr.w	r3, r3, #2
 800503a:	9207      	str	r2, [sp, #28]
 800503c:	9304      	str	r3, [sp, #16]
 800503e:	f898 3000 	ldrb.w	r3, [r8]
 8005042:	2b2e      	cmp	r3, #46	; 0x2e
 8005044:	d110      	bne.n	8005068 <_vfiprintf_r+0x154>
 8005046:	f898 3001 	ldrb.w	r3, [r8, #1]
 800504a:	2b2a      	cmp	r3, #42	; 0x2a
 800504c:	f108 0101 	add.w	r1, r8, #1
 8005050:	d137      	bne.n	80050c2 <_vfiprintf_r+0x1ae>
 8005052:	9b03      	ldr	r3, [sp, #12]
 8005054:	1d1a      	adds	r2, r3, #4
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	9203      	str	r2, [sp, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	bfb8      	it	lt
 800505e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005062:	f108 0802 	add.w	r8, r8, #2
 8005066:	9305      	str	r3, [sp, #20]
 8005068:	4d31      	ldr	r5, [pc, #196]	; (8005130 <_vfiprintf_r+0x21c>)
 800506a:	f898 1000 	ldrb.w	r1, [r8]
 800506e:	2203      	movs	r2, #3
 8005070:	4628      	mov	r0, r5
 8005072:	f7fb f8b5 	bl	80001e0 <memchr>
 8005076:	b140      	cbz	r0, 800508a <_vfiprintf_r+0x176>
 8005078:	2340      	movs	r3, #64	; 0x40
 800507a:	1b40      	subs	r0, r0, r5
 800507c:	fa03 f000 	lsl.w	r0, r3, r0
 8005080:	9b04      	ldr	r3, [sp, #16]
 8005082:	4303      	orrs	r3, r0
 8005084:	9304      	str	r3, [sp, #16]
 8005086:	f108 0801 	add.w	r8, r8, #1
 800508a:	f898 1000 	ldrb.w	r1, [r8]
 800508e:	4829      	ldr	r0, [pc, #164]	; (8005134 <_vfiprintf_r+0x220>)
 8005090:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005094:	2206      	movs	r2, #6
 8005096:	f108 0701 	add.w	r7, r8, #1
 800509a:	f7fb f8a1 	bl	80001e0 <memchr>
 800509e:	2800      	cmp	r0, #0
 80050a0:	d034      	beq.n	800510c <_vfiprintf_r+0x1f8>
 80050a2:	4b25      	ldr	r3, [pc, #148]	; (8005138 <_vfiprintf_r+0x224>)
 80050a4:	bb03      	cbnz	r3, 80050e8 <_vfiprintf_r+0x1d4>
 80050a6:	9b03      	ldr	r3, [sp, #12]
 80050a8:	3307      	adds	r3, #7
 80050aa:	f023 0307 	bic.w	r3, r3, #7
 80050ae:	3308      	adds	r3, #8
 80050b0:	9303      	str	r3, [sp, #12]
 80050b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050b4:	444b      	add	r3, r9
 80050b6:	9309      	str	r3, [sp, #36]	; 0x24
 80050b8:	e74c      	b.n	8004f54 <_vfiprintf_r+0x40>
 80050ba:	fb00 3202 	mla	r2, r0, r2, r3
 80050be:	2101      	movs	r1, #1
 80050c0:	e786      	b.n	8004fd0 <_vfiprintf_r+0xbc>
 80050c2:	2300      	movs	r3, #0
 80050c4:	9305      	str	r3, [sp, #20]
 80050c6:	4618      	mov	r0, r3
 80050c8:	250a      	movs	r5, #10
 80050ca:	4688      	mov	r8, r1
 80050cc:	3101      	adds	r1, #1
 80050ce:	f898 2000 	ldrb.w	r2, [r8]
 80050d2:	3a30      	subs	r2, #48	; 0x30
 80050d4:	2a09      	cmp	r2, #9
 80050d6:	d903      	bls.n	80050e0 <_vfiprintf_r+0x1cc>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0c5      	beq.n	8005068 <_vfiprintf_r+0x154>
 80050dc:	9005      	str	r0, [sp, #20]
 80050de:	e7c3      	b.n	8005068 <_vfiprintf_r+0x154>
 80050e0:	fb05 2000 	mla	r0, r5, r0, r2
 80050e4:	2301      	movs	r3, #1
 80050e6:	e7f0      	b.n	80050ca <_vfiprintf_r+0x1b6>
 80050e8:	ab03      	add	r3, sp, #12
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	4622      	mov	r2, r4
 80050ee:	4b13      	ldr	r3, [pc, #76]	; (800513c <_vfiprintf_r+0x228>)
 80050f0:	a904      	add	r1, sp, #16
 80050f2:	4630      	mov	r0, r6
 80050f4:	f3af 8000 	nop.w
 80050f8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80050fc:	4681      	mov	r9, r0
 80050fe:	d1d8      	bne.n	80050b2 <_vfiprintf_r+0x19e>
 8005100:	89a3      	ldrh	r3, [r4, #12]
 8005102:	065b      	lsls	r3, r3, #25
 8005104:	f53f af7d 	bmi.w	8005002 <_vfiprintf_r+0xee>
 8005108:	9809      	ldr	r0, [sp, #36]	; 0x24
 800510a:	e77c      	b.n	8005006 <_vfiprintf_r+0xf2>
 800510c:	ab03      	add	r3, sp, #12
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	4622      	mov	r2, r4
 8005112:	4b0a      	ldr	r3, [pc, #40]	; (800513c <_vfiprintf_r+0x228>)
 8005114:	a904      	add	r1, sp, #16
 8005116:	4630      	mov	r0, r6
 8005118:	f000 f888 	bl	800522c <_printf_i>
 800511c:	e7ec      	b.n	80050f8 <_vfiprintf_r+0x1e4>
 800511e:	bf00      	nop
 8005120:	08005884 	.word	0x08005884
 8005124:	080058c8 	.word	0x080058c8
 8005128:	080058a4 	.word	0x080058a4
 800512c:	08005864 	.word	0x08005864
 8005130:	080058ce 	.word	0x080058ce
 8005134:	080058d2 	.word	0x080058d2
 8005138:	00000000 	.word	0x00000000
 800513c:	08004ef1 	.word	0x08004ef1

08005140 <_printf_common>:
 8005140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005144:	4691      	mov	r9, r2
 8005146:	461f      	mov	r7, r3
 8005148:	688a      	ldr	r2, [r1, #8]
 800514a:	690b      	ldr	r3, [r1, #16]
 800514c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005150:	4293      	cmp	r3, r2
 8005152:	bfb8      	it	lt
 8005154:	4613      	movlt	r3, r2
 8005156:	f8c9 3000 	str.w	r3, [r9]
 800515a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800515e:	4606      	mov	r6, r0
 8005160:	460c      	mov	r4, r1
 8005162:	b112      	cbz	r2, 800516a <_printf_common+0x2a>
 8005164:	3301      	adds	r3, #1
 8005166:	f8c9 3000 	str.w	r3, [r9]
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	0699      	lsls	r1, r3, #26
 800516e:	bf42      	ittt	mi
 8005170:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005174:	3302      	addmi	r3, #2
 8005176:	f8c9 3000 	strmi.w	r3, [r9]
 800517a:	6825      	ldr	r5, [r4, #0]
 800517c:	f015 0506 	ands.w	r5, r5, #6
 8005180:	d107      	bne.n	8005192 <_printf_common+0x52>
 8005182:	f104 0a19 	add.w	sl, r4, #25
 8005186:	68e3      	ldr	r3, [r4, #12]
 8005188:	f8d9 2000 	ldr.w	r2, [r9]
 800518c:	1a9b      	subs	r3, r3, r2
 800518e:	429d      	cmp	r5, r3
 8005190:	db29      	blt.n	80051e6 <_printf_common+0xa6>
 8005192:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005196:	6822      	ldr	r2, [r4, #0]
 8005198:	3300      	adds	r3, #0
 800519a:	bf18      	it	ne
 800519c:	2301      	movne	r3, #1
 800519e:	0692      	lsls	r2, r2, #26
 80051a0:	d42e      	bmi.n	8005200 <_printf_common+0xc0>
 80051a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051a6:	4639      	mov	r1, r7
 80051a8:	4630      	mov	r0, r6
 80051aa:	47c0      	blx	r8
 80051ac:	3001      	adds	r0, #1
 80051ae:	d021      	beq.n	80051f4 <_printf_common+0xb4>
 80051b0:	6823      	ldr	r3, [r4, #0]
 80051b2:	68e5      	ldr	r5, [r4, #12]
 80051b4:	f8d9 2000 	ldr.w	r2, [r9]
 80051b8:	f003 0306 	and.w	r3, r3, #6
 80051bc:	2b04      	cmp	r3, #4
 80051be:	bf08      	it	eq
 80051c0:	1aad      	subeq	r5, r5, r2
 80051c2:	68a3      	ldr	r3, [r4, #8]
 80051c4:	6922      	ldr	r2, [r4, #16]
 80051c6:	bf0c      	ite	eq
 80051c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051cc:	2500      	movne	r5, #0
 80051ce:	4293      	cmp	r3, r2
 80051d0:	bfc4      	itt	gt
 80051d2:	1a9b      	subgt	r3, r3, r2
 80051d4:	18ed      	addgt	r5, r5, r3
 80051d6:	f04f 0900 	mov.w	r9, #0
 80051da:	341a      	adds	r4, #26
 80051dc:	454d      	cmp	r5, r9
 80051de:	d11b      	bne.n	8005218 <_printf_common+0xd8>
 80051e0:	2000      	movs	r0, #0
 80051e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e6:	2301      	movs	r3, #1
 80051e8:	4652      	mov	r2, sl
 80051ea:	4639      	mov	r1, r7
 80051ec:	4630      	mov	r0, r6
 80051ee:	47c0      	blx	r8
 80051f0:	3001      	adds	r0, #1
 80051f2:	d103      	bne.n	80051fc <_printf_common+0xbc>
 80051f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051fc:	3501      	adds	r5, #1
 80051fe:	e7c2      	b.n	8005186 <_printf_common+0x46>
 8005200:	18e1      	adds	r1, r4, r3
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	2030      	movs	r0, #48	; 0x30
 8005206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800520a:	4422      	add	r2, r4
 800520c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005214:	3302      	adds	r3, #2
 8005216:	e7c4      	b.n	80051a2 <_printf_common+0x62>
 8005218:	2301      	movs	r3, #1
 800521a:	4622      	mov	r2, r4
 800521c:	4639      	mov	r1, r7
 800521e:	4630      	mov	r0, r6
 8005220:	47c0      	blx	r8
 8005222:	3001      	adds	r0, #1
 8005224:	d0e6      	beq.n	80051f4 <_printf_common+0xb4>
 8005226:	f109 0901 	add.w	r9, r9, #1
 800522a:	e7d7      	b.n	80051dc <_printf_common+0x9c>

0800522c <_printf_i>:
 800522c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005230:	4617      	mov	r7, r2
 8005232:	7e0a      	ldrb	r2, [r1, #24]
 8005234:	b085      	sub	sp, #20
 8005236:	2a6e      	cmp	r2, #110	; 0x6e
 8005238:	4698      	mov	r8, r3
 800523a:	4606      	mov	r6, r0
 800523c:	460c      	mov	r4, r1
 800523e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005240:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005244:	f000 80bc 	beq.w	80053c0 <_printf_i+0x194>
 8005248:	d81a      	bhi.n	8005280 <_printf_i+0x54>
 800524a:	2a63      	cmp	r2, #99	; 0x63
 800524c:	d02e      	beq.n	80052ac <_printf_i+0x80>
 800524e:	d80a      	bhi.n	8005266 <_printf_i+0x3a>
 8005250:	2a00      	cmp	r2, #0
 8005252:	f000 80c8 	beq.w	80053e6 <_printf_i+0x1ba>
 8005256:	2a58      	cmp	r2, #88	; 0x58
 8005258:	f000 808a 	beq.w	8005370 <_printf_i+0x144>
 800525c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005260:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005264:	e02a      	b.n	80052bc <_printf_i+0x90>
 8005266:	2a64      	cmp	r2, #100	; 0x64
 8005268:	d001      	beq.n	800526e <_printf_i+0x42>
 800526a:	2a69      	cmp	r2, #105	; 0x69
 800526c:	d1f6      	bne.n	800525c <_printf_i+0x30>
 800526e:	6821      	ldr	r1, [r4, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005276:	d023      	beq.n	80052c0 <_printf_i+0x94>
 8005278:	1d11      	adds	r1, r2, #4
 800527a:	6019      	str	r1, [r3, #0]
 800527c:	6813      	ldr	r3, [r2, #0]
 800527e:	e027      	b.n	80052d0 <_printf_i+0xa4>
 8005280:	2a73      	cmp	r2, #115	; 0x73
 8005282:	f000 80b4 	beq.w	80053ee <_printf_i+0x1c2>
 8005286:	d808      	bhi.n	800529a <_printf_i+0x6e>
 8005288:	2a6f      	cmp	r2, #111	; 0x6f
 800528a:	d02a      	beq.n	80052e2 <_printf_i+0xb6>
 800528c:	2a70      	cmp	r2, #112	; 0x70
 800528e:	d1e5      	bne.n	800525c <_printf_i+0x30>
 8005290:	680a      	ldr	r2, [r1, #0]
 8005292:	f042 0220 	orr.w	r2, r2, #32
 8005296:	600a      	str	r2, [r1, #0]
 8005298:	e003      	b.n	80052a2 <_printf_i+0x76>
 800529a:	2a75      	cmp	r2, #117	; 0x75
 800529c:	d021      	beq.n	80052e2 <_printf_i+0xb6>
 800529e:	2a78      	cmp	r2, #120	; 0x78
 80052a0:	d1dc      	bne.n	800525c <_printf_i+0x30>
 80052a2:	2278      	movs	r2, #120	; 0x78
 80052a4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80052a8:	496e      	ldr	r1, [pc, #440]	; (8005464 <_printf_i+0x238>)
 80052aa:	e064      	b.n	8005376 <_printf_i+0x14a>
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80052b2:	1d11      	adds	r1, r2, #4
 80052b4:	6019      	str	r1, [r3, #0]
 80052b6:	6813      	ldr	r3, [r2, #0]
 80052b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052bc:	2301      	movs	r3, #1
 80052be:	e0a3      	b.n	8005408 <_printf_i+0x1dc>
 80052c0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80052c4:	f102 0104 	add.w	r1, r2, #4
 80052c8:	6019      	str	r1, [r3, #0]
 80052ca:	d0d7      	beq.n	800527c <_printf_i+0x50>
 80052cc:	f9b2 3000 	ldrsh.w	r3, [r2]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	da03      	bge.n	80052dc <_printf_i+0xb0>
 80052d4:	222d      	movs	r2, #45	; 0x2d
 80052d6:	425b      	negs	r3, r3
 80052d8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80052dc:	4962      	ldr	r1, [pc, #392]	; (8005468 <_printf_i+0x23c>)
 80052de:	220a      	movs	r2, #10
 80052e0:	e017      	b.n	8005312 <_printf_i+0xe6>
 80052e2:	6820      	ldr	r0, [r4, #0]
 80052e4:	6819      	ldr	r1, [r3, #0]
 80052e6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80052ea:	d003      	beq.n	80052f4 <_printf_i+0xc8>
 80052ec:	1d08      	adds	r0, r1, #4
 80052ee:	6018      	str	r0, [r3, #0]
 80052f0:	680b      	ldr	r3, [r1, #0]
 80052f2:	e006      	b.n	8005302 <_printf_i+0xd6>
 80052f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052f8:	f101 0004 	add.w	r0, r1, #4
 80052fc:	6018      	str	r0, [r3, #0]
 80052fe:	d0f7      	beq.n	80052f0 <_printf_i+0xc4>
 8005300:	880b      	ldrh	r3, [r1, #0]
 8005302:	4959      	ldr	r1, [pc, #356]	; (8005468 <_printf_i+0x23c>)
 8005304:	2a6f      	cmp	r2, #111	; 0x6f
 8005306:	bf14      	ite	ne
 8005308:	220a      	movne	r2, #10
 800530a:	2208      	moveq	r2, #8
 800530c:	2000      	movs	r0, #0
 800530e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005312:	6865      	ldr	r5, [r4, #4]
 8005314:	60a5      	str	r5, [r4, #8]
 8005316:	2d00      	cmp	r5, #0
 8005318:	f2c0 809c 	blt.w	8005454 <_printf_i+0x228>
 800531c:	6820      	ldr	r0, [r4, #0]
 800531e:	f020 0004 	bic.w	r0, r0, #4
 8005322:	6020      	str	r0, [r4, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d13f      	bne.n	80053a8 <_printf_i+0x17c>
 8005328:	2d00      	cmp	r5, #0
 800532a:	f040 8095 	bne.w	8005458 <_printf_i+0x22c>
 800532e:	4675      	mov	r5, lr
 8005330:	2a08      	cmp	r2, #8
 8005332:	d10b      	bne.n	800534c <_printf_i+0x120>
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	07da      	lsls	r2, r3, #31
 8005338:	d508      	bpl.n	800534c <_printf_i+0x120>
 800533a:	6923      	ldr	r3, [r4, #16]
 800533c:	6862      	ldr	r2, [r4, #4]
 800533e:	429a      	cmp	r2, r3
 8005340:	bfde      	ittt	le
 8005342:	2330      	movle	r3, #48	; 0x30
 8005344:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005348:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800534c:	ebae 0305 	sub.w	r3, lr, r5
 8005350:	6123      	str	r3, [r4, #16]
 8005352:	f8cd 8000 	str.w	r8, [sp]
 8005356:	463b      	mov	r3, r7
 8005358:	aa03      	add	r2, sp, #12
 800535a:	4621      	mov	r1, r4
 800535c:	4630      	mov	r0, r6
 800535e:	f7ff feef 	bl	8005140 <_printf_common>
 8005362:	3001      	adds	r0, #1
 8005364:	d155      	bne.n	8005412 <_printf_i+0x1e6>
 8005366:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800536a:	b005      	add	sp, #20
 800536c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005370:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005374:	493c      	ldr	r1, [pc, #240]	; (8005468 <_printf_i+0x23c>)
 8005376:	6822      	ldr	r2, [r4, #0]
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800537e:	f100 0504 	add.w	r5, r0, #4
 8005382:	601d      	str	r5, [r3, #0]
 8005384:	d001      	beq.n	800538a <_printf_i+0x15e>
 8005386:	6803      	ldr	r3, [r0, #0]
 8005388:	e002      	b.n	8005390 <_printf_i+0x164>
 800538a:	0655      	lsls	r5, r2, #25
 800538c:	d5fb      	bpl.n	8005386 <_printf_i+0x15a>
 800538e:	8803      	ldrh	r3, [r0, #0]
 8005390:	07d0      	lsls	r0, r2, #31
 8005392:	bf44      	itt	mi
 8005394:	f042 0220 	orrmi.w	r2, r2, #32
 8005398:	6022      	strmi	r2, [r4, #0]
 800539a:	b91b      	cbnz	r3, 80053a4 <_printf_i+0x178>
 800539c:	6822      	ldr	r2, [r4, #0]
 800539e:	f022 0220 	bic.w	r2, r2, #32
 80053a2:	6022      	str	r2, [r4, #0]
 80053a4:	2210      	movs	r2, #16
 80053a6:	e7b1      	b.n	800530c <_printf_i+0xe0>
 80053a8:	4675      	mov	r5, lr
 80053aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80053ae:	fb02 3310 	mls	r3, r2, r0, r3
 80053b2:	5ccb      	ldrb	r3, [r1, r3]
 80053b4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80053b8:	4603      	mov	r3, r0
 80053ba:	2800      	cmp	r0, #0
 80053bc:	d1f5      	bne.n	80053aa <_printf_i+0x17e>
 80053be:	e7b7      	b.n	8005330 <_printf_i+0x104>
 80053c0:	6808      	ldr	r0, [r1, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	6949      	ldr	r1, [r1, #20]
 80053c6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80053ca:	d004      	beq.n	80053d6 <_printf_i+0x1aa>
 80053cc:	1d10      	adds	r0, r2, #4
 80053ce:	6018      	str	r0, [r3, #0]
 80053d0:	6813      	ldr	r3, [r2, #0]
 80053d2:	6019      	str	r1, [r3, #0]
 80053d4:	e007      	b.n	80053e6 <_printf_i+0x1ba>
 80053d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053da:	f102 0004 	add.w	r0, r2, #4
 80053de:	6018      	str	r0, [r3, #0]
 80053e0:	6813      	ldr	r3, [r2, #0]
 80053e2:	d0f6      	beq.n	80053d2 <_printf_i+0x1a6>
 80053e4:	8019      	strh	r1, [r3, #0]
 80053e6:	2300      	movs	r3, #0
 80053e8:	6123      	str	r3, [r4, #16]
 80053ea:	4675      	mov	r5, lr
 80053ec:	e7b1      	b.n	8005352 <_printf_i+0x126>
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	1d11      	adds	r1, r2, #4
 80053f2:	6019      	str	r1, [r3, #0]
 80053f4:	6815      	ldr	r5, [r2, #0]
 80053f6:	6862      	ldr	r2, [r4, #4]
 80053f8:	2100      	movs	r1, #0
 80053fa:	4628      	mov	r0, r5
 80053fc:	f7fa fef0 	bl	80001e0 <memchr>
 8005400:	b108      	cbz	r0, 8005406 <_printf_i+0x1da>
 8005402:	1b40      	subs	r0, r0, r5
 8005404:	6060      	str	r0, [r4, #4]
 8005406:	6863      	ldr	r3, [r4, #4]
 8005408:	6123      	str	r3, [r4, #16]
 800540a:	2300      	movs	r3, #0
 800540c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005410:	e79f      	b.n	8005352 <_printf_i+0x126>
 8005412:	6923      	ldr	r3, [r4, #16]
 8005414:	462a      	mov	r2, r5
 8005416:	4639      	mov	r1, r7
 8005418:	4630      	mov	r0, r6
 800541a:	47c0      	blx	r8
 800541c:	3001      	adds	r0, #1
 800541e:	d0a2      	beq.n	8005366 <_printf_i+0x13a>
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	079b      	lsls	r3, r3, #30
 8005424:	d507      	bpl.n	8005436 <_printf_i+0x20a>
 8005426:	2500      	movs	r5, #0
 8005428:	f104 0919 	add.w	r9, r4, #25
 800542c:	68e3      	ldr	r3, [r4, #12]
 800542e:	9a03      	ldr	r2, [sp, #12]
 8005430:	1a9b      	subs	r3, r3, r2
 8005432:	429d      	cmp	r5, r3
 8005434:	db05      	blt.n	8005442 <_printf_i+0x216>
 8005436:	68e0      	ldr	r0, [r4, #12]
 8005438:	9b03      	ldr	r3, [sp, #12]
 800543a:	4298      	cmp	r0, r3
 800543c:	bfb8      	it	lt
 800543e:	4618      	movlt	r0, r3
 8005440:	e793      	b.n	800536a <_printf_i+0x13e>
 8005442:	2301      	movs	r3, #1
 8005444:	464a      	mov	r2, r9
 8005446:	4639      	mov	r1, r7
 8005448:	4630      	mov	r0, r6
 800544a:	47c0      	blx	r8
 800544c:	3001      	adds	r0, #1
 800544e:	d08a      	beq.n	8005366 <_printf_i+0x13a>
 8005450:	3501      	adds	r5, #1
 8005452:	e7eb      	b.n	800542c <_printf_i+0x200>
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1a7      	bne.n	80053a8 <_printf_i+0x17c>
 8005458:	780b      	ldrb	r3, [r1, #0]
 800545a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800545e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005462:	e765      	b.n	8005330 <_printf_i+0x104>
 8005464:	080058ea 	.word	0x080058ea
 8005468:	080058d9 	.word	0x080058d9

0800546c <_sbrk_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	4c06      	ldr	r4, [pc, #24]	; (8005488 <_sbrk_r+0x1c>)
 8005470:	2300      	movs	r3, #0
 8005472:	4605      	mov	r5, r0
 8005474:	4608      	mov	r0, r1
 8005476:	6023      	str	r3, [r4, #0]
 8005478:	f7ff f852 	bl	8004520 <_sbrk>
 800547c:	1c43      	adds	r3, r0, #1
 800547e:	d102      	bne.n	8005486 <_sbrk_r+0x1a>
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	b103      	cbz	r3, 8005486 <_sbrk_r+0x1a>
 8005484:	602b      	str	r3, [r5, #0]
 8005486:	bd38      	pop	{r3, r4, r5, pc}
 8005488:	200000b0 	.word	0x200000b0

0800548c <__sread>:
 800548c:	b510      	push	{r4, lr}
 800548e:	460c      	mov	r4, r1
 8005490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005494:	f000 f896 	bl	80055c4 <_read_r>
 8005498:	2800      	cmp	r0, #0
 800549a:	bfab      	itete	ge
 800549c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800549e:	89a3      	ldrhlt	r3, [r4, #12]
 80054a0:	181b      	addge	r3, r3, r0
 80054a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054a6:	bfac      	ite	ge
 80054a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80054aa:	81a3      	strhlt	r3, [r4, #12]
 80054ac:	bd10      	pop	{r4, pc}

080054ae <__swrite>:
 80054ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054b2:	461f      	mov	r7, r3
 80054b4:	898b      	ldrh	r3, [r1, #12]
 80054b6:	05db      	lsls	r3, r3, #23
 80054b8:	4605      	mov	r5, r0
 80054ba:	460c      	mov	r4, r1
 80054bc:	4616      	mov	r6, r2
 80054be:	d505      	bpl.n	80054cc <__swrite+0x1e>
 80054c0:	2302      	movs	r3, #2
 80054c2:	2200      	movs	r2, #0
 80054c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054c8:	f000 f868 	bl	800559c <_lseek_r>
 80054cc:	89a3      	ldrh	r3, [r4, #12]
 80054ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054d6:	81a3      	strh	r3, [r4, #12]
 80054d8:	4632      	mov	r2, r6
 80054da:	463b      	mov	r3, r7
 80054dc:	4628      	mov	r0, r5
 80054de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054e2:	f000 b817 	b.w	8005514 <_write_r>

080054e6 <__sseek>:
 80054e6:	b510      	push	{r4, lr}
 80054e8:	460c      	mov	r4, r1
 80054ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ee:	f000 f855 	bl	800559c <_lseek_r>
 80054f2:	1c43      	adds	r3, r0, #1
 80054f4:	89a3      	ldrh	r3, [r4, #12]
 80054f6:	bf15      	itete	ne
 80054f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80054fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005502:	81a3      	strheq	r3, [r4, #12]
 8005504:	bf18      	it	ne
 8005506:	81a3      	strhne	r3, [r4, #12]
 8005508:	bd10      	pop	{r4, pc}

0800550a <__sclose>:
 800550a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800550e:	f000 b813 	b.w	8005538 <_close_r>
	...

08005514 <_write_r>:
 8005514:	b538      	push	{r3, r4, r5, lr}
 8005516:	4c07      	ldr	r4, [pc, #28]	; (8005534 <_write_r+0x20>)
 8005518:	4605      	mov	r5, r0
 800551a:	4608      	mov	r0, r1
 800551c:	4611      	mov	r1, r2
 800551e:	2200      	movs	r2, #0
 8005520:	6022      	str	r2, [r4, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	f7fe ffdd 	bl	80044e2 <_write>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	d102      	bne.n	8005532 <_write_r+0x1e>
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	b103      	cbz	r3, 8005532 <_write_r+0x1e>
 8005530:	602b      	str	r3, [r5, #0]
 8005532:	bd38      	pop	{r3, r4, r5, pc}
 8005534:	200000b0 	.word	0x200000b0

08005538 <_close_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4c06      	ldr	r4, [pc, #24]	; (8005554 <_close_r+0x1c>)
 800553c:	2300      	movs	r3, #0
 800553e:	4605      	mov	r5, r0
 8005540:	4608      	mov	r0, r1
 8005542:	6023      	str	r3, [r4, #0]
 8005544:	f7ff f80c 	bl	8004560 <_close>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <_close_r+0x1a>
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	b103      	cbz	r3, 8005552 <_close_r+0x1a>
 8005550:	602b      	str	r3, [r5, #0]
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	200000b0 	.word	0x200000b0

08005558 <_fstat_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	4c07      	ldr	r4, [pc, #28]	; (8005578 <_fstat_r+0x20>)
 800555c:	2300      	movs	r3, #0
 800555e:	4605      	mov	r5, r0
 8005560:	4608      	mov	r0, r1
 8005562:	4611      	mov	r1, r2
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	f7ff f80d 	bl	8004584 <_fstat>
 800556a:	1c43      	adds	r3, r0, #1
 800556c:	d102      	bne.n	8005574 <_fstat_r+0x1c>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	b103      	cbz	r3, 8005574 <_fstat_r+0x1c>
 8005572:	602b      	str	r3, [r5, #0]
 8005574:	bd38      	pop	{r3, r4, r5, pc}
 8005576:	bf00      	nop
 8005578:	200000b0 	.word	0x200000b0

0800557c <_isatty_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	4c06      	ldr	r4, [pc, #24]	; (8005598 <_isatty_r+0x1c>)
 8005580:	2300      	movs	r3, #0
 8005582:	4605      	mov	r5, r0
 8005584:	4608      	mov	r0, r1
 8005586:	6023      	str	r3, [r4, #0]
 8005588:	f7ff f80e 	bl	80045a8 <_isatty>
 800558c:	1c43      	adds	r3, r0, #1
 800558e:	d102      	bne.n	8005596 <_isatty_r+0x1a>
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	b103      	cbz	r3, 8005596 <_isatty_r+0x1a>
 8005594:	602b      	str	r3, [r5, #0]
 8005596:	bd38      	pop	{r3, r4, r5, pc}
 8005598:	200000b0 	.word	0x200000b0

0800559c <_lseek_r>:
 800559c:	b538      	push	{r3, r4, r5, lr}
 800559e:	4c07      	ldr	r4, [pc, #28]	; (80055bc <_lseek_r+0x20>)
 80055a0:	4605      	mov	r5, r0
 80055a2:	4608      	mov	r0, r1
 80055a4:	4611      	mov	r1, r2
 80055a6:	2200      	movs	r2, #0
 80055a8:	6022      	str	r2, [r4, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	f7ff f80c 	bl	80045c8 <_lseek>
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	d102      	bne.n	80055ba <_lseek_r+0x1e>
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	b103      	cbz	r3, 80055ba <_lseek_r+0x1e>
 80055b8:	602b      	str	r3, [r5, #0]
 80055ba:	bd38      	pop	{r3, r4, r5, pc}
 80055bc:	200000b0 	.word	0x200000b0

080055c0 <__malloc_lock>:
 80055c0:	4770      	bx	lr

080055c2 <__malloc_unlock>:
 80055c2:	4770      	bx	lr

080055c4 <_read_r>:
 80055c4:	b538      	push	{r3, r4, r5, lr}
 80055c6:	4c07      	ldr	r4, [pc, #28]	; (80055e4 <_read_r+0x20>)
 80055c8:	4605      	mov	r5, r0
 80055ca:	4608      	mov	r0, r1
 80055cc:	4611      	mov	r1, r2
 80055ce:	2200      	movs	r2, #0
 80055d0:	6022      	str	r2, [r4, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	f7ff f80c 	bl	80045f0 <_read>
 80055d8:	1c43      	adds	r3, r0, #1
 80055da:	d102      	bne.n	80055e2 <_read_r+0x1e>
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	b103      	cbz	r3, 80055e2 <_read_r+0x1e>
 80055e0:	602b      	str	r3, [r5, #0]
 80055e2:	bd38      	pop	{r3, r4, r5, pc}
 80055e4:	200000b0 	.word	0x200000b0

080055e8 <_init>:
 80055e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ea:	bf00      	nop
 80055ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ee:	bc08      	pop	{r3}
 80055f0:	469e      	mov	lr, r3
 80055f2:	4770      	bx	lr

080055f4 <_fini>:
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	bf00      	nop
 80055f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fa:	bc08      	pop	{r3}
 80055fc:	469e      	mov	lr, r3
 80055fe:	4770      	bx	lr
