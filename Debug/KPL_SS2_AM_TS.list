
KPL_SS2_AM_TS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bb4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08002d54  08002d54  00012d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002f0c  08002f0c  00012f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002f10  08002f10  00012f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08002f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000002c  20000068  08002f7c  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000094  08002f7c  00020094  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   000078ac  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001329  00000000  00000000  00027944  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000858  00000000  00000000  00028c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b0  00000000  00000000  000294c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003054  00000000  00000000  00029c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002677  00000000  00000000  0002cccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002f343  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002914  00000000  00000000  0002f3c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002d3c 	.word	0x08002d3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08002d3c 	.word	0x08002d3c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000280:	b480      	push	{r7}
 8000282:	b089      	sub	sp, #36	; 0x24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	681a      	ldr	r2, [r3, #0]
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	fa93 f3a3 	rbit	r3, r3
 800029a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800029c:	693b      	ldr	r3, [r7, #16]
 800029e:	fab3 f383 	clz	r3, r3
 80002a2:	005b      	lsls	r3, r3, #1
 80002a4:	2103      	movs	r1, #3
 80002a6:	fa01 f303 	lsl.w	r3, r1, r3
 80002aa:	43db      	mvns	r3, r3
 80002ac:	401a      	ands	r2, r3
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	fa93 f3a3 	rbit	r3, r3
 80002b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80002ba:	69bb      	ldr	r3, [r7, #24]
 80002bc:	fab3 f383 	clz	r3, r3
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	6879      	ldr	r1, [r7, #4]
 80002c4:	fa01 f303 	lsl.w	r3, r1, r3
 80002c8:	431a      	orrs	r2, r3
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	601a      	str	r2, [r3, #0]
}
 80002ce:	bf00      	nop
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr

080002da <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80002da:	b480      	push	{r7}
 80002dc:	b085      	sub	sp, #20
 80002de:	af00      	add	r7, sp, #0
 80002e0:	60f8      	str	r0, [r7, #12]
 80002e2:	60b9      	str	r1, [r7, #8]
 80002e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	685a      	ldr	r2, [r3, #4]
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	43db      	mvns	r3, r3
 80002ee:	401a      	ands	r2, r3
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	6879      	ldr	r1, [r7, #4]
 80002f4:	fb01 f303 	mul.w	r3, r1, r3
 80002f8:	431a      	orrs	r2, r3
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	605a      	str	r2, [r3, #4]
}
 80002fe:	bf00      	nop
 8000300:	3714      	adds	r7, #20
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr

0800030a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800030a:	b480      	push	{r7}
 800030c:	b089      	sub	sp, #36	; 0x24
 800030e:	af00      	add	r7, sp, #0
 8000310:	60f8      	str	r0, [r7, #12]
 8000312:	60b9      	str	r1, [r7, #8]
 8000314:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	689a      	ldr	r2, [r3, #8]
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	fa93 f3a3 	rbit	r3, r3
 8000324:	613b      	str	r3, [r7, #16]
  return(result);
 8000326:	693b      	ldr	r3, [r7, #16]
 8000328:	fab3 f383 	clz	r3, r3
 800032c:	005b      	lsls	r3, r3, #1
 800032e:	2103      	movs	r1, #3
 8000330:	fa01 f303 	lsl.w	r3, r1, r3
 8000334:	43db      	mvns	r3, r3
 8000336:	401a      	ands	r2, r3
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800033c:	69fb      	ldr	r3, [r7, #28]
 800033e:	fa93 f3a3 	rbit	r3, r3
 8000342:	61bb      	str	r3, [r7, #24]
  return(result);
 8000344:	69bb      	ldr	r3, [r7, #24]
 8000346:	fab3 f383 	clz	r3, r3
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	6879      	ldr	r1, [r7, #4]
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	431a      	orrs	r2, r3
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000358:	bf00      	nop
 800035a:	3724      	adds	r7, #36	; 0x24
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr

08000364 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000364:	b480      	push	{r7}
 8000366:	b089      	sub	sp, #36	; 0x24
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	68da      	ldr	r2, [r3, #12]
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	fa93 f3a3 	rbit	r3, r3
 800037e:	613b      	str	r3, [r7, #16]
  return(result);
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	fab3 f383 	clz	r3, r3
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	2103      	movs	r1, #3
 800038a:	fa01 f303 	lsl.w	r3, r1, r3
 800038e:	43db      	mvns	r3, r3
 8000390:	401a      	ands	r2, r3
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000396:	69fb      	ldr	r3, [r7, #28]
 8000398:	fa93 f3a3 	rbit	r3, r3
 800039c:	61bb      	str	r3, [r7, #24]
  return(result);
 800039e:	69bb      	ldr	r3, [r7, #24]
 80003a0:	fab3 f383 	clz	r3, r3
 80003a4:	005b      	lsls	r3, r3, #1
 80003a6:	6879      	ldr	r1, [r7, #4]
 80003a8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ac:	431a      	orrs	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	60da      	str	r2, [r3, #12]
}
 80003b2:	bf00      	nop
 80003b4:	3724      	adds	r7, #36	; 0x24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80003be:	b480      	push	{r7}
 80003c0:	b089      	sub	sp, #36	; 0x24
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	60f8      	str	r0, [r7, #12]
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	6a1a      	ldr	r2, [r3, #32]
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	fa93 f3a3 	rbit	r3, r3
 80003d8:	613b      	str	r3, [r7, #16]
  return(result);
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	fab3 f383 	clz	r3, r3
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	210f      	movs	r1, #15
 80003e4:	fa01 f303 	lsl.w	r3, r1, r3
 80003e8:	43db      	mvns	r3, r3
 80003ea:	401a      	ands	r2, r3
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003f0:	69fb      	ldr	r3, [r7, #28]
 80003f2:	fa93 f3a3 	rbit	r3, r3
 80003f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80003f8:	69bb      	ldr	r3, [r7, #24]
 80003fa:	fab3 f383 	clz	r3, r3
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	6879      	ldr	r1, [r7, #4]
 8000402:	fa01 f303 	lsl.w	r3, r1, r3
 8000406:	431a      	orrs	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800040c:	bf00      	nop
 800040e:	3724      	adds	r7, #36	; 0x24
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000418:	b480      	push	{r7}
 800041a:	b089      	sub	sp, #36	; 0x24
 800041c:	af00      	add	r7, sp, #0
 800041e:	60f8      	str	r0, [r7, #12]
 8000420:	60b9      	str	r1, [r7, #8]
 8000422:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	0a1b      	lsrs	r3, r3, #8
 800042c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	fa93 f3a3 	rbit	r3, r3
 8000434:	613b      	str	r3, [r7, #16]
  return(result);
 8000436:	693b      	ldr	r3, [r7, #16]
 8000438:	fab3 f383 	clz	r3, r3
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	210f      	movs	r1, #15
 8000440:	fa01 f303 	lsl.w	r3, r1, r3
 8000444:	43db      	mvns	r3, r3
 8000446:	401a      	ands	r2, r3
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	0a1b      	lsrs	r3, r3, #8
 800044c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800044e:	69fb      	ldr	r3, [r7, #28]
 8000450:	fa93 f3a3 	rbit	r3, r3
 8000454:	61bb      	str	r3, [r7, #24]
  return(result);
 8000456:	69bb      	ldr	r3, [r7, #24]
 8000458:	fab3 f383 	clz	r3, r3
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	6879      	ldr	r1, [r7, #4]
 8000460:	fa01 f303 	lsl.w	r3, r1, r3
 8000464:	431a      	orrs	r2, r3
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800046a:	bf00      	nop
 800046c:	3724      	adds	r7, #36	; 0x24
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr

08000476 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000476:	b580      	push	{r7, lr}
 8000478:	b088      	sub	sp, #32
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
 800047e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000480:	2300      	movs	r3, #0
 8000482:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000484:	2300      	movs	r3, #0
 8000486:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	fa93 f3a3 	rbit	r3, r3
 8000494:	613b      	str	r3, [r7, #16]
  return(result);
 8000496:	693b      	ldr	r3, [r7, #16]
 8000498:	fab3 f383 	clz	r3, r3
 800049c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800049e:	e048      	b.n	8000532 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	2101      	movs	r1, #1
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ac:	4013      	ands	r3, r2
 80004ae:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80004b0:	69bb      	ldr	r3, [r7, #24]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d03a      	beq.n	800052c <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	461a      	mov	r2, r3
 80004bc:	69b9      	ldr	r1, [r7, #24]
 80004be:	6878      	ldr	r0, [r7, #4]
 80004c0:	f7ff fede 	bl	8000280 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d003      	beq.n	80004d4 <LL_GPIO_Init+0x5e>
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d106      	bne.n	80004e2 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	461a      	mov	r2, r3
 80004da:	69b9      	ldr	r1, [r7, #24]
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f7ff ff14 	bl	800030a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	691b      	ldr	r3, [r3, #16]
 80004e6:	461a      	mov	r2, r3
 80004e8:	69b9      	ldr	r1, [r7, #24]
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f7ff ff3a 	bl	8000364 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	2b02      	cmp	r3, #2
 80004f6:	d119      	bne.n	800052c <LL_GPIO_Init+0xb6>
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	fa93 f3a3 	rbit	r3, r3
 8000502:	60bb      	str	r3, [r7, #8]
  return(result);
 8000504:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000506:	fab3 f383 	clz	r3, r3
 800050a:	2b07      	cmp	r3, #7
 800050c:	d807      	bhi.n	800051e <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	461a      	mov	r2, r3
 8000514:	69b9      	ldr	r1, [r7, #24]
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f7ff ff51 	bl	80003be <LL_GPIO_SetAFPin_0_7>
 800051c:	e006      	b.n	800052c <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	461a      	mov	r2, r3
 8000524:	69b9      	ldr	r1, [r7, #24]
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f7ff ff76 	bl	8000418 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	3301      	adds	r3, #1
 8000530:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	69fb      	ldr	r3, [r7, #28]
 8000538:	fa22 f303 	lsr.w	r3, r2, r3
 800053c:	2b00      	cmp	r3, #0
 800053e:	d1af      	bne.n	80004a0 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d003      	beq.n	8000550 <LL_GPIO_Init+0xda>
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	2b02      	cmp	r3, #2
 800054e:	d107      	bne.n	8000560 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	6819      	ldr	r1, [r3, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	461a      	mov	r2, r3
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f7ff febd 	bl	80002da <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000560:	2301      	movs	r3, #1
}
 8000562:	4618      	mov	r0, r3
 8000564:	3720      	adds	r7, #32
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800056a:	b480      	push	{r7}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f043 0201 	orr.w	r2, r3, #1
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	601a      	str	r2, [r3, #0]
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr

0800058a <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 800058a:	b480      	push	{r7}
 800058c:	b083      	sub	sp, #12
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f023 0201 	bic.w	r2, r3, #1
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	601a      	str	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b085      	sub	sp, #20
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	60f8      	str	r0, [r7, #12]
 80005b2:	60b9      	str	r1, [r7, #8]
 80005b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	0219      	lsls	r1, r3, #8
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	430b      	orrs	r3, r1
 80005c6:	431a      	orrs	r2, r3
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	601a      	str	r2, [r3, #0]
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80005ec:	f023 0307 	bic.w	r3, r3, #7
 80005f0:	68b9      	ldr	r1, [r7, #8]
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	430a      	orrs	r2, r1
 80005f6:	431a      	orrs	r2, r3
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	609a      	str	r2, [r3, #8]
}
 80005fc:	bf00      	nop
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	609a      	str	r2, [r3, #8]
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	609a      	str	r2, [r3, #8]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	611a      	str	r2, [r3, #16]
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	431a      	orrs	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	601a      	str	r2, [r3, #0]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	431a      	orrs	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	605a      	str	r2, [r3, #4]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f7ff ff65 	bl	800058a <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	6899      	ldr	r1, [r3, #8]
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	461a      	mov	r2, r3
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ff6d 	bl	80005aa <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	4619      	mov	r1, r3
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff ffb6 	bl	8000648 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f7ff ff44 	bl	800056a <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff ffa0 	bl	8000628 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	6919      	ldr	r1, [r3, #16]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	461a      	mov	r2, r3
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff ff70 	bl	80005d8 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	691b      	ldr	r3, [r3, #16]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d002      	beq.n	8000706 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f7ff ff81 	bl	8000608 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4619      	mov	r1, r3
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff ffa9 	bl	8000664 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4619      	mov	r1, r3
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ffb6 	bl	800068a <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800071e:	2301      	movs	r3, #1
}
 8000720:	4618      	mov	r0, r3
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <LL_RCC_HSI_IsReady+0x24>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000738:	bf0c      	ite	eq
 800073a:	2301      	moveq	r3, #1
 800073c:	2300      	movne	r3, #0
 800073e:	b2db      	uxtb	r3, r3
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000

08000750 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <LL_RCC_LSE_IsReady+0x24>)
 8000756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	2b02      	cmp	r3, #2
 8000760:	bf0c      	ite	eq
 8000762:	2301      	moveq	r3, #1
 8000764:	2300      	movne	r3, #0
 8000766:	b2db      	uxtb	r3, r3
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000

08000778 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL));
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f003 0308 	and.w	r3, r3, #8
 8000784:	2b08      	cmp	r3, #8
 8000786:	bf0c      	ite	eq
 8000788:	2301      	moveq	r3, #1
 800078a:	2300      	movne	r3, #0
 800078c:	b2db      	uxtb	r3, r3
}
 800078e:	4618      	mov	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	40021000 	.word	0x40021000

0800079c <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <LL_RCC_MSI_GetRange+0x18>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000

080007b8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80007be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007c2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	40021000 	.word	0x40021000

080007d4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <LL_RCC_GetSysClkSource+0x18>)
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	f003 030c 	and.w	r3, r3, #12
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000

080007f0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <LL_RCC_GetAHBPrescaler+0x18>)
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <LL_RCC_GetAPB1Prescaler+0x18>)
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000818:	4618      	mov	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40021000 	.word	0x40021000

08000828 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <LL_RCC_GetAPB2Prescaler+0x18>)
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8000834:	4618      	mov	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000

08000844 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <LL_RCC_GetUSARTClockSource+0x24>)
 800084e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	401a      	ands	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	041b      	lsls	r3, r3, #16
 800085a:	4313      	orrs	r3, r2
}
 800085c:	4618      	mov	r0, r3
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	40021000 	.word	0x40021000

0800086c <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <LL_RCC_GetUARTClockSource+0x24>)
 8000876:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	401a      	ands	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	041b      	lsls	r3, r3, #16
 8000882:	4313      	orrs	r3, r2
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	40021000 	.word	0x40021000

08000894 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <LL_RCC_PLL_GetMainSource+0x18>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	f003 0303 	and.w	r3, r3, #3
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000

080008b0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <LL_RCC_PLL_GetN+0x18>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80008be:	4618      	mov	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	40021000 	.word	0x40021000

080008cc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <LL_RCC_PLL_GetR+0x18>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80008d8:	4618      	mov	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000

080008e8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <LL_RCC_PLL_GetDivider+0x18>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000

08000904 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b03      	cmp	r3, #3
 8000914:	d12e      	bne.n	8000974 <LL_RCC_GetUSARTClockFreq+0x70>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff ff94 	bl	8000844 <LL_RCC_GetUSARTClockSource>
 800091c:	4603      	mov	r3, r0
 800091e:	4a4f      	ldr	r2, [pc, #316]	; (8000a5c <LL_RCC_GetUSARTClockFreq+0x158>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d009      	beq.n	8000938 <LL_RCC_GetUSARTClockFreq+0x34>
 8000924:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8000928:	d00e      	beq.n	8000948 <LL_RCC_GetUSARTClockFreq+0x44>
 800092a:	4a4d      	ldr	r2, [pc, #308]	; (8000a60 <LL_RCC_GetUSARTClockFreq+0x15c>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d114      	bne.n	800095a <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8000930:	f000 f8e8 	bl	8000b04 <RCC_GetSystemClockFreq>
 8000934:	60f8      	str	r0, [r7, #12]
        break;
 8000936:	e08b      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8000938:	f7ff fef6 	bl	8000728 <LL_RCC_HSI_IsReady>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d07b      	beq.n	8000a3a <LL_RCC_GetUSARTClockFreq+0x136>
        {
          usart_frequency = HSI_VALUE;
 8000942:	4b48      	ldr	r3, [pc, #288]	; (8000a64 <LL_RCC_GetUSARTClockFreq+0x160>)
 8000944:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000946:	e078      	b.n	8000a3a <LL_RCC_GetUSARTClockFreq+0x136>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8000948:	f7ff ff02 	bl	8000750 <LL_RCC_LSE_IsReady>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d075      	beq.n	8000a3e <LL_RCC_GetUSARTClockFreq+0x13a>
        {
          usart_frequency = LSE_VALUE;
 8000952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000956:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000958:	e071      	b.n	8000a3e <LL_RCC_GetUSARTClockFreq+0x13a>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800095a:	f000 f8d3 	bl	8000b04 <RCC_GetSystemClockFreq>
 800095e:	4603      	mov	r3, r0
 8000960:	4618      	mov	r0, r3
 8000962:	f000 f95f 	bl	8000c24 <RCC_GetHCLKClockFreq>
 8000966:	4603      	mov	r3, r0
 8000968:	4618      	mov	r0, r3
 800096a:	f000 f985 	bl	8000c78 <RCC_GetPCLK2ClockFreq>
 800096e:	60f8      	str	r0, [r7, #12]
        break;
 8000970:	bf00      	nop
 8000972:	e06d      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b0c      	cmp	r3, #12
 8000978:	d12e      	bne.n	80009d8 <LL_RCC_GetUSARTClockFreq+0xd4>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ff62 	bl	8000844 <LL_RCC_GetUSARTClockSource>
 8000980:	4603      	mov	r3, r0
 8000982:	4a39      	ldr	r2, [pc, #228]	; (8000a68 <LL_RCC_GetUSARTClockFreq+0x164>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d009      	beq.n	800099c <LL_RCC_GetUSARTClockFreq+0x98>
 8000988:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 800098c:	d00e      	beq.n	80009ac <LL_RCC_GetUSARTClockFreq+0xa8>
 800098e:	4a37      	ldr	r2, [pc, #220]	; (8000a6c <LL_RCC_GetUSARTClockFreq+0x168>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d114      	bne.n	80009be <LL_RCC_GetUSARTClockFreq+0xba>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8000994:	f000 f8b6 	bl	8000b04 <RCC_GetSystemClockFreq>
 8000998:	60f8      	str	r0, [r7, #12]
        break;
 800099a:	e059      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800099c:	f7ff fec4 	bl	8000728 <LL_RCC_HSI_IsReady>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d04d      	beq.n	8000a42 <LL_RCC_GetUSARTClockFreq+0x13e>
        {
          usart_frequency = HSI_VALUE;
 80009a6:	4b2f      	ldr	r3, [pc, #188]	; (8000a64 <LL_RCC_GetUSARTClockFreq+0x160>)
 80009a8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80009aa:	e04a      	b.n	8000a42 <LL_RCC_GetUSARTClockFreq+0x13e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80009ac:	f7ff fed0 	bl	8000750 <LL_RCC_LSE_IsReady>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d047      	beq.n	8000a46 <LL_RCC_GetUSARTClockFreq+0x142>
        {
          usart_frequency = LSE_VALUE;
 80009b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ba:	60fb      	str	r3, [r7, #12]
        }
        break;
 80009bc:	e043      	b.n	8000a46 <LL_RCC_GetUSARTClockFreq+0x142>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80009be:	f000 f8a1 	bl	8000b04 <RCC_GetSystemClockFreq>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 f92d 	bl	8000c24 <RCC_GetHCLKClockFreq>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 f93f 	bl	8000c50 <RCC_GetPCLK1ClockFreq>
 80009d2:	60f8      	str	r0, [r7, #12]
        break;
 80009d4:	bf00      	nop
 80009d6:	e03b      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b30      	cmp	r3, #48	; 0x30
 80009dc:	d138      	bne.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff ff30 	bl	8000844 <LL_RCC_GetUSARTClockSource>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4a22      	ldr	r2, [pc, #136]	; (8000a70 <LL_RCC_GetUSARTClockFreq+0x16c>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d009      	beq.n	8000a00 <LL_RCC_GetUSARTClockFreq+0xfc>
 80009ec:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80009f0:	d00e      	beq.n	8000a10 <LL_RCC_GetUSARTClockFreq+0x10c>
 80009f2:	4a20      	ldr	r2, [pc, #128]	; (8000a74 <LL_RCC_GetUSARTClockFreq+0x170>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d114      	bne.n	8000a22 <LL_RCC_GetUSARTClockFreq+0x11e>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80009f8:	f000 f884 	bl	8000b04 <RCC_GetSystemClockFreq>
 80009fc:	60f8      	str	r0, [r7, #12]
          break;
 80009fe:	e027      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 8000a00:	f7ff fe92 	bl	8000728 <LL_RCC_HSI_IsReady>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d01f      	beq.n	8000a4a <LL_RCC_GetUSARTClockFreq+0x146>
          {
            usart_frequency = HSI_VALUE;
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <LL_RCC_GetUSARTClockFreq+0x160>)
 8000a0c:	60fb      	str	r3, [r7, #12]
          }
          break;
 8000a0e:	e01c      	b.n	8000a4a <LL_RCC_GetUSARTClockFreq+0x146>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 8000a10:	f7ff fe9e 	bl	8000750 <LL_RCC_LSE_IsReady>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d019      	beq.n	8000a4e <LL_RCC_GetUSARTClockFreq+0x14a>
          {
            usart_frequency = LSE_VALUE;
 8000a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a1e:	60fb      	str	r3, [r7, #12]
          }
          break;
 8000a20:	e015      	b.n	8000a4e <LL_RCC_GetUSARTClockFreq+0x14a>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000a22:	f000 f86f 	bl	8000b04 <RCC_GetSystemClockFreq>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f8fb 	bl	8000c24 <RCC_GetHCLKClockFreq>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 f90d 	bl	8000c50 <RCC_GetPCLK1ClockFreq>
 8000a36:	60f8      	str	r0, [r7, #12]
          break;
 8000a38:	e00a      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 8000a3a:	bf00      	nop
 8000a3c:	e008      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 8000a3e:	bf00      	nop
 8000a40:	e006      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 8000a42:	bf00      	nop
 8000a44:	e004      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 8000a46:	bf00      	nop
 8000a48:	e002      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
          break;
 8000a4a:	bf00      	nop
 8000a4c:	e000      	b.n	8000a50 <LL_RCC_GetUSARTClockFreq+0x14c>
          break;
 8000a4e:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8000a50:	68fb      	ldr	r3, [r7, #12]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	00030002 	.word	0x00030002
 8000a60:	00030001 	.word	0x00030001
 8000a64:	00f42400 	.word	0x00f42400
 8000a68:	000c0008 	.word	0x000c0008
 8000a6c:	000c0004 	.word	0x000c0004
 8000a70:	00300020 	.word	0x00300020
 8000a74:	00300010 	.word	0x00300010

08000a78 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2bc0      	cmp	r3, #192	; 0xc0
 8000a88:	d130      	bne.n	8000aec <LL_RCC_GetUARTClockFreq+0x74>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff feee 	bl	800086c <LL_RCC_GetUARTClockSource>
 8000a90:	4603      	mov	r3, r0
 8000a92:	4a19      	ldr	r2, [pc, #100]	; (8000af8 <LL_RCC_GetUARTClockFreq+0x80>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d009      	beq.n	8000aac <LL_RCC_GetUARTClockFreq+0x34>
 8000a98:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8000a9c:	d00e      	beq.n	8000abc <LL_RCC_GetUARTClockFreq+0x44>
 8000a9e:	4a17      	ldr	r2, [pc, #92]	; (8000afc <LL_RCC_GetUARTClockFreq+0x84>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d114      	bne.n	8000ace <LL_RCC_GetUARTClockFreq+0x56>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8000aa4:	f000 f82e 	bl	8000b04 <RCC_GetSystemClockFreq>
 8000aa8:	60f8      	str	r0, [r7, #12]
        break;
 8000aaa:	e01f      	b.n	8000aec <LL_RCC_GetUARTClockFreq+0x74>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8000aac:	f7ff fe3c 	bl	8000728 <LL_RCC_HSI_IsReady>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d017      	beq.n	8000ae6 <LL_RCC_GetUARTClockFreq+0x6e>
        {
          uart_frequency = HSI_VALUE;
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <LL_RCC_GetUARTClockFreq+0x88>)
 8000ab8:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000aba:	e014      	b.n	8000ae6 <LL_RCC_GetUARTClockFreq+0x6e>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8000abc:	f7ff fe48 	bl	8000750 <LL_RCC_LSE_IsReady>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d011      	beq.n	8000aea <LL_RCC_GetUARTClockFreq+0x72>
        {
          uart_frequency = LSE_VALUE;
 8000ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aca:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000acc:	e00d      	b.n	8000aea <LL_RCC_GetUARTClockFreq+0x72>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000ace:	f000 f819 	bl	8000b04 <RCC_GetSystemClockFreq>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 f8a5 	bl	8000c24 <RCC_GetHCLKClockFreq>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f8b7 	bl	8000c50 <RCC_GetPCLK1ClockFreq>
 8000ae2:	60f8      	str	r0, [r7, #12]
        break;
 8000ae4:	e002      	b.n	8000aec <LL_RCC_GetUARTClockFreq+0x74>
        break;
 8000ae6:	bf00      	nop
 8000ae8:	e000      	b.n	8000aec <LL_RCC_GetUARTClockFreq+0x74>
        break;
 8000aea:	bf00      	nop
        break;
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8000aec:	68fb      	ldr	r3, [r7, #12]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	00c00080 	.word	0x00c00080
 8000afc:	00c00040 	.word	0x00c00040
 8000b00:	00f42400 	.word	0x00f42400

08000b04 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000b0e:	f7ff fe61 	bl	80007d4 <LL_RCC_GetSysClkSource>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b0c      	cmp	r3, #12
 8000b16:	d851      	bhi.n	8000bbc <RCC_GetSystemClockFreq+0xb8>
 8000b18:	a201      	add	r2, pc, #4	; (adr r2, 8000b20 <RCC_GetSystemClockFreq+0x1c>)
 8000b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b1e:	bf00      	nop
 8000b20:	08000b55 	.word	0x08000b55
 8000b24:	08000bbd 	.word	0x08000bbd
 8000b28:	08000bbd 	.word	0x08000bbd
 8000b2c:	08000bbd 	.word	0x08000bbd
 8000b30:	08000ba9 	.word	0x08000ba9
 8000b34:	08000bbd 	.word	0x08000bbd
 8000b38:	08000bbd 	.word	0x08000bbd
 8000b3c:	08000bbd 	.word	0x08000bbd
 8000b40:	08000baf 	.word	0x08000baf
 8000b44:	08000bbd 	.word	0x08000bbd
 8000b48:	08000bbd 	.word	0x08000bbd
 8000b4c:	08000bbd 	.word	0x08000bbd
 8000b50:	08000bb5 	.word	0x08000bb5
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8000b54:	f7ff fe10 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d111      	bne.n	8000b82 <RCC_GetSystemClockFreq+0x7e>
 8000b5e:	f7ff fe0b 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d004      	beq.n	8000b72 <RCC_GetSystemClockFreq+0x6e>
 8000b68:	f7ff fe18 	bl	800079c <LL_RCC_MSI_GetRange>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	0a1b      	lsrs	r3, r3, #8
 8000b70:	e003      	b.n	8000b7a <RCC_GetSystemClockFreq+0x76>
 8000b72:	f7ff fe21 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000b76:	4603      	mov	r3, r0
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	4a28      	ldr	r2, [pc, #160]	; (8000c1c <RCC_GetSystemClockFreq+0x118>)
 8000b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b80:	e010      	b.n	8000ba4 <RCC_GetSystemClockFreq+0xa0>
 8000b82:	f7ff fdf9 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d004      	beq.n	8000b96 <RCC_GetSystemClockFreq+0x92>
 8000b8c:	f7ff fe06 	bl	800079c <LL_RCC_MSI_GetRange>
 8000b90:	4603      	mov	r3, r0
 8000b92:	091b      	lsrs	r3, r3, #4
 8000b94:	e003      	b.n	8000b9e <RCC_GetSystemClockFreq+0x9a>
 8000b96:	f7ff fe0f 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	091b      	lsrs	r3, r3, #4
 8000b9e:	4a1f      	ldr	r2, [pc, #124]	; (8000c1c <RCC_GetSystemClockFreq+0x118>)
 8000ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba4:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8000ba6:	e033      	b.n	8000c10 <RCC_GetSystemClockFreq+0x10c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <RCC_GetSystemClockFreq+0x11c>)
 8000baa:	607b      	str	r3, [r7, #4]
      break;
 8000bac:	e030      	b.n	8000c10 <RCC_GetSystemClockFreq+0x10c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <RCC_GetSystemClockFreq+0x11c>)
 8000bb0:	607b      	str	r3, [r7, #4]
      break;
 8000bb2:	e02d      	b.n	8000c10 <RCC_GetSystemClockFreq+0x10c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000bb4:	f000 f874 	bl	8000ca0 <RCC_PLL_GetFreqDomain_SYS>
 8000bb8:	6078      	str	r0, [r7, #4]
      break;
 8000bba:	e029      	b.n	8000c10 <RCC_GetSystemClockFreq+0x10c>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8000bbc:	f7ff fddc 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d111      	bne.n	8000bea <RCC_GetSystemClockFreq+0xe6>
 8000bc6:	f7ff fdd7 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d004      	beq.n	8000bda <RCC_GetSystemClockFreq+0xd6>
 8000bd0:	f7ff fde4 	bl	800079c <LL_RCC_MSI_GetRange>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	e003      	b.n	8000be2 <RCC_GetSystemClockFreq+0xde>
 8000bda:	f7ff fded 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000bde:	4603      	mov	r3, r0
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <RCC_GetSystemClockFreq+0x118>)
 8000be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be8:	e010      	b.n	8000c0c <RCC_GetSystemClockFreq+0x108>
 8000bea:	f7ff fdc5 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d004      	beq.n	8000bfe <RCC_GetSystemClockFreq+0xfa>
 8000bf4:	f7ff fdd2 	bl	800079c <LL_RCC_MSI_GetRange>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	091b      	lsrs	r3, r3, #4
 8000bfc:	e003      	b.n	8000c06 <RCC_GetSystemClockFreq+0x102>
 8000bfe:	f7ff fddb 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000c02:	4603      	mov	r3, r0
 8000c04:	091b      	lsrs	r3, r3, #4
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <RCC_GetSystemClockFreq+0x118>)
 8000c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0c:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8000c0e:	bf00      	nop
  }

  return frequency;
 8000c10:	687b      	ldr	r3, [r7, #4]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	08002e44 	.word	0x08002e44
 8000c20:	00f42400 	.word	0x00f42400

08000c24 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000c2c:	f7ff fde0 	bl	80007f0 <LL_RCC_GetAHBPrescaler>
 8000c30:	4603      	mov	r3, r0
 8000c32:	091b      	lsrs	r3, r3, #4
 8000c34:	f003 030f 	and.w	r3, r3, #15
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <RCC_GetHCLKClockFreq+0x28>)
 8000c3a:	5cd3      	ldrb	r3, [r2, r3]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	40d3      	lsrs	r3, r2
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	08002e2c 	.word	0x08002e2c

08000c50 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000c58:	f7ff fdd8 	bl	800080c <LL_RCC_GetAPB1Prescaler>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	0a1b      	lsrs	r3, r3, #8
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <RCC_GetPCLK1ClockFreq+0x24>)
 8000c62:	5cd3      	ldrb	r3, [r2, r3]
 8000c64:	461a      	mov	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	40d3      	lsrs	r3, r2
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	08002e3c 	.word	0x08002e3c

08000c78 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000c80:	f7ff fdd2 	bl	8000828 <LL_RCC_GetAPB2Prescaler>
 8000c84:	4603      	mov	r3, r0
 8000c86:	0adb      	lsrs	r3, r3, #11
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <RCC_GetPCLK2ClockFreq+0x24>)
 8000c8a:	5cd3      	ldrb	r3, [r2, r3]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	40d3      	lsrs	r3, r2
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	08002e3c 	.word	0x08002e3c

08000ca0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000cae:	f7ff fdf1 	bl	8000894 <LL_RCC_PLL_GetMainSource>
 8000cb2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d02d      	beq.n	8000d16 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8000cba:	2b03      	cmp	r3, #3
 8000cbc:	d02e      	beq.n	8000d1c <RCC_PLL_GetFreqDomain_SYS+0x7c>
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d12f      	bne.n	8000d22 <RCC_PLL_GetFreqDomain_SYS+0x82>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8000cc2:	f7ff fd59 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d111      	bne.n	8000cf0 <RCC_PLL_GetFreqDomain_SYS+0x50>
 8000ccc:	f7ff fd54 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d004      	beq.n	8000ce0 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8000cd6:	f7ff fd61 	bl	800079c <LL_RCC_MSI_GetRange>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	e003      	b.n	8000ce8 <RCC_PLL_GetFreqDomain_SYS+0x48>
 8000ce0:	f7ff fd6a 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	0a1b      	lsrs	r3, r3, #8
 8000ce8:	4a2f      	ldr	r2, [pc, #188]	; (8000da8 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8000cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cee:	e010      	b.n	8000d12 <RCC_PLL_GetFreqDomain_SYS+0x72>
 8000cf0:	f7ff fd42 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d004      	beq.n	8000d04 <RCC_PLL_GetFreqDomain_SYS+0x64>
 8000cfa:	f7ff fd4f 	bl	800079c <LL_RCC_MSI_GetRange>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	091b      	lsrs	r3, r3, #4
 8000d02:	e003      	b.n	8000d0c <RCC_PLL_GetFreqDomain_SYS+0x6c>
 8000d04:	f7ff fd58 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	091b      	lsrs	r3, r3, #4
 8000d0c:	4a26      	ldr	r2, [pc, #152]	; (8000da8 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8000d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d12:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8000d14:	e02f      	b.n	8000d76 <RCC_PLL_GetFreqDomain_SYS+0xd6>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8000d16:	4b25      	ldr	r3, [pc, #148]	; (8000dac <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8000d18:	607b      	str	r3, [r7, #4]
      break;
 8000d1a:	e02c      	b.n	8000d76 <RCC_PLL_GetFreqDomain_SYS+0xd6>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8000d1e:	607b      	str	r3, [r7, #4]
      break;
 8000d20:	e029      	b.n	8000d76 <RCC_PLL_GetFreqDomain_SYS+0xd6>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8000d22:	f7ff fd29 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d111      	bne.n	8000d50 <RCC_PLL_GetFreqDomain_SYS+0xb0>
 8000d2c:	f7ff fd24 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d004      	beq.n	8000d40 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 8000d36:	f7ff fd31 	bl	800079c <LL_RCC_MSI_GetRange>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	e003      	b.n	8000d48 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 8000d40:	f7ff fd3a 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000d44:	4603      	mov	r3, r0
 8000d46:	0a1b      	lsrs	r3, r3, #8
 8000d48:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8000d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4e:	e010      	b.n	8000d72 <RCC_PLL_GetFreqDomain_SYS+0xd2>
 8000d50:	f7ff fd12 	bl	8000778 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d004      	beq.n	8000d64 <RCC_PLL_GetFreqDomain_SYS+0xc4>
 8000d5a:	f7ff fd1f 	bl	800079c <LL_RCC_MSI_GetRange>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	091b      	lsrs	r3, r3, #4
 8000d62:	e003      	b.n	8000d6c <RCC_PLL_GetFreqDomain_SYS+0xcc>
 8000d64:	f7ff fd28 	bl	80007b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	091b      	lsrs	r3, r3, #4
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8000d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d72:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8000d74:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8000d76:	f7ff fdb7 	bl	80008e8 <LL_RCC_PLL_GetDivider>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	091b      	lsrs	r3, r3, #4
 8000d7e:	3301      	adds	r3, #1
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	fbb2 f4f3 	udiv	r4, r2, r3
 8000d86:	f7ff fd93 	bl	80008b0 <LL_RCC_PLL_GetN>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	fb03 f404 	mul.w	r4, r3, r4
 8000d90:	f7ff fd9c 	bl	80008cc <LL_RCC_PLL_GetR>
 8000d94:	4603      	mov	r3, r0
 8000d96:	0e5b      	lsrs	r3, r3, #25
 8000d98:	3301      	adds	r3, #1
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd90      	pop	{r4, r7, pc}
 8000da8:	08002e44 	.word	0x08002e44
 8000dac:	00f42400 	.word	0x00f42400

08000db0 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	bf0c      	ite	eq
 8000dc4:	2301      	moveq	r3, #1
 8000dc6:	2300      	movne	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	431a      	orrs	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	605a      	str	r2, [r3, #4]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	431a      	orrs	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	609a      	str	r2, [r3, #8]
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif
{
 8000e22:	b4b0      	push	{r4, r5, r7}
 8000e24:	b085      	sub	sp, #20
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	60f8      	str	r0, [r7, #12]
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 8000e30:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 8000e32:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e3a:	d114      	bne.n	8000e66 <LL_USART_SetBaudRate+0x44>
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	005a      	lsls	r2, r3, #1
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	085b      	lsrs	r3, r3, #1
 8000e44:	441a      	add	r2, r3
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	461d      	mov	r5, r3
#endif
    brrtemp = usartdiv & 0xFFF0U;
 8000e50:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8000e54:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000e56:	086b      	lsrs	r3, r5, #1
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	60dc      	str	r4, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint16_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif
  }
}
 8000e64:	e00a      	b.n	8000e7c <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	085a      	lsrs	r2, r3, #1
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	441a      	add	r2, r3
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	60da      	str	r2, [r3, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bcb0      	pop	{r4, r5, r7}
 8000e84:	4770      	bx	lr
	...

08000e88 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000e92:	2300      	movs	r3, #0
 8000e94:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ff88 	bl	8000db0 <LL_USART_IsEnabled>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d151      	bne.n	8000f4a <LL_USART_Init+0xc2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	4b2a      	ldr	r3, [pc, #168]	; (8000f54 <LL_USART_Init+0xcc>)
 8000eac:	4013      	ands	r3, r2
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	6851      	ldr	r1, [r2, #4]
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	68d2      	ldr	r2, [r2, #12]
 8000eb6:	4311      	orrs	r1, r2
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	6912      	ldr	r2, [r2, #16]
 8000ebc:	4311      	orrs	r1, r2
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	6992      	ldr	r2, [r2, #24]
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ff80 	bl	8000dd6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	4619      	mov	r1, r3
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff8d 	bl	8000dfc <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a1c      	ldr	r2, [pc, #112]	; (8000f58 <LL_USART_Init+0xd0>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d104      	bne.n	8000ef4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8000eea:	2003      	movs	r0, #3
 8000eec:	f7ff fd0a 	bl	8000904 <LL_RCC_GetUSARTClockFreq>
 8000ef0:	60b8      	str	r0, [r7, #8]
 8000ef2:	e019      	b.n	8000f28 <LL_USART_Init+0xa0>
    }
    else if (USARTx == USART2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a19      	ldr	r2, [pc, #100]	; (8000f5c <LL_USART_Init+0xd4>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d104      	bne.n	8000f06 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8000efc:	200c      	movs	r0, #12
 8000efe:	f7ff fd01 	bl	8000904 <LL_RCC_GetUSARTClockFreq>
 8000f02:	60b8      	str	r0, [r7, #8]
 8000f04:	e010      	b.n	8000f28 <LL_USART_Init+0xa0>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a15      	ldr	r2, [pc, #84]	; (8000f60 <LL_USART_Init+0xd8>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d104      	bne.n	8000f18 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8000f0e:	2030      	movs	r0, #48	; 0x30
 8000f10:	f7ff fcf8 	bl	8000904 <LL_RCC_GetUSARTClockFreq>
 8000f14:	60b8      	str	r0, [r7, #8]
 8000f16:	e007      	b.n	8000f28 <LL_USART_Init+0xa0>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <LL_USART_Init+0xdc>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d103      	bne.n	8000f28 <LL_USART_Init+0xa0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8000f20:	20c0      	movs	r0, #192	; 0xc0
 8000f22:	f7ff fda9 	bl	8000a78 <LL_RCC_GetUARTClockFreq>
 8000f26:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d00d      	beq.n	8000f4a <LL_USART_Init+0xc2>
        && (USART_InitStruct->BaudRate != 0U))
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d009      	beq.n	8000f4a <LL_USART_Init+0xc2>
    {
      status = SUCCESS;
 8000f36:	2301      	movs	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	699a      	ldr	r2, [r3, #24]
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68b9      	ldr	r1, [r7, #8]
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ff6c 	bl	8000e22 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	efff69f3 	.word	0xefff69f3
 8000f58:	40013800 	.word	0x40013800
 8000f5c:	40004400 	.word	0x40004400
 8000f60:	40004800 	.word	0x40004800
 8000f64:	40004c00 	.word	0x40004c00

08000f68 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000f72:	4909      	ldr	r1, [pc, #36]	; (8000f98 <LL_InitTick+0x30>)
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	604b      	str	r3, [r1, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <LL_InitTick+0x30>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <LL_InitTick+0x30>)
 8000f88:	2205      	movs	r2, #5
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000fa4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ffdd 	bl	8000f68 <LL_InitTick>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <LL_SetSystemCoreClock+0x1c>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000000 	.word	0x20000000

08000fd8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001046:	4909      	ldr	r1, [pc, #36]	; (800106c <NVIC_EnableIRQ+0x30>)
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	095b      	lsrs	r3, r3, #5
 800104e:	79fa      	ldrb	r2, [r7, #7]
 8001050:	f002 021f 	and.w	r2, r2, #31
 8001054:	2001      	movs	r0, #1
 8001056:	fa00 f202 	lsl.w	r2, r0, r2
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e100 	.word	0xe000e100

08001070 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	da0b      	bge.n	800109c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	490d      	ldr	r1, [pc, #52]	; (80010bc <NVIC_SetPriority+0x4c>)
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 030f 	and.w	r3, r3, #15
 800108c:	3b04      	subs	r3, #4
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109a:	e009      	b.n	80010b0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	4908      	ldr	r1, [pc, #32]	; (80010c0 <NVIC_SetPriority+0x50>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f1c3 0307 	rsb	r3, r3, #7
 80010de:	2b04      	cmp	r3, #4
 80010e0:	bf28      	it	cs
 80010e2:	2304      	movcs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d902      	bls.n	80010f4 <NVIC_EncodePriority+0x30>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	e000      	b.n	80010f6 <NVIC_EncodePriority+0x32>
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	2201      	movs	r2, #1
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	1e5a      	subs	r2, r3, #1
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	401a      	ands	r2, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110a:	2101      	movs	r1, #1
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	1e59      	subs	r1, r3, #1
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001130:	4906      	ldr	r1, [pc, #24]	; (800114c <LL_FLASH_SetLatency+0x24>)
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <LL_FLASH_SetLatency+0x24>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f023 0207 	bic.w	r2, r3, #7
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4313      	orrs	r3, r2
 800113e:	600b      	str	r3, [r1, #0]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	40022000 	.word	0x40022000

08001150 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <LL_FLASH_GetLatency+0x18>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0307 	and.w	r3, r3, #7
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40022000 	.word	0x40022000

0800116c <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b04      	cmp	r3, #4
 8001178:	d106      	bne.n	8001188 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800117a:	4a09      	ldr	r2, [pc, #36]	; (80011a0 <LL_SYSTICK_SetClkSource+0x34>)
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <LL_SYSTICK_SetClkSource+0x34>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001186:	e005      	b.n	8001194 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001188:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <LL_SYSTICK_SetClkSource+0x34>)
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <LL_SYSTICK_SetClkSource+0x34>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 0304 	bic.w	r3, r3, #4
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000e010 	.word	0xe000e010

080011a4 <LL_RCC_HSI_Enable>:
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80011a8:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <LL_RCC_HSI_Enable+0x1c>)
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <LL_RCC_HSI_Enable+0x1c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000

080011c4 <LL_RCC_HSI_IsReady>:
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <LL_RCC_HSI_IsReady+0x24>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d4:	bf0c      	ite	eq
 80011d6:	2301      	moveq	r3, #1
 80011d8:	2300      	movne	r3, #0
 80011da:	b2db      	uxtb	r3, r3
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40021000 	.word	0x40021000

080011ec <LL_RCC_LSI_Enable>:
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80011f0:	4a06      	ldr	r2, [pc, #24]	; (800120c <LL_RCC_LSI_Enable+0x20>)
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <LL_RCC_LSI_Enable+0x20>)
 80011f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000

08001210 <LL_RCC_LSI_IsReady>:
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY));
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <LL_RCC_LSI_IsReady+0x24>)
 8001216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b02      	cmp	r3, #2
 8001220:	bf0c      	ite	eq
 8001222:	2301      	moveq	r3, #1
 8001224:	2300      	movne	r3, #0
 8001226:	b2db      	uxtb	r3, r3
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000

08001238 <LL_RCC_SetSysClkSource>:
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001240:	4906      	ldr	r1, [pc, #24]	; (800125c <LL_RCC_SetSysClkSource+0x24>)
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <LL_RCC_SetSysClkSource+0x24>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f023 0203 	bic.w	r2, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4313      	orrs	r3, r2
 800124e:	608b      	str	r3, [r1, #8]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	40021000 	.word	0x40021000

08001260 <LL_RCC_GetSysClkSource>:
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <LL_RCC_GetSysClkSource+0x18>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 030c 	and.w	r3, r3, #12
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000

0800127c <LL_RCC_SetAHBPrescaler>:
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001284:	4906      	ldr	r1, [pc, #24]	; (80012a0 <LL_RCC_SetAHBPrescaler+0x24>)
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <LL_RCC_SetAHBPrescaler+0x24>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4313      	orrs	r3, r2
 8001292:	608b      	str	r3, [r1, #8]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	40021000 	.word	0x40021000

080012a4 <LL_RCC_SetAPB1Prescaler>:
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80012ac:	4906      	ldr	r1, [pc, #24]	; (80012c8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	608b      	str	r3, [r1, #8]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	40021000 	.word	0x40021000

080012cc <LL_RCC_SetAPB2Prescaler>:
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80012d4:	4906      	ldr	r1, [pc, #24]	; (80012f0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	608b      	str	r3, [r1, #8]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	40021000 	.word	0x40021000

080012f4 <LL_RCC_SetUSARTClockSource>:
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFF));
 80012fc:	4909      	ldr	r1, [pc, #36]	; (8001324 <LL_RCC_SetUSARTClockSource+0x30>)
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <LL_RCC_SetUSARTClockSource+0x30>)
 8001300:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	0c1b      	lsrs	r3, r3, #16
 8001308:	43db      	mvns	r3, r3
 800130a:	401a      	ands	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	b29b      	uxth	r3, r3
 8001310:	4313      	orrs	r3, r2
 8001312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000

08001328 <LL_RCC_SetI2CClockSource>:
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	0e1a      	lsrs	r2, r3, #24
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <LL_RCC_SetI2CClockSource+0x48>)
 8001336:	4413      	add	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3U << ((I2CxSource & 0x00FF0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x00FF0000U) >> 16U)));
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	0c1b      	lsrs	r3, r3, #16
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2103      	movs	r1, #3
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	401a      	ands	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	b2d9      	uxtb	r1, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	0c1b      	lsrs	r3, r3, #16
 8001356:	b2db      	uxtb	r3, r3
 8001358:	fa01 f303 	lsl.w	r3, r1, r3
 800135c:	431a      	orrs	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	601a      	str	r2, [r3, #0]
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40021088 	.word	0x40021088

08001374 <LL_RCC_PLL_Enable>:
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001378:	4a05      	ldr	r2, [pc, #20]	; (8001390 <LL_RCC_PLL_Enable+0x1c>)
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <LL_RCC_PLL_Enable+0x1c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001382:	6013      	str	r3, [r2, #0]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000

08001394 <LL_RCC_PLL_IsReady>:
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <LL_RCC_PLL_IsReady+0x24>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80013a4:	bf0c      	ite	eq
 80013a6:	2301      	moveq	r3, #1
 80013a8:	2300      	movne	r3, #0
 80013aa:	b2db      	uxtb	r3, r3
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000

080013bc <LL_RCC_PLL_ConfigDomain_SYS>:
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
 80013c8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80013ca:	480a      	ldr	r0, [pc, #40]	; (80013f4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80013ce:	68da      	ldr	r2, [r3, #12]
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	68f9      	ldr	r1, [r7, #12]
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	4311      	orrs	r1, r2
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	0212      	lsls	r2, r2, #8
 80013de:	4311      	orrs	r1, r2
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	4313      	orrs	r3, r2
 80013e6:	60c3      	str	r3, [r0, #12]
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	40021000 	.word	0x40021000
 80013f8:	f9ff808c 	.word	0xf9ff808c

080013fc <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001400:	4a05      	ldr	r2, [pc, #20]	; (8001418 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001402:	4b05      	ldr	r3, [pc, #20]	; (8001418 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800140a:	60d3      	str	r3, [r2, #12]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000

0800141c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001424:	4906      	ldr	r1, [pc, #24]	; (8001440 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4313      	orrs	r3, r2
 8001432:	600b      	str	r3, [r1, #0]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	40007000 	.word	0x40007000

08001444 <LL_I2C_EnableClockStretching>:
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	601a      	str	r2, [r3, #0]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <LL_I2C_DisableGeneralCall>:
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	601a      	str	r2, [r3, #0]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <LL_I2C_SetOwnAddress2>:
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001498:	f023 0306 	bic.w	r3, r3, #6
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	431a      	orrs	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	60da      	str	r2, [r3, #12]
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_I2C_DisableOwnAddress2>:
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	60da      	str	r2, [r3, #12]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <LL_I2C_EnableAutoEndMode>:
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	605a      	str	r2, [r3, #4]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014fc:	4908      	ldr	r1, [pc, #32]	; (8001520 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001500:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4313      	orrs	r3, r2
 8001506:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800150a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4013      	ands	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001512:	68fb      	ldr	r3, [r7, #12]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	40021000 	.word	0x40021000

08001524 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800152c:	4908      	ldr	r1, [pc, #32]	; (8001550 <LL_APB1_GRP1_EnableClock+0x2c>)
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001530:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4313      	orrs	r3, r2
 8001536:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <LL_APB1_GRP1_EnableClock+0x2c>)
 800153a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4013      	ands	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	40021000 	.word	0x40021000

08001554 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800155c:	4908      	ldr	r1, [pc, #32]	; (8001580 <LL_APB2_GRP1_EnableClock+0x2c>)
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001560:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4313      	orrs	r3, r2
 8001566:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <LL_APB2_GRP1_EnableClock+0x2c>)
 800156a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4013      	ands	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001572:	68fb      	ldr	r3, [r7, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	40021000 	.word	0x40021000

08001584 <LL_USART_Enable>:
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f043 0201 	orr.w	r2, r3, #1
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	601a      	str	r2, [r3, #0]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_USART_SetTXRXSwap>:
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_SWAP, SwapConfig);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	605a      	str	r2, [r3, #4]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	609a      	str	r2, [r3, #8]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f043 0220 	orr.w	r2, r3, #32
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	601a      	str	r2, [r3, #0]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	619a      	str	r2, [r3, #24]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <LL_Init>:

//#include "stm32l4xx_ll_dma.h"



void LL_Init(void){
 800164e:	b580      	push	{r7, lr}
 8001650:	af00      	add	r7, sp, #0

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001652:	2001      	movs	r0, #1
 8001654:	f7ff ff7e 	bl	8001554 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001658:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800165c:	f7ff ff62 	bl	8001524 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001660:	2003      	movs	r0, #3
 8001662:	f7ff fcb9 	bl	8000fd8 <NVIC_SetPriorityGrouping>

	/* System interrupt init*/
	/* MemoryManagement_IRQn interrupt configuration */
	NVIC_SetPriority(MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001666:	f7ff fcdb 	bl	8001020 <NVIC_GetPriorityGrouping>
 800166a:	4603      	mov	r3, r0
 800166c:	2200      	movs	r2, #0
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fd27 	bl	80010c4 <NVIC_EncodePriority>
 8001676:	4603      	mov	r3, r0
 8001678:	4619      	mov	r1, r3
 800167a:	f06f 000b 	mvn.w	r0, #11
 800167e:	f7ff fcf7 	bl	8001070 <NVIC_SetPriority>
	/* BusFault_IRQn interrupt configuration */
	NVIC_SetPriority(BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001682:	f7ff fccd 	bl	8001020 <NVIC_GetPriorityGrouping>
 8001686:	4603      	mov	r3, r0
 8001688:	2200      	movs	r2, #0
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fd19 	bl	80010c4 <NVIC_EncodePriority>
 8001692:	4603      	mov	r3, r0
 8001694:	4619      	mov	r1, r3
 8001696:	f06f 000a 	mvn.w	r0, #10
 800169a:	f7ff fce9 	bl	8001070 <NVIC_SetPriority>
	/* UsageFault_IRQn interrupt configuration */
	NVIC_SetPriority(UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800169e:	f7ff fcbf 	bl	8001020 <NVIC_GetPriorityGrouping>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fd0b 	bl	80010c4 <NVIC_EncodePriority>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4619      	mov	r1, r3
 80016b2:	f06f 0009 	mvn.w	r0, #9
 80016b6:	f7ff fcdb 	bl	8001070 <NVIC_SetPriority>
	/* SVCall_IRQn interrupt configuration */
	NVIC_SetPriority(SVCall_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80016ba:	f7ff fcb1 	bl	8001020 <NVIC_GetPriorityGrouping>
 80016be:	4603      	mov	r3, r0
 80016c0:	2200      	movs	r2, #0
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fcfd 	bl	80010c4 <NVIC_EncodePriority>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4619      	mov	r1, r3
 80016ce:	f06f 0004 	mvn.w	r0, #4
 80016d2:	f7ff fccd 	bl	8001070 <NVIC_SetPriority>
	/* DebugMonitor_IRQn interrupt configuration */
	NVIC_SetPriority(DebugMonitor_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80016d6:	f7ff fca3 	bl	8001020 <NVIC_GetPriorityGrouping>
 80016da:	4603      	mov	r3, r0
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fcef 	bl	80010c4 <NVIC_EncodePriority>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4619      	mov	r1, r3
 80016ea:	f06f 0003 	mvn.w	r0, #3
 80016ee:	f7ff fcbf 	bl	8001070 <NVIC_SetPriority>
	/* PendSV_IRQn interrupt configuration */
	NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80016f2:	f7ff fc95 	bl	8001020 <NVIC_GetPriorityGrouping>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2200      	movs	r2, #0
 80016fa:	2100      	movs	r1, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fce1 	bl	80010c4 <NVIC_EncodePriority>
 8001702:	4603      	mov	r3, r0
 8001704:	4619      	mov	r1, r3
 8001706:	f06f 0001 	mvn.w	r0, #1
 800170a:	f7ff fcb1 	bl	8001070 <NVIC_SetPriority>
	/* SysTick_IRQn interrupt configuration */
	//NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void){
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0

	LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001718:	2004      	movs	r0, #4
 800171a:	f7ff fd05 	bl	8001128 <LL_FLASH_SetLatency>

	if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4){
 800171e:	f7ff fd17 	bl	8001150 <LL_FLASH_GetLatency>
 8001722:	4603      	mov	r3, r0
 8001724:	2b04      	cmp	r3, #4
 8001726:	d003      	beq.n	8001730 <SystemClock_Config+0x1c>
		Error_Handler();
 8001728:	2140      	movs	r1, #64	; 0x40
 800172a:	482c      	ldr	r0, [pc, #176]	; (80017dc <SystemClock_Config+0xc8>)
 800172c:	f000 f9b8 	bl	8001aa0 <_Error_Handler>
	}

	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001730:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001734:	f7ff fe72 	bl	800141c <LL_PWR_SetRegulVoltageScaling>
  	  LL_RCC_HSE_Enable();
   	   // Wait till HSE is ready
  	  while(LL_RCC_HSE_IsReady() != 1);*/

	//Enable HSI
	LL_RCC_HSI_Enable();
 8001738:	f7ff fd34 	bl	80011a4 <LL_RCC_HSI_Enable>
	//Wait till HSI is ready
	while(LL_RCC_HSI_IsReady() != 1);
 800173c:	bf00      	nop
 800173e:	f7ff fd41 	bl	80011c4 <LL_RCC_HSI_IsReady>
 8001742:	4603      	mov	r3, r0
 8001744:	2b01      	cmp	r3, #1
 8001746:	d1fa      	bne.n	800173e <SystemClock_Config+0x2a>
	//LL_RCC_HSI_SetCalibTrimming(16);//not need to do this

	// Enable LSI
	LL_RCC_LSI_Enable();
 8001748:	f7ff fd50 	bl	80011ec <LL_RCC_LSI_Enable>

	/* Wait till LSI is ready */
	while(LL_RCC_LSI_IsReady() != 1);
 800174c:	bf00      	nop
 800174e:	f7ff fd5f 	bl	8001210 <LL_RCC_LSI_IsReady>
 8001752:	4603      	mov	r3, r0
 8001754:	2b01      	cmp	r3, #1
 8001756:	d1fa      	bne.n	800174e <SystemClock_Config+0x3a>

	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 10, LL_RCC_PLLR_DIV_2);
 8001758:	2300      	movs	r3, #0
 800175a:	220a      	movs	r2, #10
 800175c:	2100      	movs	r1, #0
 800175e:	2002      	movs	r0, #2
 8001760:	f7ff fe2c 	bl	80013bc <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 8001764:	f7ff fe06 	bl	8001374 <LL_RCC_PLL_Enable>
	LL_RCC_PLL_EnableDomain_SYS();
 8001768:	f7ff fe48 	bl	80013fc <LL_RCC_PLL_EnableDomain_SYS>

	/* Wait till PLL is ready */
	while(LL_RCC_PLL_IsReady() != 1);
 800176c:	bf00      	nop
 800176e:	f7ff fe11 	bl	8001394 <LL_RCC_PLL_IsReady>
 8001772:	4603      	mov	r3, r0
 8001774:	2b01      	cmp	r3, #1
 8001776:	d1fa      	bne.n	800176e <SystemClock_Config+0x5a>

	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001778:	2003      	movs	r0, #3
 800177a:	f7ff fd5d 	bl	8001238 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800177e:	bf00      	nop
 8001780:	f7ff fd6e 	bl	8001260 <LL_RCC_GetSysClkSource>
 8001784:	4603      	mov	r3, r0
 8001786:	2b0c      	cmp	r3, #12
 8001788:	d1fa      	bne.n	8001780 <SystemClock_Config+0x6c>

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800178a:	2000      	movs	r0, #0
 800178c:	f7ff fd76 	bl	800127c <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001790:	2000      	movs	r0, #0
 8001792:	f7ff fd87 	bl	80012a4 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001796:	2000      	movs	r0, #0
 8001798:	f7ff fd98 	bl	80012cc <LL_RCC_SetAPB2Prescaler>
	LL_Init1msTick(80000000);
 800179c:	4810      	ldr	r0, [pc, #64]	; (80017e0 <SystemClock_Config+0xcc>)
 800179e:	f7ff fbfd 	bl	8000f9c <LL_Init1msTick>
	LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 80017a2:	2004      	movs	r0, #4
 80017a4:	f7ff fce2 	bl	800116c <LL_SYSTICK_SetClkSource>
	LL_SetSystemCoreClock(80000000);
 80017a8:	480d      	ldr	r0, [pc, #52]	; (80017e0 <SystemClock_Config+0xcc>)
 80017aa:	f7ff fc05 	bl	8000fb8 <LL_SetSystemCoreClock>

	LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_SYSCLK);
 80017ae:	480d      	ldr	r0, [pc, #52]	; (80017e4 <SystemClock_Config+0xd0>)
 80017b0:	f7ff fda0 	bl	80012f4 <LL_RCC_SetUSARTClockSource>
	LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_SYSCLK);
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <SystemClock_Config+0xd4>)
 80017b6:	f7ff fdb7 	bl	8001328 <LL_RCC_SetI2CClockSource>

	/* SysTick_IRQn interrupt configuration */
	NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80017ba:	f7ff fc31 	bl	8001020 <NVIC_GetPriorityGrouping>
 80017be:	4603      	mov	r3, r0
 80017c0:	2200      	movs	r2, #0
 80017c2:	210f      	movs	r1, #15
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fc7d 	bl	80010c4 <NVIC_EncodePriority>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4619      	mov	r1, r3
 80017ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017d2:	f7ff fc4d 	bl	8001070 <NVIC_SetPriority>
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	08002d54 	.word	0x08002d54
 80017e0:	04c4b400 	.word	0x04c4b400
 80017e4:	00030001 	.word	0x00030001
 80017e8:	000c0001 	.word	0x000c0001

080017ec <SetupLED>:

/**
  * @brief  This function setup  Led on the KTIVT_SS_board.
  * @retval None
*/
void SetupLED(void){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80017f2:	2004      	movs	r0, #4
 80017f4:	f7ff fe7e 	bl	80014f4 <LL_AHB2_GRP1_EnableClock>

	 /*Configure LED_Yellow_HL1 (PC10), LED_Green_HL2 (PC11), LED_Green_HL3 (PC12) as output Push-Pull      */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 80017f8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017fc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80017fe:	2301      	movs	r3, #1
 8001800:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL; // try set - LL_GPIO_OUTPUT_OPENDRAIN on real board
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800180a:	2301      	movs	r3, #1
 800180c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180e:	463b      	mov	r3, r7
 8001810:	4619      	mov	r1, r3
 8001812:	4806      	ldr	r0, [pc, #24]	; (800182c <SetupLED+0x40>)
 8001814:	f7fe fe2f 	bl	8000476 <LL_GPIO_Init>

	/* Diode is off */
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12);
 8001818:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800181c:	4803      	ldr	r0, [pc, #12]	; (800182c <SetupLED+0x40>)
 800181e:	f7ff fefa 	bl	8001616 <LL_GPIO_SetOutputPin>
	/*For ON/OFF LED need to use function:                            */
	  /*LED_Yellow_HL1_ON()       LED_Yellow_HL1_OFF()                */
	  /*LED_Green_HL2_ON()        LED_Green_HL2_OFF()                 */
	  /*LED_Green_HL3_ON()        LED_Green_HL3_OFF()                 */
	  /*Define in SetupPeriph.h                                       */
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	48000800 	.word	0x48000800

08001830 <SetupGPIO>:

/**
  * @brief  This function setup GPIO to control IC on the KTIVT_SS_board.
  * @retval None
*/
void SetupGPIO(void){
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0


	LL_GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001836:	2001      	movs	r0, #1
 8001838:	f7ff fe5c 	bl	80014f4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800183c:	2004      	movs	r0, #4
 800183e:	f7ff fe59 	bl	80014f4 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001842:	2002      	movs	r0, #2
 8001844:	f7ff fe56 	bl	80014f4 <LL_AHB2_GRP1_EnableClock>


	/* Configure pins out for control preamplifier K1. PA3=10 PA4=100 PA5=1000 for AG1411 ON=0 OFF=1    */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001848:	2338      	movs	r3, #56	; 0x38
 800184a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800184c:	2301      	movs	r3, #1
 800184e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001858:	2301      	movs	r3, #1
 800185a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185c:	463b      	mov	r3, r7
 800185e:	4619      	mov	r1, r3
 8001860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001864:	f7fe fe07 	bl	8000476 <LL_GPIO_Init>
	/*off K1 */
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 8001868:	2138      	movs	r1, #56	; 0x38
 800186a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186e:	f7ff fed2 	bl	8001616 <LL_GPIO_SetOutputPin>


	/* Configure pins in for control COMPorators COMP1=PC0, COMP2=PC1, COMP3=PA0*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8001872:	2303      	movs	r3, #3
 8001874:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187e:	463b      	mov	r3, r7
 8001880:	4619      	mov	r1, r3
 8001882:	4830      	ldr	r0, [pc, #192]	; (8001944 <SetupGPIO+0x114>)
 8001884:	f7fe fdf7 	bl	8000476 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001888:	2301      	movs	r3, #1
 800188a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800188c:	2300      	movs	r3, #0
 800188e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001890:	2300      	movs	r3, #0
 8001892:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	463b      	mov	r3, r7
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189c:	f7fe fdeb 	bl	8000476 <LL_GPIO_Init>


	/* Configure pins ???? PC8=F_SA0 PC9=F_SA1 PA8=F_SA2 for AG1411 ON=0 OFF=1 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 80018a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018a4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018a6:	2301      	movs	r3, #1
 80018a8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80018b2:	2301      	movs	r3, #1
 80018b4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b6:	463b      	mov	r3, r7
 80018b8:	4619      	mov	r1, r3
 80018ba:	4822      	ldr	r0, [pc, #136]	; (8001944 <SetupGPIO+0x114>)
 80018bc:	f7fe fddb 	bl	8000476 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80018c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018c4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018c6:	2301      	movs	r3, #1
 80018c8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80018d2:	2301      	movs	r3, #1
 80018d4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	463b      	mov	r3, r7
 80018d8:	4619      	mov	r1, r3
 80018da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018de:	f7fe fdca 	bl	8000476 <LL_GPIO_Init>
	/*off F_SA*/
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_8|LL_GPIO_PIN_9);
 80018e2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80018e6:	4817      	ldr	r0, [pc, #92]	; (8001944 <SetupGPIO+0x114>)
 80018e8:	f7ff fe95 	bl	8001616 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 80018ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f4:	f7ff fe8f 	bl	8001616 <LL_GPIO_SetOutputPin>


	/* Configure pins for control main amplifier K2. out: PB0=G0 PB1=G1 PB2=G2 PB10=G3 PB11=G4  in: COMP4=PA2   */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 80018f8:	f640 4307 	movw	r3, #3079	; 0xc07
 80018fc:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018fe:	2301      	movs	r3, #1
 8001900:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	463b      	mov	r3, r7
 8001910:	4619      	mov	r1, r3
 8001912:	480d      	ldr	r0, [pc, #52]	; (8001948 <SetupGPIO+0x118>)
 8001914:	f7fe fdaf 	bl	8000476 <LL_GPIO_Init>

	/*off K2=1 */
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_10|LL_GPIO_PIN_11);
 8001918:	f640 4107 	movw	r1, #3079	; 0xc07
 800191c:	480a      	ldr	r0, [pc, #40]	; (8001948 <SetupGPIO+0x118>)
 800191e:	f7ff fe88 	bl	8001632 <LL_GPIO_ResetOutputPin>
	/* Config COMP4*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001922:	2304      	movs	r3, #4
 8001924:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
	//GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
	//GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	463b      	mov	r3, r7
 8001930:	4619      	mov	r1, r3
 8001932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001936:	f7fe fd9e 	bl	8000476 <LL_GPIO_Init>

}
 800193a:	bf00      	nop
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	48000800 	.word	0x48000800
 8001948:	48000400 	.word	0x48000400

0800194c <USART1_Init>:

void USART1_Init(void){
 800194c:	b580      	push	{r7, lr}
 800194e:	b08e      	sub	sp, #56	; 0x38
 8001950:	af00      	add	r7, sp, #0
  	LL_USART_InitTypeDef USART_InitStruct;

  	LL_GPIO_InitTypeDef GPIO_InitStruct;

  	/* Peripheral clock enable */
  	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001952:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001956:	f7ff fdfd 	bl	8001554 <LL_APB2_GRP1_EnableClock>
  	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800195a:	2001      	movs	r0, #1
 800195c:	f7ff fdca 	bl	80014f4 <LL_AHB2_GRP1_EnableClock>
  
  	/**USART1 GPIO Configuration  
  	PA9   ------> USART1_TX
  	PA10   ------> USART1_RX 
  	*/
  	GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8001960:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001964:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001966:	2302      	movs	r3, #2
 8001968:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
  	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
  	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001976:	2307      	movs	r3, #7
 8001978:	61bb      	str	r3, [r7, #24]
  	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	4619      	mov	r1, r3
 800197e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001982:	f7fe fd78 	bl	8000476 <LL_GPIO_Init>
            - One Stop Bit
            - No parity
            - Hardware flow control disabled (RTS and CTS signals)
            - Receive and transmit enabled
      */
  	USART_InitStruct.BaudRate = 5000000;
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <USART1_Init+0x84>)
 8001988:	61fb      	str	r3, [r7, #28]
  	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 800198a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198e:	623b      	str	r3, [r7, #32]
  	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001990:	2300      	movs	r3, #0
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
  	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001994:	2300      	movs	r3, #0
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
  	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001998:	230c      	movs	r3, #12
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
  	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800199c:	2300      	movs	r3, #0
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
  	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80019a0:	2300      	movs	r3, #0
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
  	LL_USART_Init(USART1, &USART_InitStruct);
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	4619      	mov	r1, r3
 80019aa:	480a      	ldr	r0, [pc, #40]	; (80019d4 <USART1_Init+0x88>)
 80019ac:	f7ff fa6c 	bl	8000e88 <LL_USART_Init>

  	LL_USART_SetTXRXSwap(USART1, LL_USART_TXRX_SWAPPED);
 80019b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019b4:	4807      	ldr	r0, [pc, #28]	; (80019d4 <USART1_Init+0x88>)
 80019b6:	f7ff fdf5 	bl	80015a4 <LL_USART_SetTXRXSwap>

  	LL_USART_ConfigAsyncMode(USART1); 
 80019ba:	4806      	ldr	r0, [pc, #24]	; (80019d4 <USART1_Init+0x88>)
 80019bc:	f7ff fe05 	bl	80015ca <LL_USART_ConfigAsyncMode>
  	LL_USART_Enable(USART1);
 80019c0:	4804      	ldr	r0, [pc, #16]	; (80019d4 <USART1_Init+0x88>)
 80019c2:	f7ff fddf 	bl	8001584 <LL_USART_Enable>
   
}
 80019c6:	bf00      	nop
 80019c8:	3738      	adds	r7, #56	; 0x38
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	004c4b40 	.word	0x004c4b40
 80019d4:	40013800 	.word	0x40013800

080019d8 <Setup_I2C>:
/**
  * @brief  Setup I2C.
  * @param  None
  * @retval None
*/
void Setup_I2C(void){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08e      	sub	sp, #56	; 0x38
 80019dc:	af00      	add	r7, sp, #0
	LL_I2C_InitTypeDef I2C_InitStruct;

  	LL_GPIO_InitTypeDef GPIO_InitStruct;

  	/* Peripheral clock enable */
  	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80019de:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80019e2:	f7ff fd9f 	bl	8001524 <LL_APB1_GRP1_EnableClock>
  	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80019e6:	2002      	movs	r0, #2
 80019e8:	f7ff fd84 	bl	80014f4 <LL_AHB2_GRP1_EnableClock>
  
  	/**I2C1 GPIO Configuration  
  	PB6   ------> I2C1_SCL
  	PB7   ------> I2C1_SDA 
  	*/
  	GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80019ec:	23c0      	movs	r3, #192	; 0xc0
 80019ee:	607b      	str	r3, [r7, #4]
  	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80019f0:	2302      	movs	r3, #2
 80019f2:	60bb      	str	r3, [r7, #8]
  	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80019f4:	2303      	movs	r3, #3
 80019f6:	60fb      	str	r3, [r7, #12]
  	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80019f8:	2301      	movs	r3, #1
 80019fa:	613b      	str	r3, [r7, #16]
  	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80019fc:	2301      	movs	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
  	GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001a00:	2304      	movs	r3, #4
 8001a02:	61bb      	str	r3, [r7, #24]
  	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	4619      	mov	r1, r3
 8001a08:	4815      	ldr	r0, [pc, #84]	; (8001a60 <Setup_I2C+0x88>)
 8001a0a:	f7fe fd34 	bl	8000476 <LL_GPIO_Init>

    /**I2C Initialization 
    */
  	LL_I2C_EnableAutoEndMode(I2C1);
 8001a0e:	4815      	ldr	r0, [pc, #84]	; (8001a64 <Setup_I2C+0x8c>)
 8001a10:	f7ff fd60 	bl	80014d4 <LL_I2C_EnableAutoEndMode>
	LL_I2C_DisableOwnAddress2(I2C1);
 8001a14:	4813      	ldr	r0, [pc, #76]	; (8001a64 <Setup_I2C+0x8c>)
 8001a16:	f7ff fd4d 	bl	80014b4 <LL_I2C_DisableOwnAddress2>
  	LL_I2C_DisableGeneralCall(I2C1);
 8001a1a:	4812      	ldr	r0, [pc, #72]	; (8001a64 <Setup_I2C+0x8c>)
 8001a1c:	f7ff fd22 	bl	8001464 <LL_I2C_DisableGeneralCall>
  	LL_I2C_EnableClockStretching(I2C1);
 8001a20:	4810      	ldr	r0, [pc, #64]	; (8001a64 <Setup_I2C+0x8c>)
 8001a22:	f7ff fd0f 	bl	8001444 <LL_I2C_EnableClockStretching>

  	I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
  	I2C_InitStruct.Timing = 0x00702991;
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <Setup_I2C+0x90>)
 8001a2c:	623b      	str	r3, [r7, #32]
  	I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  	I2C_InitStruct.DigitalFilter = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  	I2C_InitStruct.OwnAddress1 = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  	I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	633b      	str	r3, [r7, #48]	; 0x30
  	I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	637b      	str	r3, [r7, #52]	; 0x34
  	LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	4619      	mov	r1, r3
 8001a48:	4806      	ldr	r0, [pc, #24]	; (8001a64 <Setup_I2C+0x8c>)
 8001a4a:	f7fe fe31 	bl	80006b0 <LL_I2C_Init>

  	LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2100      	movs	r1, #0
 8001a52:	4804      	ldr	r0, [pc, #16]	; (8001a64 <Setup_I2C+0x8c>)
 8001a54:	f7ff fd16 	bl	8001484 <LL_I2C_SetOwnAddress2>
}
 8001a58:	bf00      	nop
 8001a5a:	3738      	adds	r7, #56	; 0x38
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	48000400 	.word	0x48000400
 8001a64:	40005400 	.word	0x40005400
 8001a68:	00702991 	.word	0x00702991

08001a6c <SetupInterrupt>:
/**
  * @brief  This function setup interrupts for all ports and inside event .
  * @param  None
  * @retval None
*/
void SetupInterrupt(void){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	
  	/* Setup USART1 interrupt Init */
  	NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0)); /*Set priority №1 from 0..15*/
 8001a70:	f7ff fad6 	bl	8001020 <NVIC_GetPriorityGrouping>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2200      	movs	r2, #0
 8001a78:	2101      	movs	r1, #1
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fb22 	bl	80010c4 <NVIC_EncodePriority>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4619      	mov	r1, r3
 8001a84:	2025      	movs	r0, #37	; 0x25
 8001a86:	f7ff faf3 	bl	8001070 <NVIC_SetPriority>
  	LL_USART_EnableIT_RXNE(USART1); //Enable RX no empty Interrupt 
 8001a8a:	4804      	ldr	r0, [pc, #16]	; (8001a9c <SetupInterrupt+0x30>)
 8001a8c:	f7ff fdb3 	bl	80015f6 <LL_USART_EnableIT_RXNE>
  	//LL_USART_DisableIT_RXNE(USART1);
  	NVIC_EnableIRQ(USART1_IRQn);
 8001a90:	2025      	movs	r0, #37	; 0x25
 8001a92:	f7ff fad3 	bl	800103c <NVIC_EnableIRQ>



}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40013800 	.word	0x40013800

08001aa0 <_Error_Handler>:
  *
  *
  *
  */
void _Error_Handler(char *file, int line)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]

	printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4803      	ldr	r0, [pc, #12]	; (8001abc <_Error_Handler+0x1c>)
 8001ab0:	f000 f9e0 	bl	8001e74 <iprintf>
  /* User can add his own implementation to report the HAL error return state */
 //while(1)
  //{
 // }
  /* USER CODE END Error_Handler_Debug */
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	08002d6c 	.word	0x08002d6c

08001ac0 <main>:

**********************************************************/
// LL_mDelay(1);
//LL_RCC_ClocksTypeDef check_RCC_Clocks,  *CHECK_RCC_CLOCKS=&check_RCC_Clocks; // Only for check setup clock. Not need use in release

int main(void){
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0

	LL_Init();
 8001ac4:	f7ff fdc3 	bl	800164e <LL_Init>
	SystemClock_Config(); //Setup sysytem clock at 80 MHz
 8001ac8:	f7ff fe24 	bl	8001714 <SystemClock_Config>
	//LL_RCC_GetSystemClocksFreq(CHECK_RCC_CLOCKS); // Only for check setup clock Not need use in release
	printf("Hello human. I am Analog module.\r\n");
 8001acc:	480d      	ldr	r0, [pc, #52]	; (8001b04 <main+0x44>)
 8001ace:	f000 fa45 	bl	8001f5c <puts>
	printf("Start setup periphery STM32L452.....\r\n");
 8001ad2:	480d      	ldr	r0, [pc, #52]	; (8001b08 <main+0x48>)
 8001ad4:	f000 fa42 	bl	8001f5c <puts>
	SetupLED(); //протестить с LL_GPIO_OUTPUT_OPENDRAIN
 8001ad8:	f7ff fe88 	bl	80017ec <SetupLED>
	SetupGPIO();
 8001adc:	f7ff fea8 	bl	8001830 <SetupGPIO>
	USART1_Init();
 8001ae0:	f7ff ff34 	bl	800194c <USART1_Init>
	Setup_I2C();
 8001ae4:	f7ff ff78 	bl	80019d8 <Setup_I2C>

	SetupInterrupt();
 8001ae8:	f7ff ffc0 	bl	8001a6c <SetupInterrupt>

	//MX_IWDG_Init();

	printf("Finish setup. Success! \r\n");
 8001aec:	4807      	ldr	r0, [pc, #28]	; (8001b0c <main+0x4c>)
 8001aee:	f000 fa35 	bl	8001f5c <puts>


while(1){
  printf("Now is succsses start \r\n");
 8001af2:	4807      	ldr	r0, [pc, #28]	; (8001b10 <main+0x50>)
 8001af4:	f000 fa32 	bl	8001f5c <puts>
  Error_Handler();
 8001af8:	2128      	movs	r1, #40	; 0x28
 8001afa:	4806      	ldr	r0, [pc, #24]	; (8001b14 <main+0x54>)
 8001afc:	f7ff ffd0 	bl	8001aa0 <_Error_Handler>
  printf("Now is succsses start \r\n");
 8001b00:	e7f7      	b.n	8001af2 <main+0x32>
 8001b02:	bf00      	nop
 8001b04:	08002d9c 	.word	0x08002d9c
 8001b08:	08002dc0 	.word	0x08002dc0
 8001b0c:	08002de8 	.word	0x08002de8
 8001b10:	08002e04 	.word	0x08002e04
 8001b14:	08002e1c 	.word	0x08002e1c

08001b18 <LL_USART_IsActiveFlag_RXNE>:
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	f003 0320 	and.w	r3, r3, #32
 8001b28:	2b20      	cmp	r3, #32
 8001b2a:	bf0c      	ite	eq
 8001b2c:	2301      	moveq	r3, #1
 8001b2e:	2300      	movne	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b50:	b29b      	uxth	r3, r3
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <HardFault_Handler+0x4>

08001b72 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <MemManage_Handler+0x4>

08001b78 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <BusFault_Handler+0x4>

08001b7e <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <UsageFault_Handler+0x4>

08001b84 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <USART1_IRQHandler>:
/******************************************************************************/

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0

    uint16_t input_data9b=0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	80fb      	strh	r3, [r7, #6]

    // делаем проверку на то что принимаем байты в заисимости от режима 
    if(LL_USART_IsActiveFlag_RXNE(USART1)){
 8001bc6:	4807      	ldr	r0, [pc, #28]	; (8001be4 <USART1_IRQHandler+0x28>)
 8001bc8:	f7ff ffa6 	bl	8001b18 <LL_USART_IsActiveFlag_RXNE>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d004      	beq.n	8001bdc <USART1_IRQHandler+0x20>

        input_data9b = LL_USART_ReceiveData9(USART1);
 8001bd2:	4804      	ldr	r0, [pc, #16]	; (8001be4 <USART1_IRQHandler+0x28>)
 8001bd4:	f7ff ffb3 	bl	8001b3e <LL_USART_ReceiveData9>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	80fb      	strh	r3, [r7, #6]

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40013800 	.word	0x40013800

08001be8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001bf0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001bf4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d013      	beq.n	8001c28 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001c00:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c04:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001c08:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00b      	beq.n	8001c28 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001c10:	e000      	b.n	8001c14 <ITM_SendChar+0x2c>
  __ASM volatile ("nop");
 8001c12:	bf00      	nop
 8001c14:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f9      	beq.n	8001c12 <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001c1e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001c28:	687b      	ldr	r3, [r7, #4]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
	/* return len; */
	
	//errno = ENOSYS;
	//return -1;

	int i=0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++){
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	e009      	b.n	8001c60 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	60ba      	str	r2, [r7, #8]
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ffc7 	bl	8001be8 <ITM_SendChar>
	for(i=0;i<len;i++){
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	dbf1      	blt.n	8001c4c <_write+0x16>
	}
	return len;
 8001c68:	687b      	ldr	r3, [r7, #4]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <_sbrk>:

void * _sbrk(int32_t incr)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <_sbrk+0x38>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x16>
		heap_end = & end;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <_sbrk+0x38>)
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <_sbrk+0x3c>)
 8001c88:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <_sbrk+0x38>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <_sbrk+0x38>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4413      	add	r3, r2
 8001c98:	4a04      	ldr	r2, [pc, #16]	; (8001cac <_sbrk+0x38>)
 8001c9a:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000084 	.word	0x20000084
 8001cb0:	20000094 	.word	0x20000094

08001cb4 <_close>:

int _close(int32_t file)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <_close+0x20>)
 8001cbe:	2258      	movs	r2, #88	; 0x58
 8001cc0:	601a      	str	r2, [r3, #0]
	return -1;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000090 	.word	0x20000090

08001cd8 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <_fstat+0x20>)
 8001ce4:	2258      	movs	r2, #88	; 0x58
 8001ce6:	601a      	str	r2, [r3, #0]
	return -1;
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	20000090 	.word	0x20000090

08001cfc <_isatty>:

int _isatty(int32_t file)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <_isatty+0x1c>)
 8001d06:	2258      	movs	r2, #88	; 0x58
 8001d08:	601a      	str	r2, [r3, #0]
	return 0;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	20000090 	.word	0x20000090

08001d1c <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <_lseek+0x24>)
 8001d2a:	2258      	movs	r2, #88	; 0x58
 8001d2c:	601a      	str	r2, [r3, #0]
	return -1;
 8001d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000090 	.word	0x20000090

08001d44 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <_read+0x24>)
 8001d52:	2258      	movs	r2, #88	; 0x58
 8001d54:	601a      	str	r2, [r3, #0]
	return -1;
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000090 	.word	0x20000090

08001d6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d70:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <SystemInit+0x64>)
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <SystemInit+0x64>)
 8001d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d80:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <SystemInit+0x68>)
 8001d82:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <SystemInit+0x68>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <SystemInit+0x68>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001d92:	4a10      	ldr	r2, [pc, #64]	; (8001dd4 <SystemInit+0x68>)
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <SystemInit+0x68>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001d9c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001da0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001da2:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <SystemInit+0x68>)
 8001da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001da8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001daa:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <SystemInit+0x68>)
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <SystemInit+0x68>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001db6:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <SystemInit+0x68>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <SystemInit+0x64>)
 8001dbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dc2:	609a      	str	r2, [r3, #8]
#endif
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00
 8001dd4:	40021000 	.word	0x40021000

08001dd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ddc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001dde:	e003      	b.n	8001de8 <LoopCopyDataInit>

08001de0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001de2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001de4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001de6:	3104      	adds	r1, #4

08001de8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001de8:	480b      	ldr	r0, [pc, #44]	; (8001e18 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001dea:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001dec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001dee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001df0:	d3f6      	bcc.n	8001de0 <CopyDataInit>
	ldr	r2, =_sbss
 8001df2:	4a0b      	ldr	r2, [pc, #44]	; (8001e20 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001df4:	e002      	b.n	8001dfc <LoopFillZerobss>

08001df6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001df6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001df8:	f842 3b04 	str.w	r3, [r2], #4

08001dfc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <LoopForever+0x16>)
	cmp	r2, r3
 8001dfe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e00:	d3f9      	bcc.n	8001df6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e02:	f7ff ffb3 	bl	8001d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e06:	f000 f811 	bl	8001e2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e0a:	f7ff fe59 	bl	8001ac0 <main>

08001e0e <LoopForever>:

LoopForever:
    b LoopForever
 8001e0e:	e7fe      	b.n	8001e0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e10:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8001e14:	08002f14 	.word	0x08002f14
	ldr	r0, =_sdata
 8001e18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e1c:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8001e20:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8001e24:	20000094 	.word	0x20000094

08001e28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e28:	e7fe      	b.n	8001e28 <ADC1_IRQHandler>
	...

08001e2c <__libc_init_array>:
 8001e2c:	b570      	push	{r4, r5, r6, lr}
 8001e2e:	4e0d      	ldr	r6, [pc, #52]	; (8001e64 <__libc_init_array+0x38>)
 8001e30:	4c0d      	ldr	r4, [pc, #52]	; (8001e68 <__libc_init_array+0x3c>)
 8001e32:	1ba4      	subs	r4, r4, r6
 8001e34:	10a4      	asrs	r4, r4, #2
 8001e36:	2500      	movs	r5, #0
 8001e38:	42a5      	cmp	r5, r4
 8001e3a:	d109      	bne.n	8001e50 <__libc_init_array+0x24>
 8001e3c:	4e0b      	ldr	r6, [pc, #44]	; (8001e6c <__libc_init_array+0x40>)
 8001e3e:	4c0c      	ldr	r4, [pc, #48]	; (8001e70 <__libc_init_array+0x44>)
 8001e40:	f000 ff7c 	bl	8002d3c <_init>
 8001e44:	1ba4      	subs	r4, r4, r6
 8001e46:	10a4      	asrs	r4, r4, #2
 8001e48:	2500      	movs	r5, #0
 8001e4a:	42a5      	cmp	r5, r4
 8001e4c:	d105      	bne.n	8001e5a <__libc_init_array+0x2e>
 8001e4e:	bd70      	pop	{r4, r5, r6, pc}
 8001e50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e54:	4798      	blx	r3
 8001e56:	3501      	adds	r5, #1
 8001e58:	e7ee      	b.n	8001e38 <__libc_init_array+0xc>
 8001e5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e5e:	4798      	blx	r3
 8001e60:	3501      	adds	r5, #1
 8001e62:	e7f2      	b.n	8001e4a <__libc_init_array+0x1e>
 8001e64:	08002f0c 	.word	0x08002f0c
 8001e68:	08002f0c 	.word	0x08002f0c
 8001e6c:	08002f0c 	.word	0x08002f0c
 8001e70:	08002f10 	.word	0x08002f10

08001e74 <iprintf>:
 8001e74:	b40f      	push	{r0, r1, r2, r3}
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <iprintf+0x2c>)
 8001e78:	b513      	push	{r0, r1, r4, lr}
 8001e7a:	681c      	ldr	r4, [r3, #0]
 8001e7c:	b124      	cbz	r4, 8001e88 <iprintf+0x14>
 8001e7e:	69a3      	ldr	r3, [r4, #24]
 8001e80:	b913      	cbnz	r3, 8001e88 <iprintf+0x14>
 8001e82:	4620      	mov	r0, r4
 8001e84:	f000 fa24 	bl	80022d0 <__sinit>
 8001e88:	ab05      	add	r3, sp, #20
 8001e8a:	9a04      	ldr	r2, [sp, #16]
 8001e8c:	68a1      	ldr	r1, [r4, #8]
 8001e8e:	9301      	str	r3, [sp, #4]
 8001e90:	4620      	mov	r0, r4
 8001e92:	f000 fbe9 	bl	8002668 <_vfiprintf_r>
 8001e96:	b002      	add	sp, #8
 8001e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e9c:	b004      	add	sp, #16
 8001e9e:	4770      	bx	lr
 8001ea0:	20000004 	.word	0x20000004

08001ea4 <_puts_r>:
 8001ea4:	b570      	push	{r4, r5, r6, lr}
 8001ea6:	460e      	mov	r6, r1
 8001ea8:	4605      	mov	r5, r0
 8001eaa:	b118      	cbz	r0, 8001eb4 <_puts_r+0x10>
 8001eac:	6983      	ldr	r3, [r0, #24]
 8001eae:	b90b      	cbnz	r3, 8001eb4 <_puts_r+0x10>
 8001eb0:	f000 fa0e 	bl	80022d0 <__sinit>
 8001eb4:	69ab      	ldr	r3, [r5, #24]
 8001eb6:	68ac      	ldr	r4, [r5, #8]
 8001eb8:	b913      	cbnz	r3, 8001ec0 <_puts_r+0x1c>
 8001eba:	4628      	mov	r0, r5
 8001ebc:	f000 fa08 	bl	80022d0 <__sinit>
 8001ec0:	4b23      	ldr	r3, [pc, #140]	; (8001f50 <_puts_r+0xac>)
 8001ec2:	429c      	cmp	r4, r3
 8001ec4:	d117      	bne.n	8001ef6 <_puts_r+0x52>
 8001ec6:	686c      	ldr	r4, [r5, #4]
 8001ec8:	89a3      	ldrh	r3, [r4, #12]
 8001eca:	071b      	lsls	r3, r3, #28
 8001ecc:	d51d      	bpl.n	8001f0a <_puts_r+0x66>
 8001ece:	6923      	ldr	r3, [r4, #16]
 8001ed0:	b1db      	cbz	r3, 8001f0a <_puts_r+0x66>
 8001ed2:	3e01      	subs	r6, #1
 8001ed4:	68a3      	ldr	r3, [r4, #8]
 8001ed6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001eda:	3b01      	subs	r3, #1
 8001edc:	60a3      	str	r3, [r4, #8]
 8001ede:	b9e9      	cbnz	r1, 8001f1c <_puts_r+0x78>
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	da2e      	bge.n	8001f42 <_puts_r+0x9e>
 8001ee4:	4622      	mov	r2, r4
 8001ee6:	210a      	movs	r1, #10
 8001ee8:	4628      	mov	r0, r5
 8001eea:	f000 f83f 	bl	8001f6c <__swbuf_r>
 8001eee:	3001      	adds	r0, #1
 8001ef0:	d011      	beq.n	8001f16 <_puts_r+0x72>
 8001ef2:	200a      	movs	r0, #10
 8001ef4:	bd70      	pop	{r4, r5, r6, pc}
 8001ef6:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <_puts_r+0xb0>)
 8001ef8:	429c      	cmp	r4, r3
 8001efa:	d101      	bne.n	8001f00 <_puts_r+0x5c>
 8001efc:	68ac      	ldr	r4, [r5, #8]
 8001efe:	e7e3      	b.n	8001ec8 <_puts_r+0x24>
 8001f00:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <_puts_r+0xb4>)
 8001f02:	429c      	cmp	r4, r3
 8001f04:	bf08      	it	eq
 8001f06:	68ec      	ldreq	r4, [r5, #12]
 8001f08:	e7de      	b.n	8001ec8 <_puts_r+0x24>
 8001f0a:	4621      	mov	r1, r4
 8001f0c:	4628      	mov	r0, r5
 8001f0e:	f000 f87f 	bl	8002010 <__swsetup_r>
 8001f12:	2800      	cmp	r0, #0
 8001f14:	d0dd      	beq.n	8001ed2 <_puts_r+0x2e>
 8001f16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f1a:	bd70      	pop	{r4, r5, r6, pc}
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	da04      	bge.n	8001f2a <_puts_r+0x86>
 8001f20:	69a2      	ldr	r2, [r4, #24]
 8001f22:	4293      	cmp	r3, r2
 8001f24:	db06      	blt.n	8001f34 <_puts_r+0x90>
 8001f26:	290a      	cmp	r1, #10
 8001f28:	d004      	beq.n	8001f34 <_puts_r+0x90>
 8001f2a:	6823      	ldr	r3, [r4, #0]
 8001f2c:	1c5a      	adds	r2, r3, #1
 8001f2e:	6022      	str	r2, [r4, #0]
 8001f30:	7019      	strb	r1, [r3, #0]
 8001f32:	e7cf      	b.n	8001ed4 <_puts_r+0x30>
 8001f34:	4622      	mov	r2, r4
 8001f36:	4628      	mov	r0, r5
 8001f38:	f000 f818 	bl	8001f6c <__swbuf_r>
 8001f3c:	3001      	adds	r0, #1
 8001f3e:	d1c9      	bne.n	8001ed4 <_puts_r+0x30>
 8001f40:	e7e9      	b.n	8001f16 <_puts_r+0x72>
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	200a      	movs	r0, #10
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	6022      	str	r2, [r4, #0]
 8001f4a:	7018      	strb	r0, [r3, #0]
 8001f4c:	bd70      	pop	{r4, r5, r6, pc}
 8001f4e:	bf00      	nop
 8001f50:	08002e94 	.word	0x08002e94
 8001f54:	08002eb4 	.word	0x08002eb4
 8001f58:	08002e74 	.word	0x08002e74

08001f5c <puts>:
 8001f5c:	4b02      	ldr	r3, [pc, #8]	; (8001f68 <puts+0xc>)
 8001f5e:	4601      	mov	r1, r0
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	f7ff bf9f 	b.w	8001ea4 <_puts_r>
 8001f66:	bf00      	nop
 8001f68:	20000004 	.word	0x20000004

08001f6c <__swbuf_r>:
 8001f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6e:	460e      	mov	r6, r1
 8001f70:	4614      	mov	r4, r2
 8001f72:	4605      	mov	r5, r0
 8001f74:	b118      	cbz	r0, 8001f7e <__swbuf_r+0x12>
 8001f76:	6983      	ldr	r3, [r0, #24]
 8001f78:	b90b      	cbnz	r3, 8001f7e <__swbuf_r+0x12>
 8001f7a:	f000 f9a9 	bl	80022d0 <__sinit>
 8001f7e:	4b21      	ldr	r3, [pc, #132]	; (8002004 <__swbuf_r+0x98>)
 8001f80:	429c      	cmp	r4, r3
 8001f82:	d12a      	bne.n	8001fda <__swbuf_r+0x6e>
 8001f84:	686c      	ldr	r4, [r5, #4]
 8001f86:	69a3      	ldr	r3, [r4, #24]
 8001f88:	60a3      	str	r3, [r4, #8]
 8001f8a:	89a3      	ldrh	r3, [r4, #12]
 8001f8c:	071a      	lsls	r2, r3, #28
 8001f8e:	d52e      	bpl.n	8001fee <__swbuf_r+0x82>
 8001f90:	6923      	ldr	r3, [r4, #16]
 8001f92:	b363      	cbz	r3, 8001fee <__swbuf_r+0x82>
 8001f94:	6923      	ldr	r3, [r4, #16]
 8001f96:	6820      	ldr	r0, [r4, #0]
 8001f98:	1ac0      	subs	r0, r0, r3
 8001f9a:	6963      	ldr	r3, [r4, #20]
 8001f9c:	b2f6      	uxtb	r6, r6
 8001f9e:	4298      	cmp	r0, r3
 8001fa0:	4637      	mov	r7, r6
 8001fa2:	db04      	blt.n	8001fae <__swbuf_r+0x42>
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	4628      	mov	r0, r5
 8001fa8:	f000 f928 	bl	80021fc <_fflush_r>
 8001fac:	bb28      	cbnz	r0, 8001ffa <__swbuf_r+0x8e>
 8001fae:	68a3      	ldr	r3, [r4, #8]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	60a3      	str	r3, [r4, #8]
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	6022      	str	r2, [r4, #0]
 8001fba:	701e      	strb	r6, [r3, #0]
 8001fbc:	6963      	ldr	r3, [r4, #20]
 8001fbe:	3001      	adds	r0, #1
 8001fc0:	4298      	cmp	r0, r3
 8001fc2:	d004      	beq.n	8001fce <__swbuf_r+0x62>
 8001fc4:	89a3      	ldrh	r3, [r4, #12]
 8001fc6:	07db      	lsls	r3, r3, #31
 8001fc8:	d519      	bpl.n	8001ffe <__swbuf_r+0x92>
 8001fca:	2e0a      	cmp	r6, #10
 8001fcc:	d117      	bne.n	8001ffe <__swbuf_r+0x92>
 8001fce:	4621      	mov	r1, r4
 8001fd0:	4628      	mov	r0, r5
 8001fd2:	f000 f913 	bl	80021fc <_fflush_r>
 8001fd6:	b190      	cbz	r0, 8001ffe <__swbuf_r+0x92>
 8001fd8:	e00f      	b.n	8001ffa <__swbuf_r+0x8e>
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <__swbuf_r+0x9c>)
 8001fdc:	429c      	cmp	r4, r3
 8001fde:	d101      	bne.n	8001fe4 <__swbuf_r+0x78>
 8001fe0:	68ac      	ldr	r4, [r5, #8]
 8001fe2:	e7d0      	b.n	8001f86 <__swbuf_r+0x1a>
 8001fe4:	4b09      	ldr	r3, [pc, #36]	; (800200c <__swbuf_r+0xa0>)
 8001fe6:	429c      	cmp	r4, r3
 8001fe8:	bf08      	it	eq
 8001fea:	68ec      	ldreq	r4, [r5, #12]
 8001fec:	e7cb      	b.n	8001f86 <__swbuf_r+0x1a>
 8001fee:	4621      	mov	r1, r4
 8001ff0:	4628      	mov	r0, r5
 8001ff2:	f000 f80d 	bl	8002010 <__swsetup_r>
 8001ff6:	2800      	cmp	r0, #0
 8001ff8:	d0cc      	beq.n	8001f94 <__swbuf_r+0x28>
 8001ffa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001ffe:	4638      	mov	r0, r7
 8002000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002002:	bf00      	nop
 8002004:	08002e94 	.word	0x08002e94
 8002008:	08002eb4 	.word	0x08002eb4
 800200c:	08002e74 	.word	0x08002e74

08002010 <__swsetup_r>:
 8002010:	4b32      	ldr	r3, [pc, #200]	; (80020dc <__swsetup_r+0xcc>)
 8002012:	b570      	push	{r4, r5, r6, lr}
 8002014:	681d      	ldr	r5, [r3, #0]
 8002016:	4606      	mov	r6, r0
 8002018:	460c      	mov	r4, r1
 800201a:	b125      	cbz	r5, 8002026 <__swsetup_r+0x16>
 800201c:	69ab      	ldr	r3, [r5, #24]
 800201e:	b913      	cbnz	r3, 8002026 <__swsetup_r+0x16>
 8002020:	4628      	mov	r0, r5
 8002022:	f000 f955 	bl	80022d0 <__sinit>
 8002026:	4b2e      	ldr	r3, [pc, #184]	; (80020e0 <__swsetup_r+0xd0>)
 8002028:	429c      	cmp	r4, r3
 800202a:	d10f      	bne.n	800204c <__swsetup_r+0x3c>
 800202c:	686c      	ldr	r4, [r5, #4]
 800202e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002032:	b29a      	uxth	r2, r3
 8002034:	0715      	lsls	r5, r2, #28
 8002036:	d42c      	bmi.n	8002092 <__swsetup_r+0x82>
 8002038:	06d0      	lsls	r0, r2, #27
 800203a:	d411      	bmi.n	8002060 <__swsetup_r+0x50>
 800203c:	2209      	movs	r2, #9
 800203e:	6032      	str	r2, [r6, #0]
 8002040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002044:	81a3      	strh	r3, [r4, #12]
 8002046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800204a:	bd70      	pop	{r4, r5, r6, pc}
 800204c:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <__swsetup_r+0xd4>)
 800204e:	429c      	cmp	r4, r3
 8002050:	d101      	bne.n	8002056 <__swsetup_r+0x46>
 8002052:	68ac      	ldr	r4, [r5, #8]
 8002054:	e7eb      	b.n	800202e <__swsetup_r+0x1e>
 8002056:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <__swsetup_r+0xd8>)
 8002058:	429c      	cmp	r4, r3
 800205a:	bf08      	it	eq
 800205c:	68ec      	ldreq	r4, [r5, #12]
 800205e:	e7e6      	b.n	800202e <__swsetup_r+0x1e>
 8002060:	0751      	lsls	r1, r2, #29
 8002062:	d512      	bpl.n	800208a <__swsetup_r+0x7a>
 8002064:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002066:	b141      	cbz	r1, 800207a <__swsetup_r+0x6a>
 8002068:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800206c:	4299      	cmp	r1, r3
 800206e:	d002      	beq.n	8002076 <__swsetup_r+0x66>
 8002070:	4630      	mov	r0, r6
 8002072:	f000 fa23 	bl	80024bc <_free_r>
 8002076:	2300      	movs	r3, #0
 8002078:	6363      	str	r3, [r4, #52]	; 0x34
 800207a:	89a3      	ldrh	r3, [r4, #12]
 800207c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002080:	81a3      	strh	r3, [r4, #12]
 8002082:	2300      	movs	r3, #0
 8002084:	6063      	str	r3, [r4, #4]
 8002086:	6923      	ldr	r3, [r4, #16]
 8002088:	6023      	str	r3, [r4, #0]
 800208a:	89a3      	ldrh	r3, [r4, #12]
 800208c:	f043 0308 	orr.w	r3, r3, #8
 8002090:	81a3      	strh	r3, [r4, #12]
 8002092:	6923      	ldr	r3, [r4, #16]
 8002094:	b94b      	cbnz	r3, 80020aa <__swsetup_r+0x9a>
 8002096:	89a3      	ldrh	r3, [r4, #12]
 8002098:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800209c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020a0:	d003      	beq.n	80020aa <__swsetup_r+0x9a>
 80020a2:	4621      	mov	r1, r4
 80020a4:	4630      	mov	r0, r6
 80020a6:	f000 f9c1 	bl	800242c <__smakebuf_r>
 80020aa:	89a2      	ldrh	r2, [r4, #12]
 80020ac:	f012 0301 	ands.w	r3, r2, #1
 80020b0:	d00c      	beq.n	80020cc <__swsetup_r+0xbc>
 80020b2:	2300      	movs	r3, #0
 80020b4:	60a3      	str	r3, [r4, #8]
 80020b6:	6963      	ldr	r3, [r4, #20]
 80020b8:	425b      	negs	r3, r3
 80020ba:	61a3      	str	r3, [r4, #24]
 80020bc:	6923      	ldr	r3, [r4, #16]
 80020be:	b953      	cbnz	r3, 80020d6 <__swsetup_r+0xc6>
 80020c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80020c8:	d1ba      	bne.n	8002040 <__swsetup_r+0x30>
 80020ca:	bd70      	pop	{r4, r5, r6, pc}
 80020cc:	0792      	lsls	r2, r2, #30
 80020ce:	bf58      	it	pl
 80020d0:	6963      	ldrpl	r3, [r4, #20]
 80020d2:	60a3      	str	r3, [r4, #8]
 80020d4:	e7f2      	b.n	80020bc <__swsetup_r+0xac>
 80020d6:	2000      	movs	r0, #0
 80020d8:	e7f7      	b.n	80020ca <__swsetup_r+0xba>
 80020da:	bf00      	nop
 80020dc:	20000004 	.word	0x20000004
 80020e0:	08002e94 	.word	0x08002e94
 80020e4:	08002eb4 	.word	0x08002eb4
 80020e8:	08002e74 	.word	0x08002e74

080020ec <__sflush_r>:
 80020ec:	898a      	ldrh	r2, [r1, #12]
 80020ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020f2:	4605      	mov	r5, r0
 80020f4:	0710      	lsls	r0, r2, #28
 80020f6:	460c      	mov	r4, r1
 80020f8:	d45a      	bmi.n	80021b0 <__sflush_r+0xc4>
 80020fa:	684b      	ldr	r3, [r1, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	dc05      	bgt.n	800210c <__sflush_r+0x20>
 8002100:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002102:	2b00      	cmp	r3, #0
 8002104:	dc02      	bgt.n	800210c <__sflush_r+0x20>
 8002106:	2000      	movs	r0, #0
 8002108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800210c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800210e:	2e00      	cmp	r6, #0
 8002110:	d0f9      	beq.n	8002106 <__sflush_r+0x1a>
 8002112:	2300      	movs	r3, #0
 8002114:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002118:	682f      	ldr	r7, [r5, #0]
 800211a:	602b      	str	r3, [r5, #0]
 800211c:	d033      	beq.n	8002186 <__sflush_r+0x9a>
 800211e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002120:	89a3      	ldrh	r3, [r4, #12]
 8002122:	075a      	lsls	r2, r3, #29
 8002124:	d505      	bpl.n	8002132 <__sflush_r+0x46>
 8002126:	6863      	ldr	r3, [r4, #4]
 8002128:	1ac0      	subs	r0, r0, r3
 800212a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800212c:	b10b      	cbz	r3, 8002132 <__sflush_r+0x46>
 800212e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002130:	1ac0      	subs	r0, r0, r3
 8002132:	2300      	movs	r3, #0
 8002134:	4602      	mov	r2, r0
 8002136:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002138:	6a21      	ldr	r1, [r4, #32]
 800213a:	4628      	mov	r0, r5
 800213c:	47b0      	blx	r6
 800213e:	1c43      	adds	r3, r0, #1
 8002140:	89a3      	ldrh	r3, [r4, #12]
 8002142:	d106      	bne.n	8002152 <__sflush_r+0x66>
 8002144:	6829      	ldr	r1, [r5, #0]
 8002146:	291d      	cmp	r1, #29
 8002148:	d84b      	bhi.n	80021e2 <__sflush_r+0xf6>
 800214a:	4a2b      	ldr	r2, [pc, #172]	; (80021f8 <__sflush_r+0x10c>)
 800214c:	40ca      	lsrs	r2, r1
 800214e:	07d6      	lsls	r6, r2, #31
 8002150:	d547      	bpl.n	80021e2 <__sflush_r+0xf6>
 8002152:	2200      	movs	r2, #0
 8002154:	6062      	str	r2, [r4, #4]
 8002156:	04d9      	lsls	r1, r3, #19
 8002158:	6922      	ldr	r2, [r4, #16]
 800215a:	6022      	str	r2, [r4, #0]
 800215c:	d504      	bpl.n	8002168 <__sflush_r+0x7c>
 800215e:	1c42      	adds	r2, r0, #1
 8002160:	d101      	bne.n	8002166 <__sflush_r+0x7a>
 8002162:	682b      	ldr	r3, [r5, #0]
 8002164:	b903      	cbnz	r3, 8002168 <__sflush_r+0x7c>
 8002166:	6560      	str	r0, [r4, #84]	; 0x54
 8002168:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800216a:	602f      	str	r7, [r5, #0]
 800216c:	2900      	cmp	r1, #0
 800216e:	d0ca      	beq.n	8002106 <__sflush_r+0x1a>
 8002170:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002174:	4299      	cmp	r1, r3
 8002176:	d002      	beq.n	800217e <__sflush_r+0x92>
 8002178:	4628      	mov	r0, r5
 800217a:	f000 f99f 	bl	80024bc <_free_r>
 800217e:	2000      	movs	r0, #0
 8002180:	6360      	str	r0, [r4, #52]	; 0x34
 8002182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002186:	6a21      	ldr	r1, [r4, #32]
 8002188:	2301      	movs	r3, #1
 800218a:	4628      	mov	r0, r5
 800218c:	47b0      	blx	r6
 800218e:	1c41      	adds	r1, r0, #1
 8002190:	d1c6      	bne.n	8002120 <__sflush_r+0x34>
 8002192:	682b      	ldr	r3, [r5, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0c3      	beq.n	8002120 <__sflush_r+0x34>
 8002198:	2b1d      	cmp	r3, #29
 800219a:	d001      	beq.n	80021a0 <__sflush_r+0xb4>
 800219c:	2b16      	cmp	r3, #22
 800219e:	d101      	bne.n	80021a4 <__sflush_r+0xb8>
 80021a0:	602f      	str	r7, [r5, #0]
 80021a2:	e7b0      	b.n	8002106 <__sflush_r+0x1a>
 80021a4:	89a3      	ldrh	r3, [r4, #12]
 80021a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021aa:	81a3      	strh	r3, [r4, #12]
 80021ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021b0:	690f      	ldr	r7, [r1, #16]
 80021b2:	2f00      	cmp	r7, #0
 80021b4:	d0a7      	beq.n	8002106 <__sflush_r+0x1a>
 80021b6:	0793      	lsls	r3, r2, #30
 80021b8:	680e      	ldr	r6, [r1, #0]
 80021ba:	bf08      	it	eq
 80021bc:	694b      	ldreq	r3, [r1, #20]
 80021be:	600f      	str	r7, [r1, #0]
 80021c0:	bf18      	it	ne
 80021c2:	2300      	movne	r3, #0
 80021c4:	eba6 0807 	sub.w	r8, r6, r7
 80021c8:	608b      	str	r3, [r1, #8]
 80021ca:	f1b8 0f00 	cmp.w	r8, #0
 80021ce:	dd9a      	ble.n	8002106 <__sflush_r+0x1a>
 80021d0:	4643      	mov	r3, r8
 80021d2:	463a      	mov	r2, r7
 80021d4:	6a21      	ldr	r1, [r4, #32]
 80021d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80021d8:	4628      	mov	r0, r5
 80021da:	47b0      	blx	r6
 80021dc:	2800      	cmp	r0, #0
 80021de:	dc07      	bgt.n	80021f0 <__sflush_r+0x104>
 80021e0:	89a3      	ldrh	r3, [r4, #12]
 80021e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021e6:	81a3      	strh	r3, [r4, #12]
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021f0:	4407      	add	r7, r0
 80021f2:	eba8 0800 	sub.w	r8, r8, r0
 80021f6:	e7e8      	b.n	80021ca <__sflush_r+0xde>
 80021f8:	20400001 	.word	0x20400001

080021fc <_fflush_r>:
 80021fc:	b538      	push	{r3, r4, r5, lr}
 80021fe:	690b      	ldr	r3, [r1, #16]
 8002200:	4605      	mov	r5, r0
 8002202:	460c      	mov	r4, r1
 8002204:	b1db      	cbz	r3, 800223e <_fflush_r+0x42>
 8002206:	b118      	cbz	r0, 8002210 <_fflush_r+0x14>
 8002208:	6983      	ldr	r3, [r0, #24]
 800220a:	b90b      	cbnz	r3, 8002210 <_fflush_r+0x14>
 800220c:	f000 f860 	bl	80022d0 <__sinit>
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <_fflush_r+0x48>)
 8002212:	429c      	cmp	r4, r3
 8002214:	d109      	bne.n	800222a <_fflush_r+0x2e>
 8002216:	686c      	ldr	r4, [r5, #4]
 8002218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800221c:	b17b      	cbz	r3, 800223e <_fflush_r+0x42>
 800221e:	4621      	mov	r1, r4
 8002220:	4628      	mov	r0, r5
 8002222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002226:	f7ff bf61 	b.w	80020ec <__sflush_r>
 800222a:	4b07      	ldr	r3, [pc, #28]	; (8002248 <_fflush_r+0x4c>)
 800222c:	429c      	cmp	r4, r3
 800222e:	d101      	bne.n	8002234 <_fflush_r+0x38>
 8002230:	68ac      	ldr	r4, [r5, #8]
 8002232:	e7f1      	b.n	8002218 <_fflush_r+0x1c>
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <_fflush_r+0x50>)
 8002236:	429c      	cmp	r4, r3
 8002238:	bf08      	it	eq
 800223a:	68ec      	ldreq	r4, [r5, #12]
 800223c:	e7ec      	b.n	8002218 <_fflush_r+0x1c>
 800223e:	2000      	movs	r0, #0
 8002240:	bd38      	pop	{r3, r4, r5, pc}
 8002242:	bf00      	nop
 8002244:	08002e94 	.word	0x08002e94
 8002248:	08002eb4 	.word	0x08002eb4
 800224c:	08002e74 	.word	0x08002e74

08002250 <_cleanup_r>:
 8002250:	4901      	ldr	r1, [pc, #4]	; (8002258 <_cleanup_r+0x8>)
 8002252:	f000 b8a9 	b.w	80023a8 <_fwalk_reent>
 8002256:	bf00      	nop
 8002258:	080021fd 	.word	0x080021fd

0800225c <std.isra.0>:
 800225c:	2300      	movs	r3, #0
 800225e:	b510      	push	{r4, lr}
 8002260:	4604      	mov	r4, r0
 8002262:	6003      	str	r3, [r0, #0]
 8002264:	6043      	str	r3, [r0, #4]
 8002266:	6083      	str	r3, [r0, #8]
 8002268:	8181      	strh	r1, [r0, #12]
 800226a:	6643      	str	r3, [r0, #100]	; 0x64
 800226c:	81c2      	strh	r2, [r0, #14]
 800226e:	6103      	str	r3, [r0, #16]
 8002270:	6143      	str	r3, [r0, #20]
 8002272:	6183      	str	r3, [r0, #24]
 8002274:	4619      	mov	r1, r3
 8002276:	2208      	movs	r2, #8
 8002278:	305c      	adds	r0, #92	; 0x5c
 800227a:	f000 f917 	bl	80024ac <memset>
 800227e:	4b05      	ldr	r3, [pc, #20]	; (8002294 <std.isra.0+0x38>)
 8002280:	6263      	str	r3, [r4, #36]	; 0x24
 8002282:	4b05      	ldr	r3, [pc, #20]	; (8002298 <std.isra.0+0x3c>)
 8002284:	62a3      	str	r3, [r4, #40]	; 0x28
 8002286:	4b05      	ldr	r3, [pc, #20]	; (800229c <std.isra.0+0x40>)
 8002288:	62e3      	str	r3, [r4, #44]	; 0x2c
 800228a:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <std.isra.0+0x44>)
 800228c:	6224      	str	r4, [r4, #32]
 800228e:	6323      	str	r3, [r4, #48]	; 0x30
 8002290:	bd10      	pop	{r4, pc}
 8002292:	bf00      	nop
 8002294:	08002be1 	.word	0x08002be1
 8002298:	08002c03 	.word	0x08002c03
 800229c:	08002c3b 	.word	0x08002c3b
 80022a0:	08002c5f 	.word	0x08002c5f

080022a4 <__sfmoreglue>:
 80022a4:	b570      	push	{r4, r5, r6, lr}
 80022a6:	1e4a      	subs	r2, r1, #1
 80022a8:	2568      	movs	r5, #104	; 0x68
 80022aa:	4355      	muls	r5, r2
 80022ac:	460e      	mov	r6, r1
 80022ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80022b2:	f000 f951 	bl	8002558 <_malloc_r>
 80022b6:	4604      	mov	r4, r0
 80022b8:	b140      	cbz	r0, 80022cc <__sfmoreglue+0x28>
 80022ba:	2100      	movs	r1, #0
 80022bc:	e880 0042 	stmia.w	r0, {r1, r6}
 80022c0:	300c      	adds	r0, #12
 80022c2:	60a0      	str	r0, [r4, #8]
 80022c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80022c8:	f000 f8f0 	bl	80024ac <memset>
 80022cc:	4620      	mov	r0, r4
 80022ce:	bd70      	pop	{r4, r5, r6, pc}

080022d0 <__sinit>:
 80022d0:	6983      	ldr	r3, [r0, #24]
 80022d2:	b510      	push	{r4, lr}
 80022d4:	4604      	mov	r4, r0
 80022d6:	bb33      	cbnz	r3, 8002326 <__sinit+0x56>
 80022d8:	6483      	str	r3, [r0, #72]	; 0x48
 80022da:	64c3      	str	r3, [r0, #76]	; 0x4c
 80022dc:	6503      	str	r3, [r0, #80]	; 0x50
 80022de:	4b12      	ldr	r3, [pc, #72]	; (8002328 <__sinit+0x58>)
 80022e0:	4a12      	ldr	r2, [pc, #72]	; (800232c <__sinit+0x5c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6282      	str	r2, [r0, #40]	; 0x28
 80022e6:	4298      	cmp	r0, r3
 80022e8:	bf04      	itt	eq
 80022ea:	2301      	moveq	r3, #1
 80022ec:	6183      	streq	r3, [r0, #24]
 80022ee:	f000 f81f 	bl	8002330 <__sfp>
 80022f2:	6060      	str	r0, [r4, #4]
 80022f4:	4620      	mov	r0, r4
 80022f6:	f000 f81b 	bl	8002330 <__sfp>
 80022fa:	60a0      	str	r0, [r4, #8]
 80022fc:	4620      	mov	r0, r4
 80022fe:	f000 f817 	bl	8002330 <__sfp>
 8002302:	2200      	movs	r2, #0
 8002304:	60e0      	str	r0, [r4, #12]
 8002306:	2104      	movs	r1, #4
 8002308:	6860      	ldr	r0, [r4, #4]
 800230a:	f7ff ffa7 	bl	800225c <std.isra.0>
 800230e:	2201      	movs	r2, #1
 8002310:	2109      	movs	r1, #9
 8002312:	68a0      	ldr	r0, [r4, #8]
 8002314:	f7ff ffa2 	bl	800225c <std.isra.0>
 8002318:	2202      	movs	r2, #2
 800231a:	2112      	movs	r1, #18
 800231c:	68e0      	ldr	r0, [r4, #12]
 800231e:	f7ff ff9d 	bl	800225c <std.isra.0>
 8002322:	2301      	movs	r3, #1
 8002324:	61a3      	str	r3, [r4, #24]
 8002326:	bd10      	pop	{r4, pc}
 8002328:	08002ed4 	.word	0x08002ed4
 800232c:	08002251 	.word	0x08002251

08002330 <__sfp>:
 8002330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002332:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <__sfp+0x74>)
 8002334:	681e      	ldr	r6, [r3, #0]
 8002336:	69b3      	ldr	r3, [r6, #24]
 8002338:	4607      	mov	r7, r0
 800233a:	b913      	cbnz	r3, 8002342 <__sfp+0x12>
 800233c:	4630      	mov	r0, r6
 800233e:	f7ff ffc7 	bl	80022d0 <__sinit>
 8002342:	3648      	adds	r6, #72	; 0x48
 8002344:	68b4      	ldr	r4, [r6, #8]
 8002346:	6873      	ldr	r3, [r6, #4]
 8002348:	3b01      	subs	r3, #1
 800234a:	d503      	bpl.n	8002354 <__sfp+0x24>
 800234c:	6833      	ldr	r3, [r6, #0]
 800234e:	b133      	cbz	r3, 800235e <__sfp+0x2e>
 8002350:	6836      	ldr	r6, [r6, #0]
 8002352:	e7f7      	b.n	8002344 <__sfp+0x14>
 8002354:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002358:	b16d      	cbz	r5, 8002376 <__sfp+0x46>
 800235a:	3468      	adds	r4, #104	; 0x68
 800235c:	e7f4      	b.n	8002348 <__sfp+0x18>
 800235e:	2104      	movs	r1, #4
 8002360:	4638      	mov	r0, r7
 8002362:	f7ff ff9f 	bl	80022a4 <__sfmoreglue>
 8002366:	6030      	str	r0, [r6, #0]
 8002368:	2800      	cmp	r0, #0
 800236a:	d1f1      	bne.n	8002350 <__sfp+0x20>
 800236c:	230c      	movs	r3, #12
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	4604      	mov	r4, r0
 8002372:	4620      	mov	r0, r4
 8002374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002376:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800237a:	81e3      	strh	r3, [r4, #14]
 800237c:	2301      	movs	r3, #1
 800237e:	81a3      	strh	r3, [r4, #12]
 8002380:	6665      	str	r5, [r4, #100]	; 0x64
 8002382:	6025      	str	r5, [r4, #0]
 8002384:	60a5      	str	r5, [r4, #8]
 8002386:	6065      	str	r5, [r4, #4]
 8002388:	6125      	str	r5, [r4, #16]
 800238a:	6165      	str	r5, [r4, #20]
 800238c:	61a5      	str	r5, [r4, #24]
 800238e:	2208      	movs	r2, #8
 8002390:	4629      	mov	r1, r5
 8002392:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002396:	f000 f889 	bl	80024ac <memset>
 800239a:	6365      	str	r5, [r4, #52]	; 0x34
 800239c:	63a5      	str	r5, [r4, #56]	; 0x38
 800239e:	64a5      	str	r5, [r4, #72]	; 0x48
 80023a0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80023a2:	e7e6      	b.n	8002372 <__sfp+0x42>
 80023a4:	08002ed4 	.word	0x08002ed4

080023a8 <_fwalk_reent>:
 80023a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023ac:	4680      	mov	r8, r0
 80023ae:	4689      	mov	r9, r1
 80023b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80023b4:	2600      	movs	r6, #0
 80023b6:	b914      	cbnz	r4, 80023be <_fwalk_reent+0x16>
 80023b8:	4630      	mov	r0, r6
 80023ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023be:	68a5      	ldr	r5, [r4, #8]
 80023c0:	6867      	ldr	r7, [r4, #4]
 80023c2:	3f01      	subs	r7, #1
 80023c4:	d501      	bpl.n	80023ca <_fwalk_reent+0x22>
 80023c6:	6824      	ldr	r4, [r4, #0]
 80023c8:	e7f5      	b.n	80023b6 <_fwalk_reent+0xe>
 80023ca:	89ab      	ldrh	r3, [r5, #12]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d907      	bls.n	80023e0 <_fwalk_reent+0x38>
 80023d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80023d4:	3301      	adds	r3, #1
 80023d6:	d003      	beq.n	80023e0 <_fwalk_reent+0x38>
 80023d8:	4629      	mov	r1, r5
 80023da:	4640      	mov	r0, r8
 80023dc:	47c8      	blx	r9
 80023de:	4306      	orrs	r6, r0
 80023e0:	3568      	adds	r5, #104	; 0x68
 80023e2:	e7ee      	b.n	80023c2 <_fwalk_reent+0x1a>

080023e4 <__swhatbuf_r>:
 80023e4:	b570      	push	{r4, r5, r6, lr}
 80023e6:	460e      	mov	r6, r1
 80023e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023ec:	2900      	cmp	r1, #0
 80023ee:	b090      	sub	sp, #64	; 0x40
 80023f0:	4614      	mov	r4, r2
 80023f2:	461d      	mov	r5, r3
 80023f4:	da07      	bge.n	8002406 <__swhatbuf_r+0x22>
 80023f6:	2300      	movs	r3, #0
 80023f8:	602b      	str	r3, [r5, #0]
 80023fa:	89b3      	ldrh	r3, [r6, #12]
 80023fc:	061a      	lsls	r2, r3, #24
 80023fe:	d410      	bmi.n	8002422 <__swhatbuf_r+0x3e>
 8002400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002404:	e00e      	b.n	8002424 <__swhatbuf_r+0x40>
 8002406:	aa01      	add	r2, sp, #4
 8002408:	f000 fc50 	bl	8002cac <_fstat_r>
 800240c:	2800      	cmp	r0, #0
 800240e:	dbf2      	blt.n	80023f6 <__swhatbuf_r+0x12>
 8002410:	9a02      	ldr	r2, [sp, #8]
 8002412:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002416:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800241a:	425a      	negs	r2, r3
 800241c:	415a      	adcs	r2, r3
 800241e:	602a      	str	r2, [r5, #0]
 8002420:	e7ee      	b.n	8002400 <__swhatbuf_r+0x1c>
 8002422:	2340      	movs	r3, #64	; 0x40
 8002424:	2000      	movs	r0, #0
 8002426:	6023      	str	r3, [r4, #0]
 8002428:	b010      	add	sp, #64	; 0x40
 800242a:	bd70      	pop	{r4, r5, r6, pc}

0800242c <__smakebuf_r>:
 800242c:	898b      	ldrh	r3, [r1, #12]
 800242e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002430:	079d      	lsls	r5, r3, #30
 8002432:	4606      	mov	r6, r0
 8002434:	460c      	mov	r4, r1
 8002436:	d507      	bpl.n	8002448 <__smakebuf_r+0x1c>
 8002438:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800243c:	6023      	str	r3, [r4, #0]
 800243e:	6123      	str	r3, [r4, #16]
 8002440:	2301      	movs	r3, #1
 8002442:	6163      	str	r3, [r4, #20]
 8002444:	b002      	add	sp, #8
 8002446:	bd70      	pop	{r4, r5, r6, pc}
 8002448:	ab01      	add	r3, sp, #4
 800244a:	466a      	mov	r2, sp
 800244c:	f7ff ffca 	bl	80023e4 <__swhatbuf_r>
 8002450:	9900      	ldr	r1, [sp, #0]
 8002452:	4605      	mov	r5, r0
 8002454:	4630      	mov	r0, r6
 8002456:	f000 f87f 	bl	8002558 <_malloc_r>
 800245a:	b948      	cbnz	r0, 8002470 <__smakebuf_r+0x44>
 800245c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002460:	059a      	lsls	r2, r3, #22
 8002462:	d4ef      	bmi.n	8002444 <__smakebuf_r+0x18>
 8002464:	f023 0303 	bic.w	r3, r3, #3
 8002468:	f043 0302 	orr.w	r3, r3, #2
 800246c:	81a3      	strh	r3, [r4, #12]
 800246e:	e7e3      	b.n	8002438 <__smakebuf_r+0xc>
 8002470:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <__smakebuf_r+0x7c>)
 8002472:	62b3      	str	r3, [r6, #40]	; 0x28
 8002474:	89a3      	ldrh	r3, [r4, #12]
 8002476:	6020      	str	r0, [r4, #0]
 8002478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800247c:	81a3      	strh	r3, [r4, #12]
 800247e:	9b00      	ldr	r3, [sp, #0]
 8002480:	6163      	str	r3, [r4, #20]
 8002482:	9b01      	ldr	r3, [sp, #4]
 8002484:	6120      	str	r0, [r4, #16]
 8002486:	b15b      	cbz	r3, 80024a0 <__smakebuf_r+0x74>
 8002488:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800248c:	4630      	mov	r0, r6
 800248e:	f000 fc1f 	bl	8002cd0 <_isatty_r>
 8002492:	b128      	cbz	r0, 80024a0 <__smakebuf_r+0x74>
 8002494:	89a3      	ldrh	r3, [r4, #12]
 8002496:	f023 0303 	bic.w	r3, r3, #3
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	81a3      	strh	r3, [r4, #12]
 80024a0:	89a3      	ldrh	r3, [r4, #12]
 80024a2:	431d      	orrs	r5, r3
 80024a4:	81a5      	strh	r5, [r4, #12]
 80024a6:	e7cd      	b.n	8002444 <__smakebuf_r+0x18>
 80024a8:	08002251 	.word	0x08002251

080024ac <memset>:
 80024ac:	4402      	add	r2, r0
 80024ae:	4603      	mov	r3, r0
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d100      	bne.n	80024b6 <memset+0xa>
 80024b4:	4770      	bx	lr
 80024b6:	f803 1b01 	strb.w	r1, [r3], #1
 80024ba:	e7f9      	b.n	80024b0 <memset+0x4>

080024bc <_free_r>:
 80024bc:	b538      	push	{r3, r4, r5, lr}
 80024be:	4605      	mov	r5, r0
 80024c0:	2900      	cmp	r1, #0
 80024c2:	d045      	beq.n	8002550 <_free_r+0x94>
 80024c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024c8:	1f0c      	subs	r4, r1, #4
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	bfb8      	it	lt
 80024ce:	18e4      	addlt	r4, r4, r3
 80024d0:	f000 fc20 	bl	8002d14 <__malloc_lock>
 80024d4:	4a1f      	ldr	r2, [pc, #124]	; (8002554 <_free_r+0x98>)
 80024d6:	6813      	ldr	r3, [r2, #0]
 80024d8:	4610      	mov	r0, r2
 80024da:	b933      	cbnz	r3, 80024ea <_free_r+0x2e>
 80024dc:	6063      	str	r3, [r4, #4]
 80024de:	6014      	str	r4, [r2, #0]
 80024e0:	4628      	mov	r0, r5
 80024e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024e6:	f000 bc16 	b.w	8002d16 <__malloc_unlock>
 80024ea:	42a3      	cmp	r3, r4
 80024ec:	d90c      	bls.n	8002508 <_free_r+0x4c>
 80024ee:	6821      	ldr	r1, [r4, #0]
 80024f0:	1862      	adds	r2, r4, r1
 80024f2:	4293      	cmp	r3, r2
 80024f4:	bf04      	itt	eq
 80024f6:	681a      	ldreq	r2, [r3, #0]
 80024f8:	685b      	ldreq	r3, [r3, #4]
 80024fa:	6063      	str	r3, [r4, #4]
 80024fc:	bf04      	itt	eq
 80024fe:	1852      	addeq	r2, r2, r1
 8002500:	6022      	streq	r2, [r4, #0]
 8002502:	6004      	str	r4, [r0, #0]
 8002504:	e7ec      	b.n	80024e0 <_free_r+0x24>
 8002506:	4613      	mov	r3, r2
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	b10a      	cbz	r2, 8002510 <_free_r+0x54>
 800250c:	42a2      	cmp	r2, r4
 800250e:	d9fa      	bls.n	8002506 <_free_r+0x4a>
 8002510:	6819      	ldr	r1, [r3, #0]
 8002512:	1858      	adds	r0, r3, r1
 8002514:	42a0      	cmp	r0, r4
 8002516:	d10b      	bne.n	8002530 <_free_r+0x74>
 8002518:	6820      	ldr	r0, [r4, #0]
 800251a:	4401      	add	r1, r0
 800251c:	1858      	adds	r0, r3, r1
 800251e:	4282      	cmp	r2, r0
 8002520:	6019      	str	r1, [r3, #0]
 8002522:	d1dd      	bne.n	80024e0 <_free_r+0x24>
 8002524:	6810      	ldr	r0, [r2, #0]
 8002526:	6852      	ldr	r2, [r2, #4]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	4401      	add	r1, r0
 800252c:	6019      	str	r1, [r3, #0]
 800252e:	e7d7      	b.n	80024e0 <_free_r+0x24>
 8002530:	d902      	bls.n	8002538 <_free_r+0x7c>
 8002532:	230c      	movs	r3, #12
 8002534:	602b      	str	r3, [r5, #0]
 8002536:	e7d3      	b.n	80024e0 <_free_r+0x24>
 8002538:	6820      	ldr	r0, [r4, #0]
 800253a:	1821      	adds	r1, r4, r0
 800253c:	428a      	cmp	r2, r1
 800253e:	bf04      	itt	eq
 8002540:	6811      	ldreq	r1, [r2, #0]
 8002542:	6852      	ldreq	r2, [r2, #4]
 8002544:	6062      	str	r2, [r4, #4]
 8002546:	bf04      	itt	eq
 8002548:	1809      	addeq	r1, r1, r0
 800254a:	6021      	streq	r1, [r4, #0]
 800254c:	605c      	str	r4, [r3, #4]
 800254e:	e7c7      	b.n	80024e0 <_free_r+0x24>
 8002550:	bd38      	pop	{r3, r4, r5, pc}
 8002552:	bf00      	nop
 8002554:	20000088 	.word	0x20000088

08002558 <_malloc_r>:
 8002558:	b570      	push	{r4, r5, r6, lr}
 800255a:	1ccd      	adds	r5, r1, #3
 800255c:	f025 0503 	bic.w	r5, r5, #3
 8002560:	3508      	adds	r5, #8
 8002562:	2d0c      	cmp	r5, #12
 8002564:	bf38      	it	cc
 8002566:	250c      	movcc	r5, #12
 8002568:	2d00      	cmp	r5, #0
 800256a:	4606      	mov	r6, r0
 800256c:	db01      	blt.n	8002572 <_malloc_r+0x1a>
 800256e:	42a9      	cmp	r1, r5
 8002570:	d903      	bls.n	800257a <_malloc_r+0x22>
 8002572:	230c      	movs	r3, #12
 8002574:	6033      	str	r3, [r6, #0]
 8002576:	2000      	movs	r0, #0
 8002578:	bd70      	pop	{r4, r5, r6, pc}
 800257a:	f000 fbcb 	bl	8002d14 <__malloc_lock>
 800257e:	4a23      	ldr	r2, [pc, #140]	; (800260c <_malloc_r+0xb4>)
 8002580:	6814      	ldr	r4, [r2, #0]
 8002582:	4621      	mov	r1, r4
 8002584:	b991      	cbnz	r1, 80025ac <_malloc_r+0x54>
 8002586:	4c22      	ldr	r4, [pc, #136]	; (8002610 <_malloc_r+0xb8>)
 8002588:	6823      	ldr	r3, [r4, #0]
 800258a:	b91b      	cbnz	r3, 8002594 <_malloc_r+0x3c>
 800258c:	4630      	mov	r0, r6
 800258e:	f000 fb17 	bl	8002bc0 <_sbrk_r>
 8002592:	6020      	str	r0, [r4, #0]
 8002594:	4629      	mov	r1, r5
 8002596:	4630      	mov	r0, r6
 8002598:	f000 fb12 	bl	8002bc0 <_sbrk_r>
 800259c:	1c43      	adds	r3, r0, #1
 800259e:	d126      	bne.n	80025ee <_malloc_r+0x96>
 80025a0:	230c      	movs	r3, #12
 80025a2:	6033      	str	r3, [r6, #0]
 80025a4:	4630      	mov	r0, r6
 80025a6:	f000 fbb6 	bl	8002d16 <__malloc_unlock>
 80025aa:	e7e4      	b.n	8002576 <_malloc_r+0x1e>
 80025ac:	680b      	ldr	r3, [r1, #0]
 80025ae:	1b5b      	subs	r3, r3, r5
 80025b0:	d41a      	bmi.n	80025e8 <_malloc_r+0x90>
 80025b2:	2b0b      	cmp	r3, #11
 80025b4:	d90f      	bls.n	80025d6 <_malloc_r+0x7e>
 80025b6:	600b      	str	r3, [r1, #0]
 80025b8:	50cd      	str	r5, [r1, r3]
 80025ba:	18cc      	adds	r4, r1, r3
 80025bc:	4630      	mov	r0, r6
 80025be:	f000 fbaa 	bl	8002d16 <__malloc_unlock>
 80025c2:	f104 000b 	add.w	r0, r4, #11
 80025c6:	1d23      	adds	r3, r4, #4
 80025c8:	f020 0007 	bic.w	r0, r0, #7
 80025cc:	1ac3      	subs	r3, r0, r3
 80025ce:	d01b      	beq.n	8002608 <_malloc_r+0xb0>
 80025d0:	425a      	negs	r2, r3
 80025d2:	50e2      	str	r2, [r4, r3]
 80025d4:	bd70      	pop	{r4, r5, r6, pc}
 80025d6:	428c      	cmp	r4, r1
 80025d8:	bf0d      	iteet	eq
 80025da:	6863      	ldreq	r3, [r4, #4]
 80025dc:	684b      	ldrne	r3, [r1, #4]
 80025de:	6063      	strne	r3, [r4, #4]
 80025e0:	6013      	streq	r3, [r2, #0]
 80025e2:	bf18      	it	ne
 80025e4:	460c      	movne	r4, r1
 80025e6:	e7e9      	b.n	80025bc <_malloc_r+0x64>
 80025e8:	460c      	mov	r4, r1
 80025ea:	6849      	ldr	r1, [r1, #4]
 80025ec:	e7ca      	b.n	8002584 <_malloc_r+0x2c>
 80025ee:	1cc4      	adds	r4, r0, #3
 80025f0:	f024 0403 	bic.w	r4, r4, #3
 80025f4:	42a0      	cmp	r0, r4
 80025f6:	d005      	beq.n	8002604 <_malloc_r+0xac>
 80025f8:	1a21      	subs	r1, r4, r0
 80025fa:	4630      	mov	r0, r6
 80025fc:	f000 fae0 	bl	8002bc0 <_sbrk_r>
 8002600:	3001      	adds	r0, #1
 8002602:	d0cd      	beq.n	80025a0 <_malloc_r+0x48>
 8002604:	6025      	str	r5, [r4, #0]
 8002606:	e7d9      	b.n	80025bc <_malloc_r+0x64>
 8002608:	bd70      	pop	{r4, r5, r6, pc}
 800260a:	bf00      	nop
 800260c:	20000088 	.word	0x20000088
 8002610:	2000008c 	.word	0x2000008c

08002614 <__sfputc_r>:
 8002614:	6893      	ldr	r3, [r2, #8]
 8002616:	3b01      	subs	r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	b410      	push	{r4}
 800261c:	6093      	str	r3, [r2, #8]
 800261e:	da09      	bge.n	8002634 <__sfputc_r+0x20>
 8002620:	6994      	ldr	r4, [r2, #24]
 8002622:	42a3      	cmp	r3, r4
 8002624:	db02      	blt.n	800262c <__sfputc_r+0x18>
 8002626:	b2cb      	uxtb	r3, r1
 8002628:	2b0a      	cmp	r3, #10
 800262a:	d103      	bne.n	8002634 <__sfputc_r+0x20>
 800262c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002630:	f7ff bc9c 	b.w	8001f6c <__swbuf_r>
 8002634:	6813      	ldr	r3, [r2, #0]
 8002636:	1c58      	adds	r0, r3, #1
 8002638:	6010      	str	r0, [r2, #0]
 800263a:	7019      	strb	r1, [r3, #0]
 800263c:	b2c8      	uxtb	r0, r1
 800263e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002642:	4770      	bx	lr

08002644 <__sfputs_r>:
 8002644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002646:	4606      	mov	r6, r0
 8002648:	460f      	mov	r7, r1
 800264a:	4614      	mov	r4, r2
 800264c:	18d5      	adds	r5, r2, r3
 800264e:	42ac      	cmp	r4, r5
 8002650:	d101      	bne.n	8002656 <__sfputs_r+0x12>
 8002652:	2000      	movs	r0, #0
 8002654:	e007      	b.n	8002666 <__sfputs_r+0x22>
 8002656:	463a      	mov	r2, r7
 8002658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800265c:	4630      	mov	r0, r6
 800265e:	f7ff ffd9 	bl	8002614 <__sfputc_r>
 8002662:	1c43      	adds	r3, r0, #1
 8002664:	d1f3      	bne.n	800264e <__sfputs_r+0xa>
 8002666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002668 <_vfiprintf_r>:
 8002668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800266c:	b09d      	sub	sp, #116	; 0x74
 800266e:	460c      	mov	r4, r1
 8002670:	4617      	mov	r7, r2
 8002672:	9303      	str	r3, [sp, #12]
 8002674:	4606      	mov	r6, r0
 8002676:	b118      	cbz	r0, 8002680 <_vfiprintf_r+0x18>
 8002678:	6983      	ldr	r3, [r0, #24]
 800267a:	b90b      	cbnz	r3, 8002680 <_vfiprintf_r+0x18>
 800267c:	f7ff fe28 	bl	80022d0 <__sinit>
 8002680:	4b7c      	ldr	r3, [pc, #496]	; (8002874 <_vfiprintf_r+0x20c>)
 8002682:	429c      	cmp	r4, r3
 8002684:	d157      	bne.n	8002736 <_vfiprintf_r+0xce>
 8002686:	6874      	ldr	r4, [r6, #4]
 8002688:	89a3      	ldrh	r3, [r4, #12]
 800268a:	0718      	lsls	r0, r3, #28
 800268c:	d55d      	bpl.n	800274a <_vfiprintf_r+0xe2>
 800268e:	6923      	ldr	r3, [r4, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d05a      	beq.n	800274a <_vfiprintf_r+0xe2>
 8002694:	2300      	movs	r3, #0
 8002696:	9309      	str	r3, [sp, #36]	; 0x24
 8002698:	2320      	movs	r3, #32
 800269a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800269e:	2330      	movs	r3, #48	; 0x30
 80026a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80026a4:	f04f 0b01 	mov.w	fp, #1
 80026a8:	46b8      	mov	r8, r7
 80026aa:	4645      	mov	r5, r8
 80026ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d155      	bne.n	8002760 <_vfiprintf_r+0xf8>
 80026b4:	ebb8 0a07 	subs.w	sl, r8, r7
 80026b8:	d00b      	beq.n	80026d2 <_vfiprintf_r+0x6a>
 80026ba:	4653      	mov	r3, sl
 80026bc:	463a      	mov	r2, r7
 80026be:	4621      	mov	r1, r4
 80026c0:	4630      	mov	r0, r6
 80026c2:	f7ff ffbf 	bl	8002644 <__sfputs_r>
 80026c6:	3001      	adds	r0, #1
 80026c8:	f000 80c4 	beq.w	8002854 <_vfiprintf_r+0x1ec>
 80026cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026ce:	4453      	add	r3, sl
 80026d0:	9309      	str	r3, [sp, #36]	; 0x24
 80026d2:	f898 3000 	ldrb.w	r3, [r8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80bc 	beq.w	8002854 <_vfiprintf_r+0x1ec>
 80026dc:	2300      	movs	r3, #0
 80026de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026e2:	9304      	str	r3, [sp, #16]
 80026e4:	9307      	str	r3, [sp, #28]
 80026e6:	9205      	str	r2, [sp, #20]
 80026e8:	9306      	str	r3, [sp, #24]
 80026ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80026ee:	931a      	str	r3, [sp, #104]	; 0x68
 80026f0:	2205      	movs	r2, #5
 80026f2:	7829      	ldrb	r1, [r5, #0]
 80026f4:	4860      	ldr	r0, [pc, #384]	; (8002878 <_vfiprintf_r+0x210>)
 80026f6:	f7fd fd73 	bl	80001e0 <memchr>
 80026fa:	f105 0801 	add.w	r8, r5, #1
 80026fe:	9b04      	ldr	r3, [sp, #16]
 8002700:	2800      	cmp	r0, #0
 8002702:	d131      	bne.n	8002768 <_vfiprintf_r+0x100>
 8002704:	06d9      	lsls	r1, r3, #27
 8002706:	bf44      	itt	mi
 8002708:	2220      	movmi	r2, #32
 800270a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800270e:	071a      	lsls	r2, r3, #28
 8002710:	bf44      	itt	mi
 8002712:	222b      	movmi	r2, #43	; 0x2b
 8002714:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002718:	782a      	ldrb	r2, [r5, #0]
 800271a:	2a2a      	cmp	r2, #42	; 0x2a
 800271c:	d02c      	beq.n	8002778 <_vfiprintf_r+0x110>
 800271e:	9a07      	ldr	r2, [sp, #28]
 8002720:	2100      	movs	r1, #0
 8002722:	200a      	movs	r0, #10
 8002724:	46a8      	mov	r8, r5
 8002726:	3501      	adds	r5, #1
 8002728:	f898 3000 	ldrb.w	r3, [r8]
 800272c:	3b30      	subs	r3, #48	; 0x30
 800272e:	2b09      	cmp	r3, #9
 8002730:	d96d      	bls.n	800280e <_vfiprintf_r+0x1a6>
 8002732:	b371      	cbz	r1, 8002792 <_vfiprintf_r+0x12a>
 8002734:	e026      	b.n	8002784 <_vfiprintf_r+0x11c>
 8002736:	4b51      	ldr	r3, [pc, #324]	; (800287c <_vfiprintf_r+0x214>)
 8002738:	429c      	cmp	r4, r3
 800273a:	d101      	bne.n	8002740 <_vfiprintf_r+0xd8>
 800273c:	68b4      	ldr	r4, [r6, #8]
 800273e:	e7a3      	b.n	8002688 <_vfiprintf_r+0x20>
 8002740:	4b4f      	ldr	r3, [pc, #316]	; (8002880 <_vfiprintf_r+0x218>)
 8002742:	429c      	cmp	r4, r3
 8002744:	bf08      	it	eq
 8002746:	68f4      	ldreq	r4, [r6, #12]
 8002748:	e79e      	b.n	8002688 <_vfiprintf_r+0x20>
 800274a:	4621      	mov	r1, r4
 800274c:	4630      	mov	r0, r6
 800274e:	f7ff fc5f 	bl	8002010 <__swsetup_r>
 8002752:	2800      	cmp	r0, #0
 8002754:	d09e      	beq.n	8002694 <_vfiprintf_r+0x2c>
 8002756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800275a:	b01d      	add	sp, #116	; 0x74
 800275c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002760:	2b25      	cmp	r3, #37	; 0x25
 8002762:	d0a7      	beq.n	80026b4 <_vfiprintf_r+0x4c>
 8002764:	46a8      	mov	r8, r5
 8002766:	e7a0      	b.n	80026aa <_vfiprintf_r+0x42>
 8002768:	4a43      	ldr	r2, [pc, #268]	; (8002878 <_vfiprintf_r+0x210>)
 800276a:	1a80      	subs	r0, r0, r2
 800276c:	fa0b f000 	lsl.w	r0, fp, r0
 8002770:	4318      	orrs	r0, r3
 8002772:	9004      	str	r0, [sp, #16]
 8002774:	4645      	mov	r5, r8
 8002776:	e7bb      	b.n	80026f0 <_vfiprintf_r+0x88>
 8002778:	9a03      	ldr	r2, [sp, #12]
 800277a:	1d11      	adds	r1, r2, #4
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	9103      	str	r1, [sp, #12]
 8002780:	2a00      	cmp	r2, #0
 8002782:	db01      	blt.n	8002788 <_vfiprintf_r+0x120>
 8002784:	9207      	str	r2, [sp, #28]
 8002786:	e004      	b.n	8002792 <_vfiprintf_r+0x12a>
 8002788:	4252      	negs	r2, r2
 800278a:	f043 0302 	orr.w	r3, r3, #2
 800278e:	9207      	str	r2, [sp, #28]
 8002790:	9304      	str	r3, [sp, #16]
 8002792:	f898 3000 	ldrb.w	r3, [r8]
 8002796:	2b2e      	cmp	r3, #46	; 0x2e
 8002798:	d110      	bne.n	80027bc <_vfiprintf_r+0x154>
 800279a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800279e:	2b2a      	cmp	r3, #42	; 0x2a
 80027a0:	f108 0101 	add.w	r1, r8, #1
 80027a4:	d137      	bne.n	8002816 <_vfiprintf_r+0x1ae>
 80027a6:	9b03      	ldr	r3, [sp, #12]
 80027a8:	1d1a      	adds	r2, r3, #4
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	9203      	str	r2, [sp, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bfb8      	it	lt
 80027b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80027b6:	f108 0802 	add.w	r8, r8, #2
 80027ba:	9305      	str	r3, [sp, #20]
 80027bc:	4d31      	ldr	r5, [pc, #196]	; (8002884 <_vfiprintf_r+0x21c>)
 80027be:	f898 1000 	ldrb.w	r1, [r8]
 80027c2:	2203      	movs	r2, #3
 80027c4:	4628      	mov	r0, r5
 80027c6:	f7fd fd0b 	bl	80001e0 <memchr>
 80027ca:	b140      	cbz	r0, 80027de <_vfiprintf_r+0x176>
 80027cc:	2340      	movs	r3, #64	; 0x40
 80027ce:	1b40      	subs	r0, r0, r5
 80027d0:	fa03 f000 	lsl.w	r0, r3, r0
 80027d4:	9b04      	ldr	r3, [sp, #16]
 80027d6:	4303      	orrs	r3, r0
 80027d8:	9304      	str	r3, [sp, #16]
 80027da:	f108 0801 	add.w	r8, r8, #1
 80027de:	f898 1000 	ldrb.w	r1, [r8]
 80027e2:	4829      	ldr	r0, [pc, #164]	; (8002888 <_vfiprintf_r+0x220>)
 80027e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80027e8:	2206      	movs	r2, #6
 80027ea:	f108 0701 	add.w	r7, r8, #1
 80027ee:	f7fd fcf7 	bl	80001e0 <memchr>
 80027f2:	2800      	cmp	r0, #0
 80027f4:	d034      	beq.n	8002860 <_vfiprintf_r+0x1f8>
 80027f6:	4b25      	ldr	r3, [pc, #148]	; (800288c <_vfiprintf_r+0x224>)
 80027f8:	bb03      	cbnz	r3, 800283c <_vfiprintf_r+0x1d4>
 80027fa:	9b03      	ldr	r3, [sp, #12]
 80027fc:	3307      	adds	r3, #7
 80027fe:	f023 0307 	bic.w	r3, r3, #7
 8002802:	3308      	adds	r3, #8
 8002804:	9303      	str	r3, [sp, #12]
 8002806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002808:	444b      	add	r3, r9
 800280a:	9309      	str	r3, [sp, #36]	; 0x24
 800280c:	e74c      	b.n	80026a8 <_vfiprintf_r+0x40>
 800280e:	fb00 3202 	mla	r2, r0, r2, r3
 8002812:	2101      	movs	r1, #1
 8002814:	e786      	b.n	8002724 <_vfiprintf_r+0xbc>
 8002816:	2300      	movs	r3, #0
 8002818:	9305      	str	r3, [sp, #20]
 800281a:	4618      	mov	r0, r3
 800281c:	250a      	movs	r5, #10
 800281e:	4688      	mov	r8, r1
 8002820:	3101      	adds	r1, #1
 8002822:	f898 2000 	ldrb.w	r2, [r8]
 8002826:	3a30      	subs	r2, #48	; 0x30
 8002828:	2a09      	cmp	r2, #9
 800282a:	d903      	bls.n	8002834 <_vfiprintf_r+0x1cc>
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0c5      	beq.n	80027bc <_vfiprintf_r+0x154>
 8002830:	9005      	str	r0, [sp, #20]
 8002832:	e7c3      	b.n	80027bc <_vfiprintf_r+0x154>
 8002834:	fb05 2000 	mla	r0, r5, r0, r2
 8002838:	2301      	movs	r3, #1
 800283a:	e7f0      	b.n	800281e <_vfiprintf_r+0x1b6>
 800283c:	ab03      	add	r3, sp, #12
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	4622      	mov	r2, r4
 8002842:	4b13      	ldr	r3, [pc, #76]	; (8002890 <_vfiprintf_r+0x228>)
 8002844:	a904      	add	r1, sp, #16
 8002846:	4630      	mov	r0, r6
 8002848:	f3af 8000 	nop.w
 800284c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002850:	4681      	mov	r9, r0
 8002852:	d1d8      	bne.n	8002806 <_vfiprintf_r+0x19e>
 8002854:	89a3      	ldrh	r3, [r4, #12]
 8002856:	065b      	lsls	r3, r3, #25
 8002858:	f53f af7d 	bmi.w	8002756 <_vfiprintf_r+0xee>
 800285c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800285e:	e77c      	b.n	800275a <_vfiprintf_r+0xf2>
 8002860:	ab03      	add	r3, sp, #12
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	4622      	mov	r2, r4
 8002866:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <_vfiprintf_r+0x228>)
 8002868:	a904      	add	r1, sp, #16
 800286a:	4630      	mov	r0, r6
 800286c:	f000 f888 	bl	8002980 <_printf_i>
 8002870:	e7ec      	b.n	800284c <_vfiprintf_r+0x1e4>
 8002872:	bf00      	nop
 8002874:	08002e94 	.word	0x08002e94
 8002878:	08002ed8 	.word	0x08002ed8
 800287c:	08002eb4 	.word	0x08002eb4
 8002880:	08002e74 	.word	0x08002e74
 8002884:	08002ede 	.word	0x08002ede
 8002888:	08002ee2 	.word	0x08002ee2
 800288c:	00000000 	.word	0x00000000
 8002890:	08002645 	.word	0x08002645

08002894 <_printf_common>:
 8002894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002898:	4691      	mov	r9, r2
 800289a:	461f      	mov	r7, r3
 800289c:	688a      	ldr	r2, [r1, #8]
 800289e:	690b      	ldr	r3, [r1, #16]
 80028a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028a4:	4293      	cmp	r3, r2
 80028a6:	bfb8      	it	lt
 80028a8:	4613      	movlt	r3, r2
 80028aa:	f8c9 3000 	str.w	r3, [r9]
 80028ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80028b2:	4606      	mov	r6, r0
 80028b4:	460c      	mov	r4, r1
 80028b6:	b112      	cbz	r2, 80028be <_printf_common+0x2a>
 80028b8:	3301      	adds	r3, #1
 80028ba:	f8c9 3000 	str.w	r3, [r9]
 80028be:	6823      	ldr	r3, [r4, #0]
 80028c0:	0699      	lsls	r1, r3, #26
 80028c2:	bf42      	ittt	mi
 80028c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80028c8:	3302      	addmi	r3, #2
 80028ca:	f8c9 3000 	strmi.w	r3, [r9]
 80028ce:	6825      	ldr	r5, [r4, #0]
 80028d0:	f015 0506 	ands.w	r5, r5, #6
 80028d4:	d107      	bne.n	80028e6 <_printf_common+0x52>
 80028d6:	f104 0a19 	add.w	sl, r4, #25
 80028da:	68e3      	ldr	r3, [r4, #12]
 80028dc:	f8d9 2000 	ldr.w	r2, [r9]
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	429d      	cmp	r5, r3
 80028e4:	db29      	blt.n	800293a <_printf_common+0xa6>
 80028e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80028ea:	6822      	ldr	r2, [r4, #0]
 80028ec:	3300      	adds	r3, #0
 80028ee:	bf18      	it	ne
 80028f0:	2301      	movne	r3, #1
 80028f2:	0692      	lsls	r2, r2, #26
 80028f4:	d42e      	bmi.n	8002954 <_printf_common+0xc0>
 80028f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80028fa:	4639      	mov	r1, r7
 80028fc:	4630      	mov	r0, r6
 80028fe:	47c0      	blx	r8
 8002900:	3001      	adds	r0, #1
 8002902:	d021      	beq.n	8002948 <_printf_common+0xb4>
 8002904:	6823      	ldr	r3, [r4, #0]
 8002906:	68e5      	ldr	r5, [r4, #12]
 8002908:	f8d9 2000 	ldr.w	r2, [r9]
 800290c:	f003 0306 	and.w	r3, r3, #6
 8002910:	2b04      	cmp	r3, #4
 8002912:	bf08      	it	eq
 8002914:	1aad      	subeq	r5, r5, r2
 8002916:	68a3      	ldr	r3, [r4, #8]
 8002918:	6922      	ldr	r2, [r4, #16]
 800291a:	bf0c      	ite	eq
 800291c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002920:	2500      	movne	r5, #0
 8002922:	4293      	cmp	r3, r2
 8002924:	bfc4      	itt	gt
 8002926:	1a9b      	subgt	r3, r3, r2
 8002928:	18ed      	addgt	r5, r5, r3
 800292a:	f04f 0900 	mov.w	r9, #0
 800292e:	341a      	adds	r4, #26
 8002930:	454d      	cmp	r5, r9
 8002932:	d11b      	bne.n	800296c <_printf_common+0xd8>
 8002934:	2000      	movs	r0, #0
 8002936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800293a:	2301      	movs	r3, #1
 800293c:	4652      	mov	r2, sl
 800293e:	4639      	mov	r1, r7
 8002940:	4630      	mov	r0, r6
 8002942:	47c0      	blx	r8
 8002944:	3001      	adds	r0, #1
 8002946:	d103      	bne.n	8002950 <_printf_common+0xbc>
 8002948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800294c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002950:	3501      	adds	r5, #1
 8002952:	e7c2      	b.n	80028da <_printf_common+0x46>
 8002954:	18e1      	adds	r1, r4, r3
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	2030      	movs	r0, #48	; 0x30
 800295a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800295e:	4422      	add	r2, r4
 8002960:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002964:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002968:	3302      	adds	r3, #2
 800296a:	e7c4      	b.n	80028f6 <_printf_common+0x62>
 800296c:	2301      	movs	r3, #1
 800296e:	4622      	mov	r2, r4
 8002970:	4639      	mov	r1, r7
 8002972:	4630      	mov	r0, r6
 8002974:	47c0      	blx	r8
 8002976:	3001      	adds	r0, #1
 8002978:	d0e6      	beq.n	8002948 <_printf_common+0xb4>
 800297a:	f109 0901 	add.w	r9, r9, #1
 800297e:	e7d7      	b.n	8002930 <_printf_common+0x9c>

08002980 <_printf_i>:
 8002980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002984:	4617      	mov	r7, r2
 8002986:	7e0a      	ldrb	r2, [r1, #24]
 8002988:	b085      	sub	sp, #20
 800298a:	2a6e      	cmp	r2, #110	; 0x6e
 800298c:	4698      	mov	r8, r3
 800298e:	4606      	mov	r6, r0
 8002990:	460c      	mov	r4, r1
 8002992:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002994:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002998:	f000 80bc 	beq.w	8002b14 <_printf_i+0x194>
 800299c:	d81a      	bhi.n	80029d4 <_printf_i+0x54>
 800299e:	2a63      	cmp	r2, #99	; 0x63
 80029a0:	d02e      	beq.n	8002a00 <_printf_i+0x80>
 80029a2:	d80a      	bhi.n	80029ba <_printf_i+0x3a>
 80029a4:	2a00      	cmp	r2, #0
 80029a6:	f000 80c8 	beq.w	8002b3a <_printf_i+0x1ba>
 80029aa:	2a58      	cmp	r2, #88	; 0x58
 80029ac:	f000 808a 	beq.w	8002ac4 <_printf_i+0x144>
 80029b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029b4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80029b8:	e02a      	b.n	8002a10 <_printf_i+0x90>
 80029ba:	2a64      	cmp	r2, #100	; 0x64
 80029bc:	d001      	beq.n	80029c2 <_printf_i+0x42>
 80029be:	2a69      	cmp	r2, #105	; 0x69
 80029c0:	d1f6      	bne.n	80029b0 <_printf_i+0x30>
 80029c2:	6821      	ldr	r1, [r4, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80029ca:	d023      	beq.n	8002a14 <_printf_i+0x94>
 80029cc:	1d11      	adds	r1, r2, #4
 80029ce:	6019      	str	r1, [r3, #0]
 80029d0:	6813      	ldr	r3, [r2, #0]
 80029d2:	e027      	b.n	8002a24 <_printf_i+0xa4>
 80029d4:	2a73      	cmp	r2, #115	; 0x73
 80029d6:	f000 80b4 	beq.w	8002b42 <_printf_i+0x1c2>
 80029da:	d808      	bhi.n	80029ee <_printf_i+0x6e>
 80029dc:	2a6f      	cmp	r2, #111	; 0x6f
 80029de:	d02a      	beq.n	8002a36 <_printf_i+0xb6>
 80029e0:	2a70      	cmp	r2, #112	; 0x70
 80029e2:	d1e5      	bne.n	80029b0 <_printf_i+0x30>
 80029e4:	680a      	ldr	r2, [r1, #0]
 80029e6:	f042 0220 	orr.w	r2, r2, #32
 80029ea:	600a      	str	r2, [r1, #0]
 80029ec:	e003      	b.n	80029f6 <_printf_i+0x76>
 80029ee:	2a75      	cmp	r2, #117	; 0x75
 80029f0:	d021      	beq.n	8002a36 <_printf_i+0xb6>
 80029f2:	2a78      	cmp	r2, #120	; 0x78
 80029f4:	d1dc      	bne.n	80029b0 <_printf_i+0x30>
 80029f6:	2278      	movs	r2, #120	; 0x78
 80029f8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80029fc:	496e      	ldr	r1, [pc, #440]	; (8002bb8 <_printf_i+0x238>)
 80029fe:	e064      	b.n	8002aca <_printf_i+0x14a>
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002a06:	1d11      	adds	r1, r2, #4
 8002a08:	6019      	str	r1, [r3, #0]
 8002a0a:	6813      	ldr	r3, [r2, #0]
 8002a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a10:	2301      	movs	r3, #1
 8002a12:	e0a3      	b.n	8002b5c <_printf_i+0x1dc>
 8002a14:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002a18:	f102 0104 	add.w	r1, r2, #4
 8002a1c:	6019      	str	r1, [r3, #0]
 8002a1e:	d0d7      	beq.n	80029d0 <_printf_i+0x50>
 8002a20:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	da03      	bge.n	8002a30 <_printf_i+0xb0>
 8002a28:	222d      	movs	r2, #45	; 0x2d
 8002a2a:	425b      	negs	r3, r3
 8002a2c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002a30:	4962      	ldr	r1, [pc, #392]	; (8002bbc <_printf_i+0x23c>)
 8002a32:	220a      	movs	r2, #10
 8002a34:	e017      	b.n	8002a66 <_printf_i+0xe6>
 8002a36:	6820      	ldr	r0, [r4, #0]
 8002a38:	6819      	ldr	r1, [r3, #0]
 8002a3a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002a3e:	d003      	beq.n	8002a48 <_printf_i+0xc8>
 8002a40:	1d08      	adds	r0, r1, #4
 8002a42:	6018      	str	r0, [r3, #0]
 8002a44:	680b      	ldr	r3, [r1, #0]
 8002a46:	e006      	b.n	8002a56 <_printf_i+0xd6>
 8002a48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a4c:	f101 0004 	add.w	r0, r1, #4
 8002a50:	6018      	str	r0, [r3, #0]
 8002a52:	d0f7      	beq.n	8002a44 <_printf_i+0xc4>
 8002a54:	880b      	ldrh	r3, [r1, #0]
 8002a56:	4959      	ldr	r1, [pc, #356]	; (8002bbc <_printf_i+0x23c>)
 8002a58:	2a6f      	cmp	r2, #111	; 0x6f
 8002a5a:	bf14      	ite	ne
 8002a5c:	220a      	movne	r2, #10
 8002a5e:	2208      	moveq	r2, #8
 8002a60:	2000      	movs	r0, #0
 8002a62:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002a66:	6865      	ldr	r5, [r4, #4]
 8002a68:	60a5      	str	r5, [r4, #8]
 8002a6a:	2d00      	cmp	r5, #0
 8002a6c:	f2c0 809c 	blt.w	8002ba8 <_printf_i+0x228>
 8002a70:	6820      	ldr	r0, [r4, #0]
 8002a72:	f020 0004 	bic.w	r0, r0, #4
 8002a76:	6020      	str	r0, [r4, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d13f      	bne.n	8002afc <_printf_i+0x17c>
 8002a7c:	2d00      	cmp	r5, #0
 8002a7e:	f040 8095 	bne.w	8002bac <_printf_i+0x22c>
 8002a82:	4675      	mov	r5, lr
 8002a84:	2a08      	cmp	r2, #8
 8002a86:	d10b      	bne.n	8002aa0 <_printf_i+0x120>
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	07da      	lsls	r2, r3, #31
 8002a8c:	d508      	bpl.n	8002aa0 <_printf_i+0x120>
 8002a8e:	6923      	ldr	r3, [r4, #16]
 8002a90:	6862      	ldr	r2, [r4, #4]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	bfde      	ittt	le
 8002a96:	2330      	movle	r3, #48	; 0x30
 8002a98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a9c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002aa0:	ebae 0305 	sub.w	r3, lr, r5
 8002aa4:	6123      	str	r3, [r4, #16]
 8002aa6:	f8cd 8000 	str.w	r8, [sp]
 8002aaa:	463b      	mov	r3, r7
 8002aac:	aa03      	add	r2, sp, #12
 8002aae:	4621      	mov	r1, r4
 8002ab0:	4630      	mov	r0, r6
 8002ab2:	f7ff feef 	bl	8002894 <_printf_common>
 8002ab6:	3001      	adds	r0, #1
 8002ab8:	d155      	bne.n	8002b66 <_printf_i+0x1e6>
 8002aba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002abe:	b005      	add	sp, #20
 8002ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ac4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002ac8:	493c      	ldr	r1, [pc, #240]	; (8002bbc <_printf_i+0x23c>)
 8002aca:	6822      	ldr	r2, [r4, #0]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002ad2:	f100 0504 	add.w	r5, r0, #4
 8002ad6:	601d      	str	r5, [r3, #0]
 8002ad8:	d001      	beq.n	8002ade <_printf_i+0x15e>
 8002ada:	6803      	ldr	r3, [r0, #0]
 8002adc:	e002      	b.n	8002ae4 <_printf_i+0x164>
 8002ade:	0655      	lsls	r5, r2, #25
 8002ae0:	d5fb      	bpl.n	8002ada <_printf_i+0x15a>
 8002ae2:	8803      	ldrh	r3, [r0, #0]
 8002ae4:	07d0      	lsls	r0, r2, #31
 8002ae6:	bf44      	itt	mi
 8002ae8:	f042 0220 	orrmi.w	r2, r2, #32
 8002aec:	6022      	strmi	r2, [r4, #0]
 8002aee:	b91b      	cbnz	r3, 8002af8 <_printf_i+0x178>
 8002af0:	6822      	ldr	r2, [r4, #0]
 8002af2:	f022 0220 	bic.w	r2, r2, #32
 8002af6:	6022      	str	r2, [r4, #0]
 8002af8:	2210      	movs	r2, #16
 8002afa:	e7b1      	b.n	8002a60 <_printf_i+0xe0>
 8002afc:	4675      	mov	r5, lr
 8002afe:	fbb3 f0f2 	udiv	r0, r3, r2
 8002b02:	fb02 3310 	mls	r3, r2, r0, r3
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	d1f5      	bne.n	8002afe <_printf_i+0x17e>
 8002b12:	e7b7      	b.n	8002a84 <_printf_i+0x104>
 8002b14:	6808      	ldr	r0, [r1, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	6949      	ldr	r1, [r1, #20]
 8002b1a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002b1e:	d004      	beq.n	8002b2a <_printf_i+0x1aa>
 8002b20:	1d10      	adds	r0, r2, #4
 8002b22:	6018      	str	r0, [r3, #0]
 8002b24:	6813      	ldr	r3, [r2, #0]
 8002b26:	6019      	str	r1, [r3, #0]
 8002b28:	e007      	b.n	8002b3a <_printf_i+0x1ba>
 8002b2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b2e:	f102 0004 	add.w	r0, r2, #4
 8002b32:	6018      	str	r0, [r3, #0]
 8002b34:	6813      	ldr	r3, [r2, #0]
 8002b36:	d0f6      	beq.n	8002b26 <_printf_i+0x1a6>
 8002b38:	8019      	strh	r1, [r3, #0]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	6123      	str	r3, [r4, #16]
 8002b3e:	4675      	mov	r5, lr
 8002b40:	e7b1      	b.n	8002aa6 <_printf_i+0x126>
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	1d11      	adds	r1, r2, #4
 8002b46:	6019      	str	r1, [r3, #0]
 8002b48:	6815      	ldr	r5, [r2, #0]
 8002b4a:	6862      	ldr	r2, [r4, #4]
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4628      	mov	r0, r5
 8002b50:	f7fd fb46 	bl	80001e0 <memchr>
 8002b54:	b108      	cbz	r0, 8002b5a <_printf_i+0x1da>
 8002b56:	1b40      	subs	r0, r0, r5
 8002b58:	6060      	str	r0, [r4, #4]
 8002b5a:	6863      	ldr	r3, [r4, #4]
 8002b5c:	6123      	str	r3, [r4, #16]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b64:	e79f      	b.n	8002aa6 <_printf_i+0x126>
 8002b66:	6923      	ldr	r3, [r4, #16]
 8002b68:	462a      	mov	r2, r5
 8002b6a:	4639      	mov	r1, r7
 8002b6c:	4630      	mov	r0, r6
 8002b6e:	47c0      	blx	r8
 8002b70:	3001      	adds	r0, #1
 8002b72:	d0a2      	beq.n	8002aba <_printf_i+0x13a>
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	079b      	lsls	r3, r3, #30
 8002b78:	d507      	bpl.n	8002b8a <_printf_i+0x20a>
 8002b7a:	2500      	movs	r5, #0
 8002b7c:	f104 0919 	add.w	r9, r4, #25
 8002b80:	68e3      	ldr	r3, [r4, #12]
 8002b82:	9a03      	ldr	r2, [sp, #12]
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	429d      	cmp	r5, r3
 8002b88:	db05      	blt.n	8002b96 <_printf_i+0x216>
 8002b8a:	68e0      	ldr	r0, [r4, #12]
 8002b8c:	9b03      	ldr	r3, [sp, #12]
 8002b8e:	4298      	cmp	r0, r3
 8002b90:	bfb8      	it	lt
 8002b92:	4618      	movlt	r0, r3
 8002b94:	e793      	b.n	8002abe <_printf_i+0x13e>
 8002b96:	2301      	movs	r3, #1
 8002b98:	464a      	mov	r2, r9
 8002b9a:	4639      	mov	r1, r7
 8002b9c:	4630      	mov	r0, r6
 8002b9e:	47c0      	blx	r8
 8002ba0:	3001      	adds	r0, #1
 8002ba2:	d08a      	beq.n	8002aba <_printf_i+0x13a>
 8002ba4:	3501      	adds	r5, #1
 8002ba6:	e7eb      	b.n	8002b80 <_printf_i+0x200>
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1a7      	bne.n	8002afc <_printf_i+0x17c>
 8002bac:	780b      	ldrb	r3, [r1, #0]
 8002bae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bb6:	e765      	b.n	8002a84 <_printf_i+0x104>
 8002bb8:	08002efa 	.word	0x08002efa
 8002bbc:	08002ee9 	.word	0x08002ee9

08002bc0 <_sbrk_r>:
 8002bc0:	b538      	push	{r3, r4, r5, lr}
 8002bc2:	4c06      	ldr	r4, [pc, #24]	; (8002bdc <_sbrk_r+0x1c>)
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	4605      	mov	r5, r0
 8002bc8:	4608      	mov	r0, r1
 8002bca:	6023      	str	r3, [r4, #0]
 8002bcc:	f7ff f852 	bl	8001c74 <_sbrk>
 8002bd0:	1c43      	adds	r3, r0, #1
 8002bd2:	d102      	bne.n	8002bda <_sbrk_r+0x1a>
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	b103      	cbz	r3, 8002bda <_sbrk_r+0x1a>
 8002bd8:	602b      	str	r3, [r5, #0]
 8002bda:	bd38      	pop	{r3, r4, r5, pc}
 8002bdc:	20000090 	.word	0x20000090

08002be0 <__sread>:
 8002be0:	b510      	push	{r4, lr}
 8002be2:	460c      	mov	r4, r1
 8002be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002be8:	f000 f896 	bl	8002d18 <_read_r>
 8002bec:	2800      	cmp	r0, #0
 8002bee:	bfab      	itete	ge
 8002bf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002bf2:	89a3      	ldrhlt	r3, [r4, #12]
 8002bf4:	181b      	addge	r3, r3, r0
 8002bf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002bfa:	bfac      	ite	ge
 8002bfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8002bfe:	81a3      	strhlt	r3, [r4, #12]
 8002c00:	bd10      	pop	{r4, pc}

08002c02 <__swrite>:
 8002c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c06:	461f      	mov	r7, r3
 8002c08:	898b      	ldrh	r3, [r1, #12]
 8002c0a:	05db      	lsls	r3, r3, #23
 8002c0c:	4605      	mov	r5, r0
 8002c0e:	460c      	mov	r4, r1
 8002c10:	4616      	mov	r6, r2
 8002c12:	d505      	bpl.n	8002c20 <__swrite+0x1e>
 8002c14:	2302      	movs	r3, #2
 8002c16:	2200      	movs	r2, #0
 8002c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c1c:	f000 f868 	bl	8002cf0 <_lseek_r>
 8002c20:	89a3      	ldrh	r3, [r4, #12]
 8002c22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c2a:	81a3      	strh	r3, [r4, #12]
 8002c2c:	4632      	mov	r2, r6
 8002c2e:	463b      	mov	r3, r7
 8002c30:	4628      	mov	r0, r5
 8002c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c36:	f000 b817 	b.w	8002c68 <_write_r>

08002c3a <__sseek>:
 8002c3a:	b510      	push	{r4, lr}
 8002c3c:	460c      	mov	r4, r1
 8002c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c42:	f000 f855 	bl	8002cf0 <_lseek_r>
 8002c46:	1c43      	adds	r3, r0, #1
 8002c48:	89a3      	ldrh	r3, [r4, #12]
 8002c4a:	bf15      	itete	ne
 8002c4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c56:	81a3      	strheq	r3, [r4, #12]
 8002c58:	bf18      	it	ne
 8002c5a:	81a3      	strhne	r3, [r4, #12]
 8002c5c:	bd10      	pop	{r4, pc}

08002c5e <__sclose>:
 8002c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c62:	f000 b813 	b.w	8002c8c <_close_r>
	...

08002c68 <_write_r>:
 8002c68:	b538      	push	{r3, r4, r5, lr}
 8002c6a:	4c07      	ldr	r4, [pc, #28]	; (8002c88 <_write_r+0x20>)
 8002c6c:	4605      	mov	r5, r0
 8002c6e:	4608      	mov	r0, r1
 8002c70:	4611      	mov	r1, r2
 8002c72:	2200      	movs	r2, #0
 8002c74:	6022      	str	r2, [r4, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	f7fe ffdd 	bl	8001c36 <_write>
 8002c7c:	1c43      	adds	r3, r0, #1
 8002c7e:	d102      	bne.n	8002c86 <_write_r+0x1e>
 8002c80:	6823      	ldr	r3, [r4, #0]
 8002c82:	b103      	cbz	r3, 8002c86 <_write_r+0x1e>
 8002c84:	602b      	str	r3, [r5, #0]
 8002c86:	bd38      	pop	{r3, r4, r5, pc}
 8002c88:	20000090 	.word	0x20000090

08002c8c <_close_r>:
 8002c8c:	b538      	push	{r3, r4, r5, lr}
 8002c8e:	4c06      	ldr	r4, [pc, #24]	; (8002ca8 <_close_r+0x1c>)
 8002c90:	2300      	movs	r3, #0
 8002c92:	4605      	mov	r5, r0
 8002c94:	4608      	mov	r0, r1
 8002c96:	6023      	str	r3, [r4, #0]
 8002c98:	f7ff f80c 	bl	8001cb4 <_close>
 8002c9c:	1c43      	adds	r3, r0, #1
 8002c9e:	d102      	bne.n	8002ca6 <_close_r+0x1a>
 8002ca0:	6823      	ldr	r3, [r4, #0]
 8002ca2:	b103      	cbz	r3, 8002ca6 <_close_r+0x1a>
 8002ca4:	602b      	str	r3, [r5, #0]
 8002ca6:	bd38      	pop	{r3, r4, r5, pc}
 8002ca8:	20000090 	.word	0x20000090

08002cac <_fstat_r>:
 8002cac:	b538      	push	{r3, r4, r5, lr}
 8002cae:	4c07      	ldr	r4, [pc, #28]	; (8002ccc <_fstat_r+0x20>)
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	4605      	mov	r5, r0
 8002cb4:	4608      	mov	r0, r1
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	6023      	str	r3, [r4, #0]
 8002cba:	f7ff f80d 	bl	8001cd8 <_fstat>
 8002cbe:	1c43      	adds	r3, r0, #1
 8002cc0:	d102      	bne.n	8002cc8 <_fstat_r+0x1c>
 8002cc2:	6823      	ldr	r3, [r4, #0]
 8002cc4:	b103      	cbz	r3, 8002cc8 <_fstat_r+0x1c>
 8002cc6:	602b      	str	r3, [r5, #0]
 8002cc8:	bd38      	pop	{r3, r4, r5, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000090 	.word	0x20000090

08002cd0 <_isatty_r>:
 8002cd0:	b538      	push	{r3, r4, r5, lr}
 8002cd2:	4c06      	ldr	r4, [pc, #24]	; (8002cec <_isatty_r+0x1c>)
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	4605      	mov	r5, r0
 8002cd8:	4608      	mov	r0, r1
 8002cda:	6023      	str	r3, [r4, #0]
 8002cdc:	f7ff f80e 	bl	8001cfc <_isatty>
 8002ce0:	1c43      	adds	r3, r0, #1
 8002ce2:	d102      	bne.n	8002cea <_isatty_r+0x1a>
 8002ce4:	6823      	ldr	r3, [r4, #0]
 8002ce6:	b103      	cbz	r3, 8002cea <_isatty_r+0x1a>
 8002ce8:	602b      	str	r3, [r5, #0]
 8002cea:	bd38      	pop	{r3, r4, r5, pc}
 8002cec:	20000090 	.word	0x20000090

08002cf0 <_lseek_r>:
 8002cf0:	b538      	push	{r3, r4, r5, lr}
 8002cf2:	4c07      	ldr	r4, [pc, #28]	; (8002d10 <_lseek_r+0x20>)
 8002cf4:	4605      	mov	r5, r0
 8002cf6:	4608      	mov	r0, r1
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	6022      	str	r2, [r4, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f7ff f80c 	bl	8001d1c <_lseek>
 8002d04:	1c43      	adds	r3, r0, #1
 8002d06:	d102      	bne.n	8002d0e <_lseek_r+0x1e>
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	b103      	cbz	r3, 8002d0e <_lseek_r+0x1e>
 8002d0c:	602b      	str	r3, [r5, #0]
 8002d0e:	bd38      	pop	{r3, r4, r5, pc}
 8002d10:	20000090 	.word	0x20000090

08002d14 <__malloc_lock>:
 8002d14:	4770      	bx	lr

08002d16 <__malloc_unlock>:
 8002d16:	4770      	bx	lr

08002d18 <_read_r>:
 8002d18:	b538      	push	{r3, r4, r5, lr}
 8002d1a:	4c07      	ldr	r4, [pc, #28]	; (8002d38 <_read_r+0x20>)
 8002d1c:	4605      	mov	r5, r0
 8002d1e:	4608      	mov	r0, r1
 8002d20:	4611      	mov	r1, r2
 8002d22:	2200      	movs	r2, #0
 8002d24:	6022      	str	r2, [r4, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	f7ff f80c 	bl	8001d44 <_read>
 8002d2c:	1c43      	adds	r3, r0, #1
 8002d2e:	d102      	bne.n	8002d36 <_read_r+0x1e>
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	b103      	cbz	r3, 8002d36 <_read_r+0x1e>
 8002d34:	602b      	str	r3, [r5, #0]
 8002d36:	bd38      	pop	{r3, r4, r5, pc}
 8002d38:	20000090 	.word	0x20000090

08002d3c <_init>:
 8002d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3e:	bf00      	nop
 8002d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d42:	bc08      	pop	{r3}
 8002d44:	469e      	mov	lr, r3
 8002d46:	4770      	bx	lr

08002d48 <_fini>:
 8002d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4a:	bf00      	nop
 8002d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d4e:	bc08      	pop	{r3}
 8002d50:	469e      	mov	lr, r3
 8002d52:	4770      	bx	lr
